//@execute 0=true
//@heap-size=24000
def main(arg: int) -> bool {
	return permuteAndTest([1,2,3,4,5], 0, 3);
}
def permuteAndTest(v: Array<int>, s: int, med: int) -> bool {
	if (s == v.length) {
		// end of a permutation, run the test
		if (median(v[0], v[1], v[2], v[3], v[4]) == med) return true;
	}
	// create (n - s) new permutations by permuting (n - s) tail elements
	var n = Array<int>.new(v.length);
	var i = s;
	while (i < v.length) {
		var j = 0;
		while (j < v.length) {
			n[j] = v[j];
			j = j + 1;
		}
		n[s] = v[i];
		n[i] = v[s];
		if (!permuteAndTest(n, s + 1, med)) return false;
		i = i + 1;
	}
	return true;
}
def median(var a: int, var b: int, var c: int, var d: int, var e: int) -> int {
	var median: int, t1: int, t2: int;
	// sort a and b
	if (a > b) {
		t1 = a;
		a = b;
		b = t1;
	}
	// sort d and e
	if (d > e) {
		t1 = d;
		d = e;
		e = t1;
	}
	// swap the pairs (a, b) and (d, e) if necessary
	if (d < a) {
		t1 = d;
		t2 = e;
		d = a;
		e = b;
		a = t1;
		b = t2;
	}
	if (b < c) {
		if (b < d) {
			if (c < d) return c;
			else return d;
		} else {
			return b;
		}
	} else {
		if (c < d) {
			if (b < d) return b;
			else return d;
		} else {
			if (c < e) return c;
			else return e;
		}
	}
}

