//@execute = 10
//@heap-size=90000
type Holder<A, B, C> {
	case Some(a: A, b: B, c: C, va: u64 -> A, vb: u64 -> B, vc: u64 -> C);
}
def eq<A, B, C>(x: Holder<A, B, C>, y: Holder<u64, u64, u64>) {
	match (x) {
		Some(xa, xb, xc, xva, xvb, xvc) => match (y) {
			Some(ya, yb, yc, yva, yvb, yvc) => {
				if (xa != xva(ya) || xb != xvb(yb) || xc != xvc(yc)) return void(1 / 0);
			}
		}
	}
}
def check3<A, B, C>(va: u64 -> A, vb: u64 -> B, vc: u64 -> C, x: Holder<u64, u64, u64>) {
	match (x) {
		Some(a, b, c, xva, xvb, xvc) => eq(Holder.Some(va(a), vb(b), vc(c), va, vb, vc), x);
	}
}
def check2<A, B>(va: u64 -> A, vb: u64 -> B, x: Holder<u64, u64, u64>) {
	check3<A, B, u8>(va, vb, u8.view<u64>, x);
	check3<A, B, u16>(va, vb, u16.view<u64>, x);
	check3<A, B, u32>(va, vb, u32.view<u64>, x);
	check3<A, B, u64>(va, vb, u64.view<u64>, x);
}
def check1<A>(va: u64 -> A, x: Holder<u64, u64, u64>) {
	check2<A, u8>(va, u8.view<u64>, x);
	check2<A, u16>(va, u16.view<u64>, x);
	check2<A, u32>(va, u32.view<u64>, x);
	check2<A, u64>(va, u64.view<u64>, x);
}
def check0(x: Holder<u64, u64, u64>) {
	check1<u8>(u8.view<u64>, x);
	check1<u16>(u16.view<u64>, x);
	check1<u32>(u32.view<u64>, x);
	check1<u64>(u64.view<u64>, x);
}
def main() -> int {
	var id = u64.view<u64>;
	check0(Holder.Some(0x378D33477CB57BC2ul, 0x84DC66F468F6624Ful, 0xA206D0AEDEBCB02Aul, id, id, id));
	check0(Holder.Some(0x6E2FB4C81728D127ul, 0x034DF178A21DB812ul, 0x17219A4C6ED0087Ful, id, id, id));
	check0(Holder.Some(0xA1EB381707B03B7Aul, 0x6D6E88A135D1A057ul, 0xFE05BC6878BB6262ul, id, id, id));
	check0(Holder.Some(0xF22826DB4D1FB0AFul, 0x9F190FFF1BDDD4CAul, 0x59AF6FF9C310D187ul, id, id, id));
	check0(Holder.Some(0x73CC0FD45575BAB2ul, 0x2A946ECE56381ADFul, 0x2A0F07A45B88BC1Aul, id, id, id));
	check0(Holder.Some(0x2669357E80BD24B7ul, 0x0CE07675852C0102ul, 0x5A233D36A434070Ful, id, id, id));
	return 10;
}
