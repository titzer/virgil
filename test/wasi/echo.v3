def iovecs = Array<int>.new(4);
def sizebuf = Array<int>.new(1);
def sizes = Array<int>.new(2);

component RiRuntime {
	def init() -> Array<string> {
		wasi_snapshot_preview1.args_sizes_get(Pointer.atElement(sizes, 0), Pointer.atElement(sizes, 1));
		var argvptrs = Array<int>.new(sizes[0]);
		var argbuf = Array<byte>.new(sizes[1]);
		wasi_snapshot_preview1.args_get(Pointer.atContents(argvptrs), Pointer.atContents(argbuf));
		var args = Array<string>.new(sizes[0]);
		for (i < argvptrs.length) {
 			var p = Pointer.NULL + argvptrs[i];
			for (q = p; true; q++) {
				if (q.load<byte>() == 0) {
					var len = q - p;
					var str = args[i] = Array<byte>.new(len);
					for (j < str.length) str[j] = (p + j).load<byte>();
					break;
				}
			}
		}
		return args;
	}
}

def sp = " ", ln = "\n";
def main(args: Array<string>) -> int {
	for (i < args.length) {
		var a = args[i];
		iovecs[0] = Pointer.atContents(a) - Pointer.NULL;
		iovecs[1] = a.length;
		var after = if(i == (args.length - 1), ln, sp);
		iovecs[2] = Pointer.atContents(after) - Pointer.NULL;
		iovecs[3] = after.length;

		var ioptr = Pointer.atContents(iovecs);
		var sizeptr = Pointer.atContents(sizebuf);
		var r = wasi_snapshot_preview1.fd_write(1, ioptr, 2, sizeptr);
		if (r != 0) return -1 - sizebuf[0];
	}
	return 0;
}
