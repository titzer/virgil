def iovecs = Array<int>.new(2);
def sizebuf = Array<int>.new(1);
def buffer = Array<byte>.new(1024);

def main() -> int {
	var r: int;

	var ioptr = Pointer.atContents(iovecs);
	var sizeptr = Pointer.atContents(sizebuf);

	var path = "cat0.v3.input";
	put("##+open\n");
	var rights = wasi_rights.fd_read.tag;
	r = wasi_snapshot_preview1.path_open(3, 0, Pointer.atContents(path), path.length, 0, rights, rights, 0, Pointer.atContents(sizebuf));
	check_errno(r);
	var fd = sizebuf[0];

	iovecs[0] = Pointer.atContents(buffer) - Pointer.NULL;
	iovecs[1] = buffer.length;
	put("##+read\n");
	r = wasi_snapshot_preview1.fd_read(fd, ioptr, 1, sizeptr);
	check_errno(r);
		
	iovecs[0] = Pointer.atContents(buffer) - Pointer.NULL;
	iovecs[1] = sizebuf[0];
	put("##+write\n");
	r = wasi_snapshot_preview1.fd_write(1, ioptr, 1, sizeptr);
	check_errno(r);

	return 42;
}

def put_in = Array<int>.new(2);
def put_out = Array<int>.new(1);
def put<T>(a: Array<T>) {
	put_in[0] = Pointer.atElement(a, 0) - Pointer.NULL;
	var size = Pointer.atElement(a, 1) - Pointer.atElement(a, 0);
	put_in[1] = size * a.length;
	var r = wasi_snapshot_preview1.fd_write(1, Pointer.atContents(put_in), 1, Pointer.atContents(put_out));
//	if (r != 0) wasi_snapshot_preview1.proc_exit(r);
}

def check_errno(code: int) {
	if (code == 0) return put("##-ok\n");
	for (e in wasi_errno) {
		if (code == e.code) {
			put("##-fail: ");
			put(e.name);
			put(", ");
			put(e.msg);
			put(" \n");
			wasi_snapshot_preview1.proc_exit(code);
		}
	}
	put("##-fail: unknown errno\n");
	wasi_snapshot_preview1.proc_exit(code);
}