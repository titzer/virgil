// Copyright 2024 Virgil Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Unit tester for the Arm64 Assembler. You don't want to run this file alone,
// but execute it via test.bash.

// We test many permutations of arguments for each instruction by doing the following:
// 1. Emit assembly for the instructions we want to test, compile the assembly,
// and objdump it to view the opcodes.
// 2. Emit a corresponding virgil objdump file, which looks exactly the same,
// but with virgil opcodes our assembly produces
// 3. Diff the two objdump files

// File containing one assembly instruction per line.
var asmFd = 0;
// File containing corresponding opcodes we produce of assembly instructions
var opcodeFd = 0;

def data = DataWriter.new();
var asm = Arm64Assembler.new(data);
var buf = StringBuilder.new();
var lineNum = 0;
var args: Array<string>;

// Flush {buf} to both {opcodeFd} and {asmFd}.
def flush() {
	buf.send(System.write(opcodeFd, _));
	buf.send(System.write(asmFd, _));
	buf.reset();
}

def flushTo(fd: int) {
	buf.send(System.write(fd, _));
	buf.reset();
}

def main(a: Array<string>) -> int {
	if (a.length < 2) {
		System.error("TestGenError", "Temporary file path argument missing");
		return -1;
	}

	args = a;
	def asmPath = a[0];
	def opcodePath = a[1];
	def objectPath = a[2];
	asmFd = System.fileOpen(asmPath, false);
	opcodeFd = System.fileOpen(opcodePath, false);

	// Write object dump header
	buf.ln();
	buf.puts(Strings.builderOf(objectPath).puts(":\tfile format mach-o arm64\n\n").toString());
	buf.puts("Disassembly of section __TEXT,__text:\n\n");
	buf.puts("0000000000000000 <ltmp0>:\n");
	flushTo(opcodeFd);

	test_mov();
	test_add();
	test_and();
	test_orr();
	test_eor();
	test_sub();
	test_cmp();
	test_mul();
	test_div();
	test_ldr();
	test_str();
	test_b();
	test_cb();
	// TODO: test b, bl, tbz, tbnz

	buf.puts(";;passed");
	flushTo(asmFd);
	return 0;
}

// Returns true if we should skip testing this instruction
def skip(mnemonic: string) -> bool {
	if (args.length == 3) return false;
	for (i = 3; i < args.length; i++) {
		if (Strings.startsWith(mnemonic, args[i])) return false;
	}
	return true;
}

def reverse(s: string) -> string {
	def r = string.new(s.length);
	for (i < s.length) {
		r[i] = s[s.length - i - 1];
	}
	return r;
}

// Converts byte to lower case if it is a lower case char
def toLowerCase(b: byte) -> byte {
	if (65 <= b && b <= 90) return byte.view(b + 32);
	return b;
}

def toHexString(x: int) -> string {
	if (x == 0) return "0";
	def hex_digits = "0123456789abcdef";
	def result = StringBuilder.new();

	while (x > 0) {
		def remainder = x % 16;
		result.putc(hex_digits[remainder]);
		x /= 16;
	}
	return reverse(result.toString());
}

// Extracts opcode from dataWriter into buffer with new line and flushes it to opcode file
// Resets dataWriter and buffer
def writeOpcode() {
	def hexString = toHexString(lineNum * 4);
	lineNum++;
	def numSpaces = 8 - hexString.length;

	// Write line number
	for (i < numSpaces) buf.puts(" ");
	buf.puts(hexString).puts(":");

	for (i < data.pos) {
		buf.puts(" ");
		buf.putx_8(data.data[i]);
		buf.buf[buf.length - 1] = toLowerCase(buf.buf[buf.length - 1]);
		buf.buf[buf.length - 2] = toLowerCase(buf.buf[buf.length - 2]);
	}

	data.at(0);
	flushTo(opcodeFd);
}

// Permutation functions for combining arguments into tuples of arguments
def permuteTwo<A, B>(a: Array<A>, b: Array<B>) -> Array<(A, B)> {
	def res = Array<(A, B)>.new(a.length * b.length);
	var index = 0;
	for (i < a.length) {
		for (j < b.length) {
			res[index] = (a[i], b[j]);
			index++;
		}
	}
	return res;
}
def permuteThree<A, B, C>(a: Array<A>, b: Array<B>, c: Array<C>) -> Array<(A, B, C)> {
	def res = Array<(A, B, C)>.new(a.length * b.length * c.length);
	var index = 0;
	for (i < a.length) {
		for (j < b.length) {
			for (k < c.length) {
				res[index] = (a[i], b[j], c[k]);
				index++;
			}
		}
	}
	return res;	
}
def permuteFour<A, B, C, D>(a: Array<A>, b: Array<B>, c: Array<C>, d: Array<D>) -> Array<(A, B, C, D)> {
	def res = Array<(A, B, C, D)>.new(a.length * b.length * c.length * d.length);
	var index = 0;
	for (i < a.length) {
		for (j < b.length) {
			for (k < c.length) {
				for (l < d.length) {
					res[index] = (a[i], b[j], c[k], d[l]);
					index++;
				}
			}
		}
	}
	return res;	
}

// flatteners to allow testing functions to be parameterized with their last argument
// as a tuple of arguments.
// i.e. testThreeArgs<A, B, C> can have C be a tuple of 3 arguments. We then pass in a corresponding
// rendering function for those 3 arguments, and a assembler function with 5 arguments.
// flatten_3_4 means we flatten a 3 argument function to a 4 argument function
def flatten_3_4_helper2<A, B, C, D, E>(f: (A, B, C, D) -> E, x: A, y: B, z: (C, D)) -> E {
	def g = f(x, y, _, _);
	return g(z);
}
def flatten_3_4_helper1<A, B, C, D, E>(f: (string, (A, B, (C, D)) -> E) -> void, x: string, y: (A, B, C, D) -> E) -> void {
	def g = f(x, _);
	def h = flatten_3_4_helper2(y, _, _, _);
	return g(h);
}
def flatten_3_4<A, B, C, D, E>(f: (string, (A, B, (C, D)) -> E) -> void) -> (string, (A, B, C, D) -> E) -> void {
	return flatten_3_4_helper1(f, _, _);	
}

def flatten_2_3_helper2<A, B, C, D>(f: (A, B, C) -> D, x: A, y: (B, C)) -> D {
	def g = f(x, _, _);
	return g(y);
}
def flatten_2_3_helper1<A, B, C, D>(f: (string, (A, (B, C)) -> D) -> void, x: string, y: (A, B, C) -> D) -> void {
	def g = f(x, _);
	def h = flatten_2_3_helper2(y, _, _);
	return g(h);
}
def flatten_2_3<A, B, C, D>(f: (string, (A, (B, C)) -> D) -> void) -> (string, (A, B, C) -> D) -> void {
	return flatten_2_3_helper1(f, _, _);	
}

def flatten_3_5_helper2<A, B, C, D, E, F>(f: (A, B, C, D, E) -> F, x: A, y: B, z: (C, D, E)) -> F {
	def g = f(x, y, _, _, _);
	return g(z);
}
def flatten_3_5_helper1<A, B, C, D, E, F>(f: (string, (A, B, (C, D, E)) -> F) -> void, x: string, y: (A, B, C, D, E) -> F) -> void {
	def g = f(x, _);
	def h = flatten_3_5_helper2(y, _, _, _);
	return g(h);
}
def flatten_3_5<A, B, C, D, E, F>(f: (string, (A, B, (C, D, E)) -> F) -> void) -> (string, (A, B, C, D, E) -> F) -> void {
	return flatten_3_5_helper1(f, _, _);	
}

def flatten_2_5_helper2<A, B, C, D, E, F>(f: (A, B, C, D, E) -> F, x: A, y: (B, C, D, E)) -> F {
	def g = f(x, _, _, _, _);
	return g(y);
}
def flatten_2_5_helper1<A, B, C, D, E, F>(f: (string, (A, (B, C, D, E)) -> F) -> void, x: string, y: (A, B, C, D, E) -> F) -> void {
	def g = f(x, _);
	def h = flatten_2_5_helper2(y, _, _);
	return g(h);
}
def flatten_2_5<A, B, C, D, E, F>(f: (string, (A, (B, C, D, E)) -> F) -> void) -> (string, (A, B, C, D, E) -> F) -> void {
	return flatten_2_5_helper1(f, _, _);	
}


// Tests an instruction with no arguments
// mnemonic - instruction to test
// emitAsm - emit opcode to DataWriter of instruction to test
def testNoArgs(mnemonic: string, emitAsm: void -> Arm64Assembler) {
	emitAsm();
	writeOpcode();
	buf.sp().sp().tab().puts(mnemonic);
	flush();
}

// Tests an instruction with one argument
// mnemonic - instruction to test
// args - array of instruction args and function to print them to buf
// emitAsm - emit opcode to DataWriter of instruction to test
def testOneArg<A>(mnemonic: string,
	emitAsm: A -> Arm64Assembler,
	args: (Array<A>, A -> void)) {
	if (skip(mnemonic)) return;
	for (a in args.0) {
		emitAsm(a);
		writeOpcode();
		buf.sp().sp().tab().puts(mnemonic).tab();
		args.1(a);
		flush();
	}
}

// Tests an instruction with two arguments, comma separated. Second argument
// can be a tuple of arguments, so that this function extends to testing some
// instructions with > 2 arguments.
// mnemonic - instruction to test
// args - array of instruction args and function to print them to buf
// emitAsm - emit opcode to DataWriter of instruction to test
def testTwoArgs<A, B>(mnemonic: string,
	emitAsm: (A, B) -> Arm64Assembler,
	args1: (Array<A>, A -> void),
	args2: (Array<B>, B -> void)) {
	if (skip(mnemonic)) return;
	for (a in args1.0) {
		def emit = emitAsm(a, _);
		for (b in args2.0) {
			emit(b);
			writeOpcode();
			buf.sp().sp().tab().puts(mnemonic).tab();
			args1.1(a);
			buf.csp();
			args2.1(b);
			buf.ln();
			flush();
		}
	}
}

// Tests an instruction with three arguments, comma separated. Third argument
// can be a tuple of arguments, so that this function extends to testing some
// instructions with > 3 arguments.
// mnemonic - instruction to test
// args - array of instruction args and function to print them to buf
// emitAsm - emit opcode to DataWriter of instruction to test
def testThreeArgs<A, B, C>(mnemonic: string,
	emitAsm: (A, B, C) -> Arm64Assembler,
	args1: (Array<A>, A -> void),
	args2: (Array<B>, B -> void),
	args3: (Array<C>, C -> void)) {
	if (skip(mnemonic)) return;
	for (a in args1.0) {
		for (b in args2.0) {
			def emit = emitAsm(a, b, _);
			for (c in args3.0) {
				emit(c);
				writeOpcode();
				buf.sp().sp().tab().puts(mnemonic).tab();
				args1.1(a);
				buf.csp();
				args2.1(b);
				buf.csp();
				args3.1(c);
				buf.ln();
				flush();
			}
		}
	}
}

// Many rendering functions so that we can match instructions we assemble
// to mnemonics that `as` uses
def render_s(r: Arm64Sfr) { buf.puts(r.name); }
def render_r64(r: Arm64Gpr) { buf.puts(r.name64); }
def render_r32(r: Arm64Gpr) { buf.puts(r.name32); }
def render_i16(i: i16) { buf.puts("#").putd(i); }
def render_u16(i: u16) { buf.puts("#").putd(i); }
def render_i9(i: i9) { buf.puts("#").putd(int.view(i)); }
def render_r_ex_u3(r: Arm64Gpr, ex: DataRegExtend, i: u3) {
	match (ex) {
		UXTX, SXTX => buf.puts(r.name64);
		_ => buf.puts(r.name32);
	}
	buf.csp().puts(ex.name);
	if (i != 0) buf.sp().puts("#").putd(u32.view(i));
}
def render_r32_sh_u5(r: Arm64Gpr, sh: RegShift, i: u5) {
	buf.puts(r.name32).csp().puts(sh.name).sp().puts("#").putd(u32.view(i));
}
def render_r64_sh_u6(r: Arm64Gpr, sh: RegShift, i: u6) {
	buf.puts(r.name64).csp().puts(sh.name).sp().puts("#").putd(u32.view(i));
}
def render_sh_u5(sh: RegShift, i: u5) { buf.puts(sh.name).sp().puts("#").putd(u32.view(i)); }
def render_sh_u6(sh: RegShift, i: u6) { buf.puts(sh.name).sp().puts("#").putd(u32.view(i)); }
def render_u12_u1(i: u12, u: u1) {
	buf.puts("#").putd(i);
	if (u == 1) buf.csp().puts("lsl #12").tab().puts("; =").putd(u32.view(i) << 12);
}
def render_u12(i: u12) {
	buf.puts("#").putd(u32.view(i));
}
def render_postmem_r(r: Arm64Gpr) {
	buf.puts("[").puts(r.name64).puts("]");
}
def render_premem_r_i9(r: Arm64Gpr, i: i9) {
	buf.puts("[").puts(r.name64).csp().puts("#").putd(int.view(i)).puts("]!");
}
def render_mem_r_i9(r: Arm64Gpr, i: i9) {
	buf.puts("[").puts(r.name64).csp().puts("#").putd(int.view(i)).puts("]");
}
def render_mem_r_u12(r: Arm64Gpr, u: u12) {
	buf.puts("[").puts(r.name64).csp().puts("#").putd(u32.view(u)).puts("]");
}
def render_mem32_r_r_ex_u1(rn: Arm64Gpr, rm: Arm64Gpr, ex: MemRegExtend, u: u1) {
	buf.puts("[").puts(rn.name64).csp();
	match (ex) {
		LSL, SXTX => buf.puts(rm.name64);
		_ => buf.puts(rm.name32);
	}
	if (ex == MemRegExtend.LSL && u == 0) {
		buf.puts("]");
	} else {
		buf.csp().puts(ex.name);
		if (u == 1) buf.sp().puts("#2]");
		else buf.puts("]");
	}
}
def render_mem64_r_r_ex_u1(rn: Arm64Gpr, rm: Arm64Gpr, ex: MemRegExtend, u: u1) {
	buf.puts("[").puts(rn.name64).csp();
	match (ex) {
		LSL, SXTX => buf.puts(rm.name64);
		_ => buf.puts(rm.name32);
	}
	if (ex == MemRegExtend.LSL && u == 0) {
		buf.puts("]");
	} else {
		buf.csp().puts(ex.name);
		if (u == 1) buf.sp().puts("#3]");
		else buf.puts("]");
	}
}
def render_cond(c: Arm64Cond) { buf.puts(c.name); }
def render_rn(r: Arm64Gpr) { buf.puts(r.name64); }
def render_rn32(r: Arm64Gpr) { buf.puts(r.name32); }
def render_bit_u6(u: u6) { buf.puts("#").putd(u32.view(u)); }

// Many of operation arguments
def i19s: Array<i19> = [0, 4, 8, -4, -8, -128, 96, 1024, -1000, 32768, -32768, 131072, i19.min];
def i16s: Array<i16> = [0, 1, 2, -1, -2, -128, 96, 127, 128, 1023, -999, 32767, -32768];
def u16s: Array<u16> = [0x0000,	0x0001,	0x0002,	0xFFFF,	0xFFFE,	0xFF80,	0x0060,	0x007F,	0x0080,	0x03FF,	0xFC19,	0x7FFF,	0x8000];
def i12s: Array<i12> = [0x800, 0x810, 0x820, 0x830];
def u12s: Array<u12> = [0x800, 0x810, 0x820, 0x830];
def i9s: Array<i9> = [-3, 0xb6, 0x3f, -35];
def u6s: Array<u6> = [0x0A, 0x1E, 0x2C, 0x1B, 0x3A];
def u5s: Array<u5> = [0x0A, 0x1E, 0x0B, 0x17, 0x0F];
def u3s: Array<u3> = [0, 1, 2, 3, 4]; // extend ops only take 0 - 4, not all u3s.
def u1s: Array<u1> = [0, 1];
def conds: Array<Arm64Cond> = [Arm64Conds.EQ, Arm64Conds.NE, Arm64Conds.GE, Arm64Conds.LT];
def bits: Array<u6> = [0, 1, 31, 32, 63];

def shifts = [RegShift.LSL, RegShift.LSR, RegShift.ASR];
def dataRegExtends = [DataRegExtend.SXTB, DataRegExtend.SXTH, DataRegExtend.SXTW,
	DataRegExtend.UXTB, DataRegExtend.UXTH, DataRegExtend.UXTW];
def memRegExtends = [MemRegExtend.UXTW, MemRegExtend.LSL, MemRegExtend.SXTW, MemRegExtend.SXTX];
def randRegs: Array<Arm64Gpr> = [Arm64Regs.R0, Arm64Regs.R11, Arm64Regs.R21, Arm64Regs.R30];
def oneReg: Array<Arm64Gpr> = [Arm64Regs.R22];


// Arguments to assembly instructions paired with a function to print them to buf
def arg_r32 = (randRegs, render_r32);
def arg_r64 = (randRegs, render_r64);
def arg_i16 = (i16s, render_i16);
def arg_u16 = (u16s, render_u16);
def arg_u12 = (u12s, render_u12);
def arg_r_ex_u3 = (permuteThree(randRegs, dataRegExtends, u3s), render_r_ex_u3);
def arg_r32_sh_u5 = (permuteThree(randRegs, shifts, u5s), render_r32_sh_u5);
def arg_r64_sh_u6 = (permuteThree(randRegs, shifts, u6s), render_r64_sh_u6);
def arg_sh_u5 = (permuteTwo(shifts, u5s), render_sh_u5);
def arg_sh_u6 = (permuteTwo(shifts, u6s), render_sh_u6);
def arg_u12_u1 = (permuteTwo(u12s, u1s), render_u12_u1);
def arg_cond = (conds, render_cond);
def arg_bits = (bits, render_bit_u6);

def arg_mem_r_i9 = (permuteTwo(oneReg, i9s), render_mem_r_i9);
def arg_mem_r_u12 = (permuteTwo(oneReg, u12s), render_mem_r_u12);
def arg_postmem_r = (oneReg, render_postmem_r);
def arg_premem_r_i9 = (permuteTwo(oneReg, i9s), render_premem_r_i9);
def arg_i9 = (i9s, render_i9);
def arg_mem32_r_r_ex_u1 = (permuteFour(randRegs, randRegs, memRegExtends, u1s), render_mem32_r_r_ex_u1);
def arg_mem64_r_r_ex_u1 = (permuteFour(randRegs, randRegs, memRegExtends, u1s), render_mem64_r_r_ex_u1);

// Testing functions that take in a mnemonic and a corresponding assembler function
def testd_r_u16 = testTwoArgs(_, _, arg_r32, arg_u16);
def testq_r_u16 = testTwoArgs(_, _, arg_r64, arg_u16);
def testd_r_r = testTwoArgs(_, _, arg_r32, arg_r32);
def testq_r_r = testTwoArgs(_, _, arg_r64, arg_r64);
def testd_r_u12_u1 = flatten_2_3(testTwoArgs(_, _, arg_r32, arg_u12_u1));
def testq_r_u12_u1 = flatten_2_3(testTwoArgs(_, _, arg_r64, arg_u12_u1));
def testd_r_r_r = testThreeArgs(_, _, arg_r32, arg_r32, arg_r32);
def testd_r_r_i = testThreeArgs(_, _, arg_r32, arg_r32, arg_u12);
def testq_r_r_r = testThreeArgs(_, _, arg_r64, arg_r64, arg_r64);
def testq_r_r_i = testThreeArgs(_, _, arg_r64, arg_r64, arg_u12);
def testd_r_r_u12_u1 = flatten_3_4(testThreeArgs(_, _, arg_r32, arg_r32, arg_u12_u1));
def testq_r_r_u12_u1 = flatten_3_4(testThreeArgs(_, _, arg_r64, arg_r64, arg_u12_u1));
def testd_r_r_sh_i = flatten_3_4(testThreeArgs(_, _, arg_r32, arg_r32, arg_sh_u5));
def testq_r_r_sh_i = flatten_3_4(testThreeArgs(_, _, arg_r64, arg_r64, arg_sh_u6));
def testd_r_r_r_sh_i = flatten_3_5(testThreeArgs(_, _, arg_r32, arg_r32, arg_r32_sh_u5));
def testq_r_r_r_sh_i = flatten_3_5(testThreeArgs(_, _, arg_r64, arg_r64, arg_r64_sh_u6));
def testd_r_r_r_ex_i = flatten_3_5(testThreeArgs(_, _, arg_r32, arg_r32, arg_r_ex_u3));
def testq_r_r_r_ex_i = flatten_3_5(testThreeArgs(_, _, arg_r64, arg_r64, arg_r_ex_u3));

def testd_mem_r_r_i9 = flatten_2_3(testTwoArgs(_, _, arg_r32, arg_mem_r_i9));
def testq_mem_r_r_i9 = flatten_2_3(testTwoArgs(_, _, arg_r64, arg_mem_r_i9));
def testd_postmem_r_r_i9 = testThreeArgs(_, _, arg_r32, arg_postmem_r, arg_i9);
def testq_postmem_r_r_i9 = testThreeArgs(_, _, arg_r64, arg_postmem_r, arg_i9);
def testd_premem_r_r_i9 = flatten_2_3(testTwoArgs(_, _, arg_r32, arg_premem_r_i9));
def testq_premem_r_r_i9 = flatten_2_3(testTwoArgs(_, _, arg_r64, arg_premem_r_i9));
def testd_mem_r_r_u12 = flatten_2_3(testTwoArgs(_, _, arg_r32, arg_mem_r_u12));
def testq_mem_r_r_u12 = flatten_2_3(testTwoArgs(_, _, arg_r64, arg_mem_r_u12));
def testd_mem_r_r_r_ex_u1 = flatten_2_5(testTwoArgs(_, _, arg_r32, arg_mem32_r_r_ex_u1));
def testq_mem_r_r_r_ex_u1 = flatten_2_5(testTwoArgs(_, _, arg_r64, arg_mem64_r_r_ex_u1));

// Testing functions for specific assembly instructions
def test_mov() {
	testd_r_u16("mov", asm.movd_r_u16);
	testq_r_u16("mov", asm.movq_r_u16);
	testd_r_r("mov", asm.movd_r_r);
	testq_r_r("mov", asm.movq_r_r);
}

def test_add() {
	testd_r_r_u12_u1("add", asm.addd_r_r_u12_u1);
	testq_r_r_u12_u1("add", asm.addq_r_r_u12_u1);
	testd_r_r_r_sh_i("add", asm.addd_r_r_r_sh_u5);
	testq_r_r_r_sh_i("add", asm.addq_r_r_r_sh_u6);
	testd_r_r_r_ex_i("add", asm.addd_r_r_r_ex_u3);
	testq_r_r_r_ex_i("add", asm.addq_r_r_r_ex_u3);
}

def test_and() {
	testd_r_r_r_sh_i("and", asm.andd_r_r_r_sh_u5);
	testq_r_r_r_sh_i("and", asm.andq_r_r_r_sh_u6);
}

def test_orr() {
	testd_r_r_r_sh_i("orr", asm.orrd_r_r_r_sh_u5);
	testq_r_r_r_sh_i("orr", asm.orrq_r_r_r_sh_u6);
}

def test_eor() {
	testd_r_r_r_sh_i("eor", asm.eord_r_r_r_sh_u5);
	testq_r_r_r_sh_i("eor", asm.eorq_r_r_r_sh_u6);
}

def test_sub() {
	testd_r_r_u12_u1("sub", asm.subd_r_r_u12_u1);
	testq_r_r_u12_u1("sub", asm.subq_r_r_u12_u1);
	testd_r_r_r_sh_i("sub", asm.subd_r_r_r_sh_u5);
	testq_r_r_r_sh_i("sub", asm.subq_r_r_r_sh_u6);
	testd_r_r_r_ex_i("sub", asm.subd_r_r_r_ex_u3);
	testq_r_r_r_ex_i("sub", asm.subq_r_r_r_ex_u3);
}

def test_cmp() {
	testd_r_r_sh_i("cmp", asm.cmpd_r_r_sh_u5);
	testq_r_r_sh_i("cmp", asm.cmpq_r_r_sh_u6);
	testd_r_u12_u1("cmp", asm.cmpd_r_u12_u1);
	testq_r_u12_u1("cmp", asm.cmpq_r_u12_u1);
}

def test_mul() {
	testd_r_r_r("mul", asm.muld_r_r_r);
	testq_r_r_r("mul", asm.mulq_r_r_r);
}

def test_div() {
	testd_r_r_r("sdiv", asm.sdivd_r_r_r);
	testq_r_r_r("sdiv", asm.sdivq_r_r_r);
	testd_r_r_r("udiv", asm.udivd_r_r_r);
	testq_r_r_r("udiv", asm.udivq_r_r_r);
}

def test_ldr() {
	testd_mem_r_r_i9("ldur", asm.ldrd_r_r_i9);
	testq_mem_r_r_i9("ldur", asm.ldrq_r_r_i9);
	testd_postmem_r_r_i9("ldr", asm.ldrpostd_r_r_i9);
	testq_postmem_r_r_i9("ldr", asm.ldrpostq_r_r_i9);
	testd_premem_r_r_i9("ldr", asm.ldrpred_r_r_i9);
	testq_premem_r_r_i9("ldr", asm.ldrpreq_r_r_i9);
	testd_mem_r_r_u12("ldr", asm.ldrunsignedd_r_r_u12);
	testq_mem_r_r_u12("ldr", asm.ldrunsignedq_r_r_u12);
	testd_mem_r_r_r_ex_u1("ldr", asm.ldrd_r_r_r_ex_u1);
	testq_mem_r_r_r_ex_u1("ldr", asm.ldrq_r_r_r_ex_u1);
}

def test_str() {
	testd_mem_r_r_i9("stur", asm.strd_r_r_i9);
	testq_mem_r_r_i9("stur", asm.strq_r_r_i9);
	testd_postmem_r_r_i9("str", asm.strpostd_r_r_i9);
	testq_postmem_r_r_i9("str", asm.strpostq_r_r_i9);
	testd_premem_r_r_i9("str", asm.strpred_r_r_i9);
	testq_premem_r_r_i9("str", asm.strpreq_r_r_i9);
	testd_mem_r_r_u12("str", asm.strunsignedd_r_r_u12);
	testq_mem_r_r_u12("str", asm.strunsignedq_r_r_u12);
	testd_mem_r_r_r_ex_u1("str", asm.strd_r_r_r_ex_u1);
	testq_mem_r_r_r_ex_u1("str", asm.strq_r_r_r_ex_u1);
}

def test_b() {
	if (skip("b.")) return;
	var labelPos = lineNum;
	var labelName = Strings.format1("label_%d", labelPos);
	buf.puts(labelName).puts(":").ln();
	flushTo(asmFd);
	buf.putx_64(u64.!(labelPos * 4)).sp();
	buf.put1("<%s>:", labelName).ln();
	flushTo(opcodeFd);

	for (cond in conds) {
		// Emit the instruction via assembler
		var offset = i19.!(labelPos - lineNum);
		asm.b_cond_i19(cond, offset);
		writeOpcode();

		// Emit the assembly text
		buf.sp().sp().tab();
		buf.puts("b.").puts(cond.name).tab();
		// Render as "label_N-<abs>" to force the assembler to encode displacement
		def hexString = toHexString(labelPos * 4);
		buf.sp().puts(labelName);
		buf.ln();
		flushTo(asmFd);

		buf.sp().sp().tab();
		buf.puts("b.").puts(cond.name).tab();
		buf.put1("0x%s", hexString);
		buf.sp().put1("<%s>", labelName);
		buf.ln();
		flushTo(opcodeFd);
	}
}

def test_cb() {
	if (skip("cb")) return;

	var labelPos = lineNum;
	var labelName = Strings.format1("label_%d", labelPos);

	// Emit a label for the target
	buf.puts(labelName).puts(":").ln();
	flushTo(asmFd);
	buf.putx_64(u64.!(labelPos * 4)).sp();
	buf.put1("<%s>:", labelName).ln();
	flushTo(opcodeFd);

	// Define the 4 instruction variants
	def instrs = [
		("cbz",  asm.cbz_r_i19(_, _, DataWidth.W32), true),
		("cbnz", asm.cbnz_r_i19(_, _, DataWidth.W32), true),
		("cbz",  asm.cbz_r_i19(_, _, DataWidth.W64), false),
		("cbnz", asm.cbnz_r_i19(_, _, DataWidth.W64), false)
	];

	for (r in randRegs) {
		for (imm in i19s) {
			if (imm == 0) continue; // avoid branch-to-self diffs

			for (instr in instrs) {
				var name = instr.0;
				var emit = instr.1;
				var is32 = instr.2;

				var offset = i19.!(labelPos - lineNum);

				// Emit opcode
				emit(r, offset);
				writeOpcode();

				// Assembly file text
				buf.sp().sp().tab().puts(name).tab();
				if (is32) buf.puts(r.name32); else buf.puts(r.name64);
				buf.puts(", ").puts(labelName).ln();
				flushTo(asmFd);

				// Opcode file text
				buf.sp().sp().tab().puts(name).tab();
				if (is32) buf.puts(r.name32); else buf.puts(r.name64);
				buf.puts(", ");
				buf.put1("0x%s", toHexString(labelPos * 4));
				buf.sp().put1("<%s>", labelName).ln();
				flushTo(opcodeFd);
			}
		}
	}
}
