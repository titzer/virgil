//@execute 0=937169022; 11=1455356960; -9283487=-457779131
def main(a: int) -> int {
	var data = Array<byte>.new(4);
	data[0] = byte.view(a);
	data[1] = byte.view(a >> 8);
	data[2] = byte.view(a >> 16);
	data[3] = byte.view(a >> 24);
	return hashData(data).toInt();
}
def hashData(data: range<byte>) -> Md5hash {
	var hash = Md5hash.new();
	var i = 0, len = data.length;
	var max = (data.length >> 6) << 6;
	while (i < max) {
		// hash all complete chunks of data first
		hashChunk(hash, data, i);
		i = i + 64;
	}
	var left = data.length % 64;
	var chunk = copyAndPadLastChunk(data, i, left);
	if (left >= (64 - 9)) {
		// size will have to go in next chunk
		hashChunk(hash, chunk, 0);
		chunk = Array<byte>.new(64);
	}
	encodeLen(chunk, len);
	hashChunk(hash, chunk, 0);
	return hash;
}
def hashChunk(hash: Md5hash, data: range<byte>, i: int) {
	var a = hash.h0;
	var b = hash.h1;
	var c = hash.h2;
	var d = hash.h3;
	var x = decodeInts(data, i);
	// Round 1
	a = a + ((b & c) | ((-1 ^ b) & d)) + x[ 0] + 0xd76aa478; // 1
	a = ((a << 7) | (a >>> 25)) + b;
	d = d + ((a & b) | ((-1 ^ a) & c)) + x[ 1] + 0xe8c7b756; // 2
	d = ((d << 12) | (d >>> 20)) + a;
	c = c + ((d & a) | ((-1 ^ d) & b)) + x[ 2] + 0x242070db; // 3
	c = ((c << 17) | (c >>> 15)) + d;
	b = b + ((c & d) | ((-1 ^ c) & a)) + x[ 3] + 0xc1bdceee; // 4
	b = ((b << 22) | (b >>> 10)) + c;
	
	a = a + ((b & c) | ((-1 ^ b) & d)) + x[ 4] + 0xf57c0faf; // 5
	a = ((a << 7) | (a >>> 25)) + b;
	d = d + ((a & b) | ((-1 ^ a) & c)) + x[ 5] + 0x4787c62a; // 6
	d = ((d << 12) | (d >>> 20)) + a;
	c = c + ((d & a) | ((-1 ^ d) & b)) + x[ 6] + 0xa8304613; // 7
	c = ((c << 17) | (c >>> 15)) + d;
	b = b + ((c & d) | ((-1 ^ c) & a)) + x[ 7] + 0xfd469501; // 8
	b = ((b << 22) | (b >>> 10)) + c;
	
	a = a + ((b & c) | ((-1 ^ b) & d)) + x[ 8] + 0x698098d8; // 9
	a = ((a << 7) | (a >>> 25)) + b;
	d = d + ((a & b) | ((-1 ^ a) & c)) + x[ 9] + 0x8b44f7af; // 10
	d = ((d << 12) | (d >>> 20)) + a;
	c = c + ((d & a) | ((-1 ^ d) & b)) + x[10] + 0xffff5bb1; // 11
	c = ((c << 17) | (c >>> 15)) + d;
	b = b + ((c & d) | ((-1 ^ c) & a)) + x[11] + 0x895cd7be; // 12
	b = ((b << 22) | (b >>> 10)) + c;
	
	a = a + ((b & c) | ((-1 ^ b) & d)) + x[12] + 0x6b901122; // 13
	a = ((a << 7) | (a >>> 25)) + b;
	d = d + ((a & b) | ((-1 ^ a) & c)) + x[13] + 0xfd987193; // 14
	d = ((d << 12) | (d >>> 20)) + a;
	c = c + ((d & a) | ((-1 ^ d) & b)) + x[14] + 0xa679438e; // 15
	c = ((c << 17) | (c >>> 15)) + d;
	b = b + ((c & d) | ((-1 ^ c) & a)) + x[15] + 0x49b40821; // 16
	b = ((b << 22) | (b >>> 10)) + c;

	// Round 2
	a = a + ((b & d) | (c & (-1 ^ d))) + x[ 1] + 0xf61e2562; // 17
	a = ((a << 5) | (a >>> 27)) + b;
	d = d + ((a & c) | (b & (-1 ^ c))) + x[ 6] + 0xc040b340; // 18
	d = ((d << 9) | (d >>> 23)) + a;
	c = c + ((d & b) | (a & (-1 ^ b))) + x[11] + 0x265e5a51; // 19
	c = ((c << 14) | (c >>> 18)) + d;
	b = b + ((c & a) | (d & (-1 ^ a))) + x[ 0] + 0xe9b6c7aa; // 20
	b = ((b << 20) | (b >>> 12)) + c;
	
	a = a + ((b & d) | (c & (-1 ^ d))) + x[ 5] + 0xd62f105d; // 21
	a = ((a << 5) | (a >>> 27)) + b;
	d = d + ((a & c) | (b & (-1 ^ c))) + x[10] + 0x02441453; // 22
	d = ((d << 9) | (d >>> 23)) + a;
	c = c + ((d & b) | (a & (-1 ^ b))) + x[15] + 0xd8a1e681; // 23
	c = ((c << 14) | (c >>> 18)) + d;
	b = b + ((c & a) | (d & (-1 ^ a))) + x[ 4] + 0xe7d3fbc8; // 24
	b = ((b << 20) | (b >>> 12)) + c;
	
	a = a + ((b & d) | (c & (-1 ^ d))) + x[ 9] + 0x21e1cde6; // 25
	a = ((a << 5) | (a >>> 27)) + b;
	d = d + ((a & c) | (b & (-1 ^ c))) + x[14] + 0xc33707d6; // 26
	d = ((d << 9) | (d >>> 23)) + a;
	c = c + ((d & b) | (a & (-1 ^ b))) + x[ 3] + 0xf4d50d87; // 27
	c = ((c << 14) | (c >>> 18)) + d;
	b = b + ((c & a) | (d & (-1 ^ a))) + x[ 8] + 0x455a14ed; // 28
	b = ((b << 20) | (b >>> 12)) + c;
	
	a = a + ((b & d) | (c & (-1 ^ d))) + x[13] + 0xa9e3e905; // 29
	a = ((a << 5) | (a >>> 27)) + b;
	d = d + ((a & c) | (b & (-1 ^ c))) + x[ 2] + 0xfcefa3f8; // 30
	d = ((d << 9) | (d >>> 23)) + a;
	c = c + ((d & b) | (a & (-1 ^ b))) + x[ 7] + 0x676f02d9; // 31
	c = ((c << 14) | (c >>> 18)) + d;
	b = b + ((c & a) | (d & (-1 ^ a))) + x[12] + 0x8d2a4c8a; // 32
	b = ((b << 20) | (b >>> 12)) + c;
	
	// Round 3
	a = a + (b ^ c ^ d) + x[ 5] + 0xfffa3942;      // 33
	a = ((a << 4) | (a >>> 28)) + b;
	d = d + (a ^ b ^ c) + x[ 8] + 0x8771f681;      // 34
	d = ((d << 11) | (d >>> 21)) + a;
	c = c + (d ^ a ^ b) + x[11] + 0x6d9d6122;      // 35
	c = ((c << 16) | (c >>> 16)) + d;
	b = b + (c ^ d ^ a) + x[14] + 0xfde5380c;      // 36
	b = ((b << 23) | (b >>> 9)) + c;
	
	a = a + (b ^ c ^ d) + x[ 1] + 0xa4beea44;      // 37
	a = ((a << 4) | (a >>> 28)) + b;
	d = d + (a ^ b ^ c) + x[ 4] + 0x4bdecfa9;      // 38
	d = ((d << 11) | (d >>> 21)) + a;
	c = c + (d ^ a ^ b) + x[ 7] + 0xf6bb4b60;      // 39
	c = ((c << 16) | (c >>> 16)) + d;
	b = b + (c ^ d ^ a) + x[10] + 0xbebfbc70;      // 40
	b = ((b << 23) | (b >>> 9)) + c;
	
	a = a + (b ^ c ^ d) + x[13] + 0x289b7ec6;      // 41
	a = ((a << 4) | (a >>> 28)) + b;
	d = d + (a ^ b ^ c) + x[ 0] + 0xeaa127fa;      // 42
	d = ((d << 11) | (d >>> 21)) + a;
	c = c + (d ^ a ^ b) + x[ 3] + 0xd4ef3085;      // 43
	c = ((c << 16) | (c >>> 16)) + d;
	b = b + (c ^ d ^ a) + x[ 6] + 0x04881d05;      // 44
	b = ((b << 23) | (b >>> 9)) + c;
	
	a = a + (b ^ c ^ d) + x[ 9] + 0xd9d4d039;      // 33
	a = ((a << 4) | (a >>> 28)) + b;
	d = d + (a ^ b ^ c) + x[12] + 0xe6db99e5;      // 34
	d = ((d << 11) | (d >>> 21)) + a;
	c = c + (d ^ a ^ b) + x[15] + 0x1fa27cf8;      // 35
	c = ((c << 16) | (c >>> 16)) + d;
	b = b + (c ^ d ^ a) + x[ 2] + 0xc4ac5665;      // 36
	b = ((b << 23) | (b >>> 9)) + c;
	
	// Round 4
	a = a + (c ^ (b | (-1 ^ d))) + x[ 0] + 0xf4292244; // 49
	a = ((a << 6) | (a >>> 26)) + b;
	d = d + (b ^ (a | (-1 ^ c))) + x[ 7] + 0x432aff97; // 50
	d = ((d << 10) | (d >>> 22)) + a;
	c = c + (a ^ (d | (-1 ^ b))) + x[14] + 0xab9423a7; // 51
	c = ((c << 15) | (c >>> 17)) + d;
	b = b + (d ^ (c | (-1 ^ a))) + x[ 5] + 0xfc93a039; // 52
	b = ((b << 21) | (b >>> 11)) + c;
	
	a = a + (c ^ (b | (-1 ^ d))) + x[12] + 0x655b59c3; // 53
	a = ((a << 6) | (a >>> 26)) + b;
	d = d + (b ^ (a | (-1 ^ c))) + x[ 3] + 0x8f0ccc92; // 54
	d = ((d << 10) | (d >>> 22)) + a;
	c = c + (a ^ (d | (-1 ^ b))) + x[10] + 0xffeff47d; // 55
	c = ((c << 15) | (c >>> 17)) + d;
	b = b + (d ^ (c | (-1 ^ a))) + x[ 1] + 0x85845dd1; // 56
	b = ((b << 21) | (b >>> 11)) + c;
	
	a = a + (c ^ (b | (-1 ^ d))) + x[ 8] + 0x6fa87e4f; // 57
	a = ((a << 6) | (a >>> 26)) + b;
	d = d + (b ^ (a | (-1 ^ c))) + x[15] + 0xfe2ce6e0; // 58
	d = ((d << 10) | (d >>> 22)) + a;
	c = c + (a ^ (d | (-1 ^ b))) + x[ 6] + 0xa3014314; // 59
	c = ((c << 15) | (c >>> 17)) + d;
	b = b + (d ^ (c | (-1 ^ a))) + x[13] + 0x4e0811a1; // 60
	b = ((b << 21) | (b >>> 11)) + c;
	
	a = a + (c ^ (b | (-1 ^ d))) + x[ 4] + 0xf7537e82; // 61
	a = ((a << 6) | (a >>> 26)) + b;
	d = d + (b ^ (a | (-1 ^ c))) + x[11] + 0xbd3af235; // 62
	d = ((d << 10) | (d >>> 22)) + a;
	c = c + (a ^ (d | (-1 ^ b))) + x[ 2] + 0x2ad7d2bb; // 63
	c = ((c << 15) | (c >>> 17)) + d;
	b = b + (d ^ (c | (-1 ^ a))) + x[ 9] + 0xeb86d391; // 64
	b = ((b << 21) | (b >>> 11)) + c;
	
	hash.h0 = hash.h0 + a;
	hash.h1 = hash.h1 + b;
	hash.h2 = hash.h2 + c;
	hash.h3 = hash.h3 + d;
}
def decodeInts(data: range<byte>, i: int) -> Range<int> {
	var w = Array<int>.new(16);
	for (j = 0; j < 16; j = j + 1) {
		w[j] = decodeInt(data, i + j * 4);
	}
	return w;
}
def decodeInt(d: range<byte>, i: int) -> int {
	return  (int.view(d[i]))           |
		(int.view(d[i + 1]) << 8)  |
		(int.view(d[i + 2]) << 16) |
		(int.view(d[i + 3]) << 24);
}
def encodeLen(chunk: Range<byte>, lenbytes: int) {
		var lenbits = lenbytes * 8;
		// file sizes > 2gb not supported yet
		// chunk(63) = 0;
		// chunk(62) = 0;
		// chunk(61) = 0;
		chunk[60] = byte.view((lenbits >> 29) & 3); // bits 29 and 30 of lenbytes
		chunk[59] = byte.view(lenbits >> 24);
		chunk[58] = byte.view(lenbits >> 16);
		chunk[57] = byte.view(lenbits >> 8);
		chunk[56] = byte.view(lenbits);
}
def copyAndPadLastChunk(data: range<byte>, var i: int, left: int) -> Range<byte> {
	// make a new chunk and copy any leftover data to it
	var chunk = Array<byte>.new(64), j = 0;
	while (i < data.length) {
		chunk[j] = data[i];
		i = i + 1;
		j = j + 1;
	}
	// and pad it with a single 1 bit
	chunk[left] = byte.view(128);
	return chunk;
}

class Md5hash {
	var h0: int = 0x67452301;
	var h1: int = 0xEFCDAB89;
	var h2: int = 0x98BADCFE;
	var h3: int = 0x10325476;

	def toInt() -> int {
		return h0 + h1 + h2 + h3;
	}
}
