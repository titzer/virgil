// An implementation of the "System" component where all methods are unimplemented.
component System {
	def out = NativeFileStream.new(fs_write, 1);
	def err = NativeFileStream.new(fs_write, 2);

	def chmod(path: string, mode: int);
	def fileOpen(path: string, read: bool) -> int;
	def fileClose(fd: int);
	def fileRead(fd: int) -> int;
	def fileWriteK(fd: int, data: Array<byte>, offset: int, len: int);
	def fileReadK(fd: int, data: Array<byte>, offset: int, len: int) -> int;
	def write(fd: int, data: Range<byte>) -> int;
	def read(fd: int, data: Range<byte>) -> int;
	def fileLeft(fd: int) -> int;
	def fileLoad(path: string) -> Array<byte>;
	def putc(ch: byte);
	def puti(val: int);
	def puts(str: string);
	def ln();
	def error(ex: string, msg: string);
	def ticksMs() -> int;
	def ticksUs() -> int;
	def ticksNs() -> int;

	def fs_write(fd: int, ptr: Pointer, len: int) -> int;
}

component RiRuntime {
	var zeromem = false;
	var gcInit: void -> void;
	var gcCollect: (int, Pointer, Pointer) -> Pointer;
	// Called from the exported, generated "entry" stub and used to
	// construct the arguments to pass to main.
	def init(argc: int) -> Array<string> {
		if (zeromem) {
			// Clear memory between runs.
			for (p = CiRuntime.HEAP_START; p < CiRuntime.HEAP_END; p += 4) p.store<u32>(0);
		}
		zeromem = true; // state leftover between invocations
		if (gcInit != null) gcInit();
		return null;
	}
	// Called from the generated allocation stub upon allocation failure.
	def gc(size: int, ip: Pointer, sp: Pointer) -> Pointer {
		return gcCollect(size, ip, sp);
	}
	def fatalException(ex: string, msg: string, ip: Pointer, sp: Pointer) {
		System.err.putc('!').puts(ex);
		if (msg != null) System.err.puts(": ").puts(msg).ln();
		else System.err.ln();
		System.error(ex, msg);
	}
}
