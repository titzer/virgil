//@execute 0=13; 1=14

// Complex / nested function type subsumption

class C {
	def n() -> int { return 13; }
}

class D extends C {
	def n() -> int { return 14; }
}

class Cls {

	def fc() -> C { return C.new(); }
	def fd() -> D { return D.new(); }

	def g1(x: C) -> int { return x.n(); }
	def g2(x: C) -> int { return x.n() + 1; }
}

def adapter(f: () -> D, v: ()) -> C {
	return f();
}

def main(i: int) -> int {
	var cls = Cls.new();
	var arrf: Array<() -> C> = [cls.fc, adapter(cls.fd, _)];
	return arrf[i]().n();
}
