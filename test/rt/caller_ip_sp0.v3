//@execute 0=42

def get_sp() -> Pointer {
	return CiRuntime.callerSp();
}

def get_sp2() -> Pointer {
	var unused_ = CiRuntime.callerSp(); // should prevent inlining
	return get_sp();
}

def get_sp2_maybe_inlined() -> Pointer {
	return get_sp();
}

def get_sp3(v: void) -> Pointer {
	var unused_ = CiRuntime.callerSp(); // should prevent inlining
	return get_sp2();
}

def test_sp() -> int {
	var x = CiRuntime.callerSp();
	var y = get_sp();
	if (x == y) return -21;

	var y2 = get_sp();
	if (y != y2) return -22;

	var z = get_sp2();
	if (x == z) return -23;
	if (y == z) return -24;

	var z2 = get_sp2_maybe_inlined();
	if (z2 != z && z2 != y) return -19;

	var w = (get_sp3(_))();
	if (x == w) return -25;
	if (y == w) return -26;
	if (z == w) return -27;
	return 42;
}

def get_ip() -> Pointer {
	return CiRuntime.callerIp();
}

def get_ip2() -> Pointer {
	var unused_ = CiRuntime.callerIp(); // should prevent inlining
	return get_ip();
}

def get_ip3(v: void) -> Pointer {
	var unused_ = CiRuntime.callerIp(); // should prevent inlining
	return get_ip2();
}

def test_ip() -> int {
	var x = CiRuntime.callerIp();
	var y = get_ip();
	if (x == y) return -21;

	var y2 = get_ip();
	if (y == y2) return -22;

	var z = get_ip2();
	if (x == z) return -23;
	if (y == z) return -24;

	var w = (get_ip3(_))();
	if (x == w) return -25;
	if (y == w) return -26;
//TODO	if (z == w) return -27;
	return 42;
}

def main() -> int {
	var result = 42;
	for (t in [("sp", test_sp), ("ip", test_ip)]) {
		System.puts("##+test_");
		System.puts(t.0);
		System.ln();
		var r = t.1();
		if (r == 42) {
			System.puts("##-ok\n");
		} else {
			System.puts("##-fail: ");
			System.puti(r);
			System.ln();
			result--;
		}
	}
	return result;
}
