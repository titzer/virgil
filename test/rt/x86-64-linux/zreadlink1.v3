def FLAG = 1;	// flag indicating should follow symlinks
def MAX = 15;	// maximum length of a path
def SYS_exit	= 60;

def bar(path: string) -> (string, int) {
	return (path, 0);
}
def qux(k: int) -> string {
	return "blazzle";
}
def resolve(fdpath: string, path: string, flags: i32) -> (string, int) {
	var result = bar(path);
	if (result.1 != 0) return (result.0, result.1);
	var normalized = result.0;

	if ((flags & FLAG) == FLAG) {
		var buffer = qux(MAX);
		var t = Linux.syscall(SYS_exit, normalized);

		return (if(t.0 < 0, normalized, buffer), 0);
	}
	return (normalized, 0);
}
def main() -> int {
	System.puts("##+test\n");
	var expected = "/f/t";
	var result = resolve("/f", "/f/t", 0).0;
	if (expected == null) {
		System.puts("##-fail, expected is null");
	} else if (result == null) {
		System.puts("##-fail, result is null");
	} else if (!equal(expected, result)) {
		System.puts("##-fail, got: ");
		System.puts(result);
	} else {
		System.puts("##-ok\n");
		return 0;
	}
	return 1;
}
def equal(arr1: string, arr2: string) -> bool {
	if (arr1 == arr2) return true;
	if (arr1.length != arr2.length) return false;
	for (i < arr1.length) {
		if (arr1[i] != arr2[i]) return false;
	}
	return true;
}
