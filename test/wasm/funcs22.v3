//@execute 0=13; 1=14

// Complex / nested function type subsumption

class C {
	def n() -> int { return 13; }
}

class D extends C {
	def n() -> int { return 13; }
}

class Cls {

	def fd1() -> (D -> int) { return g1(_); }
	def fd2() -> (D -> int) { return g2(_); }

	def g1(x: C) -> int { return x.n(); }
	def g2(x: C) -> int { return x.n() + 1; }
}

def main(i: int) -> int {
	var cls = Cls.new();
	var arrf: Array<() -> (D -> int)> = [cls.fd1, cls.fd2];
	return arrf[i]()(D.new());
}
