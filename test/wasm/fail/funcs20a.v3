//@execute (0, 0, 0, 0, 1)=77; (0, 0, 0, 1, 2)=80; (0, 0, 1, 0, 3)=82; (0, 0, 1, 1, 4)=85; (0, 1, 0, 0, 1)=76; (0, 1, 0, 1, 2)=79; (0, 1, 1, 0, 3)=81; (0, 1, 1, 1, 4)=84; (1, 0, 0, 0, 1)=78; (1, 0, 0, 1, 2)=81; (1, 0, 1, 0, 3)=83; (1, 0, 1, 1, 4)=86; (1, 1, 0, 0, 1)=77; (1, 1, 0, 1, 2)=80; (1, 1, 1, 0, 3)=82; (1, 1, 1, 1, 4)=85

// Complex / nested function type subsumption

class A {
	def m() -> int { return 11; }
}

class B extends A {
	def m() -> int { return 12; }
}

class C {
	def n() -> int { return 13; }
}

class D extends C {
	def n() -> int { return 13; }
}

class Cls {

	def fac1(x: A, y: C, j: int) -> int { return x.m() + y.n() + j; }
	def fac2(x: A, y: C, j: int) -> int { return x.m() + y.n() + j + 1; }

	def fbc1(x: B, y: C, j: int) -> int { return x.m() - y.n() - j; }
	def fbc2(x: B, y: C, j: int) -> int { return x.m() - y.n() - j + 1; }

	def fad1(x: A, y: D, j: int) -> int { return x.m() + y.n() + j - 1; }
	def fad2(x: A, y: D, j: int) -> int { return x.m() + y.n() + j - 2; }

	def fbd1(x: B, y: D, j: int) -> int { return x.m() + y.n() + j + 2; }
	def fbd2(x: B, y: D, j: int) -> int { return x.m() + y.n() + j + 3; }

	def add4(f1: (B, D, int) -> int, f2: (B, D, int) -> int,
		 f3: (B, D, int) -> int, f4: (B, D, int) -> int,
		 b: B, d: D, j: int) -> int {
		return f1(b, d, j) + f2(b, d, j) + f3(b, d, j) + f4(b, d, j);
	}
}

def ac2bd(f: (A, C, int) -> int, b: B, d: D, j: int) -> int {
	return f(b, d, j);
}

def bc2bd(f: (B, C, int) -> int, b: B, d: D, j: int) -> int {
	return f(b, d, j);
}

def ad2bd(f: (A, D, int) -> int, b: B, d: D, j: int) -> int {
	return f(b, d, j);
}

def main(i1: int, i2: int, i3: int, i4: int, j: int) -> int {
	var cls = Cls.new();
	var arrAC: Array<(A, C, int) -> int> = [cls.fac1, cls.fac2];
	var arrAD: Array<(A, D, int) -> int> = [cls.fad1, cls.fad2];
	var arrBC: Array<(B, C, int) -> int> = [cls.fbc1, cls.fbc2];
	var arrBD: Array<(B, D, int) -> int> = [cls.fbd1, cls.fbd2];
	return cls.add4(ac2bd(arrAC[i1], _, _, _),
			ad2bd(arrAD[i2], _, _, _),
			bc2bd(arrBC[i3], _, _, _),
			arrBD[i4], B.new(), D.new(), j);
}
