//@execute false=2; true=0
layout F {
	+1	g:	double[2]	#big-endian;
	=17;
}

def bytes: Array<byte> = [
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	0x66, 0x67
];
var r = Ref<F>.at(bytes, 0);


def main(a: bool) -> int {
	var f: double = if(a, double.view(0x1122334455667788uL), double.view(0x7766554433221100uL));
	r.g[1] = f;
	return check();
}

def outcomes: Array<Array<byte>> = [
	[ 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x67 ],
	[ 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x67 ],
	[ 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x00, 0x67 ],
	[ 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x67 ]
];

def check() -> int {
	for (i < outcomes.length) {
		var expected = outcomes[i];
		var eq = true;
		for (j < expected.length) if(expected[j] != bytes[j]) eq = false;
		if (eq) return i;
	}
	return -42;
}