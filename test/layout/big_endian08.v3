//@execute 0=15; 1=15; 99999999=15; -1719109786=15
layout L {
	+0	x1:	u8;
	+2	x2:	u16;
	+4	x4:	u32;
	+8	x8:	u64;
	=16;
}
layout B #big-endian {
	+0	x1:	u8;
	+2	x2:	u16;
	+4	x4:	u32;
	+8	x8:	u64;
	=16;
}

var data = Array<byte>.new(L.size);
var rl = Ref<L>.of(data);
var rb = Ref<B>.of(data);

def main(a: u32) -> u32 {
	var x = 0x03001030uL * a;

	rl.x1 = u8.view(x);
	rl.x2 = u16.view(x);
	rl.x4 = u32.view(x);
	rl.x8 = u64.view(x);

	return check();
}

def check() -> u32 {
	var r = 0u;
	if (rl.x1 == rb.x1) r |= 0x1;
	if (rl.x2 == bswap2(rb.x2)) r |= 0x2;
	if (rl.x4 == bswap4(rb.x4)) r |= 0x4;
	if (rl.x8 == bswap8(rb.x8)) r |= 0x8;
	return r;
}

def bswap2(x: u16) -> u16 {
	return (x >> 8) | ((x & 0xFFu8) << 8);
}
def bswap4(x: u32) -> u32 {
	var b0 = x & 0xFF;
	var b1 = (x >> 8) & 0xFF;
	var b2 = (x >> 16) & 0xFF;
	var b3 = (x >> 24) & 0xFF;
	return (b0 << 24) | (b1 << 16) | (b2 << 8) | (b3);
}
def bswap8(x: u64) -> u64 {
	var w0 = u32.view(x);
	var w1 = u32.view(x >> 32);
	return (u64.view(bswap4(w0)) << 32) | bswap4(w1);
}
