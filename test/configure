#!/bin/bash

GREEN='[0;32m'
YELLOW='[0;33m'
RED='[0;31m'
NORM='[0;00m'

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

CONFIG=$DIR/config
BIN=$DIR/bin

mkdir -p $CONFIG

if [ "$1" = "clean" ]; then
    rm -f $CONFIG/*
    exit 0
fi
NATIVE_HOSTS="x86-linux x86-64-linux x86-darwin x86-64-darwin arm64-darwin"
VIRGIL_LOC=${VIRGIL_LOC:=$(cd $(dirname ${BASH_SOURCE[0]}) && cd .. && pwd)}

function green() {
    printf "\t%-8s ${GREEN}%s${NORM}\n" "($1)" "$2"
}

function print_skipped() {
    printf "\t${YELLOW}(skipped)${NORM}\n"
}

######################################################
# begin configuration
######################################################

touch $CONFIG/configged

HOSTS=$(${VIRGIL_LOC}/bin/dev/sense_host)
printf "hosts=${GREEN}$HOSTS${NORM}\n"

# manually env-specified JAVA=
if [ "$JAVA" != "" ]; then
    printf "JAVA=${GREEN}$JAVA${NORM}\n"
    ln -s $JAVA $CONFIG/java
fi

for host in $HOSTS; do
    # configure progress if not already
    if [[ ! -L "$CONFIG/progress" && -x "$BIN/progress-$host" ]]; then
	echo progress
	printf "\t(native) ${GREEN}%s${NORM}\n" "progress-$host"
	ln -s $BIN/progress-$host $CONFIG/progress
    fi

    # link native platform executors
    # TODO: use x86-64-linux host for x86-linux tests?
    for n in $NATIVE_HOSTS; do
	if [[ ! -L "$CONFIG/test-$n" && "$host" = "$n" ]]; then
	    echo target=$host
	    green native "test-$host"
	    ln -s $BIN/test-$host $CONFIG/test-$host
	    green native "run-$host"
	    ln -s $BIN/run-native-sh $CONFIG/run-$host
	fi
    done

    # host-sense'd jar, use java from environment
    if [[ ! -L "$CONFIG/java" && "$host" = jar ]]; then
	JAVA=$(which java)
	echo java
	green linked "$JAVA"

	# java is supported, search for suitable binaries
	ln -s $JAVA $CONFIG/java
    fi
done

# if JAVA was linked
host=jar
echo target=$host
if [[ -L "$CONFIG/java" && ! -L $CONFIG/test-jvm ]]; then
    green linked "test-jvm"
    ln -s $BIN/test-jvm $CONFIG/test-jvm
    green linked "run-$host"
    ln -s $BIN/run-jar $CONFIG/run-jar
else
    print_skipped
fi

#TODO: search for emulator targets

function configure_wasm_js() {
    T="wasm-js"
    if [ -L $CONFIG/test-$T ]; then
	return
    fi

    echo $T
    D8=$(which d8)

    if [ ! -z "$D8" ]; then
	green linked "$D8"
	echo '#!/bin/bash' > $CONFIG/d8
	echo "$D8 \$@" >> $CONFIG/d8
	chmod 755 $CONFIG/d8
	green linked "test-$T"
	ln -s $BIN/test-$T $CONFIG/test-$T
    else
	print_skipped
    fi
}

function configure_wasm_wave() {
    T="wave"
    if [ -L $CONFIG/run-$T ]; then
	return
    fi

    echo $T
    export WIZENG=$(which wizeng)
    export NODE=$(which node)

    if [ ! -z "$WIZENG" ]; then
	green linked "$WIZENG"
	green linked "run-$T"
	ln -s $WIZENG $CONFIG/wizeng
	ln -s $BIN/run-$T-wizeng $CONFIG/run-$T
    elif [ ! -z "$NODE" ]; then
	green linked "$NODE"
	green linked "run-$T"
	ln -s $NODE $CONFIG/node
	ln -s $BIN/run-$T-node $CONFIG/run-$T
    else
	print_skipped
    fi
}

function configure_wasm_wasi() {
    T="wasi"
    if [ -L $CONFIG/run-$T ]; then
	return
    fi

    echo $T
    WASMTIME=$(which wasmtime)

    if [ ! -z "$WASMTIME" ]; then
	green linked "$WASMTIME"
	green linked "run-$T"
	ln -s $WASMTIME $CONFIG/wasmtime
	ln -s $BIN/run-$T-wasmtime $CONFIG/run-$T
    elif [ ! -z "$NODE" ]; then
	green linked "run-$T"
	ln -s $BIN/run-$T-node $CONFIG/run-$T
    else
	print_skipped
    fi
}

configure_wasm_js
configure_wasm_wave
configure_wasm_wasi

for n in $NATIVE_HOSTS; do
    if [[ ! -L "$CONFIG/test-$n" ]]; then
	echo target=$n
	print_skipped
    fi
done
