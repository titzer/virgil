//@execute 0=0; 1=2; 2=7; 5=40

// A test of two recursion groups where one refers to the other

class A1 {
	var v: int;
	var b: B1;
	new(v, b) { }
}

class B1 extends A1 {
	var a: A1;
	new(a, v: int, b: B1) super(v, b){ }
}

class A2 {
	var v: int;
	var b: B2;
	new(v, b) { }
}

class B2 extends A2 {
	var a: A2;
	var b1: B1;
	new(a, b1, v: int, b: B2) super(v, b){ }
}

def main(n: int) -> int {
	var a1: A1;
	var b1: B1;
	for (i < n) {
		b1 = B1.new(a1, i, b1);
		a1 = A1.new(i+1, b1);
	}
	var a2: A2;
	var b2: B2;
	for (i < n) {
		b2 = B2.new(a2, b1, i, b2);
		a2 = A2.new(i+1, b2);
	}
	var j = 0;
	while (a1 != null) {
		j += a1.v;
		a1 = a1.b.a;
	}
	while (b2 != null) {
		j += b2.v;
		b2 = b2.b;
	}
	while (a2 != null) {
		j += a2.v;
		a2 = a2.b.a;
	}
	while (b2 != null) {
		j += b2.v + b2.b1.v;
		b2 = b2.b;
	}
	return j;
}
