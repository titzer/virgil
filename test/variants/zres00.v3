//@execute false=-66; true=0

enum Error {
	NONE,
	BAD,
	EXTRA_BAD
}
type Result<T> {
	case Ok(v: T);
	case Error(e: Error);

	// Forcefully unwrap the result into T. If value is {Error} then use the
	// provided message string in error message.
	def expect(msg: string) -> T {
		match (this) {
			Ok(v) => return v;
			Error(e) => {
				global_err = e;
				var d: T;
				return d;
			}
		}
	}
}

var global_err = Error.NONE;

def main(a: bool) -> int {
	global_err = Error.NONE;
	var v = do(a).expect("worked");
	match (global_err) {
		NONE => return 0;
		BAD => return -55;
		EXTRA_BAD => return -66;
	}
}

def do(a: bool) -> Result<void> {
	return if(a, Result.Ok(()), Result.Error(Error.EXTRA_BAD));
}
