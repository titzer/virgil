//@execute false=111

type Value {
	case I32(val: u32);
	case I64(val: u64);
}
class Throwable { }
class ArrayStack<T> {
	var elems = Array<T>.new(100);
}
class WasmStack { }

type Result2 {
	case Return(vals: Range<Value>);
	case Throw(thrown: Throwable);
	case Suspend(stack: WasmStack, valrefs: Range<Value>);
}

enum StackState {
	EMPTY,			// contains no frames
	SUSPENDED,		// contains one or more frames, waiting for inputs
	RESUMABLE,		// all inputs set; can be resumed
	RUNNING,		// currently running Wasm or host code
	RETURNING,		// used internally
	THROWING,		// used internally
}

def resume(parent: WasmStack) -> Result2 {
	// Set the initial state to running and loop until return, throw, or suspend.
	// Return the appropriate result.
	var r: Result2;
	match (state_) {
		THROWING => {
			r = Result2.Throw(thrown);
		}
		RETURNING => {
			var vals = values.elems[0 ... 1];
			r = Result2.Return(vals);
		}
		_ => {
		}
	}
	return r;
}

var thrown: Throwable;
var state_: StackState;
def values = ArrayStack<Value>.new();

def main(a: bool) -> int {
	var stack: WasmStack;
	if (a) {
		thrown = Throwable.new();
		state_ = StackState.THROWING;
		stack = WasmStack.new();
		values.elems[0] = Value.I32(11);
		values.elems[1] = Value.I32(12);
		values.elems[2] = Value.I64(13);
		values.elems = null;
	}
	resume(stack);
	return 111;
}