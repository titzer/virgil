//@execute 0=4

def main(a: int) -> int {
	var modules = [
		NamedModule("foo", Module.new()),
		NamedModule("bar", Module.new()),
		NamedModule("baz", Module.new())
	];
	named_modules = Vector<NamedModule>.new()
		.putr(modules[1 ...]);

	return partiallyInstantiate(0).len + partiallyInstantiate(1).len;
}

component Arrays {
	// Grow an {array} if it is smaller than {size}, returning either {array} or a new one.
	def grow<T>(array: Array<T>, size: int) -> Array<T> {
		if (size > array.length) {
			var n = Array<T>.new(size), max = array.length;
			for (i < max) n[i] = array[i];
			return n;
		}
		return array;
	}
}

// A utility class which represents an efficient, growable, appendable array
class Vector<T> {
	var array: Array<T>;
	var length: int;

	// Get the element at {index}.
	def [index: int] -> T {
		return array[index];
	}
	// Add the elements from the range {r} to the end of this vector.
	def putr(r: Range<T>) -> this {
		var curlen = length, rlen = r.length, newlen = curlen + rlen;
		if (array == null) array = Array<T>.new(newlen);
		else if (newlen > array.length) grow(curlen + newlen);

		var v = array[curlen ..+ rlen];
		for (i < rlen) v[i] = r[i];
		length = newlen;
	}
	// Grow the internal storage of this vector to the new length {nlength}.
	def grow(nlength: int) -> this {
		if (array == null) array = Array<T>.new(nlength);
		else if (nlength > array.length) array = Arrays.grow(array, nlength);
	}
}

class Instantiator(len: int) { }
class Exportable { }
class Module {
	def imports = Vector<int>.new().putr([2, 3]);
}

type NamedModule(name: string, module: Module) #unboxed;
var named_modules: Vector<NamedModule>;
	
def partiallyInstantiate(module_id: int) -> Instantiator {
	var module = named_modules[module_id].module;
	var imports = Array<Exportable>.new(module.imports.length);
	return Instantiator.new(imports.length);
}
