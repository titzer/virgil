//@execute 0=true; 1=false; 2=false
type JsonValue {
	case String(v: string);
	case Number(v: int); // TODO: float
	case Bool(v: bool);
	case Null;
	case JArray(v: Array<JsonValue>);
	case JObject(v: HashMap<string, JsonValue>);
}

class Vector<T> {
	def put(v: T) { }
	def extract() -> Array<T> { return null; }
}
class HashMap<K, V> {
}

def ERR_RET = JsonValue.Null;
class JsonParser {
	var ok: bool;
	var state: int;

	def parse_value() -> JsonValue {
		return JsonValue.String(if(state++ == 8, "", "a"));
	}
	def parse_array() -> JsonValue {
		var vals = Vector<JsonValue>.new();
		if (req1() == -1) return ERR_RET;
		vals.put(parse_value());
		if (!ok) return ERR_RET;
		while (opt1(',') != -1) {
			vals.put(parse_value());
			if (!ok) return ERR_RET;
		}
		if (req1() == -1) return ERR_RET;
		return JsonValue.JArray(vals.extract());
	}
	def req1() -> int {
		return 1;
	}
	def opt1(ch: byte) -> int {
		return -1;
	}
}

def main(a: int) -> bool {
	var x = JsonParser.new();
	x.state = a;
	x.ok = a > 0;
	return x.parse_array() == ERR_RET;
}
