//@execute 0=100; 1=101
type MutCell<T> #unboxed {
	case Array(x: Array<T>, i: int) { }
	case Func(getf: void -> T, setf: T -> void) { }

	def get() -> T {
		match (this) {
			Array(x, i) => return x[i];
			Func(getf, setf) => return getf();
		}
	}
	def set(v: T) {
		match (this) {
			Array(x, i) => x[i] = v;
			Func(getf, setf) => return setf(v);
		}
	}
}
var y = 99;
def get_y() -> int { return y; }
def set_y(v: int) { y = v; }
def cells = [
	MutCell<int>.Array([0], 0),
	MutCell<int>.Func(get_y, set_y)
];
def main(a: int) -> int {
	var cell = cells[a];
	cell.set(a + 100);
	return cell.get();
}