//@execute 0=4

def main(a: int) -> int {
	var modules = [
		NamedModule("foo", Module.new()),
		NamedModule("bar", Module.new()),
		NamedModule("baz", Module.new())
	];
	named_modules = Vector<NamedModule>.new()
		.putr(modules[1 ...]);

	return partiallyInstantiate(0) + partiallyInstantiate(1);
}

// A utility class which represents an efficient, growable, appendable array
class Vector<T> {
	var array: Array<T>;
	var length: int;

	// Add the elements from the range {r} to the end of this vector.
	def putr(r: Range<T>) -> this {
		var curlen = length, rlen = r.length, newlen = curlen + rlen;
		if (array == null) array = Array<T>.new(newlen);

		var v = array[curlen ..+ rlen];
		for (i < rlen) v[i] = r[i];
		length = newlen;
	}
}

class Module {
	def imports = Vector<int>.new().putr([2, 3]);
}

type NamedModule(name: string, module: Module) #unboxed;
var named_modules: Vector<NamedModule>;
	
def partiallyInstantiate(module_id: int) -> int {
	return named_modules.array[module_id].module.imports.length;
}
