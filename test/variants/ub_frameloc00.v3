//@execute 0=11; 1=11

class WasmFunction(id: int) { }
class HostFunction(id: int) { }
class HostFrame {
	def caller() -> FrameLoc {
		return FrameLoc.None;
	}
}
class V3Frame {
	var prev: V3Frame;
	var func: WasmFunction;
	var pc: int;
}
class FrameAccessor {
	def caller() -> FrameLoc {
		return FrameLoc.None;
	}
}

type TargetFrame(f: V3Frame) #unboxed {
	def getFrameAccessor() -> FrameAccessor {
		return FrameAccessor.new();
	}
}

type FrameLoc #unboxed {
	case None;
	case Wasm(func: WasmFunction, pc: int, frame: TargetFrame);
	case Host(func: HostFunction, frame: HostFrame);
}

def FUNC_19 = WasmFunction.new(19);
def FUNC_21 = WasmFunction.new(21);
def HOST_22 = HostFunction.new(22);

def frame2 = V3Frame.new();

def frames = [
	FrameLoc.Wasm(FUNC_19, 11, TargetFrame(V3Frame.new())),
	FrameLoc.Wasm(FUNC_21, 13, TargetFrame(V3Frame.new())),
	FrameLoc.Host(HOST_22, HostFrame.new())
];

def main(a: int) -> int {
	var g = FrameLoc.Wasm.!(frames[a]);
	renderStack(g.frame.getFrameAccessor());
	return 11;
}

def renderStack(accessor: FrameAccessor) {
	var depth = 0;
	var caller = accessor.caller();
	while (true) {
		match (caller) {
			None => break;
			Wasm(func, pc, frame) => {
//				OUT.put1("%d: ", depth);
//				func.render(OUT);
				accessor = frame.getFrameAccessor();
				caller = accessor.caller();
			}
			Host(func, frame) => {
//				OUT.put1("%d: ", depth);
//				func.render(OUT);
				caller = frame.caller();
			}
		}
//		OUT.outln();
		depth++;
	}
}
