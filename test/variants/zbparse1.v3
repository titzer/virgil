//@execute 0=0; -1=3; 2=1; 5=1
class BinParser extends BpFsmCallback {
	var err: ErrorGen;
	var tiering: ExecutionStrategy;

	var fsm: BpFsm;
	var seen_code: bool;
	var seen_data: bool;
	var declared_func_count: u32;

	new(module: Module) super(module) {
		err = ErrorGen.new(module.filename);
		fsm = BpFsm.new(err, this);
	}

	private def finish0() -> BinParserResult {
		var func_count = declared_func_count;
		if (func_count > 0) {
			err.MissingCodeSection();
		}
		var data_count = module.explicit_data_count;
		if (data_count > 0 && !seen_data) {
			err.MissingDataSection();
		}
		return fsm.finish(if(tiering != null, tiering.onModuleFinish));
	}
}

class BpFsm(err: ErrorGen, callback: BpFsmCallback) {
	def finish(onAccept: (Module, u32, ErrorGen) -> void) -> BinParserResult {
		if (err.error_code == WasmError.NONE) return BinParserResult.Ok(callback.module);
		return BinParserResult.Error(err.error_code, callback.module.filename,
				err.error_section, err.error_index,
				err.error_pos, err.error_msg);
	}
}

class Module(filename: string) {
	var explicit_data_count: int;
}

// Wasm errors are enumerated to allow programmatic matching in unit tests.
enum WasmError {
	NONE,
	// General DataReader errors.
	EOF,
	LEB_ERROR,
	// Wasm binary decoding errors.
	INVALID_HEADER,
	INCOMPLETE_SECTION,
	INCOMPLETE_FUNCTION_BODY,
	OVERFLOW_SECTION,
	OVERFLOW_FUNCTION,
	DUPLICATE_SECTION,
	DUPLICATE_EXPORT,
	EXCEEDED_LIMIT,
	OOB_INDEX,
	FUNC_COUNT_MISMATCH,
	DATA_COUNT_MISMATCH,
	INVALID_UTF8_STRING,
	INVALID_SECTION,
	INVALID_TYPE,
	INVALID_IMPORT_KIND,
	INVALID_ELEM_FLAGS,
	INVALID_TABLE_FLAGS,
	INVALID_DATA_FLAGS,
	INVALID_MEMORY_FLAGS,
	INVALID_GLOBAL_FLAGS,
	EXPECTED_ZERO_BYTE,
	EXPECTED_MAXIMUM,
	INVALID_INIT_EXPR,
	ILLEGAL_TYPE,
	ILLEGAL_SUPERTYPE,
	INVALID_ATTRIBUTE,
	INVALID_TAG_SIGNATURE,
	// Code validation errors.
	INVALID_BLOCK_TYPE,
	ILLEGAL_BLOCK_TYPE,
	ILLEGAL_SELECT_COUNT,
	ILLEGAL_ASSIGNMENT,
	ILLEGAL_FUNCREF,
	TYPE_MISMATCH,
	MISMATCHED_ELSE,
	MISMATCHED_CATCH,
	MISMATCHED_DELEGATE,
	UNTERMINATED_BODY,
	OOB_LABEL,
	ILLEGAL_ALIGNMENT,
	ILLEGAL_LANE,
	INVALID_OPCODE,
	MISSING_DATA_COUNT,
	UNINIT_LOCAL,
	// Module instantiation errors.
	IMPORT_COUNT_MISMATCH,
	OOM_TABLE,
	OOM_MEMORY,
	IMPORT_KIND_MISMATCH,
	IMPORT_TYPE_MISMATCH,
	OOB_TABLE_ELEMS,
	OOB_DATA_INIT,
	EXPECTED_EXPORT,
	// Engine errors
	JIT_ERROR
}

// Section codes.
enum BpSection(code: byte) {
	Unknown(0),
	Type(1),
	Import(2),
	Function(3),
	Table(4),
	Memory(5),
	Tag(13),	// ext:exception-handling
	Global(6),
	Export(7),
	Start(8),
	Element(9),
	DataCount(12),
	Code(10),
	Data(11),
}

class DataReader {
}

def global = Array<int>.new(20);

class ErrorGen(filename: string) {
	var section: BpSection;		// current section
	var index: int = -1;		// current index into section
	var error_section: BpSection;	// section where error ocurred
	var error_index: int;		// index where error ocurred
	var error_code: WasmError;	// wasm error code
	var error_pos: int = int.max;
	var error_msg: string;
	private var next_error_pos = -1;
	// Set the {next_error_pos} to the absolute position of the given decoder.
	def MissingCodeSection() { error_code = WasmError.FUNC_COUNT_MISMATCH; }
	def MissingDataSection() {
		error_code = WasmError.DATA_COUNT_MISMATCH;

		var a0 = global[0];
		var a1 = global[1];
		var a2 = global[2];
		var a3 = global[3];
		var a4 = global[4];
		var a5 = global[5];
		var a6 = global[6];
		var a7 = global[7];
		var a8 = global[8];
		var a9 = global[9];

		global[0] = a0 + 6;
		global[1] = a1 + 6;
		global[2] = a2 + 6;
		global[3] = a3 + 6;
		global[4] = a4 + 6;
		global[5] = a5 + 6;
		global[6] = a6 + 6;
		global[7] = a7 + 6;
		global[8] = a8 + 6;
		global[9] = a9 + 6;
	}
}

class ExecutionStrategy {
	def onModuleFinish(module: Module, size: u32, err: ErrorGen) { }		// note: size is exact
}

type BinParserResult {
	case Ok(module: Module) { }
	case Error(code: WasmError, filename: string, section: BpSection, error_index: int, error_pos: int, error_msg: string) { }
}

class BpFsmCallback(module: Module) {
}

def main(a: int) -> int {
	var module = Module.new("foobar");
	if (a < 0) module.explicit_data_count = u8.view(a);
	var bp = BinParser.new(module);
	if (a > 0) bp.declared_func_count = u8.view(a);
	match (bp.finish0()) {
		Ok => return 0;
		Error(code, f, s, x, y, z) => match (code) {
			FUNC_COUNT_MISMATCH => return 1;
			DATA_COUNT_MISMATCH => return 3;
			_ => return 4;
		}
	}
}

