//@execute 0=0; -1=3; 2=1; 5=1
class BinParser(module: Module) {
	var err: ErrorGen;
	var tiering: ExecutionStrategy;

	var fsm: BpFsm;
	var seen_code: bool;
	var seen_data: bool;
	var declared_func_count: u32;

	new() {
		err = ErrorGen.new(module.filename);
		fsm = BpFsm.new(err, module);
	}

	private def finish0() -> BinParserResult {
		var func_count = declared_func_count;
		if (func_count > 0) {
			err.MissingCodeSection();
		}
		var data_count = module.explicit_data_count;
		if (data_count > 0 && !seen_data) {
			err.MissingDataSection();
		}
		return fsm.finish(if(tiering != null, tiering.onModuleFinish));
	}
}

class BpFsm(err: ErrorGen, module: Module) {
	def finish(onAccept: (Module, u32, ErrorGen) -> void) -> BinParserResult {
		if (err.error_code == WasmError.NONE) return BinParserResult.Ok(module);
		return BinParserResult.Error(err.error_code, module.filename,
				err.error_index,
				err.error_pos, err.error_msg);
	}
}

class Module(filename: string) {
	var explicit_data_count: int;
}

// Wasm errors are enumerated to allow programmatic matching in unit tests.
enum WasmError {
	NONE,
	FUNC_COUNT_MISMATCH,
	DATA_COUNT_MISMATCH,
}

def global = Array<int>.new(20);

class ErrorGen(filename: string) {
	var index: int = -1;		// current index into section
	var error_index: int;		// index where error ocurred
	var error_code: WasmError;	// wasm error code
	var error_pos: int = int.max;
	var error_msg: string;
	private var next_error_pos = -1;
	// Set the {next_error_pos} to the absolute position of the given decoder.
	def MissingCodeSection() { error_code = WasmError.FUNC_COUNT_MISMATCH; }
	def MissingDataSection() {
		error_code = WasmError.DATA_COUNT_MISMATCH;

		var a0 = global[0];
		var a1 = global[1];
		var a2 = global[2];
		var a3 = global[3];
		var a4 = global[4];
		var a5 = global[5];
		var a6 = global[6];
		var a7 = global[7];
		var a8 = global[8];
		var a9 = global[9];

		global[0] = a0 + 6;
		global[1] = a1 + 6;
		global[2] = a2 + 6;
		global[3] = a3 + 6;
		global[4] = a4 + 6;
		global[5] = a5 + 6;
		global[6] = a6 + 6;
		global[7] = a7 + 6;
		global[8] = a8 + 6;
		global[9] = a9 + 6;
	}
}

class ExecutionStrategy {
	def onModuleFinish(module: Module, size: u32, err: ErrorGen) { }		// note: size is exact
}

type BinParserResult {
	case Ok(module: Module) { }
	case Error(code: WasmError, filename: string, error_index: int, error_pos: int, error_msg: string) { }
}

def main(a: int) -> int {
	var module = Module.new("foobar");
	if (a < 0) module.explicit_data_count = u8.view(a);
	var bp = BinParser.new(module);
	if (a > 0) bp.declared_func_count = u8.view(a);
	match (bp.finish0()) {
		Ok => return 0;
		Error(code, f, s, y, z) => match (code) {
			FUNC_COUNT_MISMATCH => return 1;
			DATA_COUNT_MISMATCH => return 3;
			_ => return 4;
		}
	}
}

