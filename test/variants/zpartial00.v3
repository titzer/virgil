//@execute 0=4

def main(a: int) -> int {
	var modules = [
		NamedModule("foo", Module.new()),
		NamedModule("bar", Module.new()),
		NamedModule("baz", Module.new())
	];
	named_modules = Vector<NamedModule>.new()
		.putr(modules[1 ...]);

	return partiallyInstantiate(0).len + partiallyInstantiate(1).len;
}

component Arrays {
	// Grow an {array} if it is smaller than {size}, returning either {array} or a new one.
	def grow<T>(array: Array<T>, size: int) -> Array<T> {
		if (size > array.length) {
			var n = Array<T>.new(size), max = array.length;
			for (i < max) n[i] = array[i];
			return n;
		}
		return array;
	}
}

// A utility class which represents an efficient, growable, appendable array
class Vector<T> {
	var array: Array<T>;
	var length: int;

	// Get the element at {index}.
	def [index: int] -> T {
		return array[index];
	}
	// Update the element at {index} to be {e}.
	def [index: int] = e: T {
		array[index] = e;
	}
	// Get the element at {index}, returning the default value for <T> if out of bounds.
	def get(index: int) -> T {
		return if(index >= 0 && index < length, array[index]);
	}
	// Set the element at {index} to {e}, growing if necessary.
	def set(index: int, e: T) -> this {
		if (index < 0) return;
		grow(index + 1);
		array[index] = e;
		if (index >= length) length = index + 1;
	}
	// Add the element {e} to the end of this vector.
	def put(e: T) -> this {
		var a = array, s = length;
		if (a == null) array = a = Array<T>.new(s + 10);
		else if (s >= a.length) array = a = Arrays.grow(a, a.length + 10 + s);
		a[s] = e;
		length = s + 1;
	}
	// Add all the elements in {array} to the end of this vector.
	def puta(array: Array<T>) -> this {
		if (array != null) putk(array, 0, array.length);
	}
	// Add the elements from the given range in the array to the end of this vector.
	// #deprecated: use {Vector.putr} instead
	def putk(a: Array<T>, start: int, end: int) -> this {
		putr(a[start ... end]);
	}
	// Add the elements from the range {r} to the end of this vector.
	def putr(r: Range<T>) -> this {
		var curlen = length, rlen = r.length, newlen = curlen + rlen;
		if (array == null) array = Array<T>.new(newlen);
		else if (newlen > array.length) grow(curlen + newlen);

		var v = array[curlen ..+ rlen];
		for (i < rlen) v[i] = r[i];
		length = newlen;
	}
	// Add {v} {n} times to this vector.
	def putn(v: T, n: int) -> this {
		var max = length + n;
		grow(max);
		for (i = length; i < max; i++) array[i] = v;
		length += n;
	}
	// Add all of the elements from {v} to the end of this vector.
	def putv(v: Vector<T>) -> this {
		if (v.array != null) putk(v.array, 0, v.length);
	}
	// Apply the function {f} to each element in this vector.
	def apply(f: T -> void) {
		var a = array;
		if (a != null) {
			var max = length, len = a.length;
			for (i < len) {
				if (i >= max) return;
				f(a[i]);
			}
		}
	}
	// Grow the internal storage of this vector to the new length {nlength}.
	def grow(nlength: int) -> this {
		if (array == null) array = Array<T>.new(nlength);
		else if (nlength > array.length) array = Arrays.grow(array, nlength);
	}
	// Resize this vector to be {nlength} elements.
	def resize(nlength: int) -> this {
		if (nlength > length) grow(nlength);
		length = nlength;
	}
}

class Instantiator(len: int) { }
class Exportable { }
class Module {
	def imports = Vector<int>.new().put(2).put(3);
}

type NamedModule(name: string, module: Module) #unboxed;
var named_modules: Vector<NamedModule>;
	

def partiallyInstantiate(module_id: int) -> Instantiator {
	var name = named_modules[module_id].name;
	var module = named_modules[module_id].module;
	var imports = Array<Exportable>.new(module.imports.length);
/*	var i = Instantiator.new(engine.extensions, module, imports, error);
	i.binder = binder;
	var deferred_imports = Vector<int>.new();
	var processor_map = Strings.newMap<ImportProcessor>();
	for (j < module.imports.length) {
		var imp_mod_name = module.imports[j].imp.module_name;
		// first try to match the import to loaded wasm modules,
		// then instantiate host module processors
		if (isDynamicImport(imp_mod_name, name)) {
			deferred_imports.put(j);
			continue;
		}
		if (processor_map[imp_mod_name] != null) continue;
		var processor = resolveImportProcessor(imp_mod_name);
		if (processor == null) {
			error.index = module_id;
			error.abs(u64.view(j)).setc(WasmError.IMPORT_COUNT_MISMATCH, StringBuilder.new()
				.put2("%s.wasm: import from unknown module \"%s\"\n", name, imp_mod_name).toString());
			return null;
		}
		processor_map[imp_mod_name] = processor;
		i.processors.put(processor);
	}
	this.deferred_imports[module_id] = deferred_imports.extract();
	i.runPartial(this.deferred_imports[module_id]);
	return i;
*/
	return Instantiator.new(imports.length);
}
