//@execute 0=0; -1=7; 16842753=1
enum E {
	A0, A1, A2
}

class C { }

type T #unboxed {
	case None(c0: C, c1: C);
	case Blah;
	case Set(s: E.set);

	def intersect(that: T) -> T {
		match (this) {
			None(c0, c1) => return if(c0 == c1, this, this);
			Blah => return this;
			Set(set0) => match (that) {
				None => return that;
				Blah => return that;
				Set(set1) => return T.Set(set0 & set1);
			}
		}
	}
	def set() -> E.set {
		return if(T.Set.?(this), T.Set.!(this).s);
	}
	def bits() -> int {
		if (T.None.?(this)) return 0;
		var s = T.Set.!(this).s;
		var r: int;
		for (e in s) r |= (1 << e.tag);
		return r;
	}
}



def some = [T.Set(E.A0 | E.A1 | E.A2), T.None(C.new(), C.new())];

def make(a: int) -> E.set {
	var x: E.set;
	for (e in E) if ((a & (1 << e.tag)) != 0) x |= e;
	return x;
}

def main(a: int) -> int {
	var x = make(a);
	var t = T.Set(x).intersect(some[0]);
	return t.bits();
}
