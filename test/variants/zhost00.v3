//@execute 0=0; 1=0; 2=0; 3=0; 4=0; 5=0; 6=0
class Exportable {
	def render(buf: StringBuilder) -> StringBuilder {
		return buf.puts("<exportable>");
	}
}
class SigDecl { }
class Function extends Object { }
class WasmFunction(decl: FuncDecl) extends Function { }
class Object extends Exportable { }
type Value {
	case Ref(val: Object);
	case I31(val: u31);
	case I32(val: u32);
	case I64(val: u64);
	case F32(bits: u32);
	case F64(bits: u64);
	case V128(low: u64, high: u64);
}
component Values {
	def render(v: Value, buf: StringBuilder) -> StringBuilder {
		match (v) {
			Ref(val) => match (val) {
				x: HostObject => buf.put1("<externref %q>", x.render);
				x: WasmFunction => buf.put1("<funcref: #%d>", x.decl.func_index);
				x: HeapStruct => {
					var id = if(x.decl == null, -1, x.decl.heaptype_index);
					buf.put1("<ref struct #%d>", id);
				}
				x: HeapArray => {
					var id = if(x.decl == null, -1, x.decl.heaptype_index);
					buf.put1("<ref array #%d>", id);
				}
				x: Object => x.render(buf);
				null => buf.puts("<ref null>");
			}
			I31(val) => buf.put1("i31:%d", u32.view(val));
			I32(val) => buf.put1("%d", val);
			I64(val) => buf.put1("%duL", val);
			F32(val) => buf.put1("f32:%x", val);
			F64(val) => buf.put1("f64:%x", val);
			V128(low, high) => buf.puts("v128:").putx_64(high).putx_64(low);
		}
		return buf;
	}
}
class StringBuilder {
	def puts(str: string) -> this { }
	def put1<T>(fmt: string, arg: T) -> this { }
	def putx_64(v: u64) -> this { }
}
class HostObject extends Object {
	def render(buf: StringBuilder) -> StringBuilder {
		return buf.puts("<hostobj>");
	}
}
class HeapObject(decl: HeapTypeDecl, vals: Array<Value>) extends Object {}
class HeapStruct extends HeapObject {
	new(decl: StructDecl, vals: Array<Value>) super(decl, vals) { }
}
class HeapArray extends HeapObject {
	new(decl: ArrayDecl, vals: Array<Value>) super(decl, vals) { } // XXX: unboxed prim arrays
}

class HeapTypeDecl(heaptype_index: int) { }
class FuncDecl(func_index: int) { }
class StructDecl extends HeapTypeDecl(-2) { }
class ArrayDecl extends HeapTypeDecl(-3) { }

def values = [
	Value.I32(11), Value.I32(12),
	Value.I64(21), Value.I64(22),
	Value.F32(31), Value.F32(32),
	Value.F64(41), Value.F64(42),
	Value.V128(51, 52), Value.V128(53, 54),
	Value.Ref(WasmFunction.new(FuncDecl.new(11)))
];


def main(a: int) -> int {
	Values.render(values[a], StringBuilder.new());
	return 0;
}
