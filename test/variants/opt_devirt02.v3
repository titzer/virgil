//@execute (0, 0)=22; (0, 100)=22; (1, 0)=11; (1, 100)=111; (2, 0)=33; (2, 100)=33; (3, 0)=22; (3, 100)=122
type T {
	def m() -> int;

	case A(x: int) { def m() -> int { return x + 11; } }
	case B(x: int) { def m() -> int { return x + 22; } }
}

def methods(v: int) -> Array<void -> int> {
	def ka = T.A(11);
	def aa = T.A(v);
	def kb = T.B(11);
	def ab: T = allocb(v);
	return [
		ka.m,	// constant-folded
		aa.m,	// pattern-match allocation
		kb.m,	// constant-folded
		ab.m	// from static type of call
	];
}

def allocb(v: int) -> T.B {
	return T.B(v);
}

def main(a: int, v: int) -> int {
	return methods(v)[a]();
}
