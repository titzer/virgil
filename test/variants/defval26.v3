//@execute 0=0; 1=7; 2=10; 3=110; 4=114

type T {
	case Leaf(x: u32);
	case One(a: (T.Leaf, T.Leaf));
	case Two(a: T.One);
}

def main(a: int) -> int {
	var leaf: T.Leaf;
	var one: T.One;
	var two: T.Two;
	var nop = int.!<u32>;

	if (a == 0) return count(leaf, nop);
	if (a == 1) return count(T.Leaf(7), nop);
	if (a == 2) return count(one, nop);
	if (a == 3) return count(two, nop);
	if (a == 4) return count(T.Two(T.One(T.Leaf(4), leaf)), nop);
	return 49;
}

def count(t: T, num: u32 -> int) -> int {
	match (t) {
		Leaf(x) => return num(x);
		One(a) => return 10 + count(a.0, num) + count(a.1, num);
		Two(a) => return 100 + count(a, num);
	}
}
