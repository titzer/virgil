//@seman
type Tree<T> {
	case None;
	case Leaf(val: T);
	case Branch(left: Tree<T>, right: Tree<T>);
}
def commute<A>(tree: Tree<A>) -> Tree<A> {
	match (tree) {
		None => return tree;
		Leaf => return tree;
		Branch(left, right) => return Tree.Branch(commute(right), commute(left));
	}
}
