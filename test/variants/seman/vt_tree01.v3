//@seman
type Tree<T> {
	case None;
	case Leaf(val: T);
	case Branch(left: Tree<T>, right: Tree<T>);
}
def map<A, B>(tree: Tree<A>, f: A -> B) -> Tree<B> {
	match (tree) {
		None => return Tree.None;
		Leaf(val) => return Tree.Leaf(f(val));
		Branch(left, right) => return Tree.Branch(map(left, f), map(right, f));
	}
}
