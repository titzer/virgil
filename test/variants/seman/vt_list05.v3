//@seman
type List<T> {
	case Nil;
	case Cons(head: T, tail: List<T>);
}
def cons1<T>(x: T) -> List<T> {
	return List.Cons(x, List<T>.Nil);
}
def cons2<T>(x: T, y: T) -> List<T> {
	return List.Cons(x, List.Cons(y, List<T>.Nil));
}
def r = cons1(4);
def x = cons1("hello");
def y = cons2(true, false);
