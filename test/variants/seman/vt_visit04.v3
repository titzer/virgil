//@seman
class Transform<R, E> {
	def visitA(price: int, e: E) -> R;
	def visitB(price: int, e: E) -> R;
}

type S {
	def accept<R, E>(v: Transform<R, E>, e: E) -> R;
	case A(price: int) {
		def accept<R, E>(v: Transform<R, E>, e: E) -> R { return v.visitA(price, e); }
	}
	case B(price: int) {
		def accept<R, E>(v: Transform<R, E>, e: E) -> R { return v.visitB(price, e); }
	}
}

class PriceList { }
class Precious extends PriceList { }
class Jewels { }

class Thief extends Transform<Jewels, PriceList> {
	def visitA(price: int, e: PriceList) -> Jewels { return null; }
	def visitB(price: int, e: PriceList) -> Jewels { return null; }
}

var a = S.A(1100);
var b = S.B(1200);
var thief  = Thief.new();

def test() {
	var j1: Jewels = a.accept(thief, Precious.new());
	var j2: Jewels = b.accept(thief, Precious.new());
}
