//@execute (0, 1)=2; (1, 2)=1; (2, 1)=0

// Test variant dispatch tables with abstract method

type A {
	case X(x:int) {
		def f() -> int { return x + 1; }
	}
	case Y(y: int) {
		def f() -> int { return y - 1; }
	}
	case Z(z: int) {
		def f() -> int { return 0; }
	}

	def f() -> int;
}


def main(which: int, val: int) -> int {
	var a: A;
	match (which) {
		0 => { a = A.X(val);  }
		1 => { a = A.Y(val);  }
		_ => { a = A.Z(val);  }
	}
	return a.f();
}
