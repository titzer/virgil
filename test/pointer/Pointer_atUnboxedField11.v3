//@execute 1=0; 6=0

// define a variant type that has a few different sizes of unboxed fields
type V(v8: u8, v16: u16, v32: u32, v64: u64) #unboxed { }

class C {
	var clsv: V;
	new(v8: u8, v16: u16, v32: u32, v64: u64) {
		clsv = V(v8, v16, v32, v64);
	}
}

var gclsv = C.new(1, 2, 3, 4);

def main(arg: int) -> u32 {
	var diff: u32 = 0;

	// check values before doing anything, using pointer loads
	diff +=
		(u32.view(Pointer.atField(gclsv.clsv.v8 ).load< u8>()) ^ 1) +
		(u32.view(Pointer.atField(gclsv.clsv.v16).load<u16>()) ^ 2) +
		(u32.view(Pointer.atField(gclsv.clsv.v32).load<u32>()) ^ 3);
	if (Pointer.SIZE == 8) diff += (u32.view(Pointer.atField(gclsv.clsv.v64).load<u64>()) ^ 4);

	return diff;
}
