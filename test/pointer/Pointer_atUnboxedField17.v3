//@execute 1=0; 6=0

// define a variant type that has a few different sizes of unboxed fields
type V(v8: u8, v16: u16, v32: u32, v64: u64) #unboxed { }

class C {
	var clsv: V;
	new(v8: u8, v16: u16, v32: u32, v64: u64) {
		clsv = V(v8, v16, v32, v64);
	}
}

component Comp {
	var compclsv = C.new(1, 2, 3, 4);
}

def main(arg: int) -> u32 {
	var diff: u32 = 0;

	// change values with cmpswp
	Pointer.atField(Comp.compclsv.clsv.v8 ).cmpswp< u8>(1, u8 .!(101 + arg));
	Pointer.atField(Comp.compclsv.clsv.v16).cmpswp<u16>(2, u16.!(102 + arg));
	Pointer.atField(Comp.compclsv.clsv.v32).cmpswp<u32>(3, u32.!(103 + arg));

	if (Pointer.SIZE == 8)
		Pointer.atField(Comp.compclsv.clsv.v64).cmpswp<u64>(4, u64.!(104 + arg));

	// check values after cmpswp, using regular accesses
	diff +=
		(u32.view(Comp.compclsv.clsv.v8 ) ^ u32.!(101 + arg)) +
		(u32.view(Comp.compclsv.clsv.v16) ^ u32.!(102 + arg)) +
		(u32.view(Comp.compclsv.clsv.v32) ^ u32.!(103 + arg));

	if (Pointer.SIZE == 8) diff += (u32.view(Comp.compclsv.clsv.v64) ^ u32.!(104 + arg));

	// reset values for succeeding runs
	Pointer.atField(Comp.compclsv.clsv.v8 ).store< u8>(1);
	Pointer.atField(Comp.compclsv.clsv.v16).store<u16>(2);
	Pointer.atField(Comp.compclsv.clsv.v32).store<u32>(3);

	if (Pointer.SIZE == 8) Pointer.atField(Comp.compclsv.clsv.v64).store<u64>(4);

	return diff;
}
