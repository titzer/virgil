//@execute 1=0; 6=0

// define a variant type that has a few different sizes of unboxed fields
type V(v8: u8, v16: u16, v32: u32, v64: u64) #unboxed { }

component Comp {
	var compv = V(1, 2, 3, 4);
}

def main(arg: int) -> u32 {
	var diff: u32 = 0;

	// store new values, using pointer stores
	Pointer.atField(Comp.compv.v8 ).store< u8>(u8 .!(201 + arg));
	Pointer.atField(Comp.compv.v16).store<u16>(u16.!(202 + arg));
	Pointer.atField(Comp.compv.v32).store<u32>(u32.!(203 + arg));
	if (Pointer.SIZE == 8) Pointer.atField(Comp.compv.v64).store<u64>(u64.!(204 + arg));

	// check the new values, using regular accesses
	diff +=
		(u32.view(Comp.compv.v8 ) ^ u32.!(201 + arg)) +
		(u32.view(Comp.compv.v16) ^ u32.!(202 + arg)) +
		(u32.view(Comp.compv.v32) ^ u32.!(203 + arg));

	if (Pointer.SIZE == 8) diff += (u32.view(Comp.compv.v64) ^ u32.!(204 + arg));

	return diff;
}
