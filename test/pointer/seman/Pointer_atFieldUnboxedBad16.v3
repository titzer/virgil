//@seman=TypeError @ 33:17
// tests possible issues related to unboxed field and parameterized types

type A(i: int, j: int) #unboxed { }
type B(a: A, b: u32) #unboxed { }
type C(c: int) #unboxed { }
type U(d: int) { }

class P { }
class Q extends P { }
class R<T> extends Q {
	var x: T;
	var y: int;
	new(x, y) { }
	def getPtrx() -> Pointer {
		// legality depends on what T is
		return Pointer.atField(x);
	}
}
class S extends R<B> {
	def getPtr() -> Pointer {
		return Pointer.atField(x.a.i);
	}
	new(x: B, y: int) super(x, y) { }
}

component Comp {
	var cb: B;
}

def main(n: int) -> int {
	Comp.cb = B(A(n, n+1), u32.view(n+2));
	var p = Pointer.atField(Comp.cb.a);
	return p.load<int>();
}
