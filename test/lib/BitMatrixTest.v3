// Copyright 2023 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = LibTests.register("BitMatrix", _, _);
def X = [
	T("[]", test_setval),
	T("set", test_set),
	T("clear", test_clear),
	T("clearRow", test_clearRow),
	T("setRow", test_setRow),
	T("flipRow", test_flipRow),
	T("or", test_or),
	T("and", test_and),
	T("copy", test_copy),
	T("range", test_range),
	T("apply", test_apply),
	T("grow", test_grow),
	T("widen", test_widen),
	T("count", test_count),
	T("row", test_row),
	T("last", test_last),
	()
];

def assertSetval(t: LibTest, rownums: int, colnums: int, row: int, col: int, expect: bool) {
	var b = BitMatrix.new(rownums, colnums);
	b[row, col] = expect;
	t.assert(b[row, col] == expect);
}
def test_setval(t: LibTest) {
	// test the []= method of BitMatrix
	def p = assertSetval(t, _, _, _, _, _);
	p(1, 10, 0, 0, true);
	p(1, 10, 0, 0, false);
	for (i < 3) {
		p(3, 32 * i + 1, 0, 32 * i, true);
		p(3, 32 * i + 1, 0, 32 * i, false);
		p(3, 32 * i + 32, 2, 32 * i, true);
		p(3, 32 * i + 32, 2, 32 * i, false);
	}
}
def test_set(t: LibTest) {
	var a = BitMatrix.new(2, 10);
	for (i < 5) {
		t.assert(!a.set(0, i*2));
		t.assert(a.set(0, i*2));
		t.assert(a[0, i*2]);
	}
}
def test_clear(t: LibTest) {
	var a = BitMatrix.new(2, 10);
	for (i < 5) {
		a[0, i*2] = true;
		t.assert(a.clear(0, i*2));
		t.assert(!a.clear(0, i*2));
		t.assert(!a[0, i*2]);
	}
}
def test_clearRow(t: LibTest) {
	var a = BitMatrix.new(2, 10);
	a[0,3] = true;
	a[1,8] = true;
	a[1,9] = true;
	a.clearRow(0);
	for (i < 10) t.assert(!a[0, i]);
	a.clearRow(1);
	for (i < 10) t.assert(!a[1, i]);
}
def assertSetRow(t: LibTest, m: BitMatrix, width: int, row: int) {
	m.setRow(row);
	for (i < width) t.assert(m[row, i]);
}
def test_setRow(t: LibTest) {
	def p = assertSetRow(t, _, _, _);
	
	var a = BitMatrix.new(2, 10);
	p(a, 10, 0);
	a[1,1] = true;
	p(a, 10, 1);

	var b = BitMatrix.new(2, 32);
	p(b, 32, 0);
	for (i = 3; i < 15; i++) b[1, i] = true;
	p(b, 32, 1);

	var c = BitMatrix.new(2, 62);
	p(c, 62, 1);
}
def test_flipRow(t: LibTest) {
	var a = BitMatrix.new(1, 10);
	a.flipRow(0);
	for (i < 10) t.assert(a[0, i]);
	a.flipRow(0);
	for (i < 10) t.assert(!a[0, i]);
	for (i < 5) a[0, i*2] = true;
	a.flipRow(0);
	for (i < 5) {
		t.assert(!a[0, i*2]);
		t.assert(a[0, i*2+1]);
	}
	a.flipRow(0);
	for (i < 5) {
		t.assert(a[0, i*2]);
		t.assert(!a[0, i*2+1]);
	}
}
def test_or(t: LibTest) {
	var a = BitMatrix.new(2, 10);
	a[0, 0] = true;
	a[1, 1] = true;
	a[1, 2] = true;
	a.or(0, 0);
	t.assert(a[0, 0]);
	for (i = 1; i < 10; i++) t.assert(!a[0, i]);

	a.or(0, 1);
	for (i < 3) t.assert(a[0, i]);
	for (i = 3; i < 10; i++) t.assert(!a[0, i]);
	
	var b = BitMatrix.new(2, 62);
	for (i < 31) b[1, i*2] = true;
	b.or(0, 1);
	for (i < 31) {
		t.assert(b[0, i*2]);
		t.assert(!b[0, i*2+1]);
	}
}
def test_and(t: LibTest) {
	var a = BitMatrix.new(2, 62);
	for (i < 32) a[0, i] = true;
	a.and(0, 0);
	for (i < 32) t.assert(a[0, i]);
	for (i = 32; i < 62; i++) t.assert(!a[0, i]);

	a.and(1, 0);
	for (i < 62) t.assert(!a[1, i]);

	for (i < 32) a[1, i] = true;
	a.and(1, 0);
	for (i < 32) t.assert(a[1, i]);
	for (i = 32; i < 62; i++) t.assert(!a[1, i]);
}
def test_copy(t: LibTest) {
	var a = BitMatrix.new(2, 10);
	for (i < 5) a[0, i] = true;
	a.copy(1, 0);
	for (i < 5) t.assert(a[1, i]);
	for (i = 5; i < 10; i++) t.assert(!a[0, i]);

	var b = BitMatrix.new(4, 62);
	for (i < 31) {
		b[0, i*2] = true;
		b[2, i*2] = true;
	}
	b.copy(0, 1);
	for (i < 62) t.assert(!b[0, i]);
	b.copy(0, 2);
	for (i < 31) t.assert(b[0, i*2]);
	b.copy(3, 0);
	for (i < 31) t.assert(b[3, i*2]);
}
def test_range(t: LibTest) {
	var a = BitMatrix.new(3, 12);
	var b = a.range(0, 3);
	t.asserteq(3, b.numrows);
	t.asserteq(12, b.numcols);
	for (i < 3) for (j < 12) t.assert(!b[i, j]);
	
	for (i < 5) a[1, i] = true;
	var c = a.range(0, 3);
	t.asserteq(3, c.numrows);
	t.asserteq(12, c.numcols);
	for (i < 12) {
		t.assert(!c[0, i]);
		t.assert(!c[2, i]);
	}
	for (i < 5) t.assert(c[1, i]);
	for (i = 5; i < 12; i++) t.assert(!c[1, i]);

	var d = a.range(1, 2);
	t.asserteq(1, d.numrows);
	t.asserteq(12, d.numcols);
	for (i < 5) t.assert(d[0, i]);
	for (i = 5; i < 12; i++) t.assert(!d[0, i]);
}
def f(i: int, v: Vector<int>) {
	v.put(i);
}
def test_apply(t: LibTest) {
	var a = BitMatrix.new(2, 12);
	var v = Vector<int>.new();
	a.apply(0, f, v);
	t.asserteq(0, v.length);
	for (i < 5) a[0, i*2] = true;
	a.apply(0, f, v);
	t.asserteq(5, v.length);
	for (i < 5) t.asserteq(i*2, v[i]);
}
def test_grow(t: LibTest) {
	var a = BitMatrix.new(0, 12);
	t.asserteq(0, a.numrows);
	a.grow(5);
	t.assert(a.numrows == 5);
	a.grow(5);
	t.assert(a.numrows == 5);
	a.grow(10);
	t.assert(a.numrows == 10);
}
def test_widen(t: LibTest) {
	var a = BitMatrix.new(0, 0);
	t.asserteq(0, a.numcols);
	a.widen(5);
	t.assert(a.numcols >= 5);
	a.widen(10);
	t.assert(a.numcols >= 10);

	var b = BitMatrix.new(2, 5);
	t.asserteq(5, b.numcols);
	b.widen(3);
	t.assert(b.numcols >= 3);
	b.widen(5);
	t.assert(b.numcols >= 5);
	b.widen(10);
	t.assert(b.numcols >= 10);
	b.widen(10);
	t.assert(b.numcols >= 10);
}
def test_count(t: LibTest) {
	var a = BitMatrix.new(1, 62);
	t.asserteq(0, a.count(0));
	for (i < 31) a[0, i*2] = true;
	t.asserteq(31, a.count(0));
	for (i < 31) a[0, i*2+1] = true;
	t.asserteq(62, a.count(0));
}
def test_row(t: LibTest) {
	var a = BitMatrix.new(2, 12);
	var b = a.row(0);
	t.asserteq(a, b.matrix);
	t.asserteq(0, b.index);
	t.asserteq(a.row(0), b);
	var c = a.row(1);
	t.asserteq(a, c.matrix);
	t.asserteq(1, c.index);
	t.asserteq(a.row(1), c);
	var d = a.row(2);
	t.asserteq(BitMatrixRow.!(null), d);
	var e = a.row(3);
	t.asserteq(BitMatrixRow.!(null), e);
}
def test_last(t: LibTest) {
	var a = BitMatrix.new(2, 12);
	var b = a.last();
	t.asserteq(a, b.matrix);
	t.asserteq(1, b.index);
	t.asserteq(a.last(), b);
	var c = BitMatrix.new(0, 12);
	var d = c.last();
	t.asserteq(BitMatrixRow.!(null), d);
}
