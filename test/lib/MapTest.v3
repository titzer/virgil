// Copyright 2023 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = LibTests.register("Map", _, _);
def X = [
	T("get", test_get),
	T("set", test_set),
	T("has", test_has),
	T("apply", test_apply),
	T("remove", test_remove),
	()
];

class Counter {
	var x = 0;
	def add<K, V>(a: K, b: V) { x++; }
	def reset() { x = 0; } 
}

def int_map<V>() -> HashMap<int, V> {
	return HashMap<int, V>.new(int.!, int.==);
}

def int2str(v: int) -> string {
	return StringBuilder.new().putd(v).extract();
}

def size<K, V>(m: HashMap<K, V>) -> int {
	var c = Counter.new();
	m.apply(c.add);
	return c.x;
}

def test_get(t: LibTest) {
	var c = Counter.new();
	var i_s = int_map<string>();
	var s_s = Strings.newMap<string>();
	var arr = Array<string>.new(100);
	for (i < 100) {
		var s = int2str(i);
		i_s[i] = s;
		s_s[s] = s;
		arr[i] = s;
	}
	for (i < 100) {
		var s = arr[i];
		t.asserteq(i_s[i], s);
		t.asserteq(s_s[s], s);
	}
}

def test_set(t: LibTest) {
	var i_s = int_map<string>();
	var s_s = Strings.newMap<string>();
	var arr = Array<string>.new(100);
	for (i < 100) {
		var s = int2str(i);
		i_s[i] = s;
		s_s[s] = s;
		arr[i] = s;
	}
	for (i < 100) {
		var s = arr[i];
		t.asserteq(i_s[i], s);
		t.asserteq(s_s[s], s);
	}
	t.asserteq(size(i_s), 100);
	t.asserteq(size(s_s), 100);
	for (i < 100) {
		var s = arr[i];
		i_s[i] = "foo";
		s_s[s] = "bar";
	}
	for (i < 100) {
		var s = arr[i];
		t.assert_string(i_s[i], "foo");
		t.assert_string(s_s[s], "bar");
	}
	t.asserteq(size(i_s), 100);
	t.asserteq(size(s_s), 100);
}

def test_has(t: LibTest) {
	var i_s = int_map<string>();
	for (i < 100) i_s[i] = int2str(i);
	for (i < 100) t.assert(i_s.has(i));
	for (i = 100; i < 200; i++) t.assert(!i_s.has(i));
}

def test_apply(t: LibTest) {
	var i_s = int_map<Counter>();
	for (i < 100) i_s[i] = Counter.new();
	i_s.apply(inc_counter);
	for (i < 100) t.asserteq(i_s[i].x, i);
}

def inc_counter(k: int, c: Counter) { c.x += k; }

def test_remove(t: LibTest) {
	var i_i = int_map<int>();
	i_i[12] = 24;
	t.assert(i_i.remove(12));
	t.assert(!i_i.remove(12));
	t.assert(!i_i.has(12));
	t.asserteq(size(i_i), 0);
	t.asserteq(i_i[12], 0);

	i_i[1] = 10;
	i_i[2] = 20;
	t.assert(!i_i.remove(0));
	t.assert(i_i.remove(1));
	t.assert(!i_i.remove(1));
	t.assert(!i_i.has(1));
	t.assert(i_i.has(2));
	t.asserteq(size(i_i), 1);
	t.assert(i_i.remove(2));
	t.assert(!i_i.has(2));
	t.asserteq(size(i_i), 0);

	i_i[1] = 0;
	i_i[2] = 4;
	t.assert(i_i.has(1));
	t.assert(i_i.remove(2));

	for (i < 100) i_i[i] = i * 2;
	for (i < 100) t.assert(i_i.remove(i));
	for (i = 100; i < 200; i++) t.assert(!i_i.remove(i));
	t.asserteq(size(i_i), 0);
}
