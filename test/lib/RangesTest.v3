// Copyright 2024 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = LibTests.register("Ranges", _, _);
def X = [
	T("reverse_int", test_reverse_int),
	T("reverse_string", test_reverse_string),
	T("sort_ints", test_sort_ints),
	T("sort_floats", test_sort_floats),
	T("sort_strings", test_sort_strings),
	T("sort_perm3", test_sort_perm3),
	T("sort_perm5", test_sort_perm5),
	T("lastIndexOf", test_lastIndexOf),
	T("skipLeading", test_skipLeading),
	T("skipTrailing", test_skipTrailing),
	T("binsrch_eq", test_binsrch_eq),
	T("binsrch_float", test_binsrch_float),
	T("binsrch_dup", test_binsrch_dup),
	T("binsrch_lteq", test_binsrch_lteq),
	T("binsrch_gteq", test_binsrch_gteq),
	T("start_end", test_start_end),
	()
];

def putall<T>(buf: StringBuilder, r: Range<T>) -> StringBuilder {
	buf.puts("[");
	for (i < r.length) {
		if (i > 0) buf.csp();
		var v = r[i];
		if (string.?(v)) buf.putsq(string.!(v));
		else buf.putd(v);
	}
	return buf.puts("]");
}

def report<T>(t: LibTest, expected: Range<T>, got: Range<T>) {
	var buf = StringBuilder.new().puts("expected: ");
	putall(buf, expected);
	buf.puts(", got ");
	putall(buf, got);
	t.fail(buf.toString());
}

def assert_func_in_place<T>(t: LibTest, func: Range<T> -> void, expected: Range<T>, input: Range<T>) {
	func(input);
	var got = input; // reverse is done in place

	if (got.length != expected.length) return t.fail("wrong result length");
	for (i < expected.length) if (expected[i] != got[i]) return report(t, expected, got);
}

def test_reverse_int(t: LibTest) {
	def test = assert_func_in_place<int>(t, Ranges.reverse, _, _);

	test([], []);
	test([1], [1]);
	test([3, 4], [4, 3]);
	test([-44, -55, -66], [-66, -55, -44]);
}

def test_reverse_string(t: LibTest) {
	def test = assert_func_in_place<string>(t, Ranges.reverse, _, _);
	def foo = "foo", bar = "bar";
	def ganz = "ganz", geschichte = "geschichte", pflanz = "pflanz", gebaut = "gebaut", danke = "danke", dir = "dir", sehr = "sehr";

	test([], []);
	test([bar], [bar]);
	test([foo, bar], [bar, foo]);
	test(
		[ganz, geschichte, pflanz, gebaut, danke, dir, sehr],
		[sehr, dir, danke, gebaut, pflanz, geschichte, ganz]
	);
}

def test_sort_ints(t: LibTest) {
	def test = assert_func_in_place<int>(t, Ranges.quicksort(_, int.<), _, _);

	test([], []);
	test([1], [1]);
	test([-1, 1], [1, -1]);
	test([-1, 1], [-1, 1]);
	test([-3, -2], [-3, -2]);
	test([-3, -2], [-2, -3]);
	test([0, 1, 2], [2, 0, 1]);
	test([0, 1, 2], [1, 2, 0]);
	test([0, 1, 2, 3], [3, 2, 0, 1]);
	test([0, 1, 2, 3, 4], [3, 2, 0, 1, 4]);
	test([0, 1, 2, 3, 4, 5], [5, 3, 2, 0, 1, 4]);
}

def test_sort_floats(t: LibTest) {
	def test = assert_func_in_place<float>(t, Ranges.quicksort(_, float.<), _, _);

	test([], []);
	test([1], [1]);
	test([1, 1.1f], [1, 1.1f]);
	test([-1.1f, 1], [-1.1f, 1]);
	test([1, float.infinity], [1, float.infinity]);
	test([1, float.infinity], [float.infinity, 1]);

	test([0, 1, 2], [2, 0, 1]);
	test([0, 1, 2], [1, 2, 0]);
	test([0, 1, 2, 3], [3, 2, 0, 1]);
	test([0, 1, 2, 3, 4], [3, 2, 0, 1, 4]);
	test([0, 1, 2, 3, 4, 5], [5, 3, 2, 0, 1, 4]);
}

def test_sort_strings(t: LibTest) {
	def test = assert_func_in_place<string>(t, Ranges.quicksort(_, Strings.asciiLt), _, _);
	def foo = "foo", bar = "bar";
	def ganz = "ganz", geschichte = "geschichte", pflanz = "pflanz", gebaut = "gebaut", danke = "danke", dir = "dir", sehr = "sehr";

	test([], []);
	test([foo], [foo]);
	test([bar, foo], [foo, bar]);
	test([bar, danke, dir, ganz, gebaut, geschichte, pflanz],
		[gebaut, bar, dir, ganz, geschichte, pflanz, danke]);
}

def test_sort_perm3(t: LibTest) {
	def test = assert_func_in_place<i64>(t, Ranges.quicksort(_, i64.<), _, _);
	def X = 0L, Y = 0x1_0000_0000L, Z = 0x1000_0000_0000_0000L;
	def expected = [X, Y, Z];

	test(expected, [X, Y, Z]);
	test(expected, [X, Z, Y]);
	test(expected, [Y, X, Z]);
	test(expected, [Y, Z, X]);
	test(expected, [Z, X, Y]);
	test(expected, [Z, Y, X]);
}

def test_sort_perm5(t: LibTest) {
	def sorted = [0uL, 1uL, 2uL, 3uL, 4uL];
	def sort = Ranges.quicksort(_, u64.<);
	def check = assert_func_in_place<u64>(t, sort, sorted, _);
	Permuter.new(sorted).genDupTo(check);
}

class Permuter<T>(set: Range<T>) {
	private def storage = Array<T>.new(set.length);

	def genAll() -> Array<Array<T>> {
		var vec = Vector<Array<T>>.new();
		enumRec(0, 0, dupToA(_, vec.put));
		return vec.extract();
	}
	def genTo<R>(f: Range<T> -> R) {
		enumRec(0, 0, f);
	}
	def genDupTo<R>(f: Range<T> -> R) {
		enumRec(0, 0, dupTo(_, f));
	}
	private def enumRec<R>(pos: int, mask: int, f: Range<T> -> R) {
		if (pos == set.length) return void(f(storage));
		for (i < set.length) {
			var bit = 1 << u5.!(i);
			if ((mask & bit) == 0) {
				storage[pos] = set[i];
				enumRec(pos + 1, mask | bit, f);
			}
		}
	}
	private def dupToA<R>(r: Range<T>, f: Array<T> -> R) {
		f(Ranges.dup(r));
	}
	private def dupTo<R>(r: Range<T>, f: Range<T> -> R) {
		f(Ranges.dup(r));
	}
}

def test_skipLeading(t: LibTest) {
	def SKIP = Ranges.skipLeading<byte>;
	def WS = Strings.isWhiteSpace;

	t.assert_string("", Ranges.dup(SKIP("", WS)));
	t.assert_string("", Ranges.dup(SKIP("    ", WS)));
	t.assert_string("", Ranges.dup(SKIP("\n\n  ", WS)));
	t.assert_string("abcde", Ranges.dup(SKIP("  abcde", WS)));
	t.assert_string("abcde  ", Ranges.dup(SKIP("abcde  ", WS)));
	t.assert_string("abcde  ", Ranges.dup(SKIP("\nabcde  ", WS)));
	t.assert_string("ab  cde  ", Ranges.dup(SKIP("  ab  cde  ", WS)));
}

def test_lastIndexOf(t: LibTest) {
	def IOF = Ranges.lastIndexOf<byte>;

    t.asserteq(0, IOF("/abc", '/'));
    t.asserteq(1, IOF("a/abc", '/'));
    t.asserteq(4, IOF("/abc/", '/'));
    t.asserteq(-1, IOF("abc", '/'));
}

def test_skipTrailing(t: LibTest) {
	def SKIP = Ranges.skipTrailing<byte>;
	def WS = Strings.isWhiteSpace;
	
	t.assert_string("", Ranges.dup(SKIP("", WS)));
	t.assert_string("", Ranges.dup(SKIP("    ", WS)));
	t.assert_string("", Ranges.dup(SKIP("\n\n  ", WS)));
	t.assert_string("  abcde", Ranges.dup(SKIP("  abcde", WS)));
	t.assert_string("abcde", Ranges.dup(SKIP("abcde  ", WS)));
	t.assert_string("\nabcde", Ranges.dup(SKIP("\nabcde  ", WS)));
	t.assert_string("  ab  cde", Ranges.dup(SKIP("  ab  cde  ", WS)));
}

def test_binsrch_eq(t: LibTest) {
	def test = t.asserteq<int>;
	def input = [-2, -1, 0, 2, 3];
	def search = Ranges.binarySearchEq(input, _, int.<);

	test(-1, search(-3));
	test(0, search(-2));
	test(1, search(-1));
	test(2, search(0));
	test(-1, search(1));
	test(3, search(2));
	test(4, search(3));
	test(-1, search(4));
}

def test_binsrch_float(t: LibTest) {
	def test = t.asserteq<int>;
	def input = [-2.1f, -1.1f, 0f, 2f, 3f, float.infinity];
	def search = Ranges.binarySearchEq(input, _, float.<);

	test(-1, search(-3));
	test(0, search(-2.1f));
	test(1, search(-1.1f));
	test(2, search(0f));
	test(-1, search(1f));
	test(3, search(2f));
	test(4, search(3f));
	test(-1, search(4f));
}

def test_binsrch_dup(t: LibTest) {
	def test = t.asserteq<int>;
	def search = Ranges.binarySearchEq(_, _, int.<);

	test(-1, search([], 3));
	test(-1, search([0], 3));
	test(-1, search([0, 1], 3));
	test(-1, search([0, 1, 4], 3));
	test(-1, search([0, 1, 4, 4], 3));
	test(-1, search([0, 1, 2, 4, 4], 3));
	test(-1, search([0, 1, 2, 2, 4, 4], 3));
	test(-1, search([0, 1, 2, 2, 2, 4, 4], 3));
	test(-1, search([0, 1, 1, 2, 2, 2, 4, 4], 3));
	test(-1, search([0, 1, 1, 1, 2, 2, 2, 4, 4], 3));

	test(0, search([1], 1));
	test(0, search([1, 1], 1));
	test(0, search([1, 1, 1], 1));
	test(0, search([1, 1, 1, 1], 1));

	test(1, search([0, 1], 1));
	test(1, search([0, 1, 1], 1));
	test(1, search([0, 1, 1, 1], 1));
	test(1, search([0, 1, 1, 1, 1], 1));

	test(2, search([0, 0, 1], 1));
	test(2, search([0, 0, 1, 1], 1));
	test(2, search([0, 0, 1, 1, 1], 1));
	test(2, search([0, 0, 1, 1, 1, 1], 1));
}

def test_binsrch_lteq(t: LibTest) {
	def test = t.asserteq<int>;
	def search = Ranges.binarySearchLtEq(_, _, int.<);

	test(-1, search([], 3));
	test(0, search([0], 3));
	test(1, search([0, 1], 3));
	test(1, search([0, 1, 4], 3));
	test(1, search([0, 1, 4, 4], 3));
	test(2, search([0, 1, 2, 4, 4], 3));
	test(3, search([0, 1, 2, 2, 4, 4], 3));
	test(4, search([0, 1, 2, 2, 2, 4, 4], 3));
	test(5, search([0, 1, 1, 2, 2, 2, 4, 4], 3));
	test(6, search([0, 1, 1, 1, 2, 2, 2, 4, 4], 3));

	test(4, search([0, 1, 2, 4, 4], 5));
	test(5, search([0, 1, 2, 2, 4, 4], 5));
	test(6, search([0, 1, 2, 2, 2, 4, 4], 5));

	test(3, search([0, 1, 2, 3, 4, 4], 3));
	test(3, search([0, 1, 3, 3, 4, 4], 3));
	test(5, search([0, 1, 2, 3, 3, 3, 4], 3));

	test(0, search([3, 4, 4], 3));
	test(1, search([3, 3, 4, 4], 3));
	test(2, search([3, 3, 3, 4], 3));

	test(0, search([2, 4, 4], 3));
	test(1, search([2, 2, 4, 4], 3));
	test(2, search([2, 2, 2, 4], 3));

	test(-1, search([2, 4, 4], 1));
	test(-1, search([2, 2, 4, 4], 1));
	test(-1, search([2, 2, 2, 4], 1));

	test(2, search([2, 4, 4], 5));
	test(3, search([2, 2, 4, 4], 5));
	test(3, search([2, 2, 2, 4], 5));
}

def test_binsrch_gteq(t: LibTest) {
	def test = t.asserteq<int>;
	def search = Ranges.binarySearchGtEq(_, _, int.<);

	test(0, search([], 3));
	test(1, search([0], 3));
	test(2, search([0, 1], 3));
	test(2, search([0, 1, 4], 3));
	test(2, search([0, 1, 4, 4], 3));
	test(3, search([0, 1, 2, 4, 4], 3));
	test(4, search([0, 1, 2, 2, 4, 4], 3));
	test(5, search([0, 1, 2, 2, 2, 4, 4], 3));
	test(6, search([0, 1, 1, 2, 2, 2, 4, 4], 3));
	test(7, search([0, 1, 1, 1, 2, 2, 2, 4, 4], 3));

	test(5, search([0, 1, 2, 4, 4], 5));
	test(6, search([0, 1, 2, 2, 4, 4], 5));
	test(7, search([0, 1, 2, 2, 2, 4, 4], 5));

	test(3, search([0, 1, 2, 3, 4, 4], 3));
	test(2, search([0, 1, 3, 3, 4, 4], 3));
	test(3, search([0, 1, 2, 3, 3, 3, 4], 3));

	test(0, search([3, 4, 4], 3));
	test(0, search([3, 3, 4, 4], 3));
	test(0, search([3, 3, 3, 4], 3));

	test(1, search([2, 4, 4], 3));
	test(2, search([2, 2, 4, 4], 3));
	test(3, search([2, 2, 2, 4], 3));

	test(0, search([2, 4, 4], 1));
	test(0, search([2, 2, 4, 4], 1));
	test(0, search([2, 2, 2, 4], 1));

	test(3, search([2, 4, 4], 5));
	test(4, search([2, 2, 4, 4], 5));
	test(4, search([2, 2, 2, 4], 5));
}

def test_start_end(t: LibTest) {
	def T = t.assertz(true, _);
	def F = t.assertz(false, _);

	T(Ranges.endsWith("", ""));
	T(Ranges.endsWith("abc", ""));
	F(Ranges.endsWith("", "a"));
	T(Ranges.startsWith("", ""));
	T(Ranges.startsWith("abc", ""));
	F(Ranges.startsWith("", "a"));

	T(Ranges.endsWith("abc", "abc"));
	T(Ranges.endsWith("abc", "bc"));
	T(Ranges.endsWith("abc", "c"));
	T(Ranges.startsWith("abc", "abc"));
	T(Ranges.startsWith("abc", "ab"));
	T(Ranges.startsWith("abc", "a"));

	F(Ranges.endsWith("hello ", "hello"));
	F(Ranges.startsWith(" hello", "hello"));

	T(Ranges.endsWith<int>([1], []));
	T(Ranges.startsWith<int>([1], []));
	T(Ranges.endsWith<int>([1], [1]));
	T(Ranges.startsWith<int>([1], [1]));
	T(Ranges.endsWith<int>([1, 2, 3], [1, 2, 3]));
	T(Ranges.startsWith<int>([1, 2, 3], [1, 2, 3]));
}
