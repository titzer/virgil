// Copyright 2019 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = LibTests.register("Strings", _, _);
def X = (
	T("parseLiteral", test_parseLiteral),
	T("parseLiteralHex", test_parseLiteralHex),
	T("parseLiteralErr", test_parseLiteralErr),
	T("asciiLt", test_asciiLt),
	T("strip", test_strip),
	T("split", test_split),
	T("splitDefault", test_splitDefault),
	()
);

def assertString(t: LibTest, status: int, expected: string, str: string, pos: int) {
	var r = Strings.parseLiteral(str, pos);
	if (r.0 != status) t.fail(Strings.format3("string error in \"%s\", expected status = %d, got %d", str, status, r.0));
	if (r.0 <= 0) return;
	if (!Arrays.equal(expected, r.1)) t.fail(Strings.format3("string error in \"%s\", expected val = \"%s\", got \"%s\"", str, expected, r.1));
}

def test_parseLiteral(t: LibTest) {
	def ok = assertString(t, _, _, _, 0);
	def okP = assertString(t, _, _, _, _);

	ok(0, null, "");
	ok(2, "", "\"\"");
	ok(3, "\'", "\"\'\"");
	ok(3, "\'", "\"\'\"");
	ok(4, "\'", "\"\\\'\"");
	ok(4, "a\'", "\"a\'\"");
	ok(5, "a\'", "\"a\\\'\"");
	okP(2, "", "..\"\"..", 2);
	okP(4, "xA", "..\"xA\"..", 2);
	ok(28, "abcdefghijklmnopqrstuvwxyz", "\"abcdefghijklmnopqrstuvwxyz\"");

	var r = "c", buf = "\"c\"";
	for (i = 32; i < 128; i++) {
		var ch = byte.view(i);
		match (ch) {
			'\'', '\"', '\\' => continue;
		}
		r[0] = ch;
		buf[1] = ch;
		ok(3, r, buf);
	}

	ok(4, "\'", "\"\\\'\"");
	ok(4, "\"", "\"\\\"\"");
	ok(4, "\\", "\"\\\\\"");

}

def test_parseLiteralHex(t: LibTest) {
	def ok = assertString(t, _, _, _, 0);
	var r = "c", buf = "\"\\xCC\"";
	for (i < 255) {
		buf[3] = Chars.hexMap_u[(i >> 4) & 0xF];
		buf[4] = Chars.hexMap_l[i & 0xF];
		r[0] = byte.view(i);
		ok(6, r, buf);
	}
}

def test_parseLiteralErr(t: LibTest) {
	def err = assertString(t, _, null, _, 0);
	def errP = assertString(t, _, null, _, _);

	err(-1, "\"");
	err(-2, "\"a");
	err(-4, "\"a\\\'");

	err(-2, "\"\'");
	err(-2, "\"\\xZ\"");
	err(-3, "\"\\xF\"");

	err(-2, "\"\\g\"");
	err(-2, "\"\\*\"");

	var buf = "\"c\"";
	for (i = 32; i < 128; i++) {
		var ch = byte.view(i);
		if (ch == '\"') continue;
		buf[1] = ch;
		errP(0, buf, 1);
	}

	for (i = 128; i < 256; i++) {
		var ch = byte.view(i);
		buf[1] = ch;
		err(-1, buf);
	}

}

def test_asciiLt(t: LibTest) {
	def empty = "", a = "a", b = "b", aa = "aa", bb = "bb";
	def LT = Strings.asciiLt;

	t.assertz(false, LT(null,  null));
	t.assertz(true,  LT(null,  empty));
	t.assertz(false, LT(empty, null));
	t.assertz(false, LT(empty, empty));

	t.assertz(false, LT(a, a));
	t.assertz(true,  LT(a, b));
	t.assertz(false, LT(b, a));
	t.assertz(false, LT(b, b));

	t.assertz(false, LT(aa, a));
	t.assertz(true,  LT(a, aa));
	t.assertz(false, LT(b, aa));
	t.assertz(true,  LT(aa, b));

	t.assertz(true,  LT("aaaaaa", "aazaaa"));
	t.assertz(false, LT("BBBBBB", "BBABBB"));
}

def test_strip(t: LibTest) {
	def STRIP = Strings.strip;

	t.assert_string("", STRIP(""));
	t.assert_string("", STRIP("    "));
	t.assert_string("", STRIP("\n\n  "));
	t.assert_string("abcde", STRIP("  abcde"));
	t.assert_string("abcde", STRIP("abcde  "));
	t.assert_string("abcde", STRIP("\nabcde  "));
	t.assert_string("ab  cde", STRIP("  ab  cde  "));
}

def test_split(t: LibTest) {
	def SPLIT = Strings.split;
	def EQ = Arrays.allTrue(_, _, Strings.equal);

	// basic
	t.assert(EQ([""], SPLIT("", "", -1)));
	t.assert(EQ(["a"], SPLIT("a", "", 0)));
	t.assert(EQ(["aaaa"], SPLIT("aaaa", "a", 0)));

	// single char match
	// (redirects to splitOnChar)
	t.assert(EQ(["", "", "aa"], SPLIT("aaaa", "a", 2)));
	t.assert(EQ(["b", "bb"], SPLIT("babb", "a", 3)));
	t.assert(EQ(["babb", ""], SPLIT("babbc", "c", -1)));

	// multi-char match
	t.assert(EQ(["b", "b"], SPLIT("babb", "ab", 3)));

	// with whitespace
	t.assert(EQ(["b ", "b"], SPLIT("b abb", "ab", 3)));

	// match full string
	t.assert(EQ(["", ""], SPLIT("babb", "babb", 3)));
}

def test_splitDefault(t: LibTest) {
	// (redirects to splitOnWhiteSpace)
	def SPLIT = Strings.split;
	def EQ = Arrays.allTrue(_, _, Strings.equal);

	// Default separator
	var P = "", M = 1;
	t.assert(EQ(["aaaa"], SPLIT("aaaa", P, M)));
	t.assert(EQ([], SPLIT("    ", P, M)));
	t.assert(EQ(["a"], SPLIT("a  ", P, M)));
	t.assert(EQ(["a", "b"], SPLIT("a  b", P, M)));
	t.assert(EQ(["a", "b"], SPLIT("a \nb", P, M)));
	t.assert(EQ(["a", "b c"], SPLIT("a \nb c", P, M)));
	t.assert(EQ(["a", "b c\n"], SPLIT("a \nb c\n", P, M)));
	t.assert(EQ(["a", "b", "c\n"], SPLIT("a \nb c\n", P, M + 1)));
	t.assert(EQ(["a", "b", "c"], SPLIT("a \nb c\n", P, M + 2)));

	// Default separator AND maxsplit
	M = -1;
	t.assert(EQ(["aaaa"], SPLIT("aaaa", P, M)));
	t.assert(EQ([], SPLIT("    ", P, M)));
	t.assert(EQ(["a"], SPLIT("a  ", P, M)));
	t.assert(EQ(["a", "b"], SPLIT("a  b", P, M)));
	t.assert(EQ(["a", "b"], SPLIT("a \nb", P, M)));
	t.assert(EQ(["a", "b", "c"], SPLIT("a \nb c", P, M)));
	t.assert(EQ(["a", "b", "c"], SPLIT("a \nb c\n", P, M)));
}
