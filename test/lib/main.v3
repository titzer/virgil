// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Unit tests for library code register themselves here.
// Note that we don't use the unit test framework from the library
// itself, since that is the code under test.
component LibTests {
	var list: LibTest;
	def register(prefix: string, name: string, func: LibTest -> void) {
		list = LibTest.new(prefix, name, func, list);
	}
}

// For simplicity, each test is instantiated only once and has only pass/fail state.
class LibTest(prefix: string, name: string, func: LibTest -> void, tail: LibTest) {
	var ok: bool = true;

	def fail(msg: string) {
		if (!ok) return;
		ok = false;
		System.puts("##-fail (");
		System.puts(msg);
		System.puts(")\n");
		if (fatal) System.error("TestError", msg);
	}
	def fail1<T>(msg: string, a: T) {
		fail(Strings.format1(msg, a));
	}
	def fail2<T, U>(msg: string, a: T, b: U) {
		fail(Strings.format2(msg, a, b));
	}
	def fail3<T, U, V>(msg: string, a: T, b: U, c: V) {
		fail(Strings.format3(msg, a, b, c));
	}
	def assert(z: bool) -> this {
		if (!z) fail("expected true");
	}
	def assertz(expected: bool, got: bool) -> this {
		if (expected != got) fail(if(expected, "expected true", "expected false"));
	}
	def asserteq<T>(a: T, b: T) -> this {
		if (a != b) fail("expected equal");
	}
	def assertne<T>(a: T, b: T) -> this {
		if (a == b) fail("expected not equal");
	}
	def assertT<F, T>(v: F) -> this {
		if (!T.?(v)) fail("expected type");
	}
	def assert_string(expected: string, got: string) -> this {
		if (!equal(expected, got)) fail("expected string");
	}
	def assert_bytes(expected: Range<byte>, got: Range<byte>) -> this {
		if (!equalr(expected, got)) fail("expected bytes");
	}
	def equal<T>(a: Array<T>, b: Array<T>) -> bool {
		if (a == b) return true;
		if (a == null) return false;
		if (b == null) return false;
		if (a.length != b.length) return false;
		for (i < a.length) if (a[i] != b[i]) return false;
		return true;
	}
	def equalr<T>(a: Range<T>, b: Range<T>) -> bool {
		if (a == b) return true;
		if (a.length != b.length) return false;
		for (i < a.length) if (a[i] != b[i]) return false;
		return true;
	}
	def assertk(expected: string, got: Range<byte>) {
		if (got == null) return fail("expected string, got null");
		if (got.length < expected.length) return fail("not enough data");
		for (i < expected.length) {
			if (expected[i] != got[i]) {
				return fail(Strings.format3("expected data[%d] == %x, got %x", i, expected[i], got[i]));
			}
		}
	}
}

// A utility to intercept an argument passed to a function.
class Collector<T> {
	var got: T;
	var count = 0;

	def func<R>(x: T, result: R) -> R {
		funcv(x);
		return result;
	}
	def func0<R>(x: T) -> R {
		var result: R;
		funcv(x);
		return result;
	}
	def funcv(x: T) {
		count++;
		got = x;
	}
}

var fatal = false;
def main(args: Array<string>) -> int {
	for (a in args) setFatal(a);

	var count = 0;
	for (t = LibTests.list; t != null; t = t.tail) count++;

	System.puts("##>");
	System.puti(count);
	System.puts(" lib tests\n");
	var fail = false;
	for (t = LibTests.list; t != null; t = t.tail) {
		System.puts("##+");
		System.puts(t.prefix);
		System.puts(":");
		System.puts(t.name);
		System.ln();

		t.func(t);

		if (t.ok) System.puts("##-ok\n");
		else fail = true;
	}
	return if(fail, 1, 0);
}
def setFatal(a: string) {
	var f = "-fatal";
	if (a.length != f.length) return;
	for (i < a.length) if (a[i] != f[i]) return;
	fatal = true;
}