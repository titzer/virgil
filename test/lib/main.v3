// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Unit tests for library code register themselves here.
// Note that we don't use the unit test framework from the library
// itself, since that is the code under test.
component LibTests {
	var list: LibTest;
	def register(prefix: string, name: string, fun: LibTest -> void) {
		list = LibTest.new(prefix, name, fun, list);
	}
}

// For simplicity, each test is instantiated only once and has only pass/fail state.
class LibTest(prefix: string, name: string, fun: LibTest -> void, tail: LibTest) {
	var ok: bool = true;

	def fail(msg: string) {
		if (!ok) return;
		ok = false;
		System.puts("##-fail (");
		System.puts(msg);
		System.puts(")\n");
		if (fatal) System.error("TestError", msg);
	}
	def fail1<T>(msg: string, a: T) {
		fail(msg); // TODO: format {a}
	}
	def fail2<T, U>(msg: string, a: T, b: U) {
		fail(msg); // TODO: format {a} and {b}
	}
	def fail3<T, U, V>(msg: string, a: T, b: U, c: V) {
		fail(msg); // TODO: format {a} and {b} and {c}
	}
	def assert(z: bool) -> this {
		if (!z) fail("expected true");
	}
	def asserteq<T>(a: T, b: T) -> this {
		if (a != b) fail("expected equal");
	}
	def assertne<T>(a: T, b: T) -> this {
		if (a == b) fail("expected not equal");
	}
	def assertT<F, T>(v: F) -> this {
		if (!T.?(v)) fail("expected type");
	}
	def assert_string(expected: string, got: string) -> this {
		if (!equal(expected, got)) fail("expected string");
	}
	def equal<T>(a: Array<T>, b: Array<T>) -> bool {
		if (a == b) return true;
		if (a == null) return false;
		if (b == null) return false;
		if (a.length != b.length) return false;
		for (i < a.length) if (a[i] != b[i]) return false;
		return true;
	}
	def assertk(expected: string, got: Array<byte>, goffset: int) {
		if (got == null) return fail("expected string, got null");
		if (got.length < (goffset + expected.length)) return fail("not enough data");
		for (i < expected.length) {
			if (expected[i] != got[goffset + i]) {
				return fail(Strings.format3("expected data[%d] == %x, got %x", i, expected[i], got[goffset + i]));
			}
		}
	}
}

var fatal = false;
def main(args: Array<string>) -> int {
	for (a in args) setFatal(a);

	var count = 0;
	for (t = LibTests.list; t != null; t = t.tail) count++;

	System.puts("##>");
	System.puti(count);
	System.puts(" lib tests\n");
	var fail = false;
	for (t = LibTests.list; t != null; t = t.tail) {
		System.puts("##+");
		System.puts(t.prefix);
		System.puts(":");
		System.puts(t.name);
		System.ln();

		t.fun(t);

		if (t.ok) System.puts("##-ok\n");
		else fail = true;
	}
	return if(fail, 1, 0);
}
def setFatal(a: string) {
	var f = "-fatal";
	if (a.length != f.length) return;
	for (i < a.length) if (a[i] != f[i]) return;
	fatal = true;
}