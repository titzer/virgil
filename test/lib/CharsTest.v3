// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = LibTests.register("Chars", _, _);
def X = [
	T("parseLiteral", test_parseLiteral),
	T("is", test_is),
	()
];

def assertLiteral(t: LibTest, status: int, val: byte, str: string, pos: int) {
	var r = Chars.parseLiteral(str[pos ...]);
	if (r.0 != status) t.fail(Strings.format3("literal error in \"%s\", expected status = %d, got %d", str, status, r.0));
	if (r.0 <= 0) return;
	if (r.1 != val) t.fail(Strings.format3("literal error in \"%s\", expected val = %d, got %d", str, val, r.1));
}

def test_parseLiteral(t: LibTest) {
	def p = assertLiteral(t, _, _, _, _);
	var buf = " ";
	for (c < 255) {
		buf[0] = byte.view(c);
		p(-1, 0, buf, 0);
	}
	var ok =".\'c\'@";
	for (c in "abcdefghijklmnop012349ABCDEFG!@#$%^&*()[{]};:,<.>/?`~") {
		ok[2] = c;
		p(3, c, ok, 1);
	}
	var esc = "\'\\c\'";
	for (t in [
		('r', '\r'),
		('t', '\t'),
		('n', '\n'),
		('\"', '\"'),
		('\'', '\''),
		('\\', '\\')]) {
		esc[2] = t.0;
		p(4, t.1, esc, 0);
	}

	p(-2, 0, "\'\'", 0);
	p(-1, 0, "\"\'", 0);
	p(-2, 0, "\'\"", 0);
	p(-3, 0, "\'\\\'", 0);

	p(6, 0x78, "\'\\x78\'", 0);
	p(6, 0xaa, "\'\\xaa\'", 0);
	p(6, 0xF1, "\'\\xF1\'", 0);
	p(-6, 0, "\'\\x78A\'", 0);
	p(-4, 0, "\'\\x7Z\'", 0);
}

def test_is(t: LibTest) {
	for (i < 128) {
		var ch = byte.view(i);
		if (ch >= '0' && ch <= '9') {
			t.assert(Chars.isHex(ch));
			t.assert(Chars.isDecimal(ch));
		} else {
			t.assert(!Chars.isDecimal(ch));
		}
		if (ch >= 'a' && ch <= 'f') {
			t.assert(Chars.isHex(ch));
		}
		if (ch >= 'A' && ch <= 'F') {
			t.assert(Chars.isHex(ch));
		}
	}
	t.assert(!Chars.isHex('g'));
	t.assert(!Chars.isHex('G'));

	for (ch in "ghijklmnopqrstuvwxyzGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()[{]};:,<.>/?`~") {
		t.assert(!Chars.isHex(ch));
		t.assert(!Chars.isDecimal(ch));
	}
	for (i = 128; i < 255; i++) {
		var ch = byte.view(i);
		t.assert(!Chars.isHex(ch));
		t.assert(!Chars.isDecimal(ch));
	}
}
