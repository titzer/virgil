// Copyright 2025 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = LibTests.register("Types", _, _);
def X = (
	T("prim_eq0", test_prim_eq0),
	T("prim_eq1", test_prim_eq1),
	T("tuple_eq0", test_tuple_eq0),
	T("func_eq0", test_func_eq0),
	T("array_eq0", test_array_eq0),
	T("user_eq0", test_user_eq0),
	T("misc_eq0", test_misc_eq0),
	T("int_query0", test_int_query0),
	T("prim_query0", test_prim_query0),
	// TODO: tuple and function queries
	()
);

private class A { }
private class C { }
private class D extends C { }
private type T { }
private type U { }
private enum E { X, Y }
private enum F { Z, W }


def test_prim_eq0(t: LibTest) {
	t.assert(Types.equal<bool, bool>());
	t.assert(Types.equal<byte, byte>());
	t.assert(Types.equal<void, void>());
	t.assert(Types.equal<int, int>());
	t.assert(Types.equal<short, short>());
	t.assert(Types.equal<long, long>());
}

def test_prim_eq1(t: LibTest) {
	t.assert(!Types.equal<int, bool>());
	t.assert(!Types.equal<int, byte>());
	t.assert(!Types.equal<int, u32>());
	t.assert(!Types.equal<int, long>());

	t.assert(!Types.equal<bool, int>());
	t.assert(!Types.equal<byte, int>());
	t.assert(!Types.equal<u32, int>());
	t.assert(!Types.equal<long, int>());
}

def test_tuple_eq0(t: LibTest) {
	t.assert(Types.equal<(bool, bool), (bool, bool)>());
	t.assert(Types.equal<(byte, byte), (byte, byte)>());
	t.assert(Types.equal<(bool, int), (bool, int)>());
	t.assert(Types.equal<(long, u32), (long, u32)>());
	t.assert(Types.equal<(long, void), (long, void)>());
	t.assert(Types.equal<(void, void), (void, void)>());

	t.assert(!Types.equal<(bool, byte), (bool, bool)>());
	t.assert(!Types.equal<(byte, byte), (bool, byte)>());
	t.assert(!Types.equal<(int, int), (bool, int)>());
	t.assert(!Types.equal<(long, u32), (u64, u32)>());
	t.assert(!Types.equal<(void, void), (long, void)>());
	t.assert(!Types.equal<(void, long), (void, void)>());
}

def test_func_eq0(t: LibTest) {
	t.assert(Types.equal<(bool -> bool), (bool -> bool)>());
	t.assert(Types.equal<(byte -> byte), (byte -> byte)>());
	t.assert(Types.equal<(bool -> int), (bool -> int)>());
	t.assert(Types.equal<(long -> u32), (long -> u32)>());
	t.assert(Types.equal<(long -> void), (long -> void)>());
	t.assert(Types.equal<(void -> void), (void -> void)>());

	t.assert(!Types.equal<(bool -> byte), (bool -> bool)>());
	t.assert(!Types.equal<(byte -> byte), (bool -> byte)>());
	t.assert(!Types.equal<(int -> int), (bool -> int)>());
	t.assert(!Types.equal<(long -> u32), (u64 -> u32)>());
	t.assert(!Types.equal<(void -> void), (long -> void)>());
	t.assert(!Types.equal<(void -> long), (void -> void)>());
}

def test_array_eq0(t: LibTest) {
	t.assert(Types.equal<Array<bool>, Array<bool>>());
	t.assert(Types.equal<Array<byte>, Array<byte>>());
	t.assert(Types.equal<Array<void>, Array<void>>());
	t.assert(Types.equal<Array<int>, Array<int>>());
	t.assert(Types.equal<Array<short>, Array<short>>());
	t.assert(Types.equal<Array<long>, Array<long>>());

	t.assert(!Types.equal<Array<int>, Array<bool>>());
	t.assert(!Types.equal<Array<int>, Array<byte>>());
	t.assert(!Types.equal<Array<int>, Array<u32>>());
	t.assert(!Types.equal<Array<int>, Array<long>>());

	t.assert(!Types.equal<Array<bool>, Array<int>>());
	t.assert(!Types.equal<Array<byte>, Array<int>>());
	t.assert(!Types.equal<Array<u32>, Array<int>>());
	t.assert(!Types.equal<Array<long>, Array<int>>());
}

def test_user_eq0(t: LibTest) {
	t.assert(Types.equal<A, A>());
	t.assert(Types.equal<C, C>());
	t.assert(Types.equal<D, D>());
	t.assert(Types.equal<E, E>());
	t.assert(Types.equal<F, F>());
	t.assert(Types.equal<T, T>());
	t.assert(Types.equal<U, U>());

	t.assert(!Types.equal<A, C>());
	t.assert(!Types.equal<C, D>());
	t.assert(!Types.equal<D, E>());
	t.assert(!Types.equal<E, F>());
	t.assert(!Types.equal<F, T>());
	t.assert(!Types.equal<T, U>());
	t.assert(!Types.equal<U, A>());
}

def test_misc_eq0(t: LibTest) {
	t.assert(!Types.equal<bool, (bool -> bool)>());
	t.assert(!Types.equal<bool, (bool, bool)>());
	t.assert(!Types.equal<bool, (bool, bool, bool)>());
	t.assert(!Types.equal<(bool, bool), (bool -> bool)>());
	t.assert(!Types.equal<(bool, byte), (bool, byte, bool)>());
	t.assert(!Types.equal<Array<(bool, bool)>, (bool -> bool)>());
	t.assert(!Types.equal<Array<(bool, bool)>, Array<(bool -> bool)>>());
}

def test_int_query0(t: LibTest) {
	t.assert(Types.query<int, int>(0));
	t.assert(Types.query<int, byte>(11));
	t.assert(Types.query<int, u32>(22));
	t.assert(Types.query<int, i64>(33));

	t.assert(Types.query<long, int>(0));
	t.assert(Types.query<long, byte>(11));
	t.assert(Types.query<long, u32>(22));
	t.assert(Types.query<long, i64>(33));

	t.assert(!Types.query<int, u32>(-11));
	t.assert(!Types.query<int, byte>(-11));
	t.assert(!Types.query<int, u48>(-22));
	t.assert(!Types.query<int, u64>(-33));
}

def test_prim_query0(t: LibTest) {
	t.assert(!Types.query<int, bool>(0));
	t.assert(!Types.query<int, void>(11));
	t.assert(Types.query<int, double>(22));
	t.assert(Types.query<int, float>(33));

	t.assert(!Types.query<bool, int>(false));
	t.assert(!Types.query<void, int>());
	t.assert(!Types.query<double, int>(22.3d));
	t.assert(!Types.query<float, int>(33.1f));
}
//TODO: test casts
