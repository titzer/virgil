// Copyright 2025 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = LibTests.register("PrefixTrie", _, _);
def X = [
	T("str0", test_str0),
	T("int0", test_int0),
	T("u2perm4a", test_u2perm4a),
	T("u2perm4b", test_u2perm4b),
	T("str1", test_str1),
	T("apply0", test_apply0),
	()
];

def inc = int.+(1, _);

def test_str0(t: LibTest) {
	def STRINGS = ["", "a", "ab", "abc", "ac", "abcd", "abd"];
	var pt = PrefixTrie<byte, int>.new();

	for (i < 3) {
		for (s in STRINGS) {
			var result = pt[s];
			t.asserteq(0, result);
		}
	}

	for (i < 3) {
		for (s in STRINGS) {
			var result = pt.update(s, inc);
			t.asserteq(i + 1, result);
		}
	}

	for (i < 3) {
		for (s in STRINGS) {
			var result = pt[s];
			t.asserteq(3, result);
		}
	}
}

def test_int0(t: LibTest) {
	def INTS: Array<Array<int>> = [[], [0], [1], [0, 1], [1, 2], [0, 1, 2]];
	var pt = PrefixTrie<int, int>.new();

	for (i < 3) {
		for (seq in INTS) {
			pt[seq] = i + 1;
		}
	}

	for (seq in INTS) {
		var result = pt[seq];
		t.asserteq(3, result);
	}
}

def forall_u2perm4(f: Range<u2> -> void) {
	var buf = Array<u2>.new(4);
	for (i < 4) {
		buf[0] = u2.view(i);
		for (j < 4) {
			buf[1] = u2.view(j);
			for (k < 4) {
				buf[2] = u2.view(k);
				for (m < 4) {
					buf[3] = u2.view(m);
					f(buf);
				}
			}
		}
	}
}

def set_u2(reverse: bool, pt: PrefixTrie<u2, Array<u2>>, r: Range<u2>) {
	if (reverse) {
		r = Ranges.dup(r);
		Ranges.reverse(r);
	}
	pt[r] = Ranges.dup(r);
}

def check_u2(reverse: bool, t: LibTest, pt: PrefixTrie<u2, Array<u2>>, r: Range<u2>) {
	if (reverse) {
		r = Ranges.dup(r);
		Ranges.reverse(r);
	}
	var result = pt[r];
	t.assert(t.equalr(r, result));
}

def test_u2perm4a(t: LibTest) {
	var pt = PrefixTrie<u2, Array<u2>>.new();
	forall_u2perm4(set_u2(false, pt, _));
	forall_u2perm4(check_u2(false, t, pt, _));
}

def test_u2perm4b(t: LibTest) {
	var pt = PrefixTrie<u2, Array<u2>>.new();
	forall_u2perm4(set_u2(true, pt, _));
	forall_u2perm4(check_u2(true, t, pt, _));
}

def test_str1(t: LibTest) {
	var VALS = [
		("aaaaaa", 100),
		("aaabbb", 102),
		("aaa", -999),
		("accbbb", -88997766),
		("accbbbe", 44444),
		("aaabcc", 555555),
		("aaabbc", 6666),
		("bbb", -1)
	];

	for (reverse in [false, true]) {
		var pt = PrefixTrie<byte, int>.new();

		if (reverse) {
			var r = Ranges.dup(VALS);
			Ranges.reverse(r);
			for (v in r) pt[v.0] = v.1;
		} else {
			for (v in VALS) pt[v.0] = v.1;
		}

		for (v in VALS) {
			var result = pt[v.0];
			t.asserteq(v.1, result);
		}
	}
}

def put_copy<K, V>(vec: Vector<(Array<K>, V)>, pair: (Range<K>, V)) {
	vec.put((Ranges.dup(pair.0), pair.1));
}

def test_apply0(t: LibTest) {
	var VALS = [
		("aaaaaa", 100),
		("aaabbb", 102),
		("aaa", -999),
		("accbbb", -88997766),
		("accbbbe", 44444),
		("aaabcc", 555555),
		("aaabbc", 6666),
		("bbb", -1)
	];

	// setup
	var pt = PrefixTrie<byte, int>.new();
	for (v in VALS) pt[v.0] = v.1;

	// iterate
	var got = Vector<(string, int)>.new();
	pt.apply(put_copy(got, _));

	// verify
	t.asserteq(VALS.length, got.length);

	for (i < got.length) {
		var g = got[i];
		var found = false;
		
		for (e in VALS) {
			if (Ranges.equal(e.0, g.0) && e.1 == g.1) { found = true; break; }
		}
		t.assert(found);
	}
}
