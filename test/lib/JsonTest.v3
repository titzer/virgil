def T = LibTests.register("Json", _, _);
def X = [
	T("render_literals", render_literals),
	()
];

def assert_parse_result(t: LibTest, src: string, expected: JsonValue) {
	
}

def assert_render_result(t: LibTest, src: JsonValue, expected: string) {
	var output = src.render(StringBuilder.new()).toString();
	if (!Strings.equal(output, expected)) {
		t.fail(Strings.format2("expected \"%s\", got \"%s\"", expected, output));
	}
}

def S = JsonValue.String;
def N = JsonValue.Number;
def B = JsonValue.Bool;
def Null = JsonValue.Null;
def A = JsonValue.JArray;
def O = JsonValue.JObject;
def NO_MAP = HashMap<string, JsonValue>.new(Strings.hash, Strings.equal);

def render_literals(t: LibTest) {
	var test = assert_render_result(t, _, _);

	test(N(-16), "-16");
	test(N(0), "0");
	test(N(72), "72");
	test(N(65536), "65536");

	test(S(""), "\"\"");
	test(S("abc"), "\"abc\"");
	test(S("abc\n"), "\"abc\\n\"");
	test(S("abc\""), "\"abc\\\"\"");

	test(Null, "null");
	test(B(true), "true");
	test(B(false), "false");
	
	test(A([]), "[]");
	test(A([A([A([A([A([])])])])]), "[[[[[]]]]]");
	test(O(NO_MAP), "{}");
	test(A([O(NO_MAP)]), "[{}]");
}
