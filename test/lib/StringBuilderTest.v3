// Copyright 2019 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = LibTests.register("StringBuilder", _, _);
def X = [
	T("i32", test_i32),
	T("u32", test_u32),
	T("i64", test_i64),
	T("u64", test_u64),
	T("putd", test_putd),
	T("putx", test_putx),
	T("putc", test_putc),
	T("put1", test_put1),
	T("put2", test_put2),
	T("put3", test_put3),
	T("putk", test_putk),
	T("send1", test_send1),
	T("send2", test_send2),
	T("repeat", test_repeat),
	T("rjustify", test_rjustify),
	T("center", test_center),
	T("resize", test_resize),
	T("putdf_i32", test_putdf_i32),
	T("putdf_u32", test_putdf_u32),
	T("putdf_i64", test_putdf_i64),
	T("putdf_u64", test_putdf_u64),
	T("putdf_i64_big", test_putdf_i64_big),
	T("putdf_u64_big", test_putdf_u64_big),
	()
];

def assertOk<T>(t: LibTest, f: (StringBuilder, T) -> StringBuilder, val: T, expected: string) {
	var b = StringBuilder.new();
	f(b, val);
	t.assert_string(expected, b.extract());
}

def test_i32(t: LibTest) {
	def ok = assertOk(t, StringBuilder.putd_i32, _, _);

	ok(0, "0");
	ok(1, "1");
	ok(9, "9");
	ok(93, "93");
	ok(99, "99");
	ok(100, "100");
	ok(101, "101");

	ok(-1, "-1");
	ok(-8, "-8");
	ok(-83, "-83");
	ok(-100, "-100");

	ok(47, "47");
	ok(220, "220");
	ok(13334, "13334");
	ok(197207, "197207");
	ok(121173247, "121173247");

	ok(2147483646, "2147483646");
	ok(2147483647, "2147483647");

	ok(-57, "-57");
	ok(-260, "-260");
	ok(-13534, "-13534");
	ok(-198207, "-198207");
	ok(-121273247, "-121273247");

	ok(-2147483647, "-2147483647");
	ok(-2147483648, "-2147483648");
}

def test_u32(t: LibTest) {
	def ok = assertOk(t, StringBuilder.putd_u32, _, _);

	ok(0, "0");
	ok(1, "1");
	ok(8, "8");
	ok(73, "73");
	ok(99, "99");
	ok(100, "100");
	ok(101, "101");

	ok(77, "77");
	ok(227, "227");
	ok(13337, "13337");
	ok(197209, "197209");
	ok(121173246, "121173246");

	ok(2147483646u, "2147483646");
	ok(2147483647u, "2147483647");
	ok(2147483648u, "2147483648");
	ok(2147483649u, "2147483649");

	ok(3000000000u, "3000000000");
	ok(4001002003u, "4001002003");

 	ok(4294967294u, "4294967294");
 	ok(4294967295u, "4294967295");
}

def test_i64(t: LibTest) {
	def ok = assertOk(t, StringBuilder.putd_i64, _, _);

	ok(0, "0");
	ok(1, "1");
	ok(99, "99");
	ok(100, "100");
	ok(101, "101");

	ok(-1, "-1");
	ok(-8, "-8");
	ok(-83, "-83");
	ok(-100, "-100");

	ok(47, "47");
	ok(220, "220");
	ok(13334, "13334");
	ok(197207, "197207");
	ok(121173247, "121173247");

	ok(2147483646L, "2147483646");
	ok(2147483647L, "2147483647");
	ok(2147483648L, "2147483648");
	ok(2147483649L, "2147483649");

	ok(6001002003004L, "6001002003004");
	ok(7001002003004005L, "7001002003004005");
	ok(9223372036854775807L, "9223372036854775807");

	ok(-57, "-57");
	ok(-260, "-260");
	ok(-13534, "-13534");
	ok(-198207, "-198207");
	ok(-121273247, "-121273247");

	ok(-2147483647L, "-2147483647");
	ok(-2147483648L, "-2147483648");
	ok(-2147483649L, "-2147483649");
	ok(-2147483650L, "-2147483650");

	ok(-4000000000000L, "-4000000000000");
	ok(-9001002003004005L, "-9001002003004005");
	ok(-9223372036854775807L, "-9223372036854775807");
	ok(-9223372036854775808L, "-9223372036854775808");
}

def test_u64(t: LibTest) {
	def ok = assertOk(t, StringBuilder.putd_u64, _, _);

	ok(0, "0");
	ok(1, "1");
	ok(8, "8");
	ok(73, "73");
	ok(99, "99");
	ok(100, "100");
	ok(101, "101");

	ok(77, "77");
	ok(227, "227");
	ok(13337, "13337");
	ok(197209, "197209");
	ok(121173246, "121173246");

	ok(2147483646u, "2147483646");
	ok(2147483647u, "2147483647");
	ok(2147483648u, "2147483648");
	ok(2147483649u, "2147483649");

	ok(2147483648uL, "2147483648");

	ok(6001002003004uL, "6001002003004");
	ok(7001002003004005uL, "7001002003004005");
	ok(9223372036854775807uL, "9223372036854775807");

	ok(3000000000u, "3000000000");
	ok(4001002003u, "4001002003");

 	ok(4294967294u, "4294967294");
 	ok(4294967295u, "4294967295");

	ok(18446744073709551615uL, "18446744073709551615");
}

def test_putd(t: LibTest) {
	def ok_i32 = assertOk(t, StringBuilder.putd<i32>, _, _);
	ok_i32(34, "34");
	ok_i32(-3455, "-3455");

	def ok_u32 = assertOk(t, StringBuilder.putd<u32>, _, _);
	ok_u32(341u, "341");
	ok_u32(34556u, "34556");

	def ok_i64 = assertOk(t, StringBuilder.putd<i64>, _, _);
	ok_i64(634, "634");
	ok_i64(-63455, "-63455");

	def ok_u64 = assertOk(t, StringBuilder.putd<u64>, _, _);
	ok_u64(7341u, "7341");
	ok_u64(734556u, "734556");

	def ok_u8 = assertOk(t, StringBuilder.putd<u8>, _, _);
	ok_u8(73, "73");
	ok_u8(253, "253");
}

def test_putx(t: LibTest) {
	def ok_u16 = assertOk(t, StringBuilder.putx<u16>, _, _);
	ok_u16(34, "22");
	ok_u16(347, "015B");

	def ok_i32 = assertOk(t, StringBuilder.putx<i32>, _, _);
	ok_i32(34, "22");
	ok_i32(347, "015B");
	ok_i32(-3455, "FFFFF281");

	def ok_u32 = assertOk(t, StringBuilder.putx<u32>, _, _);
	ok_u32(34u, "22");
	ok_u32(341u, "0155");
	ok_u32(34556u, "86FC");

	def ok_i64 = assertOk(t, StringBuilder.putx<i64>, _, _);
	ok_i64(0x11FF334455667788, "11FF334455667788");
	ok_i64(-63455, "FFFF0821");
	ok_i64(-6345599999, "FFFFFFFE85C5D401");

	def ok_u64 = assertOk(t, StringBuilder.putx<u64>, _, _);
	ok_u64(6673419999977u, "00000611C6D41AE9");
	ok_u64(557345533233336u, "0001FAE71E8688B8");

	def ok_u8 = assertOk(t, StringBuilder.putx<u8>, _, _);
	ok_u8(73, "49");
	ok_u8(253, "FD");
}

def test_putc(t: LibTest) {
	def ok = assertOk(t, StringBuilder.putc, _, _);
	ok('c', "c");
	ok('1', "1");
	ok('\x67', "\x67");
	ok('\r', "\r");
	ok('\n', "\n");
	ok('\\', "\\");
}

def p1<T>(t: LibTest, fmt: string, arg: T, expected: string) {
	assertOk(t, StringBuilder.put1<T>(_, fmt, _), arg, expected);
}

def p2<T, U>(t: LibTest, fmt: string, arg1: T, arg2: U, expected: string) {
	assertOk(t, StringBuilder.put2<T, U>(_, fmt, arg1, _), arg2, expected);
}

def p3<T, U, V>(t: LibTest, fmt: string, arg1: T, arg2: U, arg3: V, expected: string) {
	assertOk(t, StringBuilder.put3<T, U, V>(_, fmt, arg1, arg2, _), arg3, expected);
}

def test_put1(t: LibTest) {
	def oki = p1<int>(t, _, _, _);
	oki("", 1, "");
	oki("%", 1, "%");
	oki("%%", 5, "%");
	oki("aa%%ff", 5, "aa%ff");
	oki("%d", 1, "1");
	oki("a%d", 6, "a6");
	oki("%dx", 99, "99x");

	oki("%% %d", 77, "% 77");
	oki("%d%%x", -99, "-99%x");
	oki("%d%%x ", -92, "-92%x ");
	oki("%d%%", -9123, "-9123%");
	oki("${%d}", 40999, "${40999}");
	oki("${%x}", 40999, "${A027}");

	def okl = p1<long>(t, _, _, _);
	okl("${%d}", 40999L, "${40999}");
	okl("${%x}", 40999L, "${A027}");

	def okz = p1<bool>(t, _, _, _);
	okz("%%%z%", true, "%true%");
	okz("%%%z%", false, "%false%");

	def oks = p1<string>(t, _, _, _);
	oks("^^%s@@", "ba\r", "^^ba\r@@");
}

def test_put2(t: LibTest) {
	def okii = p2<int, int>(t, _, _, _, _);
	okii("", 1, 7, "");
	okii("%", 1, 8, "%");
	okii("%d", 1, 9, "1");
	okii("a%d", 6, 33, "a6");
	okii("%dx", 99, 44, "99x");
	okii("a%d %d", 6, -33, "a6 -33");
	okii("%dx ff %d", 99, 44, "99x ff 44");
	okii("%%${%d}@${%d}", 4099, 774, "%${4099}@${774}");
	okii("${%x}@%%${%d}", 4099, 774, "${1003}@%${774}");
	okii("${%d}@${%x}%%", 4099, 774, "${4099}@${0306}%");

	def okil = p2<int, long>(t, _, _, _, _);
	okil("${%x}@${%d}", 4099, 774, "${1003}@${774}");
	okil("${%d}@${%x}", 4099, 774, "${4099}@${0306}");

	def okic = p2<int, byte>(t, _, _, _, _);
	okic("${%d}@${%c}", 4099, '^', "${4099}@${^}");

	def oksu = p2<string, u32>(t, _, _, _, _);
	oksu("${%s}@${%d}", "cat", 44u, "${cat}@${44}");
}

def test_put3(t: LibTest) {
	def okiii = p3<int, int, int>(t, _, _, _, _, _);
	okiii("${%d}@${%x}@${%d}", 4096, 773, 11, "${4096}@${0305}@${11}");
	okiii("%%${%d}@${%x}@${%d}", 4096, 773, 11, "%${4096}@${0305}@${11}");
	okiii("${%d}@%%${%x}@${%d}", 4096, 773, 11, "${4096}@%${0305}@${11}");
	okiii("${%d}@${%x}@${%d}%%", 4096, 773, 11, "${4096}@${0305}@${11}%");
}

def pk(t: LibTest, s: string, start: int, end: int, expected: string) {
	assertOk(t, StringBuilder.putk(_, _, start, end), s, expected);
}

def test_putk(t: LibTest) {
	def ok = pk(t, _, _, _, _);
	ok("here", 1, 2, "e");
	ok("full", 0, 2, "fu");
	ok("junk", 2, 4, "nk");
}

def test_send1(t: LibTest) {
	var buf1 = StringBuilder.new();
	var c = Collector<Range<byte>>.new();
	for (i < 3) buf1.puts("XFi");
	buf1.send(c.funcv);
	t.assert(c.count > 0);
	t.assert(t.equalr(c.got, "XFiXFiXFi"));
}

def test_send2(t: LibTest) {
	var buf1 = StringBuilder.new();
	var buf2 = StringBuilder.new();
	for (i < 3) buf1.puts("XAi");
	buf1.send(buf2.putr);
	t.assert_string(buf2.extract(), "XAiXAiXAi");
}

def test_repeat(t: LibTest) {
	var buf = StringBuilder.new();
	for (i < 3) buf.puts("bri.");
	t.assert_string(buf.extract(), "bri.bri.bri.");
	t.assert_string(buf.extract(), "");
	buf.puts("DRA").putd(77).putc('T');
	t.assert_string(buf.extract(), "DRA77T");
}

def test_rjustify(t: LibTest) {
	var buf = StringBuilder.new();

	buf.rjustify(' ', 1, 5);
	t.assert_string(buf.extract(), "     ");

	buf.puts("foo");
	buf.rjustify('@', 1, 7);
	t.assert_string(buf.extract(), "fo@@@@@@o");

	buf.puts("bar");
	buf.rjustify('*', 4, 4);
	t.assert_string(buf.extract(), "*bar");

	buf.puts("bug");
	buf.rjustify('*', 2, 2);
	t.assert_string(buf.extract(), "bug");
}

def test_center(t: LibTest) {
	var buf = StringBuilder.new();

	buf.center(' ', 1, 5);
	t.assert_string(buf.extract(), "     ");

	buf.puts("foo");
	buf.center('@', 1, 7);
	t.assert_string(buf.extract(), "fo@@@o@@@");

	buf.puts("bar");
	buf.center('*', 4, 4);
	t.assert_string(buf.extract(), "bar*");

	buf.puts("bug");
	buf.center('*', 2, 2);
	t.assert_string(buf.extract(), "bug");
}

def test_resize(t: LibTest) {
	var buf = StringBuilder.new();

	buf.puts("FooBar").resize(3);
	t.assert_string(buf.extract(), "Foo");

	buf.puts("bank_roll");
	buf.resize(4).resize(9);
	t.assert_string(buf.extract(), "bank_roll");


	buf.puts("bank");
	buf.resize(6);
	t.assert_string(buf.extract(), "bank\x00\x00");
}

def assert_m<T>(t: LibTest, expected: string, m: T -> StringBuilder, p: T) {
	t.assert_string(expected, m(p).extract());
}

def test_putdf_i32(t: LibTest) {
	var buf = StringBuilder.new();
	var T = assert_m(t, _, buf.putdf_i32, _);

	T("33.333", (100, 3, 3));
	T("16.66", (100, 6, 2)); // TODO: rounding
	T("-5882.3529", (100000, -17, 4));
	T("-6.800000", (-34, 5, 6));
	T("-22887.57142857", (1762343, -77, 8));

	T("0.500", (1, 2, 3));
	T("0.333", (1, 3, 3));
	T("0.666", (2, 3, 3)); // TODO: rounding
	T("0.250", (1, 4, 3));
	T("0.125", (1, 8, 3));

	T("1.000", (1, 1, 3));
	T("0.000", (0, 5, 3));
	T("2.500", (5, 2, 3));
	T("3.140", (314, 100, 3));
	T("0.999", (999, 1000, 3));

	T("1.000", (999, 999, 3));
	T("10.00", (100, 10, 2));
	T("0.01", (1, 100, 2));
	T("0.10", (10, 100, 2));
	T("0.99", (99, 100, 2));

	T("1", (1, 1, 0));
	T("1", (3, 2, 0)); // TODO: rounding
	T("0", (1, 3, 0)); // 0.333 -> 0
	T("0", (2, 3, 0)); // TODO: rounding
	T("2", (5, 2, 0)); // TODO: rounding

	T("0.000", (1, 9999, 3));
	T("0.001", (15, 9999, 3));
	T("0.010", (100, 9999, 3));

	T("-0.500", (-1, 2, 3));
	T("-0.500", (1, -2, 3));
	T("-0.333", (-1, 3, 3));
	T("0.333", (-1, -3, 3));
	T("-1.000", (-1, 1, 3));

	T("0", (0, 7, 0));
	T("0.0", (0, 7, 1));
	T("0.00", (0, 7, 2));
	T("0.000", (0, 7, 3));

	T("1.010", (1010, 1000, 3));
	T("1.001", (1001, 1000, 3));
	T("1.999", (1999, 1000, 3));
	T("1.99", (1999, 1000, 2)); // TODO: rounds up across decimal

	T("1234.57", (123457, 100, 2));
	T("-1234.57", (-123457, 100, 2));
	T("1234", (123457, 100, 0)); // TODO: rounding
	T("1234", (123456, 100, 0)); // TODO: rounding
	T("1234", (123499, 100, 0)); // TODO: rounding

	T("-2147483648", (-2147483648, 1, 0));
	T("-2147483648.0", (-2147483648, 1, 1));
	T("-2147483648.000", (-2147483648, 1, 3));

	T("2147483647", (2147483647, 1, 0));
	T("2147483647.0", (2147483647, 1, 1));
	T("2147483647.00000", (2147483647, 1, 5));
	T("1073741823", (2147483647, 2, 0));
	
	T("-1073741823", (-2147483647, 2, 0));
	T("-1073741824", (-2147483648, 2, 0));
	T("-107374182.4", (-2147483648, 20, 1));
	T("-10737418.24", (-2147483648, 200, 2));
}

def test_putdf_u32(t: LibTest) {
	var buf = StringBuilder.new();
	var T = assert_m(t, _, buf.putdf_u32, _);

	T("0.000", (0, 1, 3));
	T("0.001", (1, 1000, 3));
	T("1.000", (1, 1, 3));
	T("10.000", (10, 1, 3));
	T("0.250", (1, 4, 3));
	T("0.125", (1, 8, 3));
	T("0.500", (1, 2, 3));
	T("0.666", (2, 3, 3));
	T("0.333", (1, 3, 3));
	T("2.000", (10, 5, 3));
	T("1.250", (5, 4, 3));
	T("1.333", (4, 3, 3));

	T("0.01", (1, 100, 2));
	T("0.10", (10, 100, 2));
	T("0.99", (99, 100, 2));

	T("4294967295.00", (4294967295u, 1u, 2));
	T("1.00", (4294967295u, 4294967295u, 2));
	T("0.00", (0u, 4294967295u, 2));
//TODO	T("0.50", (4294967295u / 2, 4294967295u, 2));

	T("1.000", (1000, 1000, 3));
	T("1000.000", (1000000, 1000, 3));
	T("1000000.000", (1000000000u, 1000, 3));
	T("0.001", (1, 1000, 3));

	T("2147483647.000", (2147483647u, 1, 3));
//TODO	T("2.147", (2147483647u, 1000000000u, 3));
//TODO	T("0.214", (214748364, 1000000000, 3));

	T("42.000", (42000, 1000, 3));
	T("123.456", (123456, 1000, 3));
	T("9876.543", (9876543, 1000, 3));

	T("0.01", (1, 100, 2)); // truncate, no rounding
	T("0.33", (1, 3, 2));
	T("0.66", (2, 3, 2));
	T("3.14", (314, 100, 2));

	T("0", (0, 1, 0));
	T("1", (1, 1, 0));
	T("3", (3, 1, 0));
	T("3", (7, 2, 0)); // 3.5 -> truncated to 3
	T("4", (8, 2, 0));

	T("100000000.000", (4000000000u, 40, 3));
	T("0.999", (999, 1000, 3));
	T("999.000", (999000, 1000, 3));
	T("0.000", (1, 1000000, 3));
	T("1.000", (1000000, 1000000, 3));
}

def test_putdf_i64(t: LibTest) {
	var buf = StringBuilder.new();
	var T = assert_m(t, _, buf.putdf_i64, _);

	T("71.4285", (500, 7, 4));
	T("-24.8888", (-224, 9, 4));
	T("123456789.123", (123456789123, 1000, 3));
	T("2147483647.0000", (2147483647u, 1, 4));
	T("3444555666.777", (3444555666777, 1000, 3));

	T("-4294967296.00", (-4294967296, 1, 2));       // 2^32
	T("-4294967296.00", (4294967296, -1, 2));       // 2^32
	T("-9223.37", (-922337203685, 100000000, 2)); // safe denom
	T("-0.333", (1, -3, 3));
	T("-0.666", (-2, 3, 3));
	T("-999.000", (999000, -1000, 3));
	T("-100000000.000", (-4000000000, 40, 3));
	T("-18446.74", (184467440737, -10000000, 2));
}

def test_putdf_u64(t: LibTest) {
	var buf = StringBuilder.new();
	var T = assert_m(t, _, buf.putdf_u64, _);

	T("1246.285", (8724, 7, 3));
	T("943.264", (8238473, 8734, 3));
	T("114.73812", (8976512387481, 78234781281, 5));
	T("2147483647.00000", (2147483647u, 1, 5));
	T("223444555666.777", (223444555666777, 1000, 3));

	T("4294967296.00", (4294967296u, 1u, 2));       // 2^32
	T("9223.37", (922337203685u, 100000000u, 2)); // safe denom
	T("0.333", (1u, 3u, 3));
	T("0.666", (2u, 3u, 3));
	T("999.000", (999000u, 1000u, 3));
	T("100000000.000", (4000000000u, 40u, 3));
	T("18446.74", (184467440737u, 10000000u, 2));
}

def test_putdf_i64_big(t: LibTest) {
	var buf = StringBuilder.new();
	var T = assert_m(t, _, buf.putdf_i64, _);

	// denom = 9_000_000_000_000_000_000 (> MAX/10)
	T("0.500", (4500000000000000000, 9000000000000000000, 3));
	T("0.750", (6750000000000000000, 9000000000000000000, 3));
	T("0.137", (1234567890123456789, 9000000000000000000, 3));
	T("0.137174210", (1234567890123456789, 9000000000000000000, 9));
	T("0.777", (7000000000000000000, 9000000000000000000, 3));
	T("0.222", (2000000000000000000, 9000000000000000000, 3));
	T("0.999", (8999999999999999999, 9000000000000000000, 3));
	T("1.000", (9000000000000000000, 9000000000000000000, 3));
	T("1.024", (9223372036854775807, 9000000000000000000, 3));

	// Signs with large denom (still slow path via abs(denom))
	T("-0.750", (-6750000000000000000, 9000000000000000000, 3));
	T("-0.750", (6750000000000000000, -9000000000000000000, 3));
	T("-0.999", (-8999999999999999999, 9000000000000000000, 3));
	T("-1.000", (-9000000000000000000, 9000000000000000000, 3));
	T("-0.000", (-1, 9000000000000000000, 3));   // prints "-0.xxx"
}

def test_putdf_u64_big(t: LibTest) {
	var buf = StringBuilder.new();
	var T = assert_m(t, _, buf.putdf_u64, _);

	// denom = 4_000_000_000_000_000_000 (> MAX/10), easy decimals
	T("0.125", (500000000000000000u, 4000000000000000000u, 3));
	T("0.750", (3000000000000000000u, 4000000000000000000u, 3));
	T("1.125", (4500000000000000000u, 4000000000000000000u, 3));
	T("2.500", (10000000000000000000u, 4000000000000000000u, 3));
	T("1.000", (4000000000000000000u, 4000000000000000000u, 3));
	T("0.999", (3999999999999999999u, 4000000000000000000u, 3));
	T("0.000", (1u, 4000000000000000000u, 3));
	T("0.308", (1234567890123456789u, 4000000000000000000u, 3));
	T("0.308641", (1234567890123456789u, 4000000000000000000u, 6));
	T("0.308641972", (1234567890123456789u, 4000000000000000000u, 9));
	T("4.611", (18446744073709551615u, 4000000000000000000u, 3));
	T("4.611686", (18446744073709551615u, 4000000000000000000u, 6));

	// denom = u64::MAX, edge-y but still slow path
	T("1.000", (18446744073709551615u, 18446744073709551615u, 3));
	T("0.500", (9223372036854775808u, 18446744073709551615u, 3));   // ~0.5+
	T("0.499", (9223372036854775807u, 18446744073709551615u, 3));   // ~0.5-
}
