// Copyright 2024 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Copyright 2018 Ulf Adams (see below).

def T = LibTests.register("Floats", _, _);
def X = [
	T("floatToStringDefault", test_f2s_default),
	T("floatToStringDecimalDigits", test_f2s_decimal_digits),
	()
];

// under the current policy, the max length of rendered float
// default render shortest
def FLOAT_MAX_LENGTH: int = 14;

def assertRenderFloat(t: LibTest, hex: int, length: int, expected: string) {
	var a: Array<byte> = Array<byte>.new(FLOAT_MAX_LENGTH);
	var l = Floats.renderFloat(float.view(hex), a, 0);
	if (l != length) t.fail(Strings.format3("float error in \"%s\", expected length = %d, got %d", expected, length, l));
	t.assert_string(expected, Arrays.range(a, 0, length));
}

def assertRenderFloatDecimalDigits(t: LibTest, hex: int, dd: u32, length: int, expected: string) {
	var a: Array<byte> = Array<byte>.new(FLOAT_MAX_LENGTH + int.!(dd));
	var l = Floats.renderFloatDecimalDigits(float.view(hex), dd, a, 0);
	if (l != length) t.fail(Strings.format3("float error in \"%s\", expected length = %d, got %d", expected, length, l));
	t.assert_string(expected, Arrays.range(a, 0, length));
}

def test_f2s_default(t: LibTest) {
	def ok = assertRenderFloat(t, _, _, _);

	// Special cases
	ok(0x7fc00000, 3, "NaN");
	ok(0x7fc00001, 3, "NaN");
	ok(0x7fffffff, 3, "NaN");
	ok(0xffc00000, 4, "-NaN");
	ok(0xffc00001, 4, "-NaN");
	ok(0xffffffff, 4, "-NaN");
	ok(0x7f800000, 8, "Infinity");
	ok(0xff800000, 9, "-Infinity");

	// fixed notation normal cases
	ok(0x449a4000, 6, "1234.0");
	ok(0x3dfbe76d, 5, "0.123");
	ok(0xc5870800, 7, "-4321.0");
	ok(0x48dbba00, 8, "450000.0");

	// fixed/scientific notation edge cases
	ok(0x4b189680, 3, "1E7");
	ok(0x4b18967F, 9, "9999999.0");
	ok(0x3a83126f, 5, "0.001");
	ok(0x3a83126e, 11, "9.999999E-4");

	// scientific notation nomral cases
	ok(0x39e67a1d, 8, "4.396E-4");
	ok(0xBA123456, 13, "-5.5772567E-4");
	ok(0x4E876543, 11, "1.1357802E9");

	ok(0x4D345678, 11, "1.8909786E8");
	ok(0xCE876543, 12, "-1.1357802E9");
	ok(0x50123ABC, 10, "9.813291E9");

	// subnormal
	ok(0x0015e2a4, 12, "2.009849E-39");
	ok(0x803D9F7C, 13, "-5.659177E-39");
	ok(0x006A1B3F, 12, "9.744337E-39");

	// float max/min
	ok(0x7f7fffff, 12, "3.4028235E38");
	ok(0x00000001, 5, "1E-45");

	// rounds to even
	// Based on code by Ulf Adams
	ok(0x4c000004, 10, "3.355445E7");
	ok(0x50061c46, 3, "9E9");
	ok(0x510006a8, 11, "3.436672E10");
  	ok(0x45fd1840, 9, "8099.0312");
	ok(0x48951f84, 9, "305404.12");

	// regression cases for general robustness
	// Based on code by Ulf Adams
	ok(0x63800000, 12, "4.7223665E21");
	ok(0x4b000000, 9, "8388608.0");
	ok(0x4b800000, 11, "1.6777216E7");
	ok(0x4c000001, 11, "3.3554436E7");
	ok(0x4c800b0d, 11, "6.7131496E7");
	ok(0x00d24584, 13, "1.9310392E-38");
	ok(0x800000b0, 9, "-2.47E-43");
	ok(0x00d90b88, 12, "1.993244E-38");
	ok(0x45803f34, 9, "4103.9004");
	ok(0x4f9f24f7, 11, "5.3399997E9");
	ok(0x00424fe2, 10, "6.0898E-39");
	ok(0x3a8722c3, 12, "0.0010310042");
	ok(0x5c800041, 11, "2.882326E17");
	ok(0x5d4cccfb, 11, "9.223404E17");
	ok(0x4c800001, 10, "6.710887E7");
	ok(0x00000007, 5, "1E-44");
	ok(0x57800ed8, 11, "2.816025E14");
	ok(0x5f000000, 11, "9.223372E18");
	ok(0x700000f0, 12, "1.5846086E29");
	ok(0x5f23e9ac, 12, "1.1811161E19");
	ok(0x5e9502f9, 11, "5.368709E18");
	ok(0x5e8012b1, 12, "4.6143166E18");
	ok(0x3c000028, 11, "0.007812537");
	ok(0x60cde861, 13, "1.18697725E20");
	ok(0x03aa2a50, 14, "1.00014165E-36");
	ok(0x43480000, 5, "200.0");
	ok(0x4c000000, 11, "3.3554432E7");

	// corner cases
	// Based on code by Ulf Adams
	ok(0x5D1502F9, 12, "6.7108864E17");
	ok(0x5D9502F9, 12, "1.3421773E18");
	ok(0x5E1502F9, 12, "2.6843546E18");
}

def test_f2s_decimal_digits(t: LibTest) {
	def ok = assertRenderFloatDecimalDigits(t, _, _, _, _);

	// Special cases
	ok(0x7fc00000, 0, 3, "NaN");
	ok(0x7fc00001, 1, 3, "NaN");
	ok(0x7fffffff, 2, 3, "NaN");
	ok(0xffc00000, 3, 4, "-NaN");
	ok(0xffc00001, 4, 4, "-NaN");
	ok(0xffffffff, 5, 4, "-NaN");
	ok(0x7f800000, 6, 8, "Infinity");
	ok(0xff800000, 7, 9, "-Infinity");
	
	// decimal digits matches
	ok(0x3dfbe76d, 3, 5, "0.123");
	ok(0x39e67a1d, 7, 9, "0.0004396");
	ok(0x422fd70a, 2, 5, "43.96");
	ok(0x45896000, 0, 4, "4396");
	ok(0x4cda6b0a, 0, 9, "114514000");

	// decimal digits creates trailing zeros
	ok(0x3a961886, 10, 12, "0.0011451400");
	ok(0x42501eb8, 3, 6, "52.030");
	ok(0x4700e800, 2, 8, "33000.00");

	// decimal digits truncates and rounds half up
	ok(0x3f0a3d71, 0, 1, "1");
	ok(0x401ccccd, 0, 1, "2");
	ok(0x403eb852, 0, 1, "3");
	ok(0x448f2452, 2, 7, "1145.14");
	ok(0x408caf4f, 3, 5, "4.396");
	ok(0x3da11559, 3, 5, "0.079");
}