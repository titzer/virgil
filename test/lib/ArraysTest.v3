// Copyright 2025 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = LibTests.register("Arrays", _, _);
def X = [
	T("mapId_id", test_mapId_id),
	T("mapId_ne", test_mapId_ne),
	()
];

def assertId<T>(t: LibTest, a: Array<T>, f: T -> T) {
	var b = Arrays.mapId(a, f);
	if (a != b) t.fail("expected ==, got different array");
}

def assertMapIdNe<T>(t: LibTest, a: Array<T>, f: T -> T) {
	var b = Arrays.mapId(a, f);
	if (a == b) return t.fail("expected !=, got same array");
	if (a.length != b.length) return t.fail("expected same length result array");
	for (i < a.length) {
		if (b[i] != f(a[i])) return t.fail1("expected equal elements, failed at %d", i);
	}
}

def id<T>(x: T) -> T {
	return x;
}

def test_mapId_id(t: LibTest) {
	assertId(t, [0, 1], int.!<int>);
	assertId(t, [33, -44], id<int>);
	assertId(t, ["foo", "bar"], id<string>);
}

def test_mapId_ne(t: LibTest) {
	assertId(t, [0, 1, 2], int.%(_, 10));
	assertMapIdNe(t, [0, 1, 2], int./(_, 10));
	assertMapIdNe(t, [2, 0, 4], int./(_, 10));
	assertMapIdNe(t, [3, 1, 0], int./(_, 10));
}
