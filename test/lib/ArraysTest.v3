// Copyright 2024 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = LibTests.register("Arrays", _, _);
def X = (
	T("subst0", test_subst0),
	T("subst1", test_subst1),
	()
);

def assert_no_subst<T>(t: LibTest, input: Array<T>, func: T -> T) {
	var copy = Array<T>.new(input.length);
	for (i < copy.length) copy[i] = input[i];
	var result = Arrays.subst(input, func);
	if (result != input) t.fail("subst returned new array");
	for (i < copy.length) {
		if (copy[i] != input[i]) t.fail1("index %d was modified", i);
	}
}

def assert_subst<T>(t: LibTest,  input: Array<T>, func: T -> T) {
	var expected = Array<T>.new(input.length);
	for (i < expected.length) expected[i] = func(input[i]);
	var result = Arrays.subst(input, func);
	for (i < expected.length) {
		if (expected[i] != result[i]) t.fail1("index %d mismatch", i);
	}
}

def test_subst0(t: LibTest) {
	def and3 = int.&(_, 3);
	def assert_no = assert_no_subst<int>(t, _, and3);

	assert_no([]);
	assert_no([0]);
	assert_no([1]);
	assert_no([1, 1]);
	assert_no([2]);
	assert_no([2, 2, 2]);
	assert_no([3]);
	assert_no([3, 2, 1]);

	def assert_yes = assert_subst<int>(t, _, and3);
	
	assert_yes([4]);
	assert_yes([4, 1]);
	assert_yes([1, 4]);
	assert_yes([1, 2, 3, 4]);
	assert_yes([5, 6, 7]);
}

def reset<T>(x: (bool, T)) -> (bool, T) {
	return if(!x.0, x);
}

def KEEP<T>(x: T) -> (bool, T) { return (false, x); }
def RESET<T>(x: T) -> (bool, T) { return (true, x); }

def test_subst1(t: LibTest) {
	def assert_no = assert_no_subst<(bool, int)>(t, _, reset<int>);

	assert_no([]);
//	assert_no([KEEP(11)]);
//	assert_no([KEEP(12)]);
//	assert_no([KEEP(13), KEEP(44)]);
//	assert_no([KEEP(-1), KEEP(99), KEEP(66)]);

	def assert_yes = assert_subst<(bool, int)>(t, _, reset<int>);
	
//	assert_yes([RESET(11)]);
//	assert_yes([RESET(12)]);
//	assert_yes([KEEP(13), RESET(44)]);
//	assert_yes([KEEP(-1), KEEP(99), RESET(66)]);
}
