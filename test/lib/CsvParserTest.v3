// Copyright 2025 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = LibTests.register("CsvParser", _, _);
def X = [
	T("cols0", test_cols0),
	T("cols1", test_cols1),
	T("rows0", test_rows0),
	T("rows1", test_rows1),
	// TODO: lots more tests for CSVs
	()
];

def assert_columns(t: LibTest, expected: Array<string>, data: Array<byte>) {
	var p = CsvParser.new("test.csv", data);
	var d = p.parse();
	if (!p.text.ok) t.fail(p.text.error_msg);
	if (d == null) return t.fail("no CSV data returned");
	t.assert_strings(expected, d.columns);
}

def assert_rows(t: LibTest, expected: Array<Array<string>>, data: Array<byte>) {
	var p = CsvParser.new("test.csv", data);
	var d = p.parse();
	if (!p.text.ok) t.fail(p.text.error_msg);
	if (d == null) return t.fail("no CSV data returned");
	if (d.rows.length != expected.length) {
		return t.fail(Strings.format2("expected %d rows, got %d", expected.length, d.rows.length));
	}
	for (i < expected.length) {
		t.assert_strings(expected[i], d[i]);
	}
}

def test_cols0(t: LibTest) {
	def T = assert_columns(t, _, _);

	T(["a"], "a");
	T(["x"], "x\n");
	T(["Z"], "Z,");
	T(["a", ""], "a,\n");
}

def test_cols1(t: LibTest) {
	def T = assert_columns(t, _, _);

	T(["a", "b"], "a,b");
	T(["x", "y"], "x,y,");
	T(["Z", "Z"], "Z,Z\n");

	T(["!", "@"], "!,@");
	T(["!!", "@@"], "!!,@@,");
	T(["#", "$$"], "#,$$\n");
	T(["%%%", "^^^^"], "%%%,^^^^\n");
	T(["&*()", "-_=+", "[]{}"], "&*(),-_=+,[]{}");
}

def test_rows0(t: LibTest) {
	def T = assert_rows(t, _, _);

	T([["a"]], "r\na");
	T([["a"], ["b"]], "r\na\nb");
	T([["a"], ["x"], ["z"]], "r\na\nx\nz");
}

def test_rows1(t: LibTest) {
	def T = assert_rows(t, _, _);

	T([["a"]], "r\na");
	T([["a", "b"]], "r\na,b");
	T([["a", "x", "z"]], "r\na,x,z");
}
