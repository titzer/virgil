// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def main(a: Array<string>) -> int {
	Terminal.put("bits 32\n");
	var gen = X86AsmGen.new(a);

	// SSE move instructions
	gen.do_sm_s("movss", gen.asm.movss_sm_s);
	gen.do_s_sm("movss", gen.asm.movss_s_sm);
	gen.do_sm_s("movsd", gen.asm.movsd_sm_s);
	gen.do_s_sm("movsd", gen.asm.movsd_s_sm);

	gen.do_s_rm("movd", gen.asm.movd_s_rm);

	gen.do_s_sm("addsd", gen.asm.addsd);
	gen.do_s_sm("subsd", gen.asm.subsd);
	gen.do_s_sm("mulsd", gen.asm.mulsd);
	gen.do_s_sm("divsd", gen.asm.divsd);

	gen.do_s_sm("addss", gen.asm.addss);
	gen.do_s_sm("subss", gen.asm.subss);
	gen.do_s_sm("mulss", gen.asm.mulss);
	gen.do_s_sm("divss", gen.asm.divss);

	gen.do_s_sm("cmpeqsd", gen.asm.cmpeqsd);
	gen.do_s_sm("cmpltsd", gen.asm.cmpltsd);
	gen.do_s_sm("cmplesd", gen.asm.cmplesd);
	gen.do_s_sm("cmpunordsd", gen.asm.cmpunordsd);
	gen.do_s_sm("cmpneqsd", gen.asm.cmpneqsd);
	gen.do_s_sm("cmpnltsd", gen.asm.cmpnltsd);
	gen.do_s_sm("cmpnlesd", gen.asm.cmpnlesd);
	gen.do_s_sm("cmpordsd", gen.asm.cmpordsd);

	gen.do_s_sm_b("roundsd", gen.asm.roundsd);
	gen.do_s_sm_b("roundss", gen.asm.roundss);

	gen.do_s_sm("ucomiss", gen.asm.ucomiss);

	gen.do_s_sm("cmpeqss", gen.asm.cmpeqss);
	gen.do_s_sm("cmpltss", gen.asm.cmpltss);
	gen.do_s_sm("cmpless", gen.asm.cmpless);
	gen.do_s_sm("cmpunordss", gen.asm.cmpunordss);
	gen.do_s_sm("cmpneqss", gen.asm.cmpneqss);
	gen.do_s_sm("cmpnltss", gen.asm.cmpnltss);
	gen.do_s_sm("cmpnless", gen.asm.cmpnless);
	gen.do_s_sm("cmpordss", gen.asm.cmpordss);

	gen.do_r_sm("cvtsd2si", gen.asm.cvtsd2si);
	gen.do_r_sm("cvtss2si", gen.asm.cvtss2si);
	gen.do_s_rm("cvtsi2sd", gen.asm.cvtsi2sd);
	gen.do_s_rm("cvtsi2ss", gen.asm.cvtsi2ss);
	gen.do_s_sm("cvtss2sd", gen.asm.cvtss2sd);
	gen.do_s_sm("cvtsd2ss", gen.asm.cvtsd2ss);

	Terminal.put(";; passed\n");
	return 0;
}

def ADDRS = [
	X86Regs.EAX.indirect(),
	X86Regs.EBX.indirect(),
	X86Regs.ESI.indirect(),
	X86Addr.new(X86Regs.EAX, null, 1, 0x11223344),
	X86Addr.new(X86Regs.ECX, null, 1, 0x77),
	X86Addr.new(X86Regs.EBX, X86Regs.EBX, 1, 0x11223344),
	X86Addr.new(X86Regs.ECX, X86Regs.EDX, 4, 0x11223344),
	X86Addr.new(X86Regs.EDI, X86Regs.ESI, 8, 0x11223344)
];

def SSE_ADDRS = Arrays.map(ADDRS, toSSEAddr);

def toSSEAddr(addr: X86Addr) -> SSEAddr {
	return SSEAddr.new(addr.base, addr.index, addr.scale, addr.disp);
}

class X86AsmGen(args: Array<string>) {
	def data = DataBuffer.new(false, Array.new(256), 0, null);
	var asm = X86Assembler.new(data);
	var buf = StringBuffer.new();

	def render() {
		for (i < data.pos) buf.appendHexByte(data.array[i]);
		data.pos = 0;
	}

	def skip(mnemonic: string) -> bool {
		if (args.length == 0) return false;
		for (i < args.length) {
			if (Strings.equal(args[i], mnemonic)) return false;
		}
		return true;
	}

	def do_rm_s(mnemonic: string, asm_func: (X86Rm, SSEReg) -> void) {
		if (skip(mnemonic)) return;
		var addr = X86Regs.EAX.indirect();
		for (s in [X86Regs.XMM0, X86Regs.XMM1, X86Regs.XMM7]) {
			asm_func(addr, s);
			buf.reset();
			render();
			Terminal.putbln(buf);
		}
	}
	def do_m_s(mnemonic: string, asm_func: (X86Addr, SSEReg) -> void) {
		if (skip(mnemonic)) return;
		for (addr in ADDRS) {
			for (s in [X86Regs.XMM0, X86Regs.XMM1, X86Regs.XMM7]) {
				asm_func(addr, s);
				buf.reset();
				buf.puts(mnemonic).sp();
				addr.render(buf);
				buf.puts(", ");
				buf.puts(s.name);
				buf.puts(" ;;== ");
				render();
				Terminal.putbln(buf);
			}
		}
	}
	def do_s_rm(mnemonic: string, asm_func: (SSEReg, X86Rm) -> void) {
		if (skip(mnemonic)) return;
		for (addr in ADDRS) {
			for (s in [X86Regs.XMM0, X86Regs.XMM1, X86Regs.XMM7]) {
				asm_func(s, addr);
				buf.reset();
				buf.puts(mnemonic).sp();
				buf.puts(s.name);
				buf.puts(", ");
				addr.render(buf);
				buf.puts(" ;;== ");
				render();
				Terminal.putbln(buf);
			}
		}
	}

	def do_r_sm(mnemonic: string, asm_func: (X86Reg, SSERm) -> void) {
		if (skip(mnemonic)) return;
		for (addr in SSE_ADDRS) {
			for (s in [X86Regs.EAX, X86Regs.ECX, X86Regs.EDI]) {
				asm_func(s, addr);
				buf.reset();
				buf.puts(mnemonic).sp();
				buf.puts(s.name32);
				buf.puts(", ");
				addr.render(buf);
				buf.puts(" ;;== ");
				render();
				Terminal.putbln(buf);
			}
		}
	}

	def do_s_sm(mnemonic: string, asm_func: (SSEReg, SSERm) -> void) {
		if (skip(mnemonic)) return;
		for (addr in SSE_ADDRS) {
			for (s in [X86Regs.XMM0, X86Regs.XMM1, X86Regs.XMM7]) {
				asm_func(s, addr);
				buf.reset();
				buf.puts(mnemonic).sp();
				buf.puts(s.name);
				buf.puts(", ");
				addr.render(buf);
				buf.puts(" ;;== ");
				render();
				Terminal.putbln(buf);
			}
		}
	}

	def do_sm_s(mnemonic: string, asm_func: (SSERm, SSEReg) -> void) {
		if (skip(mnemonic)) return;
		for (addr in SSE_ADDRS) {
			for (s in [X86Regs.XMM0, X86Regs.XMM1, X86Regs.XMM7]) {
				asm_func(addr, s);
				buf.reset();
				buf.puts(mnemonic).sp();
				addr.render(buf);
				buf.puts(", ");
				buf.puts(s.name);
				buf.puts(" ;;== ");
				render();
				Terminal.putbln(buf);
			}
		}
	}

	def do_s_sm_b(mnemonic: string, asm_func: (SSEReg, SSERm, RoundingMode) -> void) {
		if (skip(mnemonic)) return;
		for (addr in SSE_ADDRS) {
			for (s in [X86Regs.XMM0, X86Regs.XMM1, X86Regs.XMM7]) {
				for (mode in RoundingMode) {
					asm_func(s, addr, mode);
					buf.reset();
					buf.puts(mnemonic).sp();
					buf.puts(s.name);
					buf.puts(", ");
					addr.render(buf);
					buf.puts(", ");
					buf.puti(mode.value);
					buf.puts(" ;;== ");
					render();
					Terminal.putbln(buf);
				}
			}
		}
	}
}
