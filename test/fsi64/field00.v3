//@execute 0=144; 2=54

// A test of value types as class (struct) fields

class A<T> {
	var x: T;
	new(x) { }
	def get() -> T { return x; }
}
class B<T> extends A<T> {
	var y: T;
	new(x: T, y) super(x) { }
	def get() -> T { return y; }
}
def choose<T>(a1: A<T>, a2: A<T>, b: bool) -> A<T> {
	return if(b, a1, a2);
}
def main(n: int) -> int {
	var ai7 = A<i7>.new(3i7);
	var bi7 = B<i7>.new(4i7, 7);
	var xi7 = choose(ai7, bi7, n == 2);

	var ai8 = A<i8>.new(3i8);
	var bi8 = B<i8>.new(4i8, 7);
	var xi8 = choose(ai8, bi8, n == 2);

	var ai15 = A<i15>.new(3i15);
	var bi15 = B<i15>.new(4i15, 7);
	var xi15 = choose(ai15, bi15, n == 2);

	var ai16 = A<i16>.new(3i16);
	var bi16 = B<i16>.new(4i16, 7);
	var xi16 = choose(ai16, bi16, n == 2);

	var ai31 = A<i31>.new(3i31);
	var bi31 = B<i31>.new(4i31, 7);
	var xi31 = choose(ai31, bi31, n == 2);

	var ai32 = A<i32>.new(3i32);
	var bi32 = B<i32>.new(4i32, 7);
	var xi32 = choose(ai32, bi32, n == 2);

	var ai63 = A<i63>.new(3i63);
	var bi63 = B<i63>.new(4i63, 7);
	var xi63 = choose(ai63, bi63, n == 2);

	var ai64 = A<i64>.new(3i64);
	var bi64 = B<i64>.new(4i64, 7);
	var xi64 = choose(ai64, bi64, n == 2);

	var isum = int.view(xi7.get()) + if(B<i7>.?(xi7), 1, 0) +
		   int.view(xi8.get()) + if(B<i8>.?(xi8), 1, 0) +
		   int.view(xi15.get()) + if(B<i15>.?(xi15), 1, 0) +
		   int.view(xi16.get()) + if(B<i16>.?(xi16), 1, 0) +
		   int.view(xi31.get()) + if(B<i31>.?(xi31), 1, 0) +
		   int.view(xi32.get()) + if(B<i32>.?(xi32), 1, 0) +
		   int.view(xi63.get()) + if(B<i63>.?(xi63), 1, 0) +
		   int.view(xi64.get()) + if(B<i64>.?(xi64), 1, 0);

	var au7 = A<u7>.new(3u7);
	var bu7 = B<u7>.new(4u7, 7);
	var xu7 = choose(au7, bu7, n == 2);

	var au8 = A<u8>.new(3u8);
	var bu8 = B<u8>.new(4u8, 7);
	var xu8 = choose(au8, bu8, n == 2);

	var au15 = A<u15>.new(3u15);
	var bu15 = B<u15>.new(4u15, 7);
	var xu15 = choose(au15, bu15, n == 2);

	var au16 = A<u16>.new(3u16);
	var bu16 = B<u16>.new(4u16, 7);
	var xu16 = choose(au16, bu16, n == 2);

	var au31 = A<u31>.new(3u31);
	var bu31 = B<u31>.new(4u31, 7);
	var xu31 = choose(au31, bu31, n == 2);

	var au32 = A<u32>.new(3u32);
	var bu32 = B<u32>.new(4u32, 7);
	var xu32 = choose(au32, bu32, n == 2);

	var au63 = A<u63>.new(3u63);
	var bu63 = B<u63>.new(4u63, 7);
	var xu63 = choose(au63, bu63, n == 2);

	var au64 = A<u64>.new(3u64);
	var bu64 = B<u64>.new(4u64, 7);
	var xu64 = choose(au64, bu64, n == 2);

	var usum = int.view(xu7.get()) + if(B<u7>.?(xu7), 1, 0) +
		   int.view(xu8.get()) + if(B<u8>.?(xu8), 1, 0) +
		   int.view(xu15.get()) + if(B<u15>.?(xu15), 1, 0) +
		   int.view(xu16.get()) + if(B<u16>.?(xu16), 1, 0) +
		   int.view(xu31.get()) + if(B<u31>.?(xu31), 1, 0) +
		   int.view(xu32.get()) + if(B<u32>.?(xu32), 1, 0) +
		   int.view(xu63.get()) + if(B<u63>.?(xu63), 1, 0) +
		   int.view(xu64.get()) + if(B<u64>.?(xu64), 1, 0);

	var afloat = A<float>.new(3f);
	var bfloat = B<float>.new(4f, 7);
	var xfloat = choose(afloat, bfloat, n == 2);

	var adouble = A<double>.new(3d);
	var bdouble = B<double>.new(4d, 7);
	var xdouble = choose(adouble, bdouble, n == 2);

	var fsum = int.truncf(xfloat.get()) + if(B<float>.?(xfloat), 1, 0) +
		   int.truncd(xdouble.get()) + if(B<double>.?(xdouble), 1, 0);

	return isum + usum + fsum;
}
