//@execute (0, 10)=34; (1, 10)=33

// Complex / nested function type subsumption

class A {
	def m() -> int { return 11; }
}

class B extends A {
	def m() -> int { return 12; }
}

class C {
	def n() -> int { return 13; }
}

class D extends C {
	def n() -> int { return 13; }
}

class Cls {

	def fad1(x: A, y: D -> int, d: D, j: int) -> int { return x.m() + y(d) + j - 1; }
	def fad2(x: A, y: D -> int, d: D, j: int) -> int { return x.m() + y(d) + j - 2; }

	def g1(x: C) -> int { return x.n(); }

	def apply(f: (B, C -> int, D, int) -> int, b: B, g: C -> int, d: D, j: int) -> int {
		return f(b, g, d, j);
	}
}

def adapter1(f: (A, D -> int, D, int) -> int, b: B, g: C -> int, d: D, j: int) -> int {
	return f(b, adapter2(g, _), d, j);
}

def adapter2(g: C -> int, d: D) -> int {
	return g(d);
}

def main(i: int, j: int) -> int {
	var cls = Cls.new();
	var arrAD: Array<(A, D -> int, D, int) -> int> = [cls.fad1, cls.fad2];
	var f: (B, C -> int, D, int) -> int = adapter1(arrAD[i], _, _, _, _);
	return cls.apply(f, B.new(), cls.g1, D.new(), j);
}
