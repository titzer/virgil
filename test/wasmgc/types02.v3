//@execute 0=54; 2=54

// A test of value types as array element types

def fi7(n: int, i: int, x: Array<i7>) -> Array<i7> {
	var y: Array<i7> = [x[i + n]];
	return y;
}

def fi8(n: int, i: int, x: Array<i8>) -> Array<i8> {
	var y: Array<i8> = [x[i + n]];
	return y;
}

def fi15(n: int, i: int, x: Array<i15>) -> Array<i15> {
	var y: Array<i15> = [x[i + n]];
	return y;
}

def fi16(n: int, i: int, x: Array<i16>) -> Array<i16> {
	var y: Array<i16> = [x[i + n]];
	return y;
}

def fi31(n: int, i: int, x: Array<i31>) -> Array<i31> {
	var y: Array<i31> = [x[i + n]];
	return y;
}

def fi32(n: int, i: int, x: Array<i32>) -> Array<i32> {
	var y: Array<i32> = [x[i + n]];
	return y;
}

def fi63(n: int, i: int, x: Array<i63>) -> Array<i63> {
	var y: Array<i63> = [x[i + n]];
	return y;
}

def fi64(n: int, i: int, x: Array<i64>) -> Array<i64> {
	var y: Array<i64> = [x[i + n]];
	return y;
}

def fu7(n: int, i: int, x: Array<u7>) -> Array<u7> {
	var y: Array<u7> = [x[i + n]];
	return y;
}

def fu8(n: int, i: int, x: Array<u8>) -> Array<u8> {
	var y: Array<u8> = [x[i + n]];
	return y;
}

def fu15(n: int, i: int, x: Array<u15>) -> Array<u15> {
	var y: Array<u15> = [x[i + n]];
	return y;
}

def fu16(n: int, i: int, x: Array<u16>) -> Array<u16> {
	var y: Array<u16> = [x[i + n]];
	return y;
}

def fu31(n: int, i: int, x: Array<u31>) -> Array<u31> {
	var y: Array<u31> = [x[i + n]];
	return y;
}

def fu32(n: int, i: int, x: Array<u32>) -> Array<u32> {
	var y: Array<u32> = [x[i + n]];
	return y;
}

def fu63(n: int, i: int, x: Array<u63>) -> Array<u63> {
	var y: Array<u63> = [x[i + n]];
	return y;
}

def fu64(n: int, i: int, x: Array<u64>) -> Array<u64> {
	var y: Array<u64> = [x[i + n]];
	return y;
}

def ff32(n: int, i: int, x: Array<float>) -> Array<float> {
	var y: Array<float> = [x[i + n]];
	return y;
}

def ff64(n: int, i: int, x: Array<double>) -> Array<double> {
	var y: Array<double> = [x[i + n]];
	return y;
}

def main(n: int) -> int {
	var xi7 = fi7(n, -n, [3i7]);
	var xi8 = fi8(n, -n, [3i8]);
	var xi15 = fi15(n, -n, [3i15]);
	var xi16 = fi16(n, -n, [3i16]);
	var xi31 = fi31(n, -n, [3i31]);
	var xi32 = fi32(n, -n, [3i32]);
	var xi63 = fi63(n, -n, [3i63]);
	var xi64 = fi64(n, -n, [3i64]);
	var isum = xi7[0] + xi8[0] + xi15[0] + xi16[0] + xi31[0] + xi32[0] + xi63[0] + xi64[0];
	var xu7 = fu7(n, -n, [3u7]);
	var xu8 = fu8(n, -n, [3u8]);
	var xu15 = fu15(n, -n, [3u15]);
	var xu16 = fu16(n, -n, [3u16]);
	var xu31 = fu31(n, -n, [3u31]);
	var xu32 = fu32(n, -n, [3u32]);
	var xu63 = fu63(n, -n, [3u63]);
	var xu64 = fu64(n, -n, [3u64]);
	var usum = xu7[0] + xu8[0] + xu15[0] + xu16[0] + xu31[0] + xu32[0] + xu63[0] + xu64[0];
	var xf32 = ff32(n, -n, [3.0f]);
	var xf64 = ff64(n, -n, [3.0d]);
	var fsum = xf32[0] + xf64[0];
	return int.view(isum + i64.view(usum) + i64.!(fsum));
}
