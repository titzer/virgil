//@execute (0, 0, 0)=25; (0, 1, 0)=25; (0, 2, 0)=13; (1, 0, 0)=25; (1, 1, 0)=25; (1, 2, 0)=13; (2, 0, 0)=12; (2, 1, 0)=12; (2, 2, 0)=0; (3, 0, 0)=35; (3, 1, 0)=35; (3, 2, 0)=23

// Test function implementation of function type subsumption with
// individual adapters

class A {
	def m() -> int { return 11; }
}

class B extends A {
	def m() -> int { return 12; }
}

class C extends B {
	def m() -> int { return 13; }
}

def fa1(x: A, j: int) -> int { return x.m() + j; }
def fa2(x: A, j: int) -> int { return x.m() - j; }

def fb(x: B, j: int) -> int { return x.m() * j; }

def fc(x: C, j: int) -> int { return x.m() + j + 10; }

def main(i1: int, i2: int, j: int) -> int {
	var arrB: Array<(B, int) -> int> = [fa1, fa2, fb];
	var arrC: Array<(C, int) -> int> = [fa1, fa2, fb, fc];
	return arrC[i1](C.new(), j) + arrB[i2](B.new(), j);
}
