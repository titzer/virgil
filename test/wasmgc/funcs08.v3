//@execute (0, 1, 2, 3, 4)=3; (1, 1, 2, 3, 4)=3; (2, 1, 2, 3, 4)=3

// Test a hierarchy of overloads calling a method via a closure

class A {
	var x: int;
	new(x) { }
	def g(i: int, j: int) -> int { return x - i; }
}

class B extends A {
	var y: int;
	new(x: int, y) super(x) { }
	def g(i: int, j: int) -> int { return x + y - i; }
}

class C extends A {
	var z: int;
	new(x: int, z) super(x) { }
	def g(i: int, j: int) -> int { return x - z - i + j; }
}

def apply(f: int -> int, arg: int, times: int) -> int {
	for (i < times) arg = f(arg);
	return arg;
}

def main(which: int, val1: int, val2: int, x: int, y: int) -> int {
	var a: A = if(which == 0, A.new(val1),
		      if(which == 1, B.new(val1, val2),
			 C.new(val1, val2)));
	var g = a.g;
	return apply(g(_, 1), x, y);
}
