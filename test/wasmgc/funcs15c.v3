//@execute (0, 10)=22; (1, 10)=22; (2, 2)=24

// Test function implementation of function type subsumption with
// individual adapters

class A {
	def m() -> int { return 11; }
}

class B extends A {
	def m() -> int { return 12; }
}

def fa1(x: A, j: int) -> int { return x.m() + j; }
def fa2(x: A, j: int) -> int { return x.m() - j; }

def fb(x: B, j: int) -> int { return x.m() * j; }

def adapter1(b: B, j: int) -> int {
	return fa1(b, j);
}

def adapter2(b: B, j: int) -> int {
	return fa1(b, j);
}

//def wrapper(f: (A, int) -> int) -> ((B, int) -> int) {
//	return adapter(f, _, _);
//}

def main(i: int, j: int) -> int {
	var arr = Array<(B, int) -> int>.new(1);
	if (i == 0) { arr[0] = adapter1; }
	else if (i == 1) { arr[0] = adapter2; }
	else { arr[0] = fb; }
	return arr[0](B.new(), j);
}
