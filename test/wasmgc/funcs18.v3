//@execute (0, 10)=35; (1, 10)=-11; (2, 2)=26; (3, 3)=29

// Complex / nested function type subsumption

class A {
	def m() -> int { return 11; }
}

class B extends A {
	def m() -> int { return 12; }
}

class C {
	def n() -> int { return 13; }
}

class D extends C {
	def n() -> int { return 13; }
}

def fac(x: A, y: C, j: int) -> int { return x.m() + y.n() + j; }

def fbc(x: B, y: C, j: int) -> int { return x.m() - y.n() - j; }

def fad(x: A, y: D, j: int) -> int { return x.m() + y.n() + j - 1; }

def fbd(x: B, y: D, j: int) -> int { return x.m() + y.n() + j + 1; }

def main(i: int, j: int) -> int {
	var arrBD: Array<(B, D, int) -> int> = [fac, fbc, fad, fbd];
	return arrBD[i](B.new(), D.new(), j);
}
