//@execute (0,0)=true; (0,1)=false; (0,2)=false; (0,3)=false; (0,4)=false; (0,5)=false; (0,6)=false; (0,7)=true; (0,8)=false; (0,9)=false; (0,10)=false; (0,11)=false; (0,12)=true; (1,0)=false; (1,1)=true; (1,2)=false; (1,3)=false; (1,4)=true; (1,5)=false; (1,6)=false; (1,7)=false; (1,8)=false; (1,9)=false; (1,10)=false; (1,11)=false; (1,12)=false; (8,0)=false; (8,1)=false; (8,2)=false; (8,3)=true; (8,4)=false; (8,5)=false; (8,6)=true; (8,7)=false; (8,8)=true; (8,9)=false; (8,10)=true; (8,11)=false; (8,12)=false; (11,0)=false; (11,1)=false; (11,2)=true; (11,3)=false; (11,4)=false; (11,5)=true; (11,6)=false; (11,7)=false; (11,8)=false; (11,9)=true; (11,10)=false; (11,11)=true; (11,12)=false
//@heap-size=8000

// Test double function type subsumption of a function variable

class A {
	def m() -> int { return 11; }
}

class B extends A {
	def m() -> int { return 12; }
}

class C extends B {
	def m() -> int { return 13; }
}

def fa1(x: A) -> int { return x.m(); }
def fa2(x: A) -> int { return x.m() + 10; }

def fb1(x: B) -> int { return x.m() + 100; }
def fb2(x: B) -> int { return x.m() + 110; }

def fc1(x: C) -> int { return x.m() + 200; }
def fc2(x: C) -> int { return x.m() + 220; }

def main(i: int, j: int) -> bool {

	var fanone: A -> int;

	var fbnone: B -> int;

	var fba: B -> int = if(i < 100, fa1, fa2);
	var fbb: B -> int = if(i < 101, fb1, fb2);

	var fcnone: C-> int;


	var fca: C -> int = if(i < 102, fa1, fa2);
	var fcb: C -> int = if(i < 103, fb1, fb2);
	var fcc: C -> int = if(i < 104, fc1, fc2);

	var fcba: C -> int = fba;
	var fcbb: C -> int = fbb;

	var arr: Array<C -> int> = [fcnone, fc1, fca, fcb, fcc, fcba, fcbb, fbnone, fb1, fba, fbb, fa1, fanone];
	return arr[i] == arr[j];
}
