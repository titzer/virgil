//@execute 0=13; 1=14

// Complex / nested function type subsumption

class C {
	def n() -> int { return 13; }
}

class D extends C {
	def n() -> int { return 13; }
}

class Cls {

	def id(f: D-> int) -> (D -> int) { return f; }
//	def fd1() -> (D -> int) { return g1(_); }
//	def fd1() -> (D -> int) { var f: D-> int = g1(_); return f; }
	def fd1(i: int) -> (D -> int) { var f: D-> int = id(g1(_)); return f; }
//	def fd2() -> (D -> int) { return g2(_); }
//	def fd2() -> (D -> int) { var f: D-> int = g2(_); return f; }
	def fd2(i: int) -> (D -> int) { var f: D-> int = id(g2(_)); return f; }

	def g1(x: C) -> int { return x.n(); }
	def g2(x: C) -> int { return x.n() + 1; }
}

def main(i: int) -> int {
	var cls = Cls.new();
	return if(i == 0, cls.fd1(i)(D.new()), cls.fd2(i)(D.new()));
//	var arrf: Array<() -> (D -> int)> = [cls.fd1, cls.fd2];
//	return arrf[i]()(D.new());
}
