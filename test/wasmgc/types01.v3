//@execute 0=54; 2=90

// A test of value types as function arguments/results

def fi7(n: int, x: i7) -> i7 {
	return i7.!(x + n);
}

def fi8(n: int, x: i8) -> i8 {
	return i8.!(x + n);
}

def fi15(n: int, x: i15) -> i15 {
	return i15.!(x + n);
}

def fi16(n: int, x: i16) -> i16 {
	return i16.!(x + n);
}

def fi31(n: int, x: i31) -> i31 {
	return i31.!(x + n);
}

def fi32(n: int, x: i32) -> i32 {
	return i32.!(x + n);
}

def fi63(n: int, x: i63) -> i63 {
	return i63.!(x + n);
}

def fi64(n: int, x: i64) -> i64 {
	return i64.!(x + n);
}

def fu7(n: int, x: u7) -> u7 {
	return u7.!(x + u32.view(n));
}

def fu8(n: int, x: u8) -> u8 {
	return u8.!(x + u32.view(n));
}

def fu15(n: int, x: u15) -> u15 {
	return u15.!(x + u32.view(n));
}

def fu16(n: int, x: u16) -> u16 {
	return u16.!(x + u32.view(n));
}

def fu31(n: int, x: u31) -> u31 {
	return u31.!(x + u32.view(n));
}

def fu32(n: int, x: u32) -> u32 {
	return u32.!(x + u32.view(n));
}

def fu63(n: int, x: u63) -> u63 {
	return u63.!(x + u32.view(n));
}

def fu64(n: int, x: u64) -> u64 {
	return u64.!(x + u32.view(n));
}

def ff32(n: int, x: float) -> float {
	return x + float.!(n);
}

def ff64(n: int, x: double) -> double {
	return x + double.!(n);
}

def main(n: int) -> int {
	var xi7 = fi7(n, 3);
	var xi8 = fi8(n, 3);
	var xi15 = fi15(n, 3);
	var xi16 = fi16(n, 3);
	var xi31 = fi31(n, 3);
	var xi32 = fi32(n, 3);
	var xi63 = fi63(n, 3);
	var xi64 = fi64(n, 3);
	var isum = xi7 + xi8 + xi15 + xi16 + xi31 + xi32 + xi63 + xi64;
	var xu7 = fu7(n, 3);
	var xu8 = fu8(n, 3);
	var xu15 = fu15(n, 3);
	var xu16 = fu16(n, 3);
	var xu31 = fu31(n, 3);
	var xu32 = fu32(n, 3);
	var xu63 = fu63(n, 3);
	var xu64 = fu64(n, 3);
	var usum = xu7 + xu8 + xu15 + xu16 + xu31 + xu32 + xu63 + xu64;
	var xf32 = ff32(n, 3.0f);
	var xf64 = ff64(n, 3.0d);
	var fsum = xf32 + xf64;
	return int.view(isum + i64.view(usum) + i64.!(fsum));
}
