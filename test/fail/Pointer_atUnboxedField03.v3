//@execute 0=0
type V(v8: u8, v16: u16, v32: u32, v64: u64) #unboxed { }

var gv = V(1, 2, 3, 4);

class C {
	var clsv: V;
	new(v8: u8, v16: u16, v32: u32, v64: u64) {
		clsv = V(v8, v16, v32, v64);
	}
}

var gclsv = C.new(5, 6, 7, 8);

component Comp {
	var compv = V(9, 10, 11, 12);
	var compclsv = C.new(13, 14, 15, 16);
}

def main(arg: int) -> u64 {

	var lclsv = C.new(17, 18, 19, 20);

	// check values before doing anything, using regular accesses

	var startingRegularDiff =

	    (u64.view(gv.v8 ) ^ 1) +
	    (u64.view(gv.v16) ^ 2) +
	    (u64.view(gv.v32) ^ 3) +
	    (u64.view(gv.v64) ^ 4) +

	    (u64.view(gclsv.clsv.v8 ) ^ 5) +
	    (u64.view(gclsv.clsv.v16) ^ 6) +
	    (u64.view(gclsv.clsv.v32) ^ 7) +
	    (u64.view(gclsv.clsv.v64) ^ 8) +

	    (u64.view(Comp.compv.v8 ) ^ 9) +
	    (u64.view(Comp.compv.v16) ^ 10) +
	    (u64.view(Comp.compv.v32) ^ 11) +
	    (u64.view(Comp.compv.v64) ^ 12) +

	    (u64.view(Comp.compclsv.clsv.v8 ) ^ 13) +
	    (u64.view(Comp.compclsv.clsv.v16) ^ 14) +
	    (u64.view(Comp.compclsv.clsv.v32) ^ 15) +
	    (u64.view(Comp.compclsv.clsv.v64) ^ 16) +

	    (u64.view(lclsv.clsv.v8 ) ^ 17) +
	    (u64.view(lclsv.clsv.v16) ^ 18) +
	    (u64.view(lclsv.clsv.v32) ^ 19) +
	    (u64.view(lclsv.clsv.v64) ^ 20);

	// check values before doing anything, using pointer loads

	var startingLoadDiff =

	    (u64.view(Pointer.atField(gv.v8 ).load<u8>()) ^ 1) +
	    (u64.view(Pointer.atField(gv.v16).load<u16>()) ^ 2) +
	    (u64.view(Pointer.atField(gv.v32).load<u32>()) ^ 3) +
	    (u64.view(Pointer.atField(gv.v64).load<u64>()) ^ 4) +

	    (u64.view(Pointer.atField(gclsv.clsv.v8 ).load<u8>()) ^ 5) +
	    (u64.view(Pointer.atField(gclsv.clsv.v16).load<u16>()) ^ 6) +
	    (u64.view(Pointer.atField(gclsv.clsv.v32).load<u32>()) ^ 7) +
	    (u64.view(Pointer.atField(gclsv.clsv.v64).load<u64>()) ^ 8) +

	    (u64.view(Pointer.atField(Comp.compv.v8 ).load<u8>()) ^ 9) +
	    (u64.view(Pointer.atField(Comp.compv.v16).load<u16>()) ^ 10) +
	    (u64.view(Pointer.atField(Comp.compv.v32).load<u32>()) ^ 11) +
	    (u64.view(Pointer.atField(Comp.compv.v64).load<u64>()) ^ 12) +

	    (u64.view(Pointer.atField(Comp.compclsv.clsv.v8 ).load<u8>()) ^ 13) +
	    (u64.view(Pointer.atField(Comp.compclsv.clsv.v16).load<u16>()) ^ 14) +
	    (u64.view(Pointer.atField(Comp.compclsv.clsv.v32).load<u32>()) ^ 15) +
	    (u64.view(Pointer.atField(Comp.compclsv.clsv.v64).load<u64>()) ^ 16) +

	    (u64.view(Pointer.atField(lclsv.clsv.v8 ).load<u8>()) ^ 17) +
	    (u64.view(Pointer.atField(lclsv.clsv.v16).load<u16>()) ^ 18) +
	    (u64.view(Pointer.atField(lclsv.clsv.v32).load<u32>()) ^ 19) +
	    (u64.view(Pointer.atField(lclsv.clsv.v64).load<u64>()) ^ 20);

	// change values with cmpswp

	Pointer.atField(gv.v8 ).cmpswp<u8>(1, 101);
	Pointer.atField(gv.v16).cmpswp<u16>(2, 102);
	Pointer.atField(gv.v32).cmpswp<u32>(3, 103);
//	Pointer.atField(gv.v64).cmpswp<u64>(4, 104);

	Pointer.atField(gclsv.clsv.v8 ).cmpswp<u8>(5, 105);
	Pointer.atField(gclsv.clsv.v16).cmpswp<u16>(6, 106);
	Pointer.atField(gclsv.clsv.v32).cmpswp<u32>(7, 107);
//	Pointer.atField(gclsv.clsv.v64).cmpswp<u64>(8, 108);

	Pointer.atField(Comp.compv.v8 ).cmpswp<u8>(9, 109);
	Pointer.atField(Comp.compv.v16).cmpswp<u16>(10, 110);
	Pointer.atField(Comp.compv.v32).cmpswp<u32>(11, 111);
//	Pointer.atField(Comp.compv.v64).cmpswp<u64>(12, 112);

	Pointer.atField(Comp.compclsv.clsv.v8 ).cmpswp<u8>(13, 113);
	Pointer.atField(Comp.compclsv.clsv.v16).cmpswp<u16>(14, 114);
	Pointer.atField(Comp.compclsv.clsv.v32).cmpswp<u32>(15, 115);
//	Pointer.atField(Comp.compclsv.clsv.v64).cmpswp<u64>(16, 116);

	Pointer.atField(lclsv.clsv.v8 ).cmpswp<u8>(17, 117);
	Pointer.atField(lclsv.clsv.v16).cmpswp<u16>(18, 118);
	Pointer.atField(lclsv.clsv.v32).cmpswp<u32>(19, 119);
//	Pointer.atField(lclsv.clsv.v64).cmpswp<u64>(20, 120);

	// check values after cmpswp, using regular accesses

	var afterCmpswpDiff =

	    (u64.view(gv.v8 ) ^ 101) +
	    (u64.view(gv.v16) ^ 102) +
	    (u64.view(gv.v32) ^ 103) +
	    (u64.view(gv.v64) ^ 104) +

	    (u64.view(gclsv.clsv.v8 ) ^ 105) +
	    (u64.view(gclsv.clsv.v16) ^ 106) +
	    (u64.view(gclsv.clsv.v32) ^ 107) +
	    (u64.view(gclsv.clsv.v64) ^ 108) +

	    (u64.view(Comp.compv.v8 ) ^ 109) +
	    (u64.view(Comp.compv.v16) ^ 110) +
	    (u64.view(Comp.compv.v32) ^ 111) +
	    (u64.view(Comp.compv.v64) ^ 112) +

	    (u64.view(Comp.compclsv.clsv.v8 ) ^ 113) +
	    (u64.view(Comp.compclsv.clsv.v16) ^ 114) +
	    (u64.view(Comp.compclsv.clsv.v32) ^ 115) +
	    (u64.view(Comp.compclsv.clsv.v64) ^ 116) +

	    (u64.view(lclsv.clsv.v8 ) ^ 117) +
	    (u64.view(lclsv.clsv.v16) ^ 118) +
	    (u64.view(lclsv.clsv.v32) ^ 119) +
	    (u64.view(lclsv.clsv.v64) ^ 120);

	// store original values back, using pointer stores

	Pointer.atField(gv.v8 ).store<u8>(1);
	Pointer.atField(gv.v16).store<u16>(2);
	Pointer.atField(gv.v32).store<u32>(3);
	Pointer.atField(gv.v64).store<u64>(4);

	Pointer.atField(gclsv.clsv.v8 ).store<u8>(5);
	Pointer.atField(gclsv.clsv.v16).store<u16>(6);
	Pointer.atField(gclsv.clsv.v32).store<u32>(7);
	Pointer.atField(gclsv.clsv.v64).store<u64>(8);

	Pointer.atField(Comp.compv.v8 ).store<u8>(9);
	Pointer.atField(Comp.compv.v16).store<u16>(10);
	Pointer.atField(Comp.compv.v32).store<u32>(11);
	Pointer.atField(Comp.compv.v64).store<u64>(12);

	Pointer.atField(Comp.compclsv.clsv.v8 ).store<u8>(13);
	Pointer.atField(Comp.compclsv.clsv.v16).store<u16>(14);
	Pointer.atField(Comp.compclsv.clsv.v32).store<u32>(15);
	Pointer.atField(Comp.compclsv.clsv.v64).store<u64>(16);

	Pointer.atField(lclsv.clsv.v8 ).store<u8>(17);
	Pointer.atField(lclsv.clsv.v16).store<u16>(18);
	Pointer.atField(lclsv.clsv.v32).store<u32>(19);
	Pointer.atField(lclsv.clsv.v64).store<u64>(20);

	// check the restored values, using regular accesses

	var afterStoreDiff =

	    (u64.view(gv.v8 ) ^ 1) +
	    (u64.view(gv.v16) ^ 2) +
	    (u64.view(gv.v32) ^ 3) +
	    (u64.view(gv.v64) ^ 4) +

	    (u64.view(gclsv.clsv.v8 ) ^ 5) +
	    (u64.view(gclsv.clsv.v16) ^ 6) +
	    (u64.view(gclsv.clsv.v32) ^ 7) +
	    (u64.view(gclsv.clsv.v64) ^ 8) +

	    (u64.view(Comp.compv.v8 ) ^ 9) +
	    (u64.view(Comp.compv.v16) ^ 10) +
	    (u64.view(Comp.compv.v32) ^ 11) +
	    (u64.view(Comp.compv.v64) ^ 12) +

	    (u64.view(Comp.compclsv.clsv.v8 ) ^ 13) +
	    (u64.view(Comp.compclsv.clsv.v16) ^ 14) +
	    (u64.view(Comp.compclsv.clsv.v32) ^ 15) +
	    (u64.view(Comp.compclsv.clsv.v64) ^ 16) +

	    (u64.view(lclsv.clsv.v8 ) ^ 17) +
	    (u64.view(lclsv.clsv.v16) ^ 18) +
	    (u64.view(lclsv.clsv.v32) ^ 19) +
	    (u64.view(lclsv.clsv.v64) ^ 20);

	return startingRegularDiff + startingLoadDiff + afterCmpswpDiff + afterStoreDiff;
}
