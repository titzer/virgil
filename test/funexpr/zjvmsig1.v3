//@execute 0=0; 1=5; -7=-35
type HostFunction(invoke: Range<Value> -> HostResult) #unboxed;
type HostResult {
	case Value0;
	case Value1(val: Value);
}
type Value {
	case I32(val: u32);
	case I64(val: u64);
}
def ui(v: Value) =>	i32.view(Value.I32.!(v).val);
def ul(v: Value) =>	i64.view(Value.I64.!(v).val);
def ri(v: int) => 	HostResult.Value1(Value.I32(u32.view(v)));

component HostAdapters {
	def iiii_i(func: (int, int, int, int) -> int) =>	HostFunction(fun a => ri(func(ui(a[0]), ui(a[1]), ui(a[2]), ui(a[3]))));
	def iiii_r(func: (int, int, int, int) -> HostResult) =>	HostFunction(fun a => func(ui(a[0]), ui(a[1]), ui(a[2]), ui(a[3])));
}
class Adapter {
	def func(i: HostInstance) -> HostFunction;
}
class AdapterOf<P, R>(f: HostInstance -> P -> R, adapter: (P -> R) -> HostFunction) extends Adapter {
	def func(i: HostInstance) => adapter(f(i));
}

def adapt_poll_oneoff = AdapterOf<(int, int, int, int), int>.new(fun i => i.poll_oneoff, HostAdapters.iiii_i);
def adapt_fd_write = AdapterOf<(int, int, int, int), HostResult>.new(fun i => i.fd_write, HostAdapters.iiii_r);

def NAME_fd_write = "fd_write";
def NAME_poll_oneoff = "poll_oneoff";

class HostInstance {
	def fd_write(a: int, b: int, c: int, d: int) -> HostResult {
		return HostResult.Value1(Value.I32(u32.view(a + b + c + d)));
	}
	def poll_oneoff(a: int, b: int, c: int, d: int) -> int {
		return -112;
	}
}

def main(a: u32) -> u32 {
	var name = NAME_fd_write;
	var t: Adapter;
	if (name == NAME_fd_write) t = adapt_fd_write;
	if (name == NAME_poll_oneoff) t = adapt_poll_oneoff;
	var hf = t.func(HostInstance.new());
	def bu = Value.I32;
	match (hf.invoke([bu(a), bu(a), bu(a), bu(a)])) {
		Value0 => ;
		Value1(val) => return a + Value.I32.!(val).val;
	}
	return 0;
}
