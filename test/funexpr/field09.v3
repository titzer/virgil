//@execute 0=0; 1=3; 2=3; 3=9; 4=9
type F<T> {
	case None;
	case One(x: T)       { def fold(f: (T, T) -> T) => x; }
	case Two(x: T, y: T) { def fold(f: (T, T) -> T) => f(x, y); } 
	def fold(f: (T, T) -> T) => T.default;
}
var a = '\x01', b = '\x02', c = '\x03';
var x = [F<int>.None, F.One(2), F.One(2), F.Two(1, 3), F.Two(1, 3)];
var y = [F<byte>.None, F.One(a), F.One(a), F.Two(b, c), F.Two(b, c)];
def main(a: int) => x[a].fold(int.+) + y[a].fold(byte.+);
