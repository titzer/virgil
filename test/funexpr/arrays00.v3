//@execute 0=32
component Arrays {
	// Perform mergesort on {array} for elements between {start} inclusive and {end} exclusive,
	// using the {cmp} function.
	def sort<T>(array: Array<T>, start: int, end: int, cmp: (T, T) -> bool) -> Array<T> {
		var size = end - start;
		if (size == 0) return [];
		if (size == 1) return [array[start]];
		if (size == 2) {
			var s = array[start], e = array[end - 1];
			if (cmp(e, s)) return [e, s];
			return [s, e];
		}
		if (size > 2) {
			var middle = (start + end) / 2;
			var a = sort(array, start, middle, cmp); // sort left
			var b = sort(array, middle, end, cmp); // sort right
			// merge
			var n = Array<T>.new(size);
			var i = 0, j = 0;
			for (k < n.length) {
				var l = a[i], r = b[j];
				if (cmp(l, r)) {
					n[k] = l;
					if (++i == a.length) return finish(n, k + 1, b, j);
				} else {
					n[k] = r;
					if (++j == b.length) return finish(n, k + 1, a, i);
				}
			}
			return n;
		}
		return array;
	}
	// Helper for merge sort routine.
	private def finish<T>(array: Array<T>, k: int, end: Array<T>, i: int) -> Array<T> {
		while (k < array.length) array[k++] = end[i++];
		return array;
	}
}

def main(a: int) -> int {
	var x = Arrays.sort<int>([8, -4, 3, 11], 0, 4, fun (x, y) => x < y);
	var p = int.min;
	for (e in x) {
		if (e <= p) return -11;
		p = e;
	}
	return 32;
}
