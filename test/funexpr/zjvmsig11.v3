//@execute 0=0; 1=2; -7=-14
type Function(invoke: u32 -> Result) #unboxed;
type Result {
	case None;
	case Value(val: u32);
}

def Box_i(func: u32 -> u32) =>		Function(fun a => Result.Value(func(a)));
def Box_r(func: u32 -> Result) =>	Function(fun a => func(a));

class Adapter {
	def func() -> Function;
}
class AdapterOf<P, R>(f: P -> R, adapter: (P -> R) -> Function) extends Adapter {
	def func() => adapter(f);
}

def foo(a: u32) -> Result { return Result.Value(a); }
def bar(a: u32) -> u32 { return a; }

def main(a: u32) -> u32 {
	var t: Adapter;
	if (a >= 0) t = AdapterOf<u32, Result>.new(foo, Box_r);
	if (a > 300) t = AdapterOf<u32, u32>.new(bar, Box_i);
	var hf = t.func();
	match (hf.invoke(a)) {
		None => ;
		Value(val) => return a + val;
	}
	return 0;
}
