//@execute (1,2,3)=17; (4,5,9)=56; (-3,2,-2)=-26
//@heap-size=4000
class A {
	var r: int;
	new(a: int, b: int, c: int) { r = 2 * a - 3 * b + 7 * c; }
}
var expect: int;
var failed: int;
def main(a: int, b: int, c: int) -> int {
	failed = 0;
	expect = A.new(a, b, c).r;
	return test3(fun (x, y, z) => A.new(x, y, z), a, b, c);
}
def test3(f: (int, int, int) -> A, p1: int, p2: int, p3: int) -> int {
	check(fun (x: int, y: int) => f(p1, x,  y), (p2, p3));
	check(fun (x: int, y: int) => f(x,  p2, y), (p1, p3));
	check(fun (x: int, y: int) => f(x,  y,  p3), (p1, p2));

	test2(fun (x: int, y: int) => f(p1, x,  y), p2, p3);
	test2(fun (x: int, y: int) => f(x,  p2, y), p1, p3);
	test2(fun (x: int, y: int) => f(x,  y,  p3), p1, p2);

	return if(failed == 0, expect);
}
def test2(f: (int, int) -> A, p1: int, p2: int) {
	check(fun (x: int) => f(p1, x), p2);
	check(fun (x: int) => f(x, p2), p1);
}
def check<P>(f: P -> A, p: P) {
	if (expect != f(p).r) failed++;
}
