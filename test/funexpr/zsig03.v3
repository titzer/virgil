//@execute -1=0; 0=-1; 1=-1
type Value {
	case None;
	case I32(val: int);
}

type HostResult {
	case None;
	case Value1(v: Value);
}

def ri = fun (x: int) => HostResult.Value1(Value.I32(x));
def rv = fun => HostResult.None;
def ui = fun (v: Value) => Value.I32.!(v).val;

def adapt_i_i = fun(f: int -> int) => fun (args: Range<Value>) => ri(f(ui(args[0])));
def adapt_i_v = fun(f: int -> void) => fun (args: Range<Value>) => rv(f(ui(args[0])));

def add_one(x: int) => x + 1;
def do_none(x: int) => ();

def host_add_one = adapt_i_i(add_one);
def host_do_none = adapt_i_v(do_none);

def main(a: int) -> int {
	var host = if(a < 0, host_add_one, host_do_none);
	var r = host([Value.I32(a)]);
	match (r) {
		None => return -1;
		Value1(v) => match (v) {
			None => return -2;
			I32(val) => return val;
		}
	}
}
