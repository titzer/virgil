//@execute 0=0; 1=3; -7=105
type Function(invoke: Array<u32> -> Result) #unboxed;
type Result {
	case None;
	case Value(val: u32);
}

def ii_i(func: (u32, u32) -> u32) =>	Function(fun a => Result.Value(func(a[0], a[1])));
def ii_r(func: (u32, u32) -> Result) =>	Function(fun a => func(a[0], a[1]));

class Adapter {
	def func() -> Function;
}
class AdapterOf<P, R>(f: P -> R, adapter: (P -> R) -> Function) extends Adapter {
	def func() => adapter(f);
}

def foo(a: u32, b: u32) -> Result { return Result.Value(a + b); }
def bar(a: u32, b: u32) -> u32 { return 112; }

def main(a: u32) -> u32 {
	var t: Adapter;
	if (a >= 0) t = AdapterOf<(u32, u32), Result>.new(foo, ii_r);
	if (a > 300) t = AdapterOf<(u32, u32), u32>.new(bar, ii_i);
	var hf = t.func();
	match (hf.invoke([a, a])) {
		None => ;
		Value(val) => return a + val;
	}
	return 0;
}
