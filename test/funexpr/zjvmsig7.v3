//@execute 0=0; 1=3; -7=105
type HostFunction(invoke: Array<u32> -> u64) #unboxed;

component HostAdapters {
	def ii_i(func: (u32, u32) -> u32) =>	HostFunction(fun a => u64.view(func(a[0], a[1])));
	def ii_l(func: (u32, u32) -> u64) =>	HostFunction(fun a => func(a[0], a[1]));
}
class Adapter {
	def func(i: HostInstance) -> HostFunction;
}
class AdapterOf<P, R>(f: HostInstance -> P -> R, adapter: (P -> R) -> HostFunction) extends Adapter {
	def func(i: HostInstance) => adapter(f(i));
}

class HostInstance {
	def fd_write(a: u32, b: u32) -> u64 { return a + b; }
	def poll_oneoff(a: u32, b: u32) -> u32 { return 112; }
}

def get_fd_write(i: HostInstance) => i.fd_write;
def get_poll_oneoff(i: HostInstance) => i.poll_oneoff;

def main(a: u32) -> u32 {
	var t: Adapter;
	if (a >= 0) t = AdapterOf<(u32, u32), u64>.new(get_fd_write, HostAdapters.ii_l);
	if (a > 300) t = AdapterOf<(u32, u32), u32>.new(get_poll_oneoff, HostAdapters.ii_i);
	var hf = t.func(HostInstance.new());
	var val = u32.!(hf.invoke([a, a]));
	return a + val;
}
