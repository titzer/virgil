//@execute 0=0; 1=3; -7=105
type HostFunction(invoke: Array<u32> -> HostResult) #unboxed;
type HostResult {
	case Value0;
	case Value1(val: u32);
}

component HostAdapters {
	def ii_i(func: (u32, u32) -> u32) =>		HostFunction(fun a => HostResult.Value1(func(a[0], a[1])));
	def ii_r(func: (u32, u32) -> HostResult) =>	HostFunction(fun a => func(a[0], a[1]));
}
class Adapter {
	def func(i: HostInstance) -> HostFunction;
}
class AdapterOf<P, R>(f: HostInstance -> P -> R, adapter: (P -> R) -> HostFunction) extends Adapter {
	def func(i: HostInstance) => adapter(f(i));
}

class HostInstance {
	def fd_write(a: u32, b: u32) -> HostResult { return HostResult.Value1(a + b); }
	def poll_oneoff(a: u32, b: u32) -> u32 { return 112; }
}

def main(a: u32) -> u32 {
	var t: Adapter;
	if (a >= 0) t = AdapterOf<(u32, u32), HostResult>.new(fun i => i.fd_write, HostAdapters.ii_r);
	if (a > 300) t = AdapterOf<(u32, u32), u32>.new(fun i => i.poll_oneoff, HostAdapters.ii_i);
	var hf = t.func(HostInstance.new());
	match (hf.invoke([a, a])) {
		Value0 => ;
		Value1(val) => return a + val;
	}
	return 0;
}
