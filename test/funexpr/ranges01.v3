//@execute 0=32
component Ranges {
	// Sort the range {r} in place using Quicksort using the {cmp} function.
	def quicksort<T>(r: Range<T>, cmp: (T, T) -> bool) {
		if (r.length <= 1) return;
		if (r.length == 2) {
			var a = r[0], b = r[1];
			if (cmp(b, a)) { r[0] = b; r[1] = a; }
			return;
		}
		def pi = partition(r, cmp);
		if (pi > 1) quicksort(r[0 ... pi], cmp);
		if (pi < r.length) quicksort(r[pi ...], cmp);
	}
	private def partition<T>(r: Range<T>, cmp: (T, T) -> bool) -> int {
		var i = 0, j = r.length - 1;
		def pivot = r[j];
		while (i <= j) {
			var a = r[i];
			if (cmp(a, pivot)) {
				i++;
			} else {
				r[i] = r[j];
				r[j] = a;
				j--;
			}
		}
		return i;
	}
}

def main(a: int) -> int {
	var x = [8d, -4, 3, 11];
	Ranges.quicksort<double>(x, fun (x, y) => x < y);
	var p = 0d - double.infinity;
	for (e in x) {
		if (e <= p) return -11;
		p = e;
	}
	return 32;
}
