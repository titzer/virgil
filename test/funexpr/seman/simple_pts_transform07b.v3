//@seman
class Transform<R, E> {
	def visitA(n: A, e: E) -> R;
	def visitB(n: B, e: E) -> R;
}
class S {
	def accept<R, E>(v: Transform<R, E>, e: E) -> R;
}
class A extends S {
	def accept<R, E>(v: Transform<R, E>, e: E) => v.visitA(this, e);
}
class B extends S {
	def accept<R, E>(v: Transform<R, E>, e: E) => v.visitB(this, e);
}
class PriceList {
}
class Jewels {
}
class Thief extends Transform<Jewels, PriceList> {
	def visitA(n: A, e: PriceList) => null;
	def visitB(n: B, e: PriceList) => null;
}
