// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// All data structure layouts for X86-64 linux kernel calls.
// Empirically derived from C declarations in headers.

layout statbuf {
	+0	st_dev:		u64;
	+8	st_ino:		u64;
	+16	st_mode:	u64;
	+24	st_nlink:	u64;
//	+28	st_uid:		u32;
	+32	st_gid:		u32;
	+48	st_size:	u64;
	+56	st_blksize:	u64;
	+64	st_blocks:	u64;
	+72	st_atim:	timespec;
	+88	st_mtim:	timespec;
	+104	st_ctim:	timespec;
	=144;
}

layout sigaction {
	+0	sa_handler:	u64/*:Pointer*/;
	+8	sa_mask:	byte[16]; // TODO
	+136	sa_flags:	u32;
	+144	sa_restorer:	u64/*:Pointer*/;
	=152;
}

layout iovec {
	+0	iov_base:	u64/*:Pointer*/;
	+8	iov_len:	u64;
	=16;
}

layout pollfd {
	+0	fd:		u32;
	+4	events:		u16;
	+6	revents:	u16;
	=8;
}

layout shmid_ds {
	+0	shm_perm:	u32/*:ipc_perm*/;
	+48	shm_segsz:	u64;
	+56	shm_atime:	u64;
	+64	shm_dtime:	u64;
	+72	shm_ctime:	u64;
	+80	shm_cpid:	u32;
	+84	shm_lpid:	u32;
	+92	shm_nattch:	u32/*:shmatt*/;
	=112;
}

layout timespec {
	+0	tv_sec:		u64;
	+8	tv_nsec:	u64;
	=16;
}

layout timeval {
	+0	tv_sec:		u64;
	+8	tv_usec:	u64;
	=16;
}

layout itimerval {
	+0	it_interval:	timeval;
	+16	it_value:	timeval;
	=32;
}

layout sockaddr {
	=16;	// TODO: members of sockaddr
}

layout msghdr {
	+0	msg_name:	u64/*:Pointer*/;
	+8	msg_namelen:	u64;
	+16	msg_iov:	u64/*:Pointer<iovec>*/;
	+24	msg_iovlen:	u64;
	+32	msg_control:	u64/*:Pointer*/;
	+40	msg_controllen:	u64;
	+48	msg_flags:	u32;
	=56;
}

layout sembuf {
	+0	sem_num:	u16;
	+2	sem_op:		u16;
	+4	sem_flg:	u16;
	=6;
}

layout msgbuf/*(K: u32)*/ {
	+0	mtype:	u32;
	+8	mtext:	byte[1]; // TODO
	=9 /*+ K*/;
}

layout dirent/*(K: u32)*/ {
	+0	d_ino:		u32;
	+8	d_off:		u64;
	+16	d_reclen:	u16;
	+18	d_type:		byte;
	+19	d_name:		byte[1]; // TODO
//TODO	+19/*+K*/	d_zero:		byte; // TODO
	=20/*+K+1*/;
}

layout timezone {
	+0	tz_minuteswest:	u32;
	+4	tz_dsttime:	u32;
	=8;
}

layout siginfo {
	+0	si_signo:	u32;
	+4	si_errno:	u32;
	+8	si_code:	u64;
	+16	si_pid:		u32;
//TODO	+16	si_timerid:	u32;
//TODO	+16	si_addr:	u32;
//TODO	+16	si_band:	u32;
//TODO	+16	si_call_addr:	u32;
	+24	si_status:	u32;
//TODO	+24	si_value:	u32;
//TODO	+24	si_int:	u32;
//TODO	+24	si_fd:	u32;
//TODO	+24	si_addr_lsb:	u32;
//TODO	+24	si_ptr:	u32;
//TODO	+24	si_syscall:	u32;
	+32	si_utime:	u32;
//TODO	+32	si_lower:	u32;
//TODO	+32	si_pkey:	u32;
	+40	si_stime:	u32;
//TODO	+40	si_upper:	u32;
	+20	si_uid:	u32;
//TODO	+20	si_overrun:	u32;
	+28	si_arch:	u32;
	=148;
}

layout utimbuf {
	+0	actime:		u64;
	+8	modtime:	u64;
	=16;
}

layout ustat {
	+0	f_tfree:	u64;
	+8	f_tinode:	u64;
	+16	f_fname:	byte[6];
	+22	f_fpack:	byte[6];
	=32;
}

layout statfs {
	+0	f_type:		u64;
	+8	f_bsize:	u64;
	+16	f_blocks:	u64;
	+24	f_bfree:	u64;
	+32	f_bavail:	u64;
	+40	f_files:	u64;
	+48	f_ffree:	u64;
	+56	f_fsid:		u64;
	+64	f_namelen:	u64;
	+72	f_frsize:	u64;
	+80	f_flags:	u64;
	=120;
}

layout sched_param {
	+0	sched_priority:		u32;
	=4;
}

layout rlimit {
	+0	rlim_cur: u64;
	+8	rlim_max: u64;
	=16;
}

layout pt_regs { // TODO
	=128;
}

layout iocb {
	+0	aio_data:	u64;
	+8	aio_key:	u32;
	+12	aio_rw_flags:	u32;
	+16	aio_lio_opcode:	u16;
	+18	aio_reqprio:	i16;
	+20	aio_fildes:	u32;
	+24	aio_buf:	u64;
	+32	aio_nbytes:	u64;
	+40	aio_offset:	i64;
	+56	aio_flags:	u32;
	+60	aio_resfd:	u32;
	=64;
}

layout sigevent {
	+0	sigev_value:			u64; // TODO
	+8	sigev_signo:			u32;
	+12	sigev_notify:			u32;
	+16	sigev_notify_function:		u64/*:Pointer*/;
	+24	sigev_notify_attributes:	u64/*:Pointer*/;
	=64;
}

layout itimerspec {
	+0	it_interval:	timespec;
	+16	it_value:	timespec;
	=32;
}

layout epoll_event {
	+0	events:		u32;
	+4	ptr:		u64/*:Pointer*/;
//TODO	+4	fd:		u32;
//TODO	+4	data:		u64;
	=12;
}

layout kexec_segment {
	+0	buf:	u64/*:Pointer*/;
	+8	bufsz:	u64;
	+16	mem:	u64/*:Pointer*/;
	+24	memsz:	u64;
	=32;
}

layout rusage {
	+0	ru_utime:	timeval;
	+16	ru_stime:	timeval;
	+32	ru_maxrss:	u64;
	+40	ru_ixrss:	u64;
	+48	ru_idrss:	u64;
	+56	ru_isrss:	u64;
	+64	ru_minflt:	u64;
	+72	ru_majflt:	u64;
	+80	ru_nswap:	u64;
	+88	ru_inblock:	u64;
	+96	ru_oublock:	u64;
	+104	ru_msgsnd:	u64;
	+112	ru_msgrcv:	u64;
	+120	ru_nsignals:	u64;
	+128	ru_nvcsw:	u64;
	+136	ru_nivcsw:	u64;
	=144;
}

layout robust_list_head {
	+0	list:			u64/*:Pointer*/;
	+8	futex_offset:		u64;
	+16	list_op_pending:	u64/*:Pointer*/;
	=24;
}

layout file_handle/*(K: u32)*/ {
	+0	handle_bytes:	u32;
	+4	handle_type:	u32;
	+8	f_handle:	byte[1]; // TODO
	=9 /*+ K*/;
}

layout mmsghdr {
	+0	msg_hdr:	msghdr;
	+56	msg_len:	u32;
	=64;
}

layout sched_attr {
	+0	size:		u32;
	+4	sched_policy:	u32;
	+8	sched_flags:	u64;
	+16	sched_nice:	i32;
	+20	sched_priority:	u32;
	+24	sched_runtime:	u64;
	+32	sched_deadline:	u64;
	+40	sched_period:	u64;
	=48;
}

layout ucontext {
	+120	rbp: u64;
	+160	rsp: u64;
	+168	rip: u64;
	=936;
}

layout statx_timestamp {
	+0	tv_sec: u64;
        +8      tv_nsec: u32;
        =16;
}

layout statx {
	+0	stx_mask:	u32;
	+4	stx_blksize:	u32;
	+8	stx_attributes:	u64;
	+16	stx_nlink:	u32;
//	+20	stx_uid:	u32;
	+24	stx_gid:	u32;
	+28	stx_mode:	u16;
	+32	stx_ino:	u64;
	+40	stx_size:	u64;
	+48	stx_blocks:	u64;
	+56	stx_attributes_mask:	u64;
	+64	stx_atime:	statx_timestamp;
	+80	stx_btime:	statx_timestamp;
	+96	stx_ctime:	statx_timestamp;
	+112	stx_mtime:	statx_timestamp;
	+128	stx_rdev_major:	u32;
	+132	stx_rdev_minor:	u32;
	+136	stx_dev_major:	u32;
	+140	stx_dev_minor:	u32;
	+144	stx_mnt_id:	u64;
	=256;
}
