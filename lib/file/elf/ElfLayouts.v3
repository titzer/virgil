// Copyright 2022 Virgil Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The magic constant at the beginning of ELF files.
enum ElfMagic(code: u32) {
	EI_MAGIC(0x464c457Fu)
}

// Enumeration of constants for ElfHeader.ei_class
enum ElfClass(code: byte) {
	ELFCLASS32(1),
	ELFCLASS64(2)
}

// Enumeration of constants for ElfHeader.ei_data
enum ElfData(code: byte) {
	ELFDATA2LSB(1),
	ELFDATA2MSB(2)
}

// Enumeration of the constants for ElfHeader.e_machine
enum ElfMachine(code: byte) {
	EM_NONE(0),
	EM_386(3),
	EM_MIPS(8),
	EM_PPC(20),
	EM_PPC64(21),
	EM_ARM(40),
	EM_X86_64(62),
	EM_AARCH64(183),
	EM_RISCV(243)
}

// Enumeration of constants for ElfHeader.e_type
enum ElfType(code: u16) {
	ET_REL(1),
	ET_EXEC(2),
	ET_DYN(3),
	ET_CORE(4)
}

// Enumeration for the constants for ElfProgramHeader.p_type
enum ElfPhType(code: u32) {
	PT_NULL(0),
	PT_LOAD(1),
	PT_DYNAMIC(2),
	PT_INTERP(3),
	PT_NOTE(4),
	PT_SHLIB(5),
	PT_PHDR(6)
}

// Enumeration for the constants for ElfSectionHeader.sh_type
enum ElfShType(code: u32) {
	SHT_PROGBITS(1),
	SHT_SYMTAB(2),
	SHT_STRTAB(3)
}

// 32-bit little-endian header.
layout Elf32le_Header {
	+0	magic: 		u32; // = 0x464c457Fu "\x7felf"
	+4	ei_class: 	byte;
	+5	ei_data:	byte;
	+6	ei_version:	byte;
	+16	e_type:		u16;
	+18	e_machine: 	byte;
	+20	e_version:	byte;
	+24	e_entry:	u32;
	+28	e_phoff:	u32;
	+32	e_shoff:	u32;
	+36	e_flags:	u32; // TODO: define flags
	+40	e_ehsize:	u16;
	+42	e_phentsize:	u16;
	+44	e_phnum:	u16;
	+46	e_shentsize:	u16;
	+48	e_shnum:	u16;
	+50	e_shstrndx:	u16;
	=52;
}

// 64-bit little-endian header.
layout Elf64le_Header {
	+0	magic: 		u32; // == "\x7fELF"
	+4	ei_class: 	byte;
	+5	ei_data:	byte;
	+6	ei_version:	byte;
	+16	e_type:		u16;
	+18	e_machine:	u16;
	+20	e_version:	u32;
	+24	e_entry:	u64;
	+32	e_phoff:	u64;
	+40	e_shoff:	u64;
	+48	e_flags:	u32;
	+52	e_ehsize:	u16;
	+54	e_phentsize:	u16;
	+56	e_phnum:	u16;
	+58	e_shentsize:	u16;
	+60	e_shnum:	u16;
	+62	e_shstrndx:	u16;
	=64;
}

// 32-bit little-endian program header.
layout Elf32le_ProgramHeader {
	+0	p_type:		u32;
	+4	p_offset:	u32;
	+8	p_vaddr:	u32;
	+12	p_paddr:	u32;
	+16	p_filesz:	u32;
	+20	p_memsz:	u32;
	+24	p_flags:	u32; // TODO: define flags
	+28	p_align:	u32;
	=32;
}

// 64-bit little-endian program header.
layout Elf64le_ProgramHeader {
	+0	p_type:		 u32;
	+4	p_flags:	 u32;
	+8	p_offset:	 u64;
	+16	p_vaddr:	 u64;
	+24	p_paddr:	 u64;
	+32	p_filesz:	 u64;
	+40	p_memsz:	 u64;
	+48	p_align:	 u64;
	=56;
}

// 32-bit little-endian section header
layout Elf32le_SectionHeader {
	+0	sh_name:	u32;
	+4	sh_type:	u32;
	+8	sh_flags:	u32;
	+12	sh_addr:	u32;
	+16	sh_offset:	u32;
	+20	sh_size:	u32;
	+24	sh_link:	u32;
	+28	sh_info:	u32;
	+32	sh_addralign:	u32;
	+36	sh_entsize:	u32;
	=40;
}

// 64-bit little-endian section header.
layout Elf64le_SectionHeader  {
	+0	sh_name:	u32;
	+4	sh_type:	u32;
	+8	sh_flags:	u64;
	+16	sh_addr:	u64;
	+24	sh_offset:	u64;
	+32	sh_size:	u64;
	+40	sh_link:	u32;
	+44	sh_info:	u32;
	+48	sh_addralign:	u64;
	+56	sh_entsize:	u64;
	=64;
}

// Little-endian representation of a symbol.
layout Elf32le_Symbol {
	+0	st_name:	u32;
	+4	st_value:	u32;
	+8	st_size:	u32;
	+12	st_info:	byte;
	+13	st_other:	byte;
	+14	st_index:	u16;
	=16;
}

// Little-endian representation of a symbol.
layout Elf64le_Symbol {
	+0	st_name:	u32;
	+4	st_info:	u8;
	+5	st_other:	u8;
	+6	st_shndx:	u16;
	+8	st_value:	u64;
	+16	st_size:	u64;
	=24;
}

layout Elf32le_Rel {
	+0	r_offset:	u32;
	+4	r_info:		u32;
	=8;
}

layout Elf64le_Rel {
	+0	r_offset:	u64;
	+8	r_info:		u64;
	=16;
}

layout Elf32le_Rela {
	+0	r_offset:	u32;
	+4	r_info:		u32;
	+8	r_addend:	i32;
	=12;
}

layout Elf64le_Rela {
	+0	r_offset:	u64;
	+8	r_info:		u64;
	+16	r_addend:	i64;
	=24;
}
