// Copyright 2025 Virgil Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Parses a text file in column-separated-value format into an in-memory
// form where all rows and columns are accessible.
class CsvParser(fileName: string, data: Array<byte>) {
	def text = TextReader.new(fileName, data);
	private var rows = Vector<(int, int)>.new();
	private var cells = Vector<string>.new();

	new() {
		text.skipWs = TextReader.skipNothing;
	}

	// Parse the input into columns and rows.
	def parse() -> CsvData {
		// Parse the first row, which contains the column names.
		parseRow();
		var columns = cells.extract();
		rows.resize(0);

		// Parse rows of data.
		while (text.pos < text.limit) {
			var row = parseRow();
			if (row.1 > row.0) rows.put(row);
		}
		return CsvData.new(columns, rows.extract(), cells.extract());
	}
	private def parseRow() -> (int, int) {
		var prev_cell = cells.length;
		var prev = text.pos;
		while (text.pos < text.limit) {
			match (text.char) { // XXX: handle tab, newline, and other whitespace here.
				',' => {
					var cell = Ranges.dup(text.data[prev ... text.pos]);
					cells.put(cell);
					prev = text.advance1().pos;
				}
				'\n' => {
					var cell = Ranges.dup(text.data[prev ... text.pos]);
					cells.put(cell);
					text.advance1();
					return (prev_cell, cells.length);
				}
				_ => {
					text.advance1();
				}
			}
		}
		if (text.pos > prev) {
			var cell = Ranges.dup(text.data[prev ... text.pos]);
			cells.put(cell);
		}
		return (prev_cell, cells.length);
	}

}

// The result of parsing CSV data, consisting of column names and rows of data.
class CsvData {
	def columns: Array<string>;	// names of all columns
	def rows: Array<(int, int)>;	// ranges of each row within {cells}
	def cells: Array<string>;	// strings for each row+column

	new(columns, rows, cells) {}

	// Returns the given row of values.
	def [i: int] -> Range<string> { // XXX: range<string>
		var t = rows[i];
		return cells[t.0 ... t.1];
	}
}
