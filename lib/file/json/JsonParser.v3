type JsonValue {
	case String(v: string);
	case Int(v: int);
	// TODO: support for double (needs floating-point rendering)
	// case Double(v: double);
	case Bool(v: bool);
	case Null;
	case JArray(v: Array<JsonValue>);
	case JObject(v: HashMap<string, JsonValue>);

	def equal(that: JsonValue) -> bool {
		if (this == that) return true;
		if (JsonValue.String.?(this) && JsonValue.String.?(that)) {
			return Strings.equal(JsonValue.String.!(this).v, JsonValue.String.!(that).v);
		}
		if (JsonValue.Int.?(this) && JsonValue.Int.?(that)) {
			return JsonValue.Int.!(this).v == JsonValue.Int.!(that).v;
		}
		if (JsonValue.Bool.?(this) && JsonValue.Bool.?(that)) {
			return JsonValue.Bool.!(this).v == JsonValue.Bool.!(that).v;
		}
		if (JsonValue.Null.?(this) && JsonValue.Null.?(that)) return true;
		if (JsonValue.JArray.?(this) && JsonValue.JArray.?(that)) {
			var x = JsonValue.JArray.!(this).v;
			var y = JsonValue.JArray.!(that).v;
			if (x.length != y.length) return false;
			for (i < x.length) if (!x[i].equal(y[i])) return false;
			return true;
		}
		if (JsonValue.JObject.?(this) && JsonValue.JObject.?(that)) {
			var x_map = JsonValue.JObject.!(this).v;
			var y_map = JsonValue.JObject.!(that).v;
			var x = MapCollector.new(Strings.asciiLt, x_map).extract();
			var y = MapCollector.new(Strings.asciiLt, y_map).extract();
			if (x.length != y.length) return false;
			for (i < x.length) if (!Strings.equal(x[i].0, y[i].0) || !x[i].1.equal(y[i].1)) return false;
			return true;
		}

		return false;
	}

	def render(buf: StringBuilder) -> StringBuilder {
		match (this) {
			String(s) => Strings.renderLiteral(buf, s);
			Int(v) => buf.put1("%d", v);
			Bool(v) => buf.puts(if(v, "true", "false"));
			Null => buf.puts("null");
			JArray(a) => {
				buf.putc('[');
				if (a.length > 0) a[0].render(buf);
				for (i = 1; i < a.length; i++) buf.put1(", %q", a[i].render);
				buf.putc(']');
			}
			JObject(map) => {
				var elems = MapCollector.new(Strings.asciiLt, map).extract();
				buf.putc('{');
				if (elems.length > 0) buf.put2("%q: %q", Strings.renderLiteral(_, elems[0].0), elems[0].1.render);
				for (i = 1; i < elems.length; i++) {
					buf.put2(", %q: %q", Strings.renderLiteral(_, elems[i].0), elems[i].1.render);
				}
				buf.putc('}');
			}
		}
		return buf;
	}
}

def ERR_RET = JsonValue.Null;
class JsonParser extends TextReader {

	new(text: Array<byte>) super("", text) {}

	def parseValue() -> JsonValue {
		skipWs(this);
		if (testEOF()) return ERR_RET;

		if (char == '\"') return parseString();
		if (char == '-' || char >= '0' && char <= '9') return parseNumber();

		if (optN("null") != -1) return JsonValue.Null;
		if (optN("true") != -1) return JsonValue.Bool(true);
		if (optN("false") != -1) return JsonValue.Bool(false);

		if (char == '[') return parseArray();
		if (char == '{') return parseObject();

		fail(Strings.format1("expected JSON value, got character '%c'", char));
		return ERR_RET;
	}

	def parseString() -> JsonValue {
		var res = Strings.parseLiteral(data, pos);
		var len = res.0;
		if (len <= 0) {
			fail("invalid string");
			return ERR_RET;
		}
		var lit = readToken(len).image;
		return JsonValue.String(Ranges.dup(lit[1 ... lit.length - 1]));
	}

	def parseNumber() -> JsonValue {
		var res = Ints.parseDecimal(data, pos);
		var len = res.0, val = res.1;
		if (len <= 0) {
			fail("invalid number");
			return ERR_RET;
		}
		advance(len);
		return JsonValue.Int(val);
	}

	private def parseObjectEntry() -> (string, JsonValue) {
		var ERR_VAL = ("", ERR_RET);

		var key = parseString();
		if (!ok || req1(':') == -1) return ERR_VAL;
		var val = parseValue();
		if (!ok) return ERR_VAL;
		return (JsonValue.String.!(key).v, val);
	}

	def parseObject() -> JsonValue {
		var dict = HashMap<string, JsonValue>.new(Strings.hash, Strings.equal);
		var entry: (string, JsonValue);
		if (req1('{') == -1) return ERR_RET;
		if (opt1('}') != -1) return Jsons.empty();
		entry = parseObjectEntry();
		dict[entry.0] = entry.1;
		if (!ok) return ERR_RET;
		while (opt1(',') != -1) {
			entry = parseObjectEntry();
			if (!ok) return ERR_RET;
			dict[entry.0] = entry.1;
		}
		if (req1('}') == -1) return ERR_RET;
		return JsonValue.JObject(dict);
	}

	def parseArray() -> JsonValue {
		var vals = Vector<JsonValue>.new();
		if (req1('[') == -1) return ERR_RET;
		if (opt1(']') != -1) return Jsons.emptyArray();
		vals.put(parseValue());
		if (!ok) return ERR_RET;
		while (opt1(',') != -1) {
			vals.put(parseValue());
			if (!ok) return ERR_RET;
		}
		if (req1(']') == -1) return ERR_RET;
		return JsonValue.JArray(vals.extract());
	}

	def testEOF() -> bool {
		var eof = pos >= data.length;
		if (eof) fail("unexpected end of input");
		return eof;
	}
}

class MapCollector<K, V> {
	def cmp: (K, K) -> bool;
	def pairs = Vector<(K, V)>.new();

	new(cmp, map: HashMap<K, V>) { map.apply(collect); }
	def collect(k: K, v: V) { pairs.put((k, v)); }
	def extract() -> Array<(K, V)> {
		var arr = pairs.extract();
		return Arrays.sort(arr, 0, arr.length, cmp_entries);
	}
	private def cmp_entries(a: (K, V), b: (K, V)) -> bool {
		return cmp(a.0, b.0);
	}
}

component Jsons {
	def emptyArray() -> JsonValue.JArray { return JsonValue.JArray([]); }
	def empty() -> JsonValue.JObject {
		return JsonValue.JObject(Strings.newMap<JsonValue>());
	}
	def makeArray<T>(vs: Range<T>, f: T -> JsonValue) -> JsonValue.JArray {
		return JsonValue.JArray(Ranges.map(vs, f));
	}
	def intArray(vs: Range<int>) -> JsonValue.JArray {
		return makeArray(vs, JsonValue.Int);
	}
	def strArray(vs: Range<string>) -> JsonValue.JArray {
		return JsonValue.JArray(Ranges.map(vs, JsonValue.String));
	}
}

class JsonBuilder {
	def entries = Strings.newMap<JsonValue>();
	def add(key: string, v: JsonValue) -> this { entries[key] = v; } 
	def str(key: string, v: string) -> this { entries[key] = JsonValue.String(v); }
	def num(key: string, v: int) -> this { entries[key] = JsonValue.Int(v); }
	def boo(key: string, v: bool) -> this { entries[key] = JsonValue.Bool(v); }
	def arr(key: string, v: Array<JsonValue>) -> this { entries[key] = JsonValue.JArray(v); }
	def nil(key: string) -> this { entries[key] = JsonValue.Null; }
	def build() -> JsonValue.JObject { return JsonValue.JObject(entries); }
}
