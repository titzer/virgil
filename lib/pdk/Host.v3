// `Memory` represents memory allocated by (and shared with) the host.
class Memory {
  var offset: i64;
  var length: i64;

  new(offset, length) {}
}

// `Host` represents functions used to interact with the Extism host SDK.
component Host {
  // `input` returns a sequence of bytes from the host.
  def input() -> Array<byte> {
    def length = Extism.input_length();
    def value = Array<byte>.new(int.view(length));
    for (j = 0; j < length; j = j + 1) {
  		value[j] = Extism.input_load_u8(j);
	  }
  	return value;
  }

  // `inputString` returns a string from the host.
  def inputString() -> string {
    return string.!(input());
  }

  // `outputBytesToMemory` writes the bytes to a Memory buffer on the host.
  private def outputBytesToMemory(b: Array<byte>) -> Memory {
    def offset = Extism.alloc(b.length);
    for (i = 0; i < b.length; i = i + 1) {
      Extism.store_u8(offset + long.view(i), b[i]);
    }
    return Memory.new(offset, b.length);
  }

  // `output` sends an array of bytes to the host as the plugin's "output".
  def output(b: Array<byte>) {
    def mem = outputBytesToMemory(b);
    Extism.output_set(mem.offset, mem.length);
  }

  // `outputString` and sends a string to the host.
  def outputString(s: string) {
    output(Array<byte>.!(s));
  }

  // outputJsonValue sends a JSON blob to the host.
  def outputJsonValue(j: void) {
    // TODO
  }
}