// `Host` represents functions used to interact with the Extism host SDK.
component Host {
	// `input` returns a sequence of bytes from the host.
	def input() -> Array<byte> {
		def length = Extism.input_length();
		def value = Array<byte>.new(int.view(length));
		for (j < length) {
			value[j] = Extism.input_load_u8(j);
		}
		return value;
	}

	// `inputString` returns a string from the host.
	def inputString() -> string {
		return string.!(input());
	}

	// `outputBytesToMemory` writes the bytes to a Memory buffer on the host.
	private def outputBytesToMemory(b: Array<byte>) -> Memory {
		def offset = Extism.alloc(b.length);
		for (i < b.length) {
			Extism.store_u8(offset + long.view(i), b[i]);
		}
		return Memory.new(offset, b.length);
	}

	// `output` sends an array of bytes to the host as the plugin's "output".
	def output(b: Array<byte>) {
		def mem = outputBytesToMemory(b);
		Extism.output_set(mem.offset, mem.length);
	}

	// `outputString` and sends a string to the host.
	def outputString(s: string) {
		output(Array<byte>.!(s));
	}

	// `outputJsonValue` sends a JSON blob to the host.
	def outputJsonValue(j: void) {
		// TODO
	}

	// `logWarnStr` is a helper function to log a warning string to the host.
	def logWarnStr(s: string) {
		def mem = outputBytesToMemory(Array<byte>.!(s));
		Extism.log_warn(mem.offset);
		Extism.free(mem.offset);
	}

	// `logInfoStr` is a helper function to log an info string to the host.
	def logInfoStr(s: string) {
		def mem = outputBytesToMemory(Array<byte>.!(s));
		Extism.log_info(mem.offset);
		Extism.free(mem.offset);
	}

	// `logDebugStr` is a helper function to log a debug string to the host.
	def logDebugStr(s: string) {
		def mem = outputBytesToMemory(Array<byte>.!(s));
		Extism.log_debug(mem.offset);
		Extism.free(mem.offset);
	}

	// `logErrorStr` is a helper function to log an error string to the host.
	def logErrorStr(s: string) {
		def mem = outputBytesToMemory(Array<byte>.!(s));
		Extism.log_error(mem.offset);
		Extism.free(mem.offset);
	}

	// `allocate` allocates an uninitialized (determined by host)
	// area of shared memory on the host.
	def allocate(length: i64) -> Memory {
		return Memory.new(Extism.alloc(length), length);
	}

	// `allocateBytes` allocates and initializes host memory
	// with the provided (unprocessed) bytes.
	def allocateBytes(bytes: Array<byte>) -> Memory {
		def offset = Extism.alloc(bytes.length);
		for (i < bytes.length) {
			Extism.store_u8(offset + i, bytes[i]);
		}
		return Memory.new(offset, bytes.length);
	}

	// `allocateString` allocates and initializes a UTF-8 string
	// in host memory that is converted from this UTF-16 MoonBit String.
	def allocateString(s: string) -> Memory {
		return allocateBytes(Array<byte>.!(s));
	}

	// `allocateJsonValue` allocates and initializes a UTF-8 string
	// in host memory that is converted from this `@json.JsonValue`.
	def allocateJsonValue(j: void) -> Memory {
		// TODO
		return Memory.new(0, 0);
	}
}