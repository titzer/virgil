// `Request` represents an HTTP request made by the Extism host.
class Request(method: Method, header: Header, url: string) {
	def toJson() -> string {
		var b = StringBuilder.new();
		b.put1("{\"method\":\"%s\",", method.name);
		b.put1("\"header\":%s,", header.toJson());
		b.put1("\"url\":\"%s\"}", url);
		return b.toString();
	}

	// `send` sends the `Request` to the host, waits for a response,
	// and returns it to the caller.
	// Note that the (possibly null) `body` is freed by this call.
	def send(body: Memory) -> Response {
		def metaMem = Host.allocateString(this.toJson());
		var bodyMemoryOffset: i64 = 0;
		if (body != null) { bodyMemoryOffset = body.offset; }
		//
		def responseOffset = Extism.http_request(metaMem.offset, bodyMemoryOffset);
		def responseLength = Extism.length(responseOffset);
		def statusCode = Extism.http_status_code();
		//
		metaMem.free();
		if (body != null) { body.free(); }
		//
		def responseBody = Memory.new(responseOffset, responseLength);
		return Response.new(statusCode, responseBody);
	}
}

// `Response` represents an HTTP response from the Extism host.
class Response {
	var statusCode: int;
	var body: Memory;

	new(statusCode, body) {}

	// `output` sends the (unprocessed) `Response` body to the Extism host "output".
	def output() {
		body.output();
	}
}

component Http {
	// `newRequest` returns a new `Request` using the provided
	// `method` and `url`.
	def newRequest(method: Method, url: string) -> Request {
		def header = Header.new();
		return Request.new(method, header, url);
	}
}
