// `Memory` represents memory allocated by (and shared with) the host.
class Memory(offset: i64, length: i64) {
	// `free` releases this Memory from the host.
	def free() {
		Extism.free(offset);
	}

	// `output` sets the host's "output" to be the contents of this Memory data.
	def output() {
		Extism.output_set(offset, length);
	}

	// `toString` reads and returns the UTF-8 string residing in the host memory.
	def toString() -> string {
		return string.!(toBytes());
	}

	// `toInt` reads and converts the u32 residing in the host memory to an int.
	def toInt() -> int {
		def bytes = toBytes();
		return bytes[0] + (bytes[1] << 8) + (bytes[2] << 16) + (bytes[3] << 24);
	}

	// `toBytes` reads the (unprocessed) bytes residing in the host memory
	// to an array of bytes.
	def toBytes() -> Array<byte> {
		def bytes = Array<byte>.new(int.view(length));
		for (i < length) {
			bytes[i] = Extism.load_u8(offset + i);
		}
		return bytes;
	}
}
