// The {Maybe} algebraic data type can express 0 or 1 value of type {T}
type Maybe<T> {
	case None;
	case Some(t: T);
}

// `Config` represents functions used to get Extism host SDK "config" vars.
component Config {
	// `getMemory` returns a "config" Memory block from the host that is keyed by `key`.
	// Note that no processing is performed on this block of memory.
	def getMemory(key: string) -> Maybe<Memory> {
		def keyMem = Host.allocateString(key);
		def offset = Extism.config_get(keyMem.offset);
		keyMem.free();
		if (offset == 0L) {
			return Maybe<Memory>.None;
		}
		def length = Extism.length(offset);
		if (length == 0L) {
			return Maybe<Memory>.None;
		}
		return Maybe<Memory>.Some(Memory.new(offset, length));
	}

	// `get` returns a "config" string from the host that is keyed by `key`.
	def get(key: string) -> Maybe<string> {
		match (getMemory(key)) {
			Some(mem) => {
				def s = mem.toString();
				mem.free();
				return Maybe<string>.Some(s);
			}
			None => return Maybe<string>.None;
		}
	}
}
