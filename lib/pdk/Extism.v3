// `Extism` represents the low-level calls used to communicate with the Extism host SDK.
import "extism:host/env" component Extism {
	// `input_length` returns the number of bytes provided by the host via its input methods.
	// The user of this PDK will typically not call this method directly.
	def input_length() -> i64;

	// `input_load_u8` returns the byte at location `offset` of the "input" data from the host.
	// The user of this PDK will typically not call this method directly.
	def input_load_u8(offset : i64) -> byte;

	// `input_load_u64` returns the 64-bit unsigned integer of the "input" data from the host.
	// Note that MoonBit has no unsigned integers,
	// so the result is returned as an i64.
	// Also note that `offset` must lie on an 8-byte boundary.
	// The user of this PDK will typically not call this method directly.
	def input_load_u64(offset : i64) -> i64;

	// `length` returns the number of bytes associated with the block of host memory
	// located at `offset`.
	// The user of this PDK will typically not call this method directly.
	def length(offset : i64) -> i64;

	// `alloc` allocates `length` bytes of data with host memory for use by the plugin
	// and returns its `offset` within the host memory block.
	// The user of this PDK will typically not call this method directly.
	def alloc(length : i64) -> i64;

	// `free` releases the bytes previously allocated with `alloc` at the given `offset`.
	// The user of this PDK will typically not call this method directly.
	def free(offset : i64);

	// `output_set` sets the "output" data from the plugin to the host to be the memory that
	// has been written at `offset` with the given `length`.
	// The user of this PDK will typically not call this method directly.
	def output_set(offset : i64, length : i64);

	// `error_set` sets the "error" data from the plugin to the host to be the memory that
	// has been written at `offset`.
	// The user of this PDK will typically not call this method directly.
	def error_set(offset : i64);

	// `config_get` returns the host memory block offset for the "config" data associated with
	// the key which is represented by the UTF-8 string which as been previously
	// written at `offset`.
	// The user of this PDK will typically not call this method directly.
	def config_get(offset : i64) -> i64;

	// `var_get` returns the host memory block offset for the "var" data associated with
	// the key which is represented by the UTF-8 string which as been previously
	// written at `offset`.
	// The user of this PDK will typically not call this method directly.
	def var_get(offset : i64) -> i64;

	// `var_set` sets the host "var" memory keyed by the UTF-8 string located at `offset`
	// to be the value which has been previously written at `value_offset`.
	// The user of this PDK will typically not call this method directly.
	def var_set(offset : i64, value_offset : i64);

	// `store_u8` stores the byte `b` at location `offset` in the host memory block.
	// The user of this PDK will typically not call this method directly.
	def store_u8(offset : i64, b : byte);

	// `load_u8` returns the byte located at `offset` in the host memory block.
	// The user of this PDK will typically not call this method directly.
	def load_u8(offset : i64) -> byte;

	// `store_u64` stores the i64 value `v` at location `offset` in the host memory block.
	// Note that MoonBit does not have unsigned integers, but the host interprets
	// the provided `v` value as an unsigned 64-bit integer.
	// Also note that `offset` must lie on an 8-byte boundary.
	// The user of this PDK will typically not call this method directly.
	def store_u64(offset : i64, v : i64);

	// `load_u64` returns the 64-bit unsigned integer at location `offset` in the host memory block.
	// Note that MoonBit has no unsigned integers,
	// so the result is returned as an i64.
	// Also note that `offset` must lie on an 8-byte boundary.
	// The user of this PDK will typically not call this method directly.
	def load_u64(offset : i64) -> i64;

	// `http_request` sends the HTTP request to the Extism host and returns back the
	// memory offset to the response body.
	def http_request(req : i64, body : i64) -> i64;

	// `http_status_code` returns the status code for the last-sent `http_request` call.
	def http_status_code() -> int;

	// `log_warn` logs a "warning" string to the host from the previously-written UTF-8 string written to `offset`.
	// The user of this PDK will typically not call this method directly.
	def log_warn(offset : i64);

	// `log_info` logs an "info" string to the host from the previously-written UTF-8 string written to `offset`.
	// The user of this PDK will typically not call this method directly.
	def log_info(offset : i64);

	// `log_debug` logs a "debug" string to the host from the previously-written UTF-8 string written to `offset`.
	// The user of this PDK will typically not call this method directly.
	def log_debug(offset : i64);

	// `log_error` logs an "error" string to the host from the previously-written UTF-8 string written to `offset`.
	// The user of this PDK will typically not call this method directly.
	def log_error(offset : i64);
}