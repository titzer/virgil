// `Var` represents functions used to read and write the Extism host SDK "vars".
component Var {
	// `getMemory` returns the (unprocessed) host Memory block for the "var" data associated with
	// the provided `key`.
	def getMemory(key: string) -> Maybe<Memory> {
		def keyMem = Host.allocateString(key);
		def offset = Extism.var_get(keyMem.offset);
		keyMem.free();
		if (offset == 0L) {
			return Maybe<Memory>.None;
		}
		def length = Extism.length(offset);
		if (length == 0L) {
			return Maybe<Memory>.None;
		}
		return Maybe<Memory>.Some(Memory.new(offset, length));
	}

	// `getBytes` returns the (unprocessed) host Memory block for the "var" data associated with
	// the provided `key`.
	def getBytes(key: string) -> Maybe<Array<byte>> {
		match (getMemory(key)) {
			Some(v) => return Maybe<Array<byte>>.Some(v.toBytes());
			None => return Maybe<Array<byte>>.None;
		}
	}

	// `getInt` returns the host's "var" Int associated with the provided `key`.
	def getInt(key: string) -> Maybe<int> {
		match (getMemory(key)) {
			Some(v) => return Maybe<int>.Some(v.toInt());
			None => return Maybe<int>.None;
		}
	}

	// `getString` returns the host's "var" string associated with the provided `key`.
	def getString(key: string) -> Maybe<string> {
		match (getMemory(key)) {
			Some(v) => return Maybe<string>.Some(v.toString());
			None => return Maybe<string>.None;
		}
	}

	// `setBytes` sets the (unprocessed) host Memory block for the "var" data associated with
	// the provided `key`.
	def setBytes(key: string, value: Array<byte>) {
		def keyMem = Host.allocateString(key);
		def val_mem = Host.allocateBytes(value);
		Extism.var_set(keyMem.offset, val_mem.offset);
		keyMem.free();
		val_mem.free();
	}

	// `setInt` sets the host's "var" Int associated with the provided `key`.
	def setInt(key: string, value: int) {
		def keyMem = Host.allocateString(key);
		def bytes = Array<byte>.new(4);
		bytes[0] = byte.view(value & 255);
		bytes[1] = byte.view((value >> 8) & 255);
		bytes[2] = byte.view((value >> 16) & 255);
		bytes[3] = byte.view((value >> 24) & 255);
		def val_mem = Host.allocateBytes(bytes);
		Extism.var_set(keyMem.offset, val_mem.offset);
		keyMem.free();
		val_mem.free();
	}

	// `remove` deletes the value in the host's "var" memory associated with the provided `key`.
	def remove(key: string) {
		def keyMem = Host.allocateString(key);
		Extism.var_set(keyMem.offset, 0L);
		keyMem.free();
	}
}