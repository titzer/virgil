// Copyright 2020-2023 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Math functions.
component Math {
	// Computes the exponential of {x: double}, i.e. $e^x$.
	def exp = exp0;
	// Computes the natural logarithm of {x: double}, i.e. $ln x$.
	def log = log0;
}

def hiword(x: double) -> int {
	return int.view(u64.view(x) >> 32);
}
def loword(x: double) -> u32 {
	return u32.view(u64.view(x));
}
def update_hiword(x: double, hw: int) -> double {
	return double.view(u64.view(hw) << 32 | loword(x));
}


//---{exp}----------------------------------------------------------------------------
def half	= [0.5, -0.5];
def huge	= 1.0e+300;
def twom1000	= 9.33263618503218878990e-302;		/* 01700000 00000000 */ /* == 2**-1000*/
def o_threshold	= 7.09782712893383973096e+2;		/* 40862E42 FEFA39EF */
def u_threshold	= -7.45133219101941108420e+2;		/* c0874910 D52D3051 */
def ln2HI	= [
	6.93147180369123816490e-1,			/* 3FE62E42 FEE00000 */
	-6.93147180369123816490e-1			/* BFE62E42 FEE00000 */
];
def ln2LO 	= [
	1.90821492927058770002e-10,			/* 3DEA39EF 35793C76 */
	-1.90821492927058770002e-10			/* BDEA39EF 35793C76 */
];
def invln2	= 1.44269504088896338700e+0;		/* 3FF71547 652B82FE */
def P1		=  1.66666666666666019037e-1;		/* 3FC55555 5555553E */
def P2		= -2.77777777770155933842e-3;		/* BF66C16C 16BEBD93 */
def P3		=  6.61375632143793436117e-5;		/* 3F11566A AF25DE2C */
def P4		= -1.65339022054652515390e-6;		/* BEBBBD41 C5D26BF1 */
def P5		=  4.13813679705723846039e-8;		/* 3E663769 72BEA4D0 */

def exp0(x: double) -> double {
	var hx  = hiword(x);		/* high word of x */
	var xsb = u1.view(hx >> 31);	/* sign bit of x */
	hx &= 0x7fffffff;      		/* high word of |x| */

	/* filter out non-finite argument */
	if (hx >= 1082535490) {			/* if |x| >= 709.78... */
		if (hx >= 0x7ff00000) {
			if ((u32.view(hx & 0xfffff) | loword(x)) != 0) return x + x; /* NaN */
			return if(xsb == 0, x, 0);		/* exp(+-inf) = {inf,0} */
		}
		if (x > o_threshold) return huge * huge;		/* overflow */
		if (x < u_threshold) return twom1000 * twom1000;	/* underflow */
	}

	var hi = 0d, lo = 0d, k = 0;

	/* argument reduction */
	if (hx > 1071001154) {			/* if |x| > 0.5 ln2 */
		if (hx < 0x3FF0A2B2) {		/* and |x| < 1.5 ln2 */
			hi = x - ln2HI[xsb];
			lo = ln2LO[xsb];
			k = 1 - xsb - xsb;
		} else {
			k  = int.truncd(invln2 * x + half[xsb]);
			var t: double = k;
			hi = x - t * ln2HI[0];	/* t * ln2HI is exact here */
			lo = t * ln2LO[0];
		}
		x = hi - lo;
	} else if (hx < 0x3e300000)  {			/* when |x| < 2**-28 */
		if (huge + x > 1.0) return 1.0 + x;	/* trigger inexact */
	} else {
		k = 0;
	}

	/* x is now in primary range */
	var t = x * x;
	var c = x - t * (P1 + t * (P2 + t * (P3 + t * (P4 + t * P5))));

	if (k == 0) return 1.0 - ((x * c) / (c - 2.0) - x);

	var y = 1.0 - ((lo - (x * c) / (2.0 - c)) - hi);

	if (k >= -1021) {
		/* add k to y's exponent */
		return update_hiword(y, hiword(y) + (k << 20));
	} else {
		/* add k to y's exponent */
		y = update_hiword(y, hiword(y) + ((k + 1000) << 20));
		return y * twom1000;
	}
}

//---{log}----------------------------------------------------------------------------
def ln2_hi = 6.93147180369123816490e-1;		/* 3FE62E42 FEE00000 */
def ln2_lo = 1.90821492927058770002e-10;	/* 3DEA39EF 35793C76 */
def two54 = 1.80143985094819840000e+16;		/* 43500000 00000000 */
def Lg1 = 6.666666666666735130e-1;		/* 3FE55555 55555593 */
def Lg2 = 3.999999999940941908e-1;		/* 3FD99999 9997FA04 */
def Lg3 = 2.857142874366239149e-1;		/* 3FD24924 94229359 */
def Lg4 = 2.222219843214978396e-1;		/* 3FCC71C5 1D8E78AF */
def Lg5 = 1.818357216161805012e-1;		/* 3FC74664 96CB03DE */
def Lg6 = 1.531383769920937332e-1;		/* 3FC39A09 D078C69F */
def Lg7 = 1.479819860511658591e-1;		/* 3FC2F112 DF3E5244 */

def log0(x: double) -> double {
	var hx = hiword(x);	/* high word of x */
	var lx = loword(x);	/* low	word of x */

        var k = 0;
        if (hx < 0x00100000) {			/* x < 2**-1022  */
            if (((hx & 0x7fffffff) | int.view(lx)) == 0)
                return 0.0 - double.infinity;	/* log(+-0)=-inf */
            if (hx < 0) return double.nan;	/* log(-#) = NaN */
            k -= 54;
	    x *= two54;				/* subnormal number, scale up x */
            hx = hiword(x);			/* high word of x */
        }

        if (hx >= 0x7ff00000) return x + x;

        k += (hx >> 20) - 1023;
        hx &= 0x000fffff;
        var i = (hx + 0x95f64) & 0x100000;
	hx = hx | (i ^ 0x3ff00000);
	x = update_hiword(x, hx); /* normalize x or x / 2 */
        k += (i >> 20);
        var f = x - 1.0;

	if ((0x000fffff & (2 + hx)) < 3) {     /* |f| < 2**-20 */
		if (f == 0) {
			if (k == 0) return 0;
			var dk: double = k;
			return dk * ln2_hi + dk * ln2_lo;
		}
		var R = f * f * (0.5 - 0.33333333333333333 * f);
		if (k == 0) return f - R;
		var dk: double = k;
		return dk * ln2_hi - ((R - dk * ln2_lo) - f);
	}

        var s = f / (2.0 + f);
        var dk: double = k;
        var z = s * s;
        i = (hx - 0x6147a) | (0x6b851 - hx);
        var w = z * z;
        var t1 = w * (Lg2 + w * (Lg4 + w * Lg6));
        var t2 = z * (Lg1 + w * (Lg3 + w * (Lg5 + w * Lg7)));
        var R = t2 + t1;

	if (i > 0) {
		var hfsq = 0.5 * f * f;
		if (k == 0) return f - (hfsq - s * (hfsq + R));
		return dk * ln2_hi - ((hfsq - (s * (hfsq + R) + dk * ln2_lo)) - f);
	} else {
		if (k == 0) return f - s * (f - R);
		return dk * ln2_hi - ((s * (f - R) - dk * ln2_lo) - f);
	}
}
