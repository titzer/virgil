// Copyright 2022 Virgil Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implementation of the "Net" component for Linux, using underlying Linux
// syscalls and methods.

// Descriptive errors that can occur for networking IO.
enum NetError(desc: string) {
	NotFound("Entity not found"),
	PermissionDenied("Permission denied"),
	ConnectionRefused("Connection refused"),
	ConnectionReset("Connection reset"),
	HostUnreachable("Host unreachable"),
	NetworkUnreachable("Network unreachable"),
	ConnectionAborted("Connection aborted"),
	NotConnected("Not connected"),
	NotListening("Not listening"),
	AddrInUse("Address in use"),
	AddrNotAvailable("Address not available"),
	NetworkDown("Network down"),
	BrokenPipe("Broken pipe"),
	AlreadyExists("Entity already exists"),
	WouldBlock("Operation would block"),
	InvalidInput("Invalid input parameter"),
	InvalidProtocol("Using incorrect protocol"),
	InvalidSockAddress("Invalid sockaddr size"),
	InvalidRange("Invalid range provided"),
	TimedOut("Timed out"),
	ResourceBusy("Resource busy"),
	Interrupted("Operation interrupted"),
	Unsupported("Unsupported"),
	OutOfMemory("Out of memory"),
	Other("Other error"),
	Uncategorized("Uncategorized error")
}

// Convert errno {e} to corresponding NetError.
def errnoToNetError(e: long) -> NetError {
	match (-e) {
		LinuxConst.EADDRINUSE => return NetError.AddrInUse;
		LinuxConst.EEXIST => return NetError.AlreadyExists;
		LinuxConst.EADDRNOTAVAIL => return NetError.AddrNotAvailable;
		LinuxConst.EBUSY => return NetError.ResourceBusy;
		LinuxConst.ECONNABORTED => return NetError.ConnectionAborted;
		LinuxConst.ECONNREFUSED => return NetError.ConnectionRefused;
		LinuxConst.ECONNRESET => return NetError.ConnectionReset;
		LinuxConst.EHOSTUNREACH => return NetError.HostUnreachable;
		LinuxConst.EINTR => return NetError.Interrupted;
		LinuxConst.EINVAL => return NetError.InvalidInput;
		LinuxConst.ENOENT => return NetError.NotFound;
		LinuxConst.ENOMEM => return NetError.OutOfMemory;
		LinuxConst.ENOSYS => return NetError.Unsupported;
		LinuxConst.ENETDOWN => return NetError.NetworkDown;
		LinuxConst.ENETUNREACH => return NetError.NetworkUnreachable;
		LinuxConst.ENOTCONN => return NetError.NotConnected;
		LinuxConst.EPIPE => return NetError.BrokenPipe;
		LinuxConst.ETIMEDOUT => return NetError.TimedOut;
		LinuxConst.EAGAIN => return NetError.WouldBlock;
		LinuxConst.EACCES, LinuxConst.EPERM => return NetError.PermissionDenied;
		LinuxConst.EPROTOTYPE,
		LinuxConst.ENOPROTOOPT,
		LinuxConst.EPROTONOSUPPORT => return NetError.InvalidProtocol;
		_ => return NetError.Uncategorized;
	}
}

// Result type used for error propagation.
type NetResult<T> {
	case Result(v: T);
	case Error(e: NetError);

	// Forcefully unwrap the result into T. If value is {Error} then use the
	// NetError description string in error message.
	def unwrap() -> T {
		match (this) {
			Result(v) => return v;
			Error(e) => System.error("NetError", e.desc);
		}
		var d: T;
		return d;
	}
	// Forcefully unwrap the result into T. If value is {Error} then use the
	// provided message string in error message.
	def expect(msg: string) -> T {
		match (this) {
			Result(v) => return v;
			Error(e) => {
				def buf = StringBuilder.new();
				buf.put2("%s: %s", msg, e.desc);
				System.error("NetError", buf.toString());
			}
		}
		var d: T;
		return d;
	}
}

// Represents an internet address. It can be one of Ipv4 for IPv4 addresses or
// Ipv6 for IPv6 addresses.
type InetAddress {
	case Ipv4(oct0: u8, oct1: u8, oct2: u8, oct3: u8);
	case Ipv6(word0: u32, word1: u32, word2: u32, word3: u32);

	def toArray() -> Array<byte> {
		match (this) {
			Ipv4(o0, o1, o2, o3) => return [o0, o1, o2, o3];
			Ipv6(w0, w1, w2, w3) => {
				return [byte.view((w0 >> 24) & 0xFF), byte.view((w0 >> 16) & 0xFF), byte.view((w0 >> 8) & 0xFF), byte.view(w0 & 0xFF),
					byte.view((w1 >> 24) & 0xFF), byte.view((w1 >> 16) & 0xFF), byte.view((w1 >> 8) & 0xFF), byte.view(w1 & 0xFF),
					byte.view((w2 >> 24) & 0xFF), byte.view((w2 >> 16) & 0xFF), byte.view((w2 >> 8) & 0xFF), byte.view(w2 & 0xFF),
					byte.view((w3 >> 24) & 0xFF), byte.view((w3 >> 16) & 0xFF), byte.view((w3 >> 8) & 0xFF), byte.view(w3 & 0xFF)];
			}
		}
	}
	def length() -> int {
		match (this) {
			Ipv4 => return 4;
			Ipv6 => return 16;
		}
	}
	def render(buf: StringBuilder) -> StringBuilder {
		match (this) {
			Ipv4(o0, o1, o2, o3) => {
				buf.putd(o0).putc('.').putd(o1).putc('.').putd(o2).putc('.').putd(o3);
			}
			Ipv6 => {
				def len = 16;
				def addr = this.toArray();
				var zeroStart = -1, zeroEnd = -1;
				// Find the start and end of the longest chain of zeroes
				for (i = 0; i < len; i += 2) {
					var j = i;
					while (j < len) {
						if (addr[j] == 0 && addr[j + 1] == 0) {
							j += 2;
						} else {
							break;
						}
					}

					if (j > i && (j - i) > zeroEnd - zeroStart) {
						zeroStart = i;
						zeroEnd = j;
						i = j;
					}
				}

				// If only atmost 2 bytes are 0, then we just display them
				if (zeroEnd - zeroStart <= 2) {
					zeroStart = -1;
					zeroEnd = -1;
				}

				for (i = 0; i < len; i += 2) {
					if (i == zeroStart) {
						buf.puts("::");
						i = zeroEnd;
						if (i >= len) {
							break;
						}
					} else if (i > 0) {
						buf.puts(":");
					}
					buf.putx((int.view(addr[i]) << 8) | addr[i + 1]);
				}
			}
		}
		return buf;
	}
}

// Convert a Socket {socket} to its C-struct representation. The return value
// for IPv4 should match the struct sockaddr_in type, while the return value
// for IPv6 should match the struct sockaddr_in6 type. Note that the port and
// IP address need to written in network-byte order, i.e. in big-endian.
//
// Returns the C-struct representation of {socket}.
def toSockAddress(addr: InetAddress, port: int) -> Array<byte> {
	def sockAddrBldr = DataWriter.new();
	match (addr) {
		Ipv4(o0, o1, o2, o3) => {
			// Definition of sockaddr for IPv4:
			// struct sockaddr_in {
			//   short int          sin_family;  // Address family, AF_INET
			//   unsigned short int sin_port;    // Port number
			//   struct in_addr     sin_addr;    // Internet address
			//   unsigned char      sin_zero[8]; // Same size as struct sockaddr
			// };
			sockAddrBldr.acquire(LinuxConst.SOCKADDR_V4_SIZE);
			// sin_family
			sockAddrBldr.put_b16(LinuxConst.AF_INET);
			// sin_port
			sockAddrBldr.put_b16be(int.view(port));
			// sin_addr
			sockAddrBldr.putb(o0);
			sockAddrBldr.putb(o1);
			sockAddrBldr.putb(o2);
			sockAddrBldr.putb(o3);
			// sin_zero
			sockAddrBldr.zeroN(8);
			return sockAddrBldr.extract();
		}
		Ipv6(w0, w1, w2, w3) => {
			// Definition of sockaddr for IPv6:
			// struct sockaddr_in6 {
			//     u_int16_t       sin6_family;   // address family, AF_INET6
			//     u_int16_t       sin6_port;     // port number, Network Byte Order
			//     u_int32_t       sin6_flowinfo; // IPv6 flow information (set to 0)
			//     struct in6_addr sin6_addr;     // IPv6 address
			//     u_int32_t       sin6_scope_id; // Scope ID (set to 0)
			// };
			//
			// struct in6_addr {
			//     unsigned char   s6_addr[16];   // IPv6 address
			// };
			sockAddrBldr.acquire(LinuxConst.SOCKADDR_V6_SIZE);
			// sin6_family
			sockAddrBldr.put_b16(LinuxConst.AF_INET6);
			// sin6_port
			sockAddrBldr.put_b16be(int.view(port));
			// sin6_flowinfo
			sockAddrBldr.zeroN(4);
			// sin6_addr
			sockAddrBldr.put_b32be(int.view(w0));
			sockAddrBldr.put_b32be(int.view(w1));
			sockAddrBldr.put_b32be(int.view(w2));
			sockAddrBldr.put_b32be(int.view(w3));
			// sin6_scope_id
			sockAddrBldr.zeroN(4);
			return sockAddrBldr.extract();
		}
	}
}

// A socket can either use TCP or UDP.
enum SocketType {
	Tcp,
	Udp
}

// A packet representing a UDP peer's IP address and open port. Note that the
// fields are mutable in order to for users to be able to directly set them and
// avoid creating unncessary garbage.
class UdpPacket {
	// IP address of UDP peer
	var addr: InetAddress;
	// Port of UDP peer
	var port: int;

	new(addr, port) { }
}

// An abstraction over a network socket that allows for sending and receiving
// messages.
class Socket {
	// IP address of socket
	def addr: InetAddress;
	def isV6 = InetAddress.Ipv6.?(addr);
	// Associated file descriptor of socket
	def var fd: int;
	// Server port the socket is connected to
	def var port: int;
	// Local port the socket is connected to
	def var localPort: int;
	// Socket type
	def socketType: SocketType;
	// Has the socket been opened?
	def var isOpen = false;
	// Has the socket been bound?
	def var isBound = false;
	// Is the socket listening for connections?
	def var isListening = false;
	// Is the sockect connected?
	def var isConnected = false;

	new(addr, port, localPort, socketType, sockfd: int) {
		fd = sockfd;
	}
	def setOpen(open: bool) -> this {
		isOpen = open;
	}
	def setBound(bound: bool) -> this {
		isBound = bound;
	}
	def setListening(listening: bool) -> this {
		isListening = listening;
	}
	def setConnected(connected: bool) -> this {
		isConnected = connected;
	}
	def setLocalPort(local: int) -> this {
		localPort = local;
	}
	def isUdp() -> bool {
		return socketType == SocketType.Udp;
	}
	// Opens the socket by calling into the kernel to create a socket.
	def open() -> NetResult<void> {
		def family = if(!isV6, LinuxConst.AF_INET, LinuxConst.AF_INET6);
		def sType = if(!isUdp(), LinuxConst.SOCK_STREAM, LinuxConst.SOCK_DGRAM);
		match (Net.socket(family, sType, 0 /* protocol */)) {
			x: NetResult<int>.Result => {
				// XXX: Have to use unqualified case (i.e. x: {case}) as
				// case-expression has type parameter
				fd = x.v;
				isOpen = true;
				return onSocketOpen();
			}
			x: NetResult<int>.Error => {
				// XXX: Have to convert from NetResult<int> to NetResult<void> even
				// though NetResult.Error is the same type
				return NetResult.Error(x.e);
			}
		}
	}
	// Receive a message into buffer {buf} from the socket. Return how many bytes
	// were read into the buffer. The receive will fail on a standard
	// connectionless UDP socket or if the socket was not opened.
	def recv(buf: Range<byte>) -> NetResult<int> {
		if (isOpen && (!isUdp() || isConnected)) {
			return NetResult.Result(System.read(fd, buf));
		} else if (!isOpen) {
			return NetResult.Error(NetError.NotConnected);
		} else {
			// socketType == SocketType.Udp
			return NetResult.Error(NetError.InvalidProtocol);
		}
	}
	// Receive a message into buffer {buf} from a remote host. Users can provide
	// an instance of {packet} which will be overridden with information about
	// the remote host. If no {packet} is provided, a new one is allocated and
	// returned. Returns the number of bytes read into {buf} and information
	// about the remote host for future communication. The receive will fail for
	// a TCP socket or if the socket was not opened.
	def recvfrom(buf: Range<byte>, packet: UdpPacket) -> NetResult<(int, UdpPacket)> {
		if (!isOpen) {
			return NetResult.Error(NetError.NotConnected);
		}

		if (!isUdp()) {
			return NetResult.Error(NetError.InvalidProtocol);
		}

		if (packet == null) {
			packet = UdpPacket.new(Net.ANY_V4, -1);
		}

		var retSockAddr = Array<byte>.new(LinuxConst.SOCKADDR_STORAGE_SIZE);
		var retSock: (int, int);

		match (Net.recvfrom(fd, buf, retSockAddr)) {
			x: NetResult<(int, int)>.Result => retSock = x.v;
			x: NetResult<(int, int)>.Error => return NetResult.Error(x.e);
		}

		def retSockAddrSize = retSock.1;

		retSockAddr = Arrays.range(retSockAddr, 0, retSockAddrSize);
		def retPort = (int.view(retSockAddr[2]) << 8) | int.view(retSockAddr[3]);

		match (retSockAddrSize) {
			LinuxConst.SOCKADDR_V4_SIZE => {
				var retAddr: InetAddress;
				match (Net.rangeToInetAddress(retSockAddr[4 ... 8])) {
					x: NetResult<InetAddress>.Result => retAddr = x.v;
					x: NetResult<InetAddress>.Error => return NetResult.Error(x.e);
				}

				packet.addr = retAddr;
				packet.port = retPort;
				return NetResult.Result((retSock.0, packet));
			}
			LinuxConst.SOCKADDR_V6_SIZE => {
				var retAddr: InetAddress;
				match (Net.rangeToInetAddress(retSockAddr[8 ... 24])) {
					x: NetResult<InetAddress>.Result => retAddr = x.v;
					x: NetResult<InetAddress>.Error => return NetResult.Error(x.e);
				}

				packet.addr = retAddr;
				packet.port = retPort;
				return NetResult.Result((retSock.0, packet));
			}
			_ => {
				return NetResult.Error(NetError.InvalidSockAddress);
			}
		}
	}
	// Send a message {msg} into the socket. The send will fail on a standard UDP
	// connectionless socket or if the socket was not opened.
	def send(msg: Range<byte>) -> NetResult<void> {
		if (isOpen && (!isUdp() || isConnected)) {
			System.write(fd, msg);
		} else if (isOpen && isUdp() && ClientSocket.?(this)) {
			// Directly send to saved sockaddr. Being a bit stingy as we don't want
			// to create more objects than required
			return Net.sendto(fd, msg, getSockAddress());
		} else if (!isOpen) {
			return NetResult.Error(NetError.NotConnected);
		} else {
			// socketType == SocketType.Udp
			return NetResult.Error(NetError.InvalidProtocol);
		}

		return NetResult.Result(());
	}
	// Send a message {msg} to the host specified in {packet}. The send will fail
	// for a TCP socket or if the socket was not opened.
	def sendto(msg: Range<byte>, packet: UdpPacket) -> NetResult<void> {
		if (isOpen && isUdp()) {
			return Net.sendto(fd, msg, toSockAddress(packet.addr, packet.port));
		} else if (!isOpen) {
			return NetResult.Error(NetError.NotConnected);
		} else {
			return NetResult.Error(NetError.InvalidProtocol);
		}
	}
	// Close the socket.
	def close() {
		System.fileClose(fd);
		isOpen = false;
		isBound = false;
		isConnected = false;
		isListening = false;
	}
	// Overridden in subclasses to get the local address.
	def getLocalAddress() -> InetAddress;
	// Overridden in subclasses to get the encoded socket address.
	def getSockAddress() -> Array<byte>;
	// Callback that can be overridden by child classes in order to perform more
	// actions after the `Net.socket()` call.
	def onSocketOpen() -> NetResult<void> {
		return NetResult.Result(());
	}
}

// A connectionless UDP socket. A "Client" socket should provide a {port} of 0.
class UdpSocket extends Socket {
	// Associated sockaddr structure. Is instantiated in constructor
	private var sockAddr: Array<byte>;

	new(port: int, isV6: bool) super(if(isV6, Net.ANY_V6, Net.ANY_V4), port, -1 /* localPort */, SocketType.Udp, -1 /* fd */) {
		sockAddr = toSockAddress(addr, port);
	}
	def getLocalAddress() -> InetAddress {
		return addr;
	}
	def getSockAddress() -> Array<byte> {
		return sockAddr;
	}
	// Bind the socket to an IP address after creation.
	def onSocketOpen() -> NetResult<void> {
		return bind();
	}
	// Bind socket to IP address {addr} on {localPort}.
	private def bind() -> NetResult<void> {
		// Bind socket to localPort
		match (Net.bind(fd, sockAddr)) {
			x: NetResult<void>.Error => return NetResult.Error(x.e);
			_ => setBound(true);
		}

		return NetResult.Result(());
	}
}

// A socket that connects to a remote host. It can either be a TCP socket or a
// connected UDP socket.
class ClientSocket extends Socket {
	// Associated sockaddr structure. Is instantiated in constructor
	private var sockAddr: Array<byte>;

	new(addr: InetAddress, port: int, sType: SocketType) super(addr, port, -1 /* localPort */, sType, -1 /* fd */) {
		sockAddr = toSockAddress(addr, port);
	}
	def getLocalAddress() -> InetAddress {
		return if(isV6, Net.LOCALHOST_V6, Net.LOCALHOST_V4);
	}
	def getSockAddress() -> Array<byte> {
		return sockAddr;
	}
	// Connect socket to a remote host with IP address {addr} on {port}.
	def connect() -> NetResult<void> {
		if (!isOpen) {
			return NetResult.Error(NetError.NotConnected);
		}
		// Connect socket
		match (Net.connect(fd, sockAddr)) {
			x: NetResult<void>.Error => return x;
			_ => ;
		}

		def size = if(InetAddress.Ipv4.?(addr), LinuxConst.SOCKADDR_V4_SIZE, LinuxConst.SOCKADDR_V6_SIZE);
		var retSockAddr = Array<byte>.new(size);

		match (Net.getsockname(fd, retSockAddr)) {
			x: NetResult<void>.Error => return x;
			_ => ;
		}

		setBound(true);
		setConnected(true);
		setLocalPort((int.view(retSockAddr[2]) << 8) | int.view(retSockAddr[3]));
		return NetResult.Result(());
	}
}

// A socket that accepts connections from incoming peers. This can only be used
// as a TCP socket.
class ServerSocket extends Socket {
	// Associated sockaddr structure. Is instantiated in constructor
	private var sockAddr: Array<byte>;

	new(addr: InetAddress, localPort: int) super(addr, -1 /* port */, localPort, SocketType.Tcp, -1 /* fd */) {
		sockAddr = toSockAddress(addr, localPort);
	}
	def getLocalAddress() -> InetAddress {
		return addr;
	}
	def getSockAddress() -> Array<byte> {
		return sockAddr;
	}
	// Bind the socket and start listening on it after creation.
	def onSocketOpen() -> NetResult<void> {
		match (bind()) {
			x: NetResult<void>.Error => return x;
			_ => return listen();
		}
	}
	// Accept an incoming connection on {addr}:{localPort}. Returns a {Socket}
	// for the new incoming connection.
	def accept() -> NetResult<Socket> {
		if (!isListening) {
			return NetResult.Error(NetError.NotListening);
		}

		var retSockAddr = Array<byte>.new(LinuxConst.SOCKADDR_STORAGE_SIZE);
		var retSock: (int, int);
		match (Net.accept(fd, retSockAddr)) {
			x: NetResult<(int, int)>.Result => retSock = x.v;
			x: NetResult<(int, int)>.Error => return NetResult.Error(x.e);
		}

		def retSockAddrSize = retSock.1;

		retSockAddr = Arrays.range(retSockAddr, 0, retSockAddrSize);
		def retPort = (int.view(retSockAddr[2]) << 8) | int.view(retSockAddr[3]);

		match (retSockAddrSize) {
			LinuxConst.SOCKADDR_V4_SIZE => {
				var retAddr: InetAddress;
				match (Net.rangeToInetAddress(retSockAddr[4 ... 8])) {
					x: NetResult<InetAddress>.Result => retAddr = x.v;
					x: NetResult<InetAddress>.Error => return NetResult.Error(x.e);
				}

				def ret = Socket.new(retAddr, retPort, localPort, socketType, retSock.0);
				ret.setOpen(true);
				ret.setBound(true);
				ret.setConnected(true);
				return NetResult.Result(ret);
			}
			LinuxConst.SOCKADDR_V6_SIZE => {
				var retAddr: InetAddress;
				match (Net.rangeToInetAddress(retSockAddr[8 ... 24])) {
					x: NetResult<InetAddress>.Result => retAddr = x.v;
					x: NetResult<InetAddress>.Error => return NetResult.Error(x.e);
				}

				def ret = Socket.new(retAddr, retPort, localPort, socketType, retSock.0);
				ret.setOpen(true);
				ret.setBound(true);
				ret.setConnected(true);
				return NetResult.Result(ret);
			}
			_ => ;
		}

		return NetResult.Error(NetError.InvalidSockAddress);
	}
	// Bind socket to IP address {addr} on {localPort}.
	private def bind() -> NetResult<void> {
		// Bind socket to localPort
		match (Net.bind(fd, sockAddr)) {
			x: NetResult<void>.Error => return NetResult.Error(x.e);
			_ => setBound(true);
		}

		return NetResult.Result(());
	}
	// Start listening on {addr}:{localPort} for incoming connections.
	private def listen() -> NetResult<void> {
		match (Net.listen(fd, 10 /* backlog */)) {
			x: NetResult<void>.Error => return x;
			_ => setListening(true);
		}

		return NetResult.Result(());
	}
}

// Interface to the underlying socket implementation on Linux.
component Net {
	def ANY_V4 = InetAddress.Ipv4(0, 0, 0, 0);
	def LOCALHOST_V4 = InetAddress.Ipv4(127, 0, 0, 1);

	def ANY_V6 = InetAddress.Ipv6(0, 0, 0, 0);
	def LOCALHOST_V6 = InetAddress.Ipv6(0, 0, 0, 1);

	// Convert a range of bytes {r} to an equivalent InetAddress. {r} has to be
	// either 4-bytes long (for IPv4 addresses) or 16-bytes long (for IPv6
	// addresses). This function will fail if {r}'s length is not one of 4 or 16.
	def rangeToInetAddress(r: Range<byte>) -> NetResult<InetAddress> {
		if (r.length == 4) {
			return NetResult.Result(InetAddress.Ipv4(r[0], r[1], r[2], r[3]));
		} else if (r.length == 16) {
			return NetResult.Result(InetAddress.Ipv6(
				(u32.view(r[0]) << 24)  | (u32.view(r[1]) << 16)  | (u32.view(r[2]) << 8)  | r[3],
				(u32.view(r[4]) << 24)  | (u32.view(r[5]) << 16)  | (u32.view(r[6]) << 8)  | r[7],
				(u32.view(r[8]) << 24)  | (u32.view(r[9]) << 16)  | (u32.view(r[10]) << 8) | r[11],
				(u32.view(r[12]) << 24) | (u32.view(r[13]) << 16) | (u32.view(r[14]) << 8) | r[15]
			));
		} else {
			return NetResult.Error(NetError.InvalidRange);
		}
	}
	// Create a new socket with {family}, {socketType}, {protocol}. Returns
	// the new fd for the created socket.
	//
	// See: man 2 socket
	def socket(family: int, socketType: int, protocol: int) -> NetResult<int> {
		// (return value, errno)
		def ret = Linux.syscall(LinuxConst.SYS_socket, (family, socketType, protocol));
		return if(ret.0 >= 0, NetResult.Result(int.view(ret.0)), NetResult.Error(errnoToNetError(ret.0)));
	}
	// Connect to socket with {sockfd} and {sockAddr} struct.
	//
	// See: man 2 connect
	def connect(sockfd: int, sockAddr: Array<byte>) -> NetResult<void> {
		def ret = Linux.syscall(LinuxConst.SYS_connect, (sockfd, Pointer.atContents(sockAddr), sockAddr.length));
		return if(ret.0 >= 0, NetResult.Result(()), NetResult.Error(errnoToNetError(ret.0)));
	}
	// Accept a new connection on socket {sockfd}. Write metadata for the
	// new connection in the {sockAddr} struct. Returns a tuple of the new
	// fd for the new socket and the length of the written metadata.
	//
	// See: man 2 accept
	def accept(sockfd: int, sockAddr: Array<byte>) -> NetResult<(int, int)> {
		def ptr = Array<int>.new(1);
		ptr[0] = sockAddr.length;
		def ret = Linux.syscall(LinuxConst.SYS_accept, (sockfd, Pointer.atContents(sockAddr), Pointer.atContents(ptr)));
		return if(ret.0 >= 0, NetResult.Result((int.view(ret.0), ptr[0])), NetResult.Error(errnoToNetError(ret.0)));
	}
	// Send a message {msg} to the host specified in {sockAddr} via socket
	// {sockfd}.
	//
	// See: man 2 sendto
	def sendto(sockfd: int, msg: Range<byte>, sockAddr: Array<byte>) -> NetResult<void> {
		def ret = Linux.syscall(
			LinuxConst.SYS_sendto, (
				sockfd,
				Pointer.atContents(msg),
				msg.length,
				0 /* flags */,
				Pointer.atContents(sockAddr),
				sockAddr.length
			)
		);
		return if(ret.0 >= 0, NetResult.Result(()), NetResult.Error(errnoToNetError(ret.0)));
	}
	// Receive a message into the buffer {buf}. Write metadata about the remote
	// host in {sockAddr}. Returns a tuple of the number of bytes read into {buf}
	// and the length of the written metadata.
	//
	// See: man 2 recvfrom
	def recvfrom(sockfd: int, buf: Range<byte>, sockAddr: Array<byte>) -> NetResult<(int, int)> {
		def ptr = Array<int>.new(1); // XXX: pre-allocate thread-local buffer
		ptr[0] = sockAddr.length;
		def ret = Linux.syscall(
			LinuxConst.SYS_recvfrom, (
				sockfd,
				Pointer.atContents(buf),
				buf.length,
				0 /* flags */,
				Pointer.atContents(sockAddr),
				Pointer.atContents(ptr)
			)
		);
		// XXX: The compiler won't optimize the ptr load with a stale value right?
		return if(ret.0 >= 0, NetResult.Result((int.view(ret.0), ptr[0])), NetResult.Error(errnoToNetError(ret.0)));
	}
	// Bind a socket {sockfd} to the IP address and port specified in the
	// {sockAddr} struct.
	//
	// See: man 2 bind
	def bind(sockfd: int, sockAddr: Array<byte>) -> NetResult<void> {
		def ret = Linux.syscall(LinuxConst.SYS_bind, (sockfd, Pointer.atContents(sockAddr), sockAddr.length));
		return if(ret.0 >= 0, NetResult.Result(()), NetResult.Error(errnoToNetError(ret.0)));
	}
	// Start listening for incoming connection on socket {sockfd}.
	// {backlog} specifies the length of the message queue.
	//
	// See: man 2 listen
	def listen(sockfd: int, backlog: int) -> NetResult<void> {
		def ret = Linux.syscall(LinuxConst.SYS_listen, (sockfd, backlog));
		return if(ret.0 >= 0, NetResult.Result(()), NetResult.Error(errnoToNetError(ret.0)));
	}
	// Write the address and port to the {sockAddr} struct the socket
	// {sockfd} is currently bound to. This is used to query the
	// {localPort} for ClientSockets.
	//
	// See: man 2 getsockname
	def getsockname(sockfd: int, sockAddr: Array<byte>) -> NetResult<void> {
		def ptr = Array<int>.new(1);
		ptr[0] = sockAddr.length;
		def ret = Linux.syscall(LinuxConst.SYS_getsockname, (sockfd, Pointer.atContents(sockAddr), Pointer.atContents(ptr)));
		return if(ret.0 >= 0, NetResult.Result(()), NetResult.Error(errnoToNetError(ret.0)));
	}
}
