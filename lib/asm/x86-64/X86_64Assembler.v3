// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Rounding modes for MXCSR and other floating point instructions.
enum X86_64Rounding(value: int) {
	TO_NEAREST(0x00),
	TO_NEG_INF(0x01),
	TO_POS_INF(0x02),
	TO_ZERO(0x03)
}
def ERROR = "X86_64AssemblerError";
// superclass of both X86_64Gpr and X86_64Xmmr
class X86_64Reg(regnum: byte) {
	def low3 = byte.view(regnum & 0b111);
}
// object representing an X86_64 register
class X86_64Gpr extends X86_64Reg {
	def name8: string;
	def name16: string;
	def name32: string;
	def name64: string;
	new(name8, name16, name32, name64, regnum: byte) super(regnum) { }

	def name(size: int) -> string {
		match (size) {
			8 => return name8;
			16 => return name16;
			32 => return name32;
			64 => return name64;
		}
		return null;
	}
	def indirect() -> X86_64Addr {
		return X86_64Addr.new(this, null, 1, 0);
	}
	def plus(disp: int) -> X86_64Addr {
		return X86_64Addr.new(this, null, 1, disp);
	}
	def plusR(r: X86_64Gpr, scale: byte, disp: int) -> X86_64Addr {
		return X86_64Addr.new(this, r, scale, disp);
	}
}
// [base + index * scale + disp]
class X86_64Addr(base: X86_64Gpr, index: X86_64Gpr, scale: byte, disp: int) {
	new() {
		if (index == X86_64Regs.RSP && scale != 1) {
			System.error(ERROR, "%rsp cannot be scaled");
		}
	}
	def absolute() -> bool { return base == null && index == null; }
	def render(buf: StringBuilder) -> StringBuilder {
		buf.putc('[');
		var has_base = base != null;
		if (has_base) {
			buf.puts(base.name64);
		}
		var has_index = index != null;
		if (has_index) {
			if (has_base) buf.putc('+');
			buf.puts(index.name64);
			if (scale != 1) buf.putc('*').putd(scale);
		}
		if (has_base || has_index) {
			if (disp < 0) buf.putd(disp);
			if (disp > 0) buf.putc('+').putd(disp);
		} else {
			// absolute address
			buf.puts("0x").putx(disp);
		}
		return buf.putc(']');
	}
	def plus(disp: int) -> X86_64Addr {
		if (disp == 0) return this;
		return X86_64Addr.new(base, index, scale, this.disp + disp);
	}
}
// SSE floating point registers
class X86_64Xmmr extends X86_64Reg {
	def name: string;
	new(name, regnum: byte) super(regnum) { }
}
// global constants representing registers
component X86_64Regs {
	def RAX = X86_64Gpr.new("al", "ax", "eax", "rax", 0);
	def RCX = X86_64Gpr.new("cl", "cx", "ecx", "rcx", 1);
	def RDX = X86_64Gpr.new("dl", "dx", "edx", "rdx", 2);
	def RBX = X86_64Gpr.new("bl", "bx", "ebx", "rbx", 3);
	def RSP = X86_64Gpr.new("spl", "sp", "esp", "rsp", 4);
	def RBP = X86_64Gpr.new("bpl", "bp", "ebp", "rbp", 5);
	def RSI = X86_64Gpr.new("sil", "si", "esi", "rsi", 6);
	def RDI = X86_64Gpr.new("dil", "di", "edi", "rdi", 7);
	def R8 = X86_64Gpr.new("r8b", "r8w", "r8d", "r8", 8);
	def R9 = X86_64Gpr.new("r9b", "r9w", "r9d", "r9", 9);
	def R10 = X86_64Gpr.new("r10b", "r10w", "r10d", "r10", 10);
	def R11 = X86_64Gpr.new("r11b", "r11w", "r11d", "r11", 11);
	def R12 = X86_64Gpr.new("r12b", "r12w", "r12d", "r12", 12);
	def R13 = X86_64Gpr.new("r13b", "r13w", "r13d", "r13", 13);
	def R14 = X86_64Gpr.new("r14b", "r14w", "r14d", "r14", 14);
	def R15 = X86_64Gpr.new("r15b", "r15w", "r15d", "r15", 15);

	def GPRs = [
		RAX, RCX, RDX, RBX, RSP, RBP, RSI, RDI,
		R8,  R9,  R10, R11, R12, R13, R14, R15
	];

	def XMM0 = X86_64Xmmr.new("xmm0", 0);
	def XMM1 = X86_64Xmmr.new("xmm1", 1);
	def XMM2 = X86_64Xmmr.new("xmm2", 2);
	def XMM3 = X86_64Xmmr.new("xmm3", 3);
	def XMM4 = X86_64Xmmr.new("xmm4", 4);
	def XMM5 = X86_64Xmmr.new("xmm5", 5);
	def XMM6 = X86_64Xmmr.new("xmm6", 6);
	def XMM7 = X86_64Xmmr.new("xmm7", 7);
	def XMM8 = X86_64Xmmr.new("xmm8", 8);
	def XMM9 = X86_64Xmmr.new("xmm9", 9);
	def XMM10 = X86_64Xmmr.new("xmm10", 10);
	def XMM11 = X86_64Xmmr.new("xmm11", 11);
	def XMM12 = X86_64Xmmr.new("xmm12", 12);
	def XMM13 = X86_64Xmmr.new("xmm13", 13);
	def XMM14 = X86_64Xmmr.new("xmm14", 14);
	def XMM15 = X86_64Xmmr.new("xmm15", 15);

	def XMMs = [
		XMM0,  XMM1,  XMM2,  XMM3,  XMM4,  XMM5,  XMM6,  XMM7,
		XMM8,  XMM9, XMM10, XMM11, XMM12, XMM13, XMM14, XMM15
	];
}
// a condition for use in jumps, set, and cmov
class X86_64Cond(name: string, index: int) {
	var negate: X86_64Cond;
	var commute: X86_64Cond;
}
// conditions for use in jumps, set, and cmov
component X86_64Conds {
	def ALWAYS: X86_64Cond;
	def O  = X86_64Cond.new("o",  0);
	def NO = X86_64Cond.new("no", 1);
	def C  = X86_64Cond.new("c",  2);
	def NC = X86_64Cond.new("nc", 3);
	def Z  = X86_64Cond.new("z",  4);
	def NZ = X86_64Cond.new("nz", 5);
	def NA = X86_64Cond.new("na", 6);
	def A  = X86_64Cond.new("a",  7);
	def S  = X86_64Cond.new("s",  8);
	def NS = X86_64Cond.new("ns", 9);
	def P  = X86_64Cond.new("p",  10);
	def NP = X86_64Cond.new("np", 11);
	def L  = X86_64Cond.new("l",  12);
	def GE = X86_64Cond.new("ge", 13);
	def LE = X86_64Cond.new("le", 14);
	def G  = X86_64Cond.new("g",  15);


	def all = [
		X86_64Conds.O, X86_64Conds.NO, X86_64Conds.C,  X86_64Conds.NC,
		X86_64Conds.Z, X86_64Conds.NZ, X86_64Conds.NA, X86_64Conds.A,
		X86_64Conds.S, X86_64Conds.NS, X86_64Conds.P,  X86_64Conds.NP,
		X86_64Conds.L, X86_64Conds.GE, X86_64Conds.LE, X86_64Conds.G
	];

	new() {
		// set up relations between conditions
		neg(O, NO);
		neg(C, NC);
		neg(Z, NZ);
		neg(A, NA);
		neg(S, NS);
		neg(P, NP);
		neg(L, GE);
		neg(G, LE);
		com(Z, Z);
		com(NZ, NZ);
		com(L, G);
		com(LE, GE);
		com(NA, NC);
		com(A, C);
	}
	def neg(a: X86_64Cond, b: X86_64Cond) {
		a.negate = b;
		b.negate = a;
	}
	def com(a: X86_64Cond, b: X86_64Cond) {
		a.commute = b;
		b.commute = a;
	}
}
// SSE comparisons
class SSECmp(name: string, index: int) {
	var negate: SSECmp;
	var commute: SSECmp;
}
component SSECmps {
	def EQ = SSECmp.new("eq", 0);
	def LT = SSECmp.new("lt", 1);
	def LE = SSECmp.new("le", 2);
	def UNORD = SSECmp.new("unord", 3);
	def NEQ = SSECmp.new("neq", 4);
	def NLT = SSECmp.new("nlt", 5);
	def NLE = SSECmp.new("nle", 6);
	def ORD = SSECmp.new("ord", 7);

	def all = [EQ, LT, LE, UNORD, NEQ, NLT, NLE, ORD];

	new() {
		neg(EQ, NEQ);
		neg(LT, NLT);
		neg(LE, NLE);
		neg(UNORD, ORD);
		com(LT, NLE);
		com(LE, NLT);
		com(ORD, ORD);
		com(EQ, EQ);
		com(NEQ, NEQ);
		com(UNORD, UNORD);
	}
	def neg(a: SSECmp, b: SSECmp) {
		a.negate = b;
		b.negate = a;
	}
	def com(a: SSECmp, b: SSECmp) {
		a.commute = b;
		b.commute = a;
	}
}
// opcodes for the 8 basic integer operators
//------------------------- add  or adc sbb and sub xor cmp
def X86_64OP_rm_r	= "\x01\x09\x11\x19\x21\x29\x31\x39";
def X86_64OP_r_rm	= "\x03\x0B\x13\x1B\x23\x2B\x33\x3B";
def X86_64OP_rax_i	= "\x05\x0D\x15\x1D\x25\x2D\x35\x3D";

def MOD_DISP0: byte	= 0b00000000;
def MOD_DISP8: byte	= 0b01000000;
def MOD_DISP32: byte	= 0b10000000;
def MOD_REG: byte	= 0b11000000;
def MOD_BITS: byte	= 0b11000000;
def REX_BYTE: byte	= 0b01000000;
def REX_W: byte		= 0b00001000;
def REX_R: byte		= 0b00000100;
def REX_X: byte		= 0b00000010;
def REX_B: byte		= 0b00000001;
def NO_REX: byte	= 0b00000000;
def PREFIX_W: byte	= 0x66;

// Labels can be used for assembling near and far relative branches.
class X86_64Label {
	var pos = -1;
	var near_uses: List<int>;
	var far_uses: List<int>;

	def bound() -> bool { return pos >= 0; }
}
// Abstract interface for recording and patching addresses in assembled code.
class X86_64AddrPatcher(absMarker: int, relMarker: int) {
	def recordAbs32(pos: int, addr: X86_64Addr) {
	}
	def recordRel32(pos: int, delta: int, addr: X86_64Addr) {
	}
}
// Utilities to create an assembler.
component X86_64Assemblers {
	def REX_W: byte		= 0b00001000;
	def NO_REX: byte	= 0b00000000;

	def create32(w: DataWriter) -> X86_64Assembler {
		var d = X86_64Assembler.new(w, NO_REX);
		var q = X86_64Assembler.new(w, REX_W);
		d.setdq(d, q);
		q.setdq(d, q);
		return d;
	}
	def create64(w: DataWriter) -> X86_64Assembler {
		var d = X86_64Assembler.new(w, NO_REX);
		var q = X86_64Assembler.new(w, REX_W);
		d.setdq(d, q);
		q.setdq(d, q);
		return q;
	}
}
// Assembles x86 instructions into the provided buffer. Use X86_64Assemblers.create{32/64} to
// create an assembler that has its {d} and {q} fields set appropriately, rather than calling
// the constructor directly.
class X86_64Assembler(w: DataWriter, OP_REX: byte) {
	def var d: X86_64Assembler;
	def var q: X86_64Assembler;
	var shorten = true;
	var patcher: X86_64AddrPatcher;

	def pos() -> int { return w.pos; }

	def newLabel() -> X86_64Label {
		return X86_64Label.new();
	}
	def bind(label: X86_64Label) {
		if (label.pos >= 0) System.error(ERROR, "label already bound");
		label.pos = w.pos;
		for (l = label.near_uses; l != null; l = l.tail) {
			var offset = label.pos - l.head;
			if (offset != i8.view(offset)) System.error(ERROR, "label too far for near jump");
			w.at(l.head - 1).putb(offset);
		}
		for (l = label.far_uses; l != null; l = l.tail) {
			var offset = label.pos - l.head;
			w.at(l.head - 4).put_b32(offset);
		}
		w.atEnd();
	}
	def setdq(d: X86_64Assembler, q: X86_64Assembler) {
		this.d = d;
		this.q = q;
	}

	def add_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this  { emitop2_r_r(a, b, OP_REX, 0); }
	def add_r_m(a: X86_64Gpr, b: X86_64Addr) -> this { emitop2_r_m(a, b, OP_REX, 0); }
	def add_m_r(a: X86_64Addr, b: X86_64Gpr) -> this { emitop2_m_r(a, b, OP_REX, 0); }
	def add_r_i(a: X86_64Gpr, i: int) -> this     { emitop2_r_i(a, i, OP_REX, 0); }
	def add_m_i(a: X86_64Addr, i: int) -> this    { emitop2_m_i(a, i, OP_REX, 0); }

	def btr_r_i(a: X86_64Gpr, imm: u6) -> this {
		var rex = OP_REX | rex_r(a, REX_B);
		if (rex != 0) emitb(REX_BYTE | rex);
		emitbb_r(0x0F, 0xBA, a, 6);
		emitb(imm);
	}
	def btr_m_i(a: X86_64Addr, imm: u6) -> this {
		var rex = OP_REX | rex_m(a, REX_B);
		if (rex != 0) emitb(REX_BYTE | rex);
		emitbb_m(0x0F, 0xBA, a, 6);
		emitb(imm);
	}

	def or_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this  { emitop2_r_r(a, b, OP_REX, 1); }
	def or_r_m(a: X86_64Gpr, b: X86_64Addr) -> this { emitop2_r_m(a, b, OP_REX, 1); }
	def or_m_r(a: X86_64Addr, b: X86_64Gpr) -> this { emitop2_m_r(a, b, OP_REX, 1); }
	def or_r_i(a: X86_64Gpr, i: int) -> this     { emitop2_r_i(a, i, OP_REX, 1); }
	def or_m_i(a: X86_64Addr, i: int) -> this    { emitop2_m_i(a, i, OP_REX, 1); }

	def adc_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this  { emitop2_r_r(a, b, OP_REX, 2); }
	def adc_r_m(a: X86_64Gpr, b: X86_64Addr) -> this { emitop2_r_m(a, b, OP_REX, 2); }
	def adc_m_r(a: X86_64Addr, b: X86_64Gpr) -> this { emitop2_m_r(a, b, OP_REX, 2); }
	def adc_r_i(a: X86_64Gpr, i: int) -> this     { emitop2_r_i(a, i, OP_REX, 2); }
	def adc_m_i(a: X86_64Addr, i: int) -> this    { emitop2_m_i(a, i, OP_REX, 2); }

	def sbb_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this  { emitop2_r_r(a, b, OP_REX, 3); }
	def sbb_r_m(a: X86_64Gpr, b: X86_64Addr) -> this { emitop2_r_m(a, b, OP_REX, 3); }
	def sbb_m_r(a: X86_64Addr, b: X86_64Gpr) -> this { emitop2_m_r(a, b, OP_REX, 3); }
	def sbb_r_i(a: X86_64Gpr, i: int) -> this     { emitop2_r_i(a, i, OP_REX, 3); }
	def sbb_m_i(a: X86_64Addr, i: int) -> this    { emitop2_m_i(a, i, OP_REX, 3); }

	def and_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this  { emitop2_r_r(a, b, OP_REX, 4); }
	def and_r_m(a: X86_64Gpr, b: X86_64Addr) -> this { emitop2_r_m(a, b, OP_REX, 4); }
	def and_m_r(a: X86_64Addr, b: X86_64Gpr) -> this { emitop2_m_r(a, b, OP_REX, 4); }
	def and_r_i(a: X86_64Gpr, i: int) -> this     { emitop2_r_i(a, i, OP_REX, 4); }
	def and_m_i(a: X86_64Addr, i: int) -> this    { emitop2_m_i(a, i, OP_REX, 4); }

	def sub_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this  { emitop2_r_r(a, b, OP_REX, 5); }
	def sub_r_m(a: X86_64Gpr, b: X86_64Addr) -> this { emitop2_r_m(a, b, OP_REX, 5); }
	def sub_m_r(a: X86_64Addr, b: X86_64Gpr) -> this { emitop2_m_r(a, b, OP_REX, 5); }
	def sub_r_i(a: X86_64Gpr, i: int) -> this     { emitop2_r_i(a, i, OP_REX, 5); }
	def sub_m_i(a: X86_64Addr, i: int) -> this    { emitop2_m_i(a, i, OP_REX, 5); }

	def xor_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this  { emitop2_r_r(a, b, OP_REX, 6); }
	def xor_r_m(a: X86_64Gpr, b: X86_64Addr) -> this { emitop2_r_m(a, b, OP_REX, 6); }
	def xor_m_r(a: X86_64Addr, b: X86_64Gpr) -> this { emitop2_m_r(a, b, OP_REX, 6); }
	def xor_r_i(a: X86_64Gpr, i: int) -> this     { emitop2_r_i(a, i, OP_REX, 6); }
	def xor_m_i(a: X86_64Addr, i: int) -> this    { emitop2_m_i(a, i, OP_REX, 6); }

	def cmpb_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this  {  // XXX: factor out common routine
		var rex = if(a.regnum > 3 || b.regnum > 3, REX_BYTE, NO_REX);
		emit_rex_b_r_r(a, b, rex, 0x38);
	}
	def cmpb_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {  // XXX: factor out common routine
		var rex = if(a.regnum > 3, REX_BYTE, NO_REX);
		emit_rex_b_r_m(a, b, rex, 0x3A);
	}
	def cmpb_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {  // XXX: factor out common routine
		var rex = if(b.regnum > 3, REX_BYTE, NO_REX);
		emit_rex_b_m_r(a, b, rex, 0x38);
	}
	def cmpb_r_i(a: X86_64Gpr, i: int/*XXX:byte*/) -> this { // XXX: factor out common routine
		if (a == X86_64Regs.RAX) {
			emitbb(0x3C, i);
		} else {
			var rex = if(a.regnum > 3, REX_BYTE, NO_REX);
			emit_rex_b_r_x(a, rex, 0x80, 7);
			emitb(i);
		}
	}
	def cmpb_m_i(a: X86_64Addr, i: int/*XXX:byte*/) -> this { // XXX: factor out common routine
		emit_rex_b_m_x(a, NO_REX, 0x80, 7);
		emitb(i);
	}

	def cmp_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this  { emitop2_r_r(a, b, OP_REX, 7); }
	def cmp_r_m(a: X86_64Gpr, b: X86_64Addr) -> this { emitop2_r_m(a, b, OP_REX, 7); }
	def cmp_m_r(a: X86_64Addr, b: X86_64Gpr) -> this { emitop2_m_r(a, b, OP_REX, 7); }
	def cmp_r_i(a: X86_64Gpr, i: int) -> this     { emitop2_r_i(a, i, OP_REX, 7); }
	def cmp_m_i(a: X86_64Addr, i: int) -> this    { emitop2_m_i(a, i, OP_REX, 7); }

	def cmpxchgb_r_r(b: X86_64Gpr, a: X86_64Gpr) -> this {
		var rex = if(a.regnum > 3 || b.regnum > 3, REX_BYTE);
		emit_rex_bb_r_r(a, b, rex, 0x0F, 0xB0);
	}
	def cmpxchgb_m_r(b: X86_64Addr, a: X86_64Gpr) -> this {
		var rex = if(a.regnum > 3, REX_BYTE);
		emit_rex_bb_r_m(a, b, rex, 0x0F, 0xB0);
	}
	def cmpxchgw_r_r(b: X86_64Gpr, a: X86_64Gpr) -> this {
		emitb(PREFIX_W);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0xB1);
	}
	def cmpxchgw_m_r(b: X86_64Addr, a: X86_64Gpr) -> this {
		emitb(PREFIX_W);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0xB1);
	}
	def cmpxchg_r_r(b: X86_64Gpr, a: X86_64Gpr) -> this {
		emit_rex_bb_r_r(a, b, OP_REX, 0x0F, 0xB1);
	}
	def cmpxchg_m_r(b: X86_64Addr, a: X86_64Gpr) -> this {
		emit_rex_bb_r_m(a, b, OP_REX, 0x0F, 0xB1);
	}

	def bsf_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {
		emit_rex_bb_r_r(a, b, OP_REX, 0x0F, 0xBC);
	}
	def bsf_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {
		emit_rex_bb_r_m(a, b, OP_REX, 0x0F, 0xBC);
	}
	def bsr_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {
		emit_rex_bb_r_r(a, b, OP_REX, 0x0F, 0xBD);
	}
	def bsr_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {
		emit_rex_bb_r_m(a, b, OP_REX, 0x0F, 0xBD);
	}
	def callr(off: int) -> this { emitbd(0xE8, off); } // relative call
	def calld(off: int) -> this { emitbd(0x9A, off); } // direct call
	def callr_addr(m: X86_64Addr) -> this {
		emitbd(0xE8, checkAbs(m));
		recordRel32(w.pos - 4, 4, m);
	}
	def calld_addr(m: X86_64Addr) -> this {
		emitbd(0x9A, checkAbs(m));
		recordAbs32(w.pos - 4, m);
	}
	def cdq() -> this { emitb(0x99); }
	def cqo() -> this { emitbb(REX_BYTE | REX_W, 0x99); }

	private def checkAbs(m: X86_64Addr) -> int {
		if (m.base != null || m.index != null) System.error(ERROR, "expected absolute address");
		return m.disp;
	}

	def cmov_r(cond: X86_64Cond, a: X86_64Gpr, b: X86_64Gpr) -> this {
		emit_rex_bb_r_r(a, b, REX_W, 0x0F, byte.view(0x40 + cond.index));
	}
	def cmov_m(cond: X86_64Cond, a: X86_64Gpr, b: X86_64Addr) -> this {
		emit_rex_bb_r_m(a, b, REX_W, 0x0F, byte.view(0x40 + cond.index));
	}
	def dec_r(a: X86_64Gpr) -> this {
		emit_rex_b_r_x(a, OP_REX, 0xFF, 1);
	}
	def dec_m(a: X86_64Addr) -> this {
		emit_rex_b_m_x(a, OP_REX, 0xFF, 1);
	}
	def div_r(b: X86_64Gpr) -> this {
		emit_rex_b_r_x(b, OP_REX, 0xF7, 6);
	}
	def div_m(b: X86_64Addr) -> this {
		emit_rex_b_m_x(b, OP_REX, 0xF7, 6);
	}

	def icall_r(a: X86_64Gpr) -> this {
		emit_rex_b_r_x(a, NO_REX, 0xFF, 2);
	}
	def icall_m(a: X86_64Addr) -> this {
		emit_rex_b_m_x(a, NO_REX, 0xFF, 2);
	}
	def idiv_r(b: X86_64Gpr) -> this {
		emit_rex_b_r_x(b, OP_REX, 0xF7, 7);
	}
	def idiv_m(b: X86_64Addr) -> this {
		emit_rex_b_m_x(b, OP_REX, 0xF7, 7);
	}
	def ijmp_m(a: X86_64Addr) -> this {
		emit_rex_b_m_x(a, NO_REX, 0xFF, 4);
	}
	def inc_r(a: X86_64Gpr) -> this {
		emit_rex_b_r_x(a, OP_REX, 0xFF, 0);
	}
	def inc_m(a: X86_64Addr) -> this {
		emit_rex_b_m_x(a, OP_REX, 0xFF, 0);
	}
	def ijmp_r(a: X86_64Gpr) -> this {
		var rex = rex_r(a, REX_B);
		if (rex != 0) emitb(REX_BYTE | rex);
		emitb_r(0xFF, a, 4);
	}
	def imul_r(b: X86_64Gpr) -> this {
		emit_rex_b_r_x(b, OP_REX, 0xF7, 5);
	}
	def imul_m(b: X86_64Addr) -> this {
		emit_rex_b_m_x(b, OP_REX, 0xF7, 5);
	}
	def imul_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {
		emit_rex_bb_r_r(a, b, OP_REX, 0x0F, 0xAF);
	}
	def imul_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {
		emit_rex_bb_r_m(a, b, OP_REX, 0x0F, 0xAF);
	}
	def imul_r_i(a: X86_64Gpr, i: int) -> this {
		var rex = OP_REX | rex_r(a, REX_B | REX_R);
		if (rex != 0) emitb(REX_BYTE | rex);
		if (i < -128 || i > 127) {
			emitb_r(0x69, a, a.low3);
			emitd(i);
		} else {
			emitb_r(0x6B, a, a.low3);
			emitb(i);
		}
	}
	def intK(i: int) -> this {
		if (shorten && i == 3) emitb(0xCC);
		else emitbb(0xCD, i);
	}
	def iret() -> this { emitb(0xCF); }
	def invalid() -> this { emitbb(0x0F, 0x0B); }
	def jc_rel(cond: X86_64Cond, offset: int) -> this {
		// input is relative to start of instruction, but encoded as relative to end
		if (offset <= 129 && offset >= -126) {
			emitbb(0x70 + cond.index, offset - 2);
		} else {
			emitbbd(0x0F, 0x80 + cond.index, offset - 6);
		}
	}
	def jc_rel_addr(cond: X86_64Cond, m: X86_64Addr) -> this {
		emitbbd(0x0F, 0x80 + cond.index, checkAbs(m));
		recordRel32(w.pos - 4, 4, m);
	}
	def jc_rel_near(cond: X86_64Cond, label: X86_64Label) -> this {
		if (label.pos >= 0) {
			jc_rel(cond, label.pos - w.pos);
		} else {
			emitbb(0x70 + cond.index, -2);
			label.near_uses = List.new(w.pos, label.near_uses);
		}
	}
	def jc_rel_far(cond: X86_64Cond, label: X86_64Label) -> this {
		if (label.pos >= 0) {
			jc_rel(cond, label.pos - w.pos);
		} else {
			emitbbd(0x0F, 0x80 + cond.index, -5);
			label.far_uses = List.new(w.pos, label.far_uses);
		}
	}
	def jmp_rel(offset: int) -> this {
		if (offset <= 129 && offset >= -126) emitbb(0xEB, offset - 2);
		else emitbd(0xE9, offset - 5);
	}
	def jmp_rel_addr(m: X86_64Addr) -> this {
		emitbd(0xE9, checkAbs(m));
		recordRel32(w.pos - 4, 4, m);
	}
	def jmp_rel_near(label: X86_64Label) -> this {
		if (label.pos >= 0) {
			jmp_rel(label.pos - w.pos);
		} else {
			emitbb(0xEB, -2);
			label.near_uses = List.new(w.pos, label.near_uses);
		}
	}
	def jmp_rel_far(label: X86_64Label) -> this {
		if (label.pos >= 0) {
			jmp_rel(label.pos - w.pos);
		} else {
			emitbd(0xE9, -5);
			label.far_uses = List.new(w.pos, label.far_uses);
		}
	}
	def jmp_abs(abs: int) -> this { emitbd(0xEA, abs); } // jump absolute
	def jmp_abs_addr(m: X86_64Addr) -> this {
		emitbd(0xEA, checkAbs(m));
		recordAbs32(w.pos - 4, m);
	}
	def lea(a: X86_64Gpr, b: X86_64Addr) -> this {
		emit_rex_b_r_m(a, b, OP_REX, 0x8D);
	}
	def ldmxcsr_m(a: X86_64Addr) -> this {
		var rex = rex_m(a, REX_B);
		if (rex != 0) emitb(REX_BYTE | rex);
		emitbb_m(0x0f, 0xAE, a, 2);
	}
	def stmxcsr_m(a: X86_64Addr) -> this {
		var rex = rex_m(a, REX_B);
		if (rex != 0) emitb(REX_BYTE | rex);
		emitbb_m(0x0f, 0xAE, a, 3);
	}
	def popcnt_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {
		emitb(0xf3);
		emit_rex_bb_r_r(a, b, OP_REX, 0x0F, 0xB8);
	}
	def popcnt_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {
		emitb(0xf3);
		emit_rex_bb_r_m(a, b, OP_REX, 0x0F, 0xB8);
	}
	def pushfq() -> this { emitb(0x9C); }
	def pushq_r(a: X86_64Gpr) -> this {
		emit_rex_b_r(a, NO_REX, 0x50);
	}
	// 16-byte moves
	def movdqu_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x6F);
	}
	def movdqu_m_s(a: X86_64Addr, b: X86_64Xmmr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_m(b, a, NO_REX, 0x0F, 0x7F);
	}
	def movshdup_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x16);
	}
	def movshdup_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x16);
	}
	def movaps_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x28);
	}
	def movaps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x28);
	}
	def pmovsxbw_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_m(a, b, NO_REX, 0x0F, 0x38, 0x20);
	}
	def pmovsxbw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_r(a, b, NO_REX, 0x0F, 0x38, 0x20);
	}
	def pmovzxbw_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_m(a, b, NO_REX, 0x0F, 0x38, 0x30);
	}
	def pmovzxbw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_r(a, b, NO_REX, 0x0F, 0x38, 0x30);
	}

	// 8-byte moves
	def movq_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {
		emit_rex_b_r_r(a, b, REX_W, 0x89);
	}
	def movq_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {
		if (/*TODO*/false && b == X86_64Regs.RAX && a.absolute()) {
			emitbbd(REX_BYTE | REX_W, 0xA3, a.disp);
			recordAbs32(w.pos - 4, a);
			return;
		}
		emit_rex_b_m_r(a, b, REX_W, 0x89);
	}
	def movq_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {
		if (/*TODO*/false && a == X86_64Regs.RAX && b.absolute()) {
			emitbbd(REX_BYTE | REX_W, 0xA1, b.disp);
			recordAbs32(w.pos - 4, b);
			return;
		}
		emit_rex_b_r_m(a, b, REX_W, 0x8B);
	}
	def movq_r_i(a: X86_64Gpr, i: int) -> this {
		if (i >= 0) {
			if (shorten && i == 0) {
				d.xor_r_r(a, a);
				return;
			}
			emit_rex_b_r(a, NO_REX, 0xB8);
			emitd(i);
		} else {
			emit_rex_b_r_x(a, REX_W, 0xC7, 0);
			emitd(i);
		}
	}
	def movq_r_l(a: X86_64Gpr, l: long) -> this {
		var i = int.view(l);
		if (i == l) {
			movq_r_i(a, i);
			return;
		}
		if ((l >> 32) == 0) {
			movd_r_i(a, i);
			return;
		}
		emit_rex_b_r(a, REX_BYTE | REX_W, 0xB8);
		emitq(l);
	}
	def movq_m_i(a: X86_64Addr, i: int) -> this {
		emit_rex_b_m_x(a, REX_W, 0xC7, 0);
		emitd(i);
	}

	// 4-byte moves
	def movd_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {
		emit_rex_b_r_r(a, b, NO_REX, 0x89);
	}
	def movd_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {
		if (/*TODO*/false && b == X86_64Regs.RAX && a.absolute()) {
			emitbd(0xA3, a.disp);
			recordAbs32(w.pos - 4, a);
			return;
		}
		emit_rex_b_m_r(a, b, NO_REX, 0x89);
	}
	def movd_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {
		if (/*TODO*/false && a == X86_64Regs.RAX && b.absolute()) {
			emitbd(0xA1, b.disp);
			recordAbs32(w.pos - 4, b);
			return;
		}
		emit_rex_b_r_m(a, b, NO_REX, 0x8B);
	}
	def movd_r_i(a: X86_64Gpr, i: int) -> this {
		if (shorten && i == 0) {
			d.xor_r_r(a, a);
			return;
		}
		emit_rex_b_r(a, NO_REX, 0xB8);
		emitd(i);
	}
	def movd_m_i(a: X86_64Addr, i: int) -> this {
		emit_rex_b_m_x(a, NO_REX, 0xC7, 0);
		emitd(i);
	}

	// 2-byte moves
	def movw_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {
		emitb(PREFIX_W);
		emit_rex_b_r_r(a, b, NO_REX, 0x89);
	}
	def movw_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {
		emitb(PREFIX_W);
		emit_rex_b_r_m(a, b, NO_REX, 0x8B);
	}
	def movw_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {
		emitb(PREFIX_W);
		emit_rex_b_m_r(a, b, NO_REX, 0x89);
	}
	def movw_r_i(a: X86_64Gpr, imm: int) -> this {
		emitb(PREFIX_W);
		emit_rex_b_r(a, NO_REX, 0xB8);
		emitw(imm);
	}
	def movw_m_i(a: X86_64Addr, imm: int) -> this {
		emitb(PREFIX_W);
		emit_rex_b_m_x(a, NO_REX, 0xC7, 0);
		emitw(imm);
	}
	def movwsx_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {
		emit_rex_bb_r_r(a, b, REX_W, 0x0F, 0xBF);
	}
	def movwsx_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {
		emit_rex_bb_r_m(a, b, REX_W, 0x0F, 0xBF);
	}
	def movwzx_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {
		emit_rex_bb_r_r(a, b, REX_W, 0x0F, 0xB7);
	}
	def movwzx_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {
		emit_rex_bb_r_m(a, b, REX_W, 0x0F, 0xB7);
	}

	// 1-byte moves
	def movb_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {
		var rex = if(a.regnum > 3 || b.regnum > 3, REX_BYTE);
		emit_rex_b_r_r(a, b, rex, 0x88);
	}
	def movb_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {
		var rex = if(b.regnum > 3, REX_BYTE);
		emit_rex_b_m_r(a, b, rex, 0x88);
	}
	def movb_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {
		var rex = if(a.regnum > 3, REX_BYTE);
		emit_rex_b_r_m(a, b, rex, 0x8A);
	}
	def movb_r_i(a: X86_64Gpr, i: int) -> this {
		var rex = if(a.regnum > 3, REX_BYTE);
		emit_rex_b_r(a, rex, 0xB0);
		emitb(i);
	}
	def movb_m_i(a: X86_64Addr, i: int) -> this {
		emit_rex_b_m_x(a, NO_REX, 0xC6, 0);
		emitb(i);
	}
	def movbsx_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {
		emit_rex_bb_r_r(a, b, REX_W, 0x0F, 0xBE);
	}
	def movbsx_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {
		emit_rex_bb_r_m(a, b, REX_W, 0x0F, 0xBE);
	}
	def movbzx_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {
		emit_rex_bb_r_r(a, b, REX_W, 0x0F, 0xB6);
	}
	def movbzx_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {
		emit_rex_bb_r_m(a, b, REX_W, 0x0F, 0xB6);
	}
	def movsb() -> this { emitb(0xA4); }

	// SSE moves
	def movss_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x10);
	}
	def movss_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x10);
	}
	def movss_m_s(a: X86_64Addr, b: X86_64Xmmr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_m(b, a, NO_REX, 0x0F, 0x11);
	}
	def movsd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x10);
	}
	def movsd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x10);
	}
	def movsd_m_s(a: X86_64Addr, b: X86_64Xmmr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_m(b, a, NO_REX, 0x0F, 0x11);
	}

	def movd_s_r(a: X86_64Xmmr, b: X86_64Reg) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x6E);
	}
	def movd_r_s(b: X86_64Reg, a: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x7E);
	}
	def movq_s_r(a: X86_64Xmmr, b: X86_64Reg) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, REX_W, 0x0F, 0x6E);
	}
	def movq_r_s(b: X86_64Reg, a: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, REX_W, 0x0F, 0x7E);
	}

	def mul_r(b: X86_64Gpr) -> this {
		emit_rex_b_r_x(b, OP_REX, 0xF7, 4);
	}
	def mul_m(b: X86_64Addr) -> this {
		emit_rex_b_m_x(b, OP_REX, 0xF7, 4);
	}
	def not_r(a: X86_64Gpr) -> this {
		emit_rex_b_r_x(a, OP_REX, 0xF7, 2);
	}
	def not_m(a: X86_64Addr) -> this {
		emit_rex_b_m_x(a, OP_REX, 0xF7, 2);
	}
	def neg_r(a: X86_64Gpr) -> this {
		emit_rex_b_r_x(a, OP_REX, 0xF7, 3);
	}
	def neg_m(a: X86_64Addr) -> this {
		emit_rex_b_m_x(a, OP_REX, 0xF7, 3);
	}
	def pushq_m(a: X86_64Addr) -> this {
		emit_rex_b_m_x(a, NO_REX, 0xFF, 6);
	}
	def pushq_i(imm: int) -> this {
		if (imm < -128 || imm > 127) emitbd(0x68, imm);
		else emitbb(0x6A, imm);
	}
	def popq_r(a: X86_64Gpr) -> this {
		emit_rex_b_r(a, NO_REX, 0x58);
	}
	def popq_m(a: X86_64Addr) -> this {
		var rex = rex_m(a, REX_B);
		if (rex != 0) emitb(REX_BYTE | rex);
		emitb_m(0x8F, a, 0);
	}

	def rdtsc() -> this { emitbb(0x0F, 0x31); }
	def repz() -> this { emitb(0xF3); } // prefix
	def repne() -> this { emitb(0xF2); } // prefix
	def ret() -> this { emitb(0xC3); }

	def rol_r_i(a: X86_64Gpr, imm: u6) -> this { shx_r_i(a, OP_REX, imm, 8); }
	def rol_r_cl(a: X86_64Gpr) -> this { shx_r_cl(a, OP_REX, 8); }
	def rol_m_cl(a: X86_64Addr) -> this { shx_m_cl(a, OP_REX, 8); }

	def ror_r_i(a: X86_64Gpr, imm: u6) -> this { shx_r_i(a, OP_REX, imm, 9); }
	def ror_m_cl(a: X86_64Addr) -> this { shx_m_cl(a, OP_REX, 9); }
	def ror_r_cl(a: X86_64Gpr) -> this { shx_r_cl(a, OP_REX, 9); }

	def sar_r_i(a: X86_64Gpr, imm: u6) -> this { shx_r_i(a, OP_REX, imm, 7); }
	def sar_m_i(a: X86_64Addr, imm: u6) -> this { shx_m_i(a, OP_REX, imm, 7); }
	def sar_r_cl(a: X86_64Gpr) -> this { shx_r_cl(a, OP_REX, 7); }
	def sar_m_cl(a: X86_64Addr) -> this { shx_m_cl(a, OP_REX, 7); }

	def shl_r_i(a: X86_64Gpr, imm: u6) -> this { shx_r_i(a, OP_REX, imm, 4); }
	def shl_m_i(a: X86_64Addr, imm: u6) -> this { shx_m_i(a, OP_REX, imm, 4); }
	def shl_r_cl(a: X86_64Gpr) -> this { shx_r_cl(a, OP_REX, 4); }
	def shl_m_cl(a: X86_64Addr) -> this { shx_m_cl(a, OP_REX, 4); }

	def shr_r_i(a: X86_64Gpr, imm: u6) -> this { shx_r_i(a, OP_REX, imm, 5); }
	def shr_m_i(a: X86_64Addr, imm: u6) -> this { shx_m_i(a, OP_REX, imm, 5); }
	def shr_r_cl(a: X86_64Gpr) -> this { shx_r_cl(a, OP_REX, 5); }
	def shr_m_cl(a: X86_64Addr) -> this { shx_m_cl(a, OP_REX, 5); }

	def scasb() -> this { emitb(0xAE); }

	def set_r(cond: X86_64Cond, a: X86_64Gpr) -> this {
		var sop = 0x90 + cond.index;
		var rex = rex_r(a, REX_B);
		if (a.regnum >= 4) rex |= REX_BYTE;
		if (rex != 0) emitb(REX_BYTE | rex);
		emitbb_r(0x0f, sop, a, 0);
	}
	def set_m(cond: X86_64Cond, a: X86_64Addr) -> this {
		var sop = 0x90 + cond.index;
		var rex = rex_m(a, REX_B);
		if (rex != 0) emitb(REX_BYTE | rex);
		emitbb_m(0x0f, sop, a, 0);
	}

	def syscall() -> this { emitbb(0x0f, 0x05); }
	def sysenter() -> this { emitbb(0x0f, 0x34); }
	def sysexit() -> this { emitbb(0x0f, 0x35); }

	def test_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {
		emit_rex_b_r_r(a, b, OP_REX, 0x85);
	}
	def test_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {
		emit_rex_b_r_m(a, b, OP_REX, 0x85);
	}
	def test_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {
		emit_rex_b_m_r(a, b, OP_REX, 0x85);
	}
	def test_r_i(a: X86_64Gpr, i: int) -> this {
		if (a == X86_64Regs.RAX) {
			if (OP_REX != 0) emitb(REX_BYTE | OP_REX);
			return emitbd(0xA9, i);
		}
		emit_rex_b_r_x(a, OP_REX, 0xF7, 0);
		emitd(i);
	}
	def test_m_i(a: X86_64Addr, i: int) -> this {
		emit_rex_b_m_x(a, OP_REX, 0xF7, 0);
		emitd(i);
	}

	def xchg_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {
		if (a == X86_64Regs.RAX) {
			if (b == X86_64Regs.RAX && OP_REX == 0) {
				// XXX: working around nasm weirdness.
				return emit_rex_b_r_r(b, a, OP_REX, 0x87);
			}
			var rex = OP_REX | rex_r(b, REX_B);
			if (rex != 0) emitb(REX_BYTE | rex);
			return emitb(0x90 + b.low3);
		}
		if (b == X86_64Regs.RAX) {
			var rex = OP_REX | rex_r(a, REX_B);
			if (rex != 0) emitb(REX_BYTE | rex);
			return emitb(0x90 + a.low3);
		}
		emit_rex_b_r_r(b, a, OP_REX, 0x87);
	}
	def xchg_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {
		emit_rex_b_m_r(a, b, OP_REX, 0x87);
	}
	def xadd_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {
		emit_rex_bb_r_r(b, a, OP_REX, 0x0F, 0xC1);
	}
	def xadd_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {
		emit_rex_bb_r_m(b, a, OP_REX, 0x0F, 0xC1);
	}

	// SSE arithmetic
	// XXX: factor SSE arithmetic further
	def paddq_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0xD4);
	}
	def paddd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0xFE);
	}
	def paddw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0xFD);
	}
	def paddb_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0xFC);
	}

	def addss_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x58);
	}
	def addss_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x58);
	}
	def addsd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x58);
	}
	def addsd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x58);
	}
	def subss_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x5C);
	}
	def subss_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x5C);
	}
	def subsd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x5C);
	}
	def subsd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x5C);
	}
	def subps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x5C);
	}
	def psubb_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0xF8);
	}
	def psubw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0xF9);
	}
	def psubd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0xFA);
	}
	def psubq_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0xFB);
	}

	def mulss_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x59);
	}
	def mulss_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x59);
	}
	def mulsd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x59);
	}
	def mulsd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x59);
	}

	def pmuldq_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_r(a, b, NO_REX, 0x0F, 0x38, 0x28);
	}
	def pmuludq_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0xF4);
	}
	def pmulld_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_r(a, b, NO_REX, 0x0F, 0x38, 0x40);
	}
	def pmullw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0xD5);
	}
	def pmulhw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0xE5);
	}
	def pmulhuw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0xE4);
	}
	def pclmulqdq_s_s_imm(a: X86_64Xmmr, b: X86_64Xmmr, imm: u8) -> this {
		emitb(0x66);
		emit_rex_bbb_r_r(a, b, NO_REX, 0x0F, 0x3A, 0x44);
		emitb(imm);
	}

	def divss_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x5E);
	}
	def divss_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x5E);
	}
	def divsd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x5E);
	}
	def divsd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x5E);
	}
	def sqrtss_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x51);
	}
	def sqrtss_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x51);
	}
	def sqrtsd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x51);
	}
	def sqrtsd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x51);
	}
	def maxss_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x5F);
	}
	def maxss_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x5F);
	}
	def maxsd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x5F);
	}
	def maxsd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x5F);
	}
	def minss_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x5D);
	}
	def minss_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x5D);
	}
	def minsd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x5D);
	}
	def minsd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x5D);
	}
	def pminsb_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_r(a, b, NO_REX, 0x0F, 0x38, 0x38);
	}
	def pminsb_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_m(a, b, NO_REX, 0x0F, 0x38, 0x38);
	}
	def pminub_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0xDA);
	}
	def pminub_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0xDA);
	}
	def pminsw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0xEA);
	}
	def pminsw_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0xEA);
	}
	def pminuw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_r(a, b, NO_REX, 0x0F, 0x38, 0x3A);
	}
	def pminuw_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_m(a, b, NO_REX, 0x0F, 0x38, 0x3A);
	}
	def pminsd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_r(a, b, NO_REX, 0x0F, 0x38, 0x39);
	}
	def pminsd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_m(a, b, NO_REX, 0x0F, 0x38, 0x39);
	}
	def pminud_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_r(a, b, NO_REX, 0x0F, 0x38, 0x3B);
	}
	def pminud_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_m(a, b, NO_REX, 0x0F, 0x38, 0x3B);
	}
	def pmaxsb_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_r(a, b, NO_REX, 0x0F, 0x38, 0x3C);
	}
	def pmaxsb_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_m(a, b, NO_REX, 0x0F, 0x38, 0x3C);
	}
	def pmaxsw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0xEE);
	}
	def pmaxsw_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0xEE);
	}
	def pmaxsd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_r(a, b, NO_REX, 0x0F, 0x38, 0x3D);
	}
	def pmaxsd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_m(a, b, NO_REX, 0x0F, 0x38, 0x3D);
	}
	def pmaxub_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0xDE);
	}
	def pmaxub_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0xDE);
	}
	def pmaxuw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_r(a, b, NO_REX, 0x0F, 0x38, 0x3E);
	}
	def pmaxuw_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_m(a, b, NO_REX, 0x0F, 0x38, 0x3E);
	}
	def pmaxud_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_r(a, b, NO_REX, 0x0F, 0x38, 0x3F);
	}
	def pmaxud_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_m(a, b, NO_REX, 0x0F, 0x38, 0x3F);
	}
	def pavgb_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0xE0);
	}
	def pavgb_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0xE0);
	}
	def pavgw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0xE3);
	}
	def pavgw_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0xE3);
	}
	def pabsb_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_r(a, b, NO_REX, 0x0F, 0x38, 0x1C);
	}
	def pabsb_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_m(a, b, NO_REX, 0x0F, 0x38, 0x1C);
	}
	def pabsw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_r(a, b, NO_REX, 0x0F, 0x38, 0x1D);
	}
	def pabsw_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_m(a, b, NO_REX, 0x0F, 0x38, 0x1D);
	}
	def pabsd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_r(a, b, NO_REX, 0x0F, 0x38, 0x1E);
	}
	def pabsd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_m(a, b, NO_REX, 0x0F, 0x38, 0x1E);
	}

	// x87 FPU instructions
	def faddd(a: X86_64Addr) -> this {
		emit_rex_b_m_x(a, NO_REX, 0xD8, 0);
	}
	def fldd(a: X86_64Addr) -> this {
		emit_rex_b_m_x(a, NO_REX, 0xD9, 0);
	}
	def fldq(a: X86_64Addr) -> this {
		emit_rex_b_m_x(a, NO_REX, 0xDD, 0);
	}
	def fildq(a: X86_64Addr) -> this {
		emit_rex_b_m_x(a, NO_REX, 0xDF, 5);
	}
	def fstpd(a: X86_64Addr) -> this {
		emit_rex_b_m_x(a, NO_REX, 0xD9, 3);
	}
	def fstpq(a: X86_64Addr) -> this {
		emit_rex_b_m_x(a, NO_REX, 0xDD, 3);
	}
	def fisttpq(a: X86_64Addr) -> this {
		emit_rex_b_m_x(a, NO_REX, 0xDD, 1);
	}

	def ucomisd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x2E);
	}
	def ucomisd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x2E);
	}
	def ucomiss_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x2E);
	}
	def ucomiss_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x2E);
	}

	def roundsd_s_s(a: X86_64Xmmr, b: X86_64Xmmr, c: X86_64Rounding) -> this {
		emitb(0x66);
		emit_rex_bbb_r_r(a, b, NO_REX, 0x0F, 0x3A, 0x0B);
		emitb(c.value);
	}
	def roundsd_s_m(a: X86_64Xmmr, b: X86_64Addr, c: X86_64Rounding) -> this {
		emitb(0x66);
		emit_rex_bbb_r_m(a, b, NO_REX, 0x0F, 0x3A, 0x0B);
		emitb(c.value);
	}
	def roundss_s_s(a: X86_64Xmmr, b: X86_64Xmmr, c: X86_64Rounding) -> this {
		emitb(0x66);
		emit_rex_bbb_r_r(a, b, NO_REX, 0x0F, 0x3A, 0x0A);
		emitb(c.value);
	}
	def roundss_s_m(a: X86_64Xmmr, b: X86_64Addr, c: X86_64Rounding) -> this {
		emitb(0x66);
		emit_rex_bbb_r_m(a, b, NO_REX, 0x0F, 0x3A, 0x0A);
		emitb(c.value);
	}

	def andps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x54);
	}
	def andps_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x54);
	}
	def andpd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x54);
	}
	def andpd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x54);
	}
	def orps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x56);
	}
	def xorps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x57);
	}
	def xorps_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x57);
	}
	def xorpd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x57);
	}
	def xorpd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x57);
	}

	def pcmpeqb_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x74);
	}
	def pcmpeqb_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x74);
	}
	def pcmpeqw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x75);
	}
	def pcmpeqw_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x75);
	}
	def pcmpeqd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x76);
	}
	def pcmpeqd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x76);
	}
	def pcmpeqq_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_r(a, b, NO_REX, 0x0F, 0x38, 0x29);
	}
	def pcmpeqq_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_m(a, b, NO_REX, 0x0F, 0x38, 0x29);
	}
	def pcmpgtb_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x64);
	}
	def pcmpgtb_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x64);
	}
	def pcmpgtw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x65);
	}
	def pcmpgtw_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x65);
	}
	def pcmpgtd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x66);
	}
	def pcmpgtd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x66);
	}
	def pcmpgtq_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_r(a, b, NO_REX, 0x0F, 0x38, 0x37);
	}
	def pcmpgtq_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_m(a, b, NO_REX, 0x0F, 0x38, 0x37);
	}

	def cmpss_s_s(cmp: SSECmp, a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0xC2);
		emitb(cmp.index);
	}
	def cmpss_s_m(cmp: SSECmp, a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0xC2);
		emitb(cmp.index);
	}
	def cmpsd_s_s(cmp: SSECmp, a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0xC2);
		emitb(cmp.index);
	}
	def cmpsd_s_m(cmp: SSECmp, a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0xC2);
		emitb(cmp.index);
	}

	def ptest_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bbb_r_r(a, b, NO_REX, 0x0F, 0x38, 0x17);
	}

	def psrld_i(a: X86_64Xmmr, imm: u5) -> this {
		psl_i(a, imm, 0x72, 2);
	}
	def psrlq_i(a: X86_64Xmmr, imm: u6) -> this {
		psl_i(a, imm, 0x73, 2);
	}
	def pslld_i(a: X86_64Xmmr, imm: u5) -> this {
		psl_i(a, imm, 0x72, 6);
	}
	def psllq_i(a: X86_64Xmmr, imm: u6) -> this {
		psl_i(a, imm, 0x73, 6);
	}
	def psrad_i(a: X86_64Xmmr, imm: u5) -> this {
		psl_i(a, imm, 0x72, 4);
	}
	def psraw_i(a: X86_64Xmmr, imm: u5) -> this {
		psl_i(a, imm, 0x71, 4);
	}
	def psrlw_i(a: X86_64Xmmr, imm: u5) -> this {
		psl_i(a, imm, 0x71, 2);
	}

	private def psl_i(a: X86_64Xmmr, imm: byte, c2: byte, eop: byte) {
		emitb(0x66);
		var rex = rex_r(a, REX_B);
		if (rex != 0) emitb(REX_BYTE | rex);
		emitbb_r(0x0F, c2, a, eop);
		emitb(imm);
	}

	def cvtsd2si_r_s(a: X86_64Gpr, b: X86_64Xmmr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_r(a, b, OP_REX, 0x0F, 0x2D);
	}
	def cvtsd2si_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_m(a, b, OP_REX, 0x0F, 0x2D);
	}

	def cvtss2si_r_s(a: X86_64Gpr, b: X86_64Xmmr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_r(a, b, OP_REX, 0x0F, 0x2D);
	}
	def cvtss2si_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_m(a, b, OP_REX, 0x0F, 0x2D);
	}

	def cvtsi2sd_s_r(a: X86_64Xmmr, b: X86_64Reg) -> this {
		emitb(0xF2);
		emit_rex_bb_r_r(a, b, OP_REX, 0x0F, 0x2A);
	}
	def cvtsi2sd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_m(a, b, OP_REX, 0x0F, 0x2A);
	}

	def cvtsi2ss_s_r(a: X86_64Xmmr, b: X86_64Reg) -> this {
		emitb(0xF3);
		emit_rex_bb_r_r(a, b, OP_REX, 0x0F, 0x2A);
	}
	def cvtsi2ss_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_m(a, b, OP_REX, 0x0F, 0x2A);
	}

	def cvtss2sd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x5A);
	}
	def cvtss2sd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x5A);
	}
	def cvtsd2ss_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x5A);
	}
	def cvtsd2ss_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_m(a, b, NO_REX, 0x0F, 0x5A);
	}
	def cvttss2si_r_s(a: X86_64Gpr, b: X86_64Xmmr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_r(a, b, REX_W, 0x0F, 0x2C);
	}
	def cvttss2si_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {
		emitb(0xF3);
		emit_rex_bb_r_m(a, b, REX_W, 0x0F, 0x2C);
	}
	def cvttsd2si_r_s(a: X86_64Gpr, b: X86_64Xmmr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_r(a, b, REX_W, 0x0F, 0x2C);
	}
	def cvttsd2si_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {
		emitb(0xF2);
		emit_rex_bb_r_m(a, b, REX_W, 0x0F, 0x2C);
	}
	def punpckhwd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x69);
	}
	def punpcklwd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x61);
	}
	def punpckhbw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x68);
	}
	def pshufd_s_s_imm(a: X86_64Xmmr, b: X86_64Xmmr, imm: u8) -> this {
		emitb(0x66);
		emit_rex_bb_r_r(a, b, NO_REX, 0x0F, 0x70);
		emitb(imm);
	}

	//---- Utilities
	private def rex_r(a: X86_64Reg, b: byte) -> byte {
		return if(a != null && a.regnum >= 8, b);
	}
	private def rex_m(a: X86_64Addr, b: byte) -> byte {
		if (a.base == null) {
			match (a.scale) {
				1 => return rex_r(a.index, b); // index is the new base
				2 => return rex_r(a.index, REX_X | b); // will become index+index
				_ => return rex_r(a.index, REX_X);
			}
		}
		return rex_r(a.index, REX_X) | rex_r(a.base, b);
	}

	private def emitop2_r_r(a: X86_64Reg, b: X86_64Reg, rex: byte, op2code: byte) {
		emit_rex_b_r_r(a, b, rex, X86_64OP_rm_r[op2code]);
	}
	private def emitop2_r_m(a: X86_64Gpr, b: X86_64Addr, rex: byte, op2code: byte) {
		emit_rex_b_r_m(a, b, rex, X86_64OP_r_rm[op2code]);
	}
	private def emitop2_m_r(a: X86_64Addr, b: X86_64Gpr, rex: byte, op2code: byte) {
		emit_rex_b_m_r(a, b, rex, X86_64OP_rm_r[op2code]);
	}
	private def emitop2_r_i(a: X86_64Gpr, i: int, rex: byte, op2code: byte) {
		if (i < -128 || i > 127) {
			if (a == X86_64Regs.RAX) {
				if (rex != 0) emitb(REX_BYTE | rex);
				emitbd(X86_64OP_rax_i[op2code], i);
			} else {
				emit_rex_b_r_x(a, rex, 0x81, op2code);
				emitd(i);
			}
		} else {
			emit_rex_b_r_x(a, rex, 0x83, op2code);
			emitb(i);
		}
	}
	private def emitop2_m_i(a: X86_64Addr, i: int, rex: byte, op2code: byte) {
		if (i < -128 || i > 127) {
			emit_rex_b_m_x(a, rex, 0x81, op2code);
			emitd(i);
		} else {
			emit_rex_b_m_x(a, rex, 0x83, op2code);
			emitb(i);
		}
	}

	private def shx_r_i(a: X86_64Gpr, rex: byte, imm: u6, op: byte) -> this {
		if (imm == 1) return emit_rex_b_r_x(a, rex, 0xD1, op);
		emit_rex_b_r_x(a, rex, 0xC1, op);
		emitb(imm);
	}
	private def shx_m_i(a: X86_64Addr, rex: byte, imm: u6, op: byte) -> this {
		if (imm == 1) return emit_rex_b_m_x(a, rex, 0xD1, op);
		emit_rex_b_m_x(a, rex, 0xC1, op);
		emitb(imm);
	}
	private def shx_r_cl(a: X86_64Gpr, rex: byte, op: byte) -> this {
		emit_rex_b_r_x(a, rex, 0xD3, op);
	}
	private def shx_m_cl(a: X86_64Addr, rex: byte, op: byte) -> this {
		emit_rex_b_m_x(a, rex, 0xD3, op);
	}

	private def emit_rex_b_r_r(a: X86_64Reg, b: X86_64Reg, rex: byte, code: byte) {
		rex |= rex_r(a, REX_B) | rex_r(b, REX_R);
		if (rex != 0) emitb(REX_BYTE | rex);
		emitb_r(code, a, b.low3);
	}
	private def emit_rex_b_r_m(a: X86_64Reg, b: X86_64Addr, rex: byte, code: byte) {
		rex |= rex_r(a, REX_R) | rex_m(b, REX_B);
		if (rex != 0) emitb(REX_BYTE | rex);
		emitb_m(code, b, a.low3);
	}
	private def emit_rex_b_m_r(a: X86_64Addr, b: X86_64Reg, rex: byte, code: byte) {
		rex |= rex_m(a, REX_B) | rex_r(b, REX_R);
		if (rex != 0) emitb(REX_BYTE | rex);
		emitb_m(code, a, b.low3);
	}
	private def emit_rex_bb_r_r(a: X86_64Reg, b: X86_64Reg, rex: byte, c1: byte, c2: byte) {
		rex |= rex_r(b, REX_B) | rex_r(a, REX_R); // note: reverse
		if (rex != 0) emitb(REX_BYTE | rex);
		emitbb_r(c1, c2, b, a.low3); // note: reverse
	}
	private def emit_rex_bb_r_m(a: X86_64Reg, b: X86_64Addr, rex: byte, c1: byte, c2: byte) {
		rex |= rex_r(a, REX_R) | rex_m(b, REX_B);
		if (rex != 0) emitb(REX_BYTE | rex);
		emitbb_m(c1, c2, b, a.low3);
	}
	private def emit_rex_b_r_x(a: X86_64Reg, rex: byte, code: byte, ext: byte) {
		rex |= rex_r(a, REX_B);
		if (rex != 0) emitb(REX_BYTE | rex);
		emitb_r(code, a, ext);
	}
	private def emit_rex_b_m_x(a: X86_64Addr, rex: byte, code: byte, ext: byte) {
		rex |= rex_m(a, REX_B);
		if (rex != 0) emitb(REX_BYTE | rex);
		emitb_m(code, a, ext);
	}
	private def emit_rex_b_r(a: X86_64Reg, rex: byte, code: byte) {
		rex |= rex_r(a, REX_B);
		if (rex != 0) emitb(REX_BYTE | rex);
		emitb(byte.view(code + a.low3));
	}
	private def emit_rex_bbb_r_r(a: X86_64Reg, b: X86_64Reg, rex: byte, c1: byte, c2: byte, c3: byte) {
		rex |= rex_r(b, REX_B) | rex_r(a, REX_R); // note: reverse
		if (rex != 0) emitb(REX_BYTE | rex);
		emitbb(c1, c2);
		emitb_r(c3, b, a.low3); // note: reverse
	}
	private def emit_rex_bbb_r_m(a: X86_64Reg, b: X86_64Addr, rex: byte, c1: byte, c2: byte, c3: byte) {
		rex |= rex_r(a, REX_R) | rex_m(b, REX_B);
		if (rex != 0) emitb(REX_BYTE | rex);
		emitbb(c1, c2);
		emitb_m(c3, b, a.low3);
	}

	private def emitb_r(b0: int, a: X86_64Reg, eop: int) {
		emitb(b0);
		emitr(a, eop);
	}
	private def emitb_m(b0: int, a: X86_64Addr, eop: int) {
		emitb(b0);
		emitm(a, eop);
	}
	private def emitbb_r(b0: int, b1: int, a: X86_64Reg, eop: int) {
		emitbb(b0, b1);
		emitr(a, eop);
	}
	private def emitbb_m(b0: int, b1: int, a: X86_64Addr, eop: int) {
		emitbb(b0, b1);
		emitm(a, eop);
	}
	private def emitr(a: X86_64Reg, eop: int) {
		eop = (eop & 0b111) << 3;
		return emitb(MOD_REG | eop | a.low3); // mod = 11
	}
	private def emitm(a: X86_64Addr, eop: int) {
		eop = (eop & 0b111) << 3;
		var base = a.base, index = a.index, scale = a.scale, disp = a.disp;
		// memory addressing mode
		if (index == null) {
			if (base == null) {
				if (patcher == null) {
					// always use absolute 32-bit address
					emitbbd(eop | X86_64Regs.RSP.low3, 0x25, disp);
				} else if (disp == patcher.absMarker) {
					// marked as absolute address
					emitbbd(eop | X86_64Regs.RSP.low3, 0x25, disp);
					patcher.recordAbs32(w.pos - 4, a);
				} else if (disp == patcher.relMarker) {
					// marked as relative address, use RIP-relative mode
					emitbd(eop | 0b101, disp);
					patcher.recordRel32(w.pos - 4, 4, a);
				} else {
					// default to absolute 32-bit address
					emitbbd(eop | X86_64Regs.RSP.low3, 0x25, disp);
				}
				return;
			}
			// base register only
			return emitrm_1(eop, base.low3, a);
		}

		if (base == null) {
			if (scale == 1) {
				// index register only
				return emitrm_1(eop, index.low3, a);
			}
			if (scale == 2) {
				// reg*2 => reg+reg
				scale = 1;
				base = index;
			}
		}

		// compute low part of mod/rm byte
		// RSP indicates SIB byte comes next
		var mod_rm = eop | X86_64Regs.RSP.low3;

		// compute sib byte
		var sib = index.low3 << 3;
		if (scale == 2) {
			sib |= 0b01000000;
		} else if (scale == 4) {
			sib |= 0b10000000;
		} else if (scale == 8) {
			sib |= 0b11000000;
		}

		if (base != null) {
			sib |= base.low3;
			// finish mod/rm byte
			if (disp < -128 || disp > 127) mod_rm |= MOD_DISP32;		// disp32
			else if (disp != 0) mod_rm |= MOD_DISP8;			// disp8
			else if (base == X86_64Regs.RBP || base == X86_64Regs.R13) mod_rm |= MOD_DISP8;	// force disp8 for RBP+0
		} else {
			// no base register => mod=00 but must emit disp32
			sib |= X86_64Regs.RBP.low3;
		}

		// emit code
		if (base == null || disp < -128 || disp > 127) {
			emitbbd(mod_rm, sib, disp);
			recordAbs32(w.pos - 4, a);
		}
		else if ((mod_rm & MOD_BITS) == MOD_DISP8) emitbbb(mod_rm, sib, disp);
		else emitbb(mod_rm, sib);
	}
	private def emitrm_1(eop: int, regnum: int, a: X86_64Addr) {
		def mod_rm = eop | regnum, disp = a.disp;
		if (regnum == X86_64Regs.RSP.regnum) {
			def sib = 0b00100100;
			if (disp == 0) return emitbb(MOD_DISP0 | mod_rm, sib);
			else if (disp < -128 || disp > 127) {
				emitbbd(MOD_DISP32 | mod_rm, sib, disp);
				recordAbs32(w.pos - 4, a);
			}
			else emitbbb(MOD_DISP8 | mod_rm, sib, disp);
		} else if (disp == 0) {
			if (regnum == X86_64Regs.RBP.regnum) emitbb(MOD_DISP8 | mod_rm, 0); // +disp8=0 for RBP
			else emitb(MOD_DISP0 | mod_rm);
		} else if (disp < -128 || disp > 127) {
			emitbd(MOD_DISP32 | mod_rm, disp);
			recordAbs32(w.pos - 4, a);
		} else {
			emitbb(MOD_DISP8 | mod_rm, disp);
		}
	}
	def emitb(b0: int) {
		w.putb(b0);
	}
	def emitw(d0: int) {
		w.put_b16(d0);
	}
	def emitd(d0: int) {
		w.put_b32(d0);
	}
	def emitq(d0: long) {
		w.put_b64(d0);
	}
	def emitbd(b0: int, d0: int) {
		w.putb(b0);
		w.put_b32(d0);
	}
	def emitbb(b0: int, b1: int) {
		w.putbb(b0, b1);
	}
	def emitbbb(b0: int, b1: int, b2: int) {
		w.putbbb(b0, b1, b2);
	}
	def emitbbd(b0: int, b1: int, d0: int) {
		w.putbb(b0, b1);
		w.put_b32(d0);
	}
	def recordAbs32(pos: int, addr: X86_64Addr) {
		if (patcher == null) return;
		if (addr.disp == patcher.absMarker) patcher.recordAbs32(pos, addr);
	}
	def recordRel32(pos: int, delta: int, addr: X86_64Addr) {
		if (patcher == null) return;
		if (addr.disp == patcher.relMarker) patcher.recordRel32(pos, delta, addr);
	}
}
