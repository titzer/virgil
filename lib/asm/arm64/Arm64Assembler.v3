// Copyright 2024 Virgil Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Assembler for Arm64 Architecture
// See https://developer.arm.com/documentation/ddi0487/latest/ for instruction and opcode information

// Arm64 registers come in 32-bit and 64-bit variants
enum DataWidth { W32, W64 }
// Register shifts in data processing instructions
enum RegShift { LSL, LSR, ASR, NONE } // NONE shift is reserved for instructions like mul, div
// Register extensions in data processing instructions
enum DataRegExtend { UXTB, UXTH, UXTW, UXTX, SXTB, SXTH, SXTW, SXTX }
// Register extensions in load/store instructions
enum MemRegExtend(id: u3) { UXTW(2), LSL(3), SXTW(6), SXTX(7) }
enum Arm64PatchKind { REL_IMM19, ABS_IMM16, REL_IMM26 }

// Base class for all Arm64 registers
// regnum 0-32
class Arm64Reg(regnum: u5) {}

// Representation of an Arm64 general purpose register (x0-x30),
// or the zero register (xzr), or the stack pointer (sp).
class Arm64Gpr extends Arm64Reg {
	def name32: string;
	def name64: string;

	new(name64, name32, regnum: u5) super(regnum) {}

	def name(size: DataWidth) -> string {
		match (size) {
			W32 => return name32;
			W64 => return name64;
		}
	}
}

// SIMD and foating point register
class Arm64Sfr extends Arm64Reg {
	def name: string;
	new(name, regnum: u5) super(regnum) {}
}

// Global constants for all Arm64 Registers
component Arm64Regs {
	def R0 = Arm64Gpr.new("x0", "w0", 0), R1 = Arm64Gpr.new("x1", "w1", 1);
	def R2 = Arm64Gpr.new("x2", "w2", 2), R3 = Arm64Gpr.new("x3", "w3", 3);
	def R4 = Arm64Gpr.new("x4", "w4", 4), R5 = Arm64Gpr.new("x5", "w5", 5);
	def R6 = Arm64Gpr.new("x6", "w6", 6), R7 = Arm64Gpr.new("x7", "w7", 7);
	def R8 = Arm64Gpr.new("x8", "w8", 8), R9 = Arm64Gpr.new("x9", "w9", 9);
	def R10 = Arm64Gpr.new("x10", "w10", 10), R11 = Arm64Gpr.new("x11", "w11", 11);
	def R12 = Arm64Gpr.new("x12", "w12", 12), R13 = Arm64Gpr.new("x13", "w13", 13);
	def R14 = Arm64Gpr.new("x14", "w14", 14), R15 = Arm64Gpr.new("x15", "w15", 15); // PC
	def R16 = Arm64Gpr.new("x16", "w16", 16), R17 = Arm64Gpr.new("x17", "w17", 17);
	def R18 = Arm64Gpr.new("x18", "w18", 18), R19 = Arm64Gpr.new("x19", "w19", 19);
	def R20 = Arm64Gpr.new("x20", "w20", 20), R21 = Arm64Gpr.new("x21", "w21", 21);
	def R22 = Arm64Gpr.new("x22", "w22", 22), R23 = Arm64Gpr.new("x23", "w23", 23);
	def R24 = Arm64Gpr.new("x24", "w24", 24), R25 = Arm64Gpr.new("x25", "w25", 25);
	def R26 = Arm64Gpr.new("x26", "w26", 26), R27 = Arm64Gpr.new("x27", "w27", 27);
	def R28 = Arm64Gpr.new("x28", "w28", 28), R29 = Arm64Gpr.new("x29", "w29", 29);
	def R30 = Arm64Gpr.new("x30", "w30", 30), SP = Arm64Gpr.new("sp", "wsp", 31);
	def RZR = Arm64Gpr.new("xzr", "wzr", 31);

	def V0 = Arm64Sfr.new("v0", 0), V1 = Arm64Sfr.new("v1", 1);
	def V2 = Arm64Sfr.new("v2", 2), V3 = Arm64Sfr.new("v3", 3);
	def V4 = Arm64Sfr.new("v4", 4), V5 = Arm64Sfr.new("v5", 5);
	def V6 = Arm64Sfr.new("v6", 6), V7 = Arm64Sfr.new("v7", 7);
	def V8 = Arm64Sfr.new("v8", 8), V9 = Arm64Sfr.new("v9", 9);
	def V10 = Arm64Sfr.new("v10", 10), V11 = Arm64Sfr.new("v11", 11);
	def V12 = Arm64Sfr.new("v12", 12), V13 = Arm64Sfr.new("v13", 13);
	def V14 = Arm64Sfr.new("v14", 14), V15 = Arm64Sfr.new("v15", 15);
	def V16 = Arm64Sfr.new("v16", 16), V17 = Arm64Sfr.new("v17", 17);
	def V18 = Arm64Sfr.new("v18", 18), V19 = Arm64Sfr.new("v19", 19);
	def V20 = Arm64Sfr.new("v20", 20), V21 = Arm64Sfr.new("v21", 21);
	def V22 = Arm64Sfr.new("v22", 22), V23 = Arm64Sfr.new("v23", 23);
	def V24 = Arm64Sfr.new("v24", 24), V25 = Arm64Sfr.new("v25", 25);
	def V26 = Arm64Sfr.new("v26", 26), V27 = Arm64Sfr.new("v27", 27);
	def V28 = Arm64Sfr.new("v28", 28), V29 = Arm64Sfr.new("v29", 29);
	def V30 = Arm64Sfr.new("v30", 30), V31 = Arm64Sfr.new("v31", 31);

	def GPRS = [
		R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10,
		R11, R12, R13, R14, R16, R17, R18, R19, R20,
		R21, R22, R23, R24, R25, R26, R27, R28, R29, R30
	];

	def SFRS = [
		V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10,
		V11, V12, V13, V14, V15, V16, V17, V18, V19, V20,
		V21, V22, V23, V24, V25, V26, V27, V28, V29, V30,
		V31
	];
}

// a condition for use in jumps, set, and cmov
class Arm64Cond(name: string, index: int) {
	var negate: Arm64Cond;
	var commute: Arm64Cond;
}

// conditions for use in jumps, set, and cmov
component Arm64Conds {
	// TODO add the rest of the codes
	def EQ = Arm64Cond.new("eq", 0);
	def NEQ = Arm64Cond.new("neq", 1);
	def GT = Arm64Cond.new("gt", 2);
	def LT = Arm64Cond.new("lt", 3);

	def all = [EQ, NEQ, GT, LT];

	new() {
		// set up relations between conditions
		neg(EQ, NEQ);
		com(GT, LT);
	}

	def neg(a: Arm64Cond, b: Arm64Cond) {
		a.negate = b;
		b.negate = a;
	}

	def com(a: Arm64Cond, b: Arm64Cond) {
		a.commute = b;
		b.commute = a;
	}
}

// The Arm64 Assembler, responsible for defining functions 
// to emit instruction opcodes.
//
// All instructions come in two forms: a 'd' (32-bit) variant
// and a 'q' (64-bit) variant. The suffixes resemble x86 conventions
// to align with the x86 assemblers.
class Arm64Assembler(w: DataWriter) {
	// The position of the start of the last patchable instruction in w
	var patchPos = 0;
	// The kind of the last patchable instruction in w
	var patchKind = Arm64PatchKind.REL_IMM19;

	def pos() -> int { return w.pos; }
	private def ones = Arm64Gpr.new("", "", 0x1F); // register with all ones for regnum

	def svc() -> this { emit(0xD4000001); }

	// -------------------Address patching functions------------------------------------

	// Get int at position pos in w. TODO: Add to w methods?
	private def get_b32(pos: int) -> int {
		return int.view(w.data[pos])
			| (int.view(w.data[pos + 1]) << 8)
			| (int.view(w.data[pos + 2]) << 16)
			| (int.view(w.data[pos + 3]) << 24);
	}

	def patch_ABS_i16(pos: int, imm: u16) -> this {
		def oldPos = w.pos;
		def immMask = 0xFFE0001F;
		def instr = get_b32(pos);
		w.at(pos);
		w.put_b32(instr & immMask | (int.view(imm) << 5));
		w.at(oldPos);
	}
	def patch_REL_i26(pos: int, imm: i26) -> this {
		def oldPos = w.pos;
		def immMask = 0xFC000000;
		def instr = get_b32(pos);
		w.put_b32(instr & immMask | int.view(imm));	
		w.at(oldPos);
	}

	// ------- Load/Store instructions have 5 addressing modes -----------------------------------------------------
	// - base register only (no offset) [base{, #0}]
	// - base plus offset				[base{, #imm}] or [base, Xm{, LSL #imm}] or [base, Wm, (S|U)XT(X|W) {#imm}]
	// - Pre-indexed 					[base, #imm]!
	// - Post-indexed					[base], #imm   or [base], Xm
	// - Literal (PC-relative)
	// -------------------------------------------------------------------------------------------------------------

	def ldrd_r_r_i(rt: Arm64Gpr, rn: Arm64Gpr, imm: i9) -> this {
		emit((0x5C2 << 21) | (int.view(u9.view(imm)) << 12) | int.view(rn.regnum) << 5 | int.view(rt.regnum));
	}
	def ldrq_r_r_i(rt: Arm64Gpr, rn: Arm64Gpr, imm: i9) -> this {
		emit((0x7C2 << 21) | (int.view(u9.view(imm)) << 12) | int.view(rn.regnum) << 5 | int.view(rt.regnum));
	}
	def ldrpostd_r_r_i(rt: Arm64Gpr, rn: Arm64Gpr, imm: i9) -> this {
		emit((0x5C2 << 21) | (int.view(u9.view(imm)) << 12) | (1 << 10) | int.view(rn.regnum) << 5 | int.view(rt.regnum));
	}
	def ldrpostq_r_r_i(rt: Arm64Gpr, rn: Arm64Gpr, imm: i9) -> this {
		emit((0x7C2 << 21) | (int.view(u9.view(imm)) << 12) | (1 << 10) | int.view(rn.regnum) << 5 | int.view(rt.regnum));
	}
	def ldrpred_r_r_i(rt: Arm64Gpr, rn: Arm64Gpr, imm: i9) -> this {
		emit((0x5C2 << 21) | (int.view(u9.view(imm)) << 12) | (3 << 10) | int.view(rn.regnum) << 5 | int.view(rt.regnum));
	}
	def ldrpreq_r_r_i(rt: Arm64Gpr, rn: Arm64Gpr, imm: i9) -> this {
		emit((0x7C2 << 21) | (int.view(u9.view(imm)) << 12) | (3 << 10) | int.view(rn.regnum) << 5 | int.view(rt.regnum));
	}
	// imm must be a multiple of 4 for this variant
	def ldrunsignedd_r_r_i(rt: Arm64Gpr, rn: Arm64Gpr, imm: u12) -> this {
		emit((0x2E5 << 22) | (int.view(imm / 4) << 10) | (int.view(rn.regnum) << 5) | int.view(rt.regnum));
	}
	// imm but be a multiple of 8 for this variant
	def ldrunsignedq_r_r_i(rt: Arm64Gpr, rn: Arm64Gpr, imm: u12) -> this {
		emit((0x3E5 << 22) | (int.view(imm / 8) << 10) | (int.view(rn.regnum) << 5) | int.view(rt.regnum));
	}
	// literal loads are += 1 MB from PC. Offset = imm * 4 
	def ldrliterald_r_i(rt: Arm64Gpr, imm: i19) -> this {
		patchKind = Arm64PatchKind.REL_IMM19;
		patchPos = w.pos;
		emit((0xC << 24) | (int.view(imm) << 5) | int.view(rt.regnum));
	}
	def ldrliteralq_r_i(rt: Arm64Gpr, imm: i19) -> this {
		patchKind = Arm64PatchKind.REL_IMM19;
		patchPos = w.pos;
		emit((0x2C << 24) | (int.view(imm) << 5) | int.view(rt.regnum));
	}
	// shift == 4 if imm == 1 else 0
	def ldrd_r_r_r_ex_i(rt: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, ex: MemRegExtend, imm: u1) -> this {
		emit((0x5C3 << 21) | (int.view(rm.regnum) << 16) | (int.view(ex.id) << 13) |
			(int.view(imm) << 12) | (1 << 11) | (int.view(rn.regnum) << 5) | int.view(rt.regnum));
	}
	def ldrq_r_r_r_ex_i(rt: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, ex: MemRegExtend, imm: u1) -> this {
		emit((0x7C3 << 21) | (int.view(rm.regnum) << 16) | (int.view(ex.id) << 13) |
			(int.view(imm) << 12) | (1 << 11) | (int.view(rn.regnum) << 5) | int.view(rt.regnum));
	}

	def strd_r_r_i(rt: Arm64Gpr, rn: Arm64Gpr, imm: i9) -> this {
		emit((0x5C0 << 21) | (int.view(u9.view(imm)) << 12) | int.view(rn.regnum) << 5 | int.view(rt.regnum));
	}
	def strq_r_r_i(rt: Arm64Gpr, rn: Arm64Gpr, imm: i9) -> this {
		emit((0x7C0 << 21) | (int.view(u9.view(imm)) << 12) | int.view(rn.regnum) << 5 | int.view(rt.regnum));
	}
	def strpostd_r_r_i(rt: Arm64Gpr, rn: Arm64Gpr, imm: i9) -> this {
		emit((0x5C0 << 21) | (int.view(u9.view(imm)) << 12) | (1 << 10) | int.view(rn.regnum) << 5 | int.view(rt.regnum));
	}
	def strpostq_r_r_i(rt: Arm64Gpr, rn: Arm64Gpr, imm: i9) -> this {
		emit((0x7C0 << 21) | (int.view(u9.view(imm)) << 12) | (1 << 10) | int.view(rn.regnum) << 5 | int.view(rt.regnum));
	}
	def strpred_r_r_i(rt: Arm64Gpr, rn: Arm64Gpr, imm: i9) -> this {
		emit((0x5C0 << 21) | (int.view(u9.view(imm)) << 12) | (3 << 10) | int.view(rn.regnum) << 5 | int.view(rt.regnum));
	}
	def strpreq_r_r_i(rt: Arm64Gpr, rn: Arm64Gpr, imm: i9) -> this {
		emit((0x7C0 << 21) | (int.view(u9.view(imm)) << 12) | (3 << 10) | int.view(rn.regnum) << 5 | int.view(rt.regnum));
	}
	// imm must be a multiple of 4 for this variant
	def strunsignedd_r_r_i(rt: Arm64Gpr, rn: Arm64Gpr, imm: u12) -> this {
		emit((0x2E4 << 22) | (int.view(imm / 4) << 10) | (int.view(rn.regnum) << 5) | int.view(rt.regnum));
	}
	// imm must be a multiple of 8 for this variant
	def strunsignedq_r_r_i(rt: Arm64Gpr, rn: Arm64Gpr, imm: u12) -> this {
		emit((0x3E4 << 22) | (int.view(imm / 8) << 10) | (int.view(rn.regnum) << 5) | int.view(rt.regnum));
	}
	def strd_r_r_r_ex_i(rt: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, ex: MemRegExtend, imm: u1) -> this {
		emit((0x5C1 << 21) | (int.view(rm.regnum) << 16) | (int.view(ex.id) << 13) |
			(int.view(imm) << 12) | (1 << 11) | (int.view(rn.regnum) << 5) | int.view(rt.regnum));
	}
	def strq_r_r_r_ex_i(rt: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, ex: MemRegExtend, imm: u1) -> this {
		emit((0x7C1 << 21) | (int.view(rm.regnum) << 16) | (int.view(ex.id) << 13) |
			(int.view(imm) << 12) | (1 << 11) | (int.view(rn.regnum) << 5) | int.view(rt.regnum));
	}

	// ------- Data processing instructions have 3 addressing modes -----------
	// - immediate         - reg <- reg + imm12 (<< 12)
	// - shifted register  - reg <- reg + reg (sh imm6)
	// - extended register - reg <- reg + extend(reg) (sh imm3)
	// ------------------------------------------------------------------------

	// Move optionally shifted imm into reg, keeping other bits unchanged. rd <- imm << (lsl * 16)
	def movkd_r_i_i(rd: Arm64Gpr, imm: u16, lsl: u1) -> this {
		patchKind = Arm64PatchKind.ABS_IMM16;
		patchPos = w.pos;
		emit((0xE5 << 23) | (int.view(lsl) << 21) | (int.view(imm) << 5) | int.view(rd.regnum));
	}
	def movkq_r_i_i(rd: Arm64Gpr, imm: u16, lsl: u2) -> this {
		patchKind = Arm64PatchKind.ABS_IMM16;
		patchPos = w.pos;
		emit((0x1E5 << 23) | (int.view(lsl) << 21) | (int.view(imm) << 5) | int.view(rd.regnum));
	}

	def movd_r_i(rd: Arm64Gpr, imm: u16) -> this {
		patchKind = Arm64PatchKind.ABS_IMM16;
		patchPos = w.pos;
		emit_r_i(rd, imm, 0xA5);
	}
	def movq_r_i(rd: Arm64Gpr, imm: u16) -> this {
		patchKind = Arm64PatchKind.ABS_IMM16;
		patchPos = w.pos;
		emit_r_i(rd, imm, 0x1A5);
	}
	def movd_r_r(rd: Arm64Gpr, rm: Arm64Gpr) -> this {
		emit_r_r_r_sh_i(rd, ones, rm, RegShift.LSL, 0, 0x2A);
	}
	def movq_r_r(rd: Arm64Gpr, rm: Arm64Gpr) -> this {
		emit_r_r_r_sh_i(rd, ones, rm, RegShift.LSL, 0, 0xAA);
	}

	def cmpd_r_i_i(rn: Arm64Gpr, imm: u12, lsl12: u1) -> this {
		emit_r_r_i_i(ones, rn, imm, lsl12, 0xE2);
	}
	def cmpq_r_i_i(rn: Arm64Gpr, imm: u12, lsl12: u1) -> this {
		emit_r_r_i_i(ones, rn, imm, lsl12, 0x1E2);
	}
	def cmpd_r_r_sh_i(rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, imm: u5) -> this {
		emit_r_r_r_sh_i(ones, rn, rm, sh, imm, 0x6B);
	}
	def cmpq_r_r_sh_i(rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, imm: u6) -> this {
		emit_r_r_r_sh_i(ones, rn, rm, sh, imm, 0xEB);
	}

	def addd_r_r_i_i(rd: Arm64Gpr, rn: Arm64Gpr, imm: u12, lsl12: u1) -> this {
		emit_r_r_i_i(rd, rn, imm, lsl12, 0x22);
	}
	def addq_r_r_i_i(rd: Arm64Gpr, rn: Arm64Gpr, imm: u12, lsl12: u1) -> this {
		emit_r_r_i_i(rd, rn, imm, lsl12, 0x122);
	}
	def addd_r_r_r_sh_i(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, imm: u5) -> this {
		emit_r_r_r_sh_i(rd, rn, rm, sh, imm, 0xB); 
	}
	def addq_r_r_r_sh_i(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, imm: u6) -> this {
		emit_r_r_r_sh_i(rd, rn, rm, sh, imm, 0x8B); 
	}
	def addd_r_r_r_ex_i(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, ex: DataRegExtend, imm: u3) -> this {
		emit_r_r_r_ex_i(rd, rn, rm, ex, imm, 0xB);
	}
	def addq_r_r_r_ex_i(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, ex: DataRegExtend, imm: u3) -> this {
		emit_r_r_r_ex_i(rd, rn, rm, ex, imm, 0x8B);
	}

	def subd_r_r_i_i(rd: Arm64Gpr, rn: Arm64Gpr, imm: u12, lsl12: u1) -> this {
		emit_r_r_i_i(rd, rn, imm, lsl12, 0xA2);
	}
	def subq_r_r_i_i(rd: Arm64Gpr, rn: Arm64Gpr, imm: u12, lsl12: u1) -> this {
		emit_r_r_i_i(rd, rn, imm, lsl12, 0x1A2);
	}
	def subd_r_r_r_sh_i(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, imm: u5) -> this {
		emit_r_r_r_sh_i(rd, rn, rm, sh, imm, 0x4B);
	}
	def subq_r_r_r_sh_i(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, imm: u6) -> this {
		emit_r_r_r_sh_i(rd, rn, rm, sh, imm, 0xCB);
	}
	def subd_r_r_r_ex_i(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, ex: DataRegExtend, imm: u3) -> this {
		emit_r_r_r_ex_i(rd, rn, rm, ex, imm, 0x4B);
	}
	def subq_r_r_r_ex_i(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, ex: DataRegExtend, imm: u3) -> this {
		emit_r_r_r_ex_i(rd, rn, rm, ex, imm, 0xCB);
	}

	def udivd_r_r_r(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr) -> this {
		emit_r_r_r_sh_i(rd, rn, rm, RegShift.NONE, 0x2, 0x1A);
	}
	def udivq_r_r_r(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr) -> this {
		emit_r_r_r_sh_i(rd, rn, rm, RegShift.NONE, 0x2, 0x9A);
	}

	def sdivd_r_r_r(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr) -> this {
		emit_r_r_r_sh_i(rd, rn, rm, RegShift.NONE, 0x3, 0x1A);
	}
	def sdivq_r_r_r(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr) -> this {
		emit_r_r_r_sh_i(rd, rn, rm, RegShift.NONE, 0x3, 0x9A);
	}

	def muld_r_r_r(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr) -> this {
		emit_r_r_r_sh_i(rd, rn, rm, RegShift.LSL, 0x1F, 0x1B);
	}
	def mulq_r_r_r(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr) -> this {
		emit_r_r_r_sh_i(rd, rn, rm, RegShift.LSL, 0x1F, 0x9B);
	}

	// --------------------Branch instructions ---------------------------------
	
	// branch unconditionally PC-relative to PC + imm * 4
	def b_i(imm: u26) -> this {
		patchKind = Arm64PatchKind.REL_IMM26;
		patchPos = w.pos;
		emit((5 << 26) | imm);
	}
	// branch with link PC-relative. Set X30 to PC + 4
	def bl_i(imm: u26) -> this {
		patchKind = Arm64PatchKind.REL_IMM26;
		patchPos = w.pos;
		emit((0x25 << 26) | imm);
	}
	
	def ret() -> this {
		emit(0xD65F0000 | (int.view(Arm64Regs.R30.regnum) << 5));
	}

	// ------------- Helper functions for emitting addressing modes  -----------

	private def emit_r_i(rd: Arm64Gpr, imm: u16, code: u9) {
		emit((int.view(code) << 23) | (int.view(imm) << 5) | int.view(rd.regnum));	
	}
	// unfortunately, sometimes opcodes are u9
	private def emit_r_r_i_i(rd: Arm64Gpr, rn: Arm64Gpr, imm: u12, lsl12: u1, code: u9) {
		emit((int.view(code) << 23) | (int.view(lsl12) << 22) | (int.view(imm) << 10)
			| (int.view(rn.regnum) << 5) | rd.regnum);
	}
	private def emit_r_r_r_sh_i(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, 
		imm: u6, code: byte) {
		emit((int.view(code) << 24) | (int.view(sh.tag) << 22) | (int.view(rm.regnum) << 16)
			| (int.view(imm) << 10) | (int.view(rn.regnum) << 5) | rd.regnum);
	}
	private def emit_r_r_r_ex_i(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, ex: DataRegExtend,
		imm: u3, code: byte) {
		emit((int.view(code) << 24) | (int.view(imm) << 10) | (1 << 21) | (int.view(rm.regnum) << 16) |
			(int.view(ex.tag) << 13) | (int.view(rn.regnum) << 5) | rd.regnum);
	}
	private def emit(val: int) {
		w.put_b32(val);
	}
}