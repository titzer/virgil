// Copyright 2024 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

layout wali_timespec {
	+0	tv_sec:		u64;
	+8	tv_nsec:	u64;
	=16;
}

layout wali_timeval {
	+0	tv_sec:		u64;
	+8	tv_usec:	u64;
	=16;
}

layout wali_stat {
	+0	st_dev:		u64;
	+8	st_ino:		u64;
	+16	st_nlink:	u64;

	+24	st_mode:	u32;
	+28	st_uid:		u32;
	+32	st_gid:		u32;

	+40	st_rdev:	u64;
	+48	st_size:	u64;
	+56	st_blksize:	u64;
	+64	st_blocks:	i64;

	+72	st_atim:	wali_timespec;
	+88	st_mtim:	wali_timespec;
	+104	st_ctim:	wali_timespec;
	=144;
}

layout wali_statx {
	+0	stx_mask:	u32;
	+4	stx_blksize:	u32;
	+8	stx_attributes:	u64;
	+16	stx_nlink:	u32;
//	+20	stx_uid:	u32;
	+24	stx_gid:	u32;
	+28	stx_mode:	u16;
	+32	stx_ino:	u64;
	+40	stx_size:	u64;
	+48	stx_blocks:	u64;
	+56	stx_attributes_mask:	u64;
	+64	stx_atime:	statx_timestamp;
	+80	stx_btime:	statx_timestamp;
	+96	stx_ctime:	statx_timestamp;
	+112	stx_mtime:	statx_timestamp;
	+128	stx_rdev_major:	u32;
	+132	stx_rdev_minor:	u32;
	+136	stx_dev_major:	u32;
	+140	stx_dev_minor:	u32;
	+144	stx_mnt_id:	u64;
	=256;
}

layout wali_sysinfo {
        +0      uptime:		u64;
        +8      loads:		u64[3];
        +32     totalram:       u64;
        +40     freeram:        u64;
        +48     sharedram:      u64;
        +56     bufferram:      u64;
        +64     totalswap:      u64;
        +72     freeswap:       u64;
        +80     procs:		u16;
        +88     totalhigh:      u64;
        +96     freehigh:       u64;
        +104    mem_unit:       u32;
        +108    f:		byte[1];
        =112;
}

layout wali_rlimit {
	+0	rlim_cur: u64;
	+8	rlim_max: u64;
	=16;
}

layout wali_rlimit64 {
	+0	rlim_cur: u64;
	+8	rlim_max: u64;
	=16;
}

layout wali_rusage {
	+0	ru_utime:	timeval;
	+16	ru_stime:	timeval;
	+32	ru_maxrss:	u64;
	+40	ru_ixrss:	u64;
	+48	ru_idrss:	u64;
	+56	ru_isrss:	u64;
	+64	ru_minflt:	u64;
	+72	ru_majflt:	u64;
	+80	ru_nswap:	u64;
	+88	ru_inblock:	u64;
	+96	ru_oublock:	u64;
	+104	ru_msgsnd:	u64;
	+112	ru_msgrcv:	u64;
	+120	ru_nsignals:	u64;
	+128	ru_nvcsw:	u64;
	+136	ru_nivcsw:	u64;
	=144;
}

layout wali_statfs {
	+0	f_type:		u64;
	+8	f_bsize:	u64;
	+16	f_blocks:	u64;
	+24	f_bfree:	u64;
	+32	f_bavail:	u64;
	+40	f_files:	u64;
	+48	f_ffree:	u64;
	+56	f_fsid:		u64;
	+64	f_namelen:	u64;
	+72	f_frsize:	u64;
	+80	f_flags:	u64;
	=120;
}

/*
layout wali_stack_t {
	+0	ss_sp:		u32; // Pointer
	+0	ss_flags:	i32;
	+0	ss_size:	u32;
	=0;
}

layout wali_dirent {
	+0	d_ino:		u64;
	+0	d_off:		i64;
	+0	d_reclen:	u16;
	+0	d_type:		u8;
	+0	d_name:		u8[255];
	=0;
}

layout wali_epoll_event {
	+0	events:		u32;
	+0	data:		u64;
	=0;
}

layout wali_iovec {
	+0	iov_base:	u32; // Pointer
	+0	iov_len:	u32;
	=0;
}

layout wali_itimerval {
	+0	it_interval:	wali_timeval;
	+0	it_value:	wali_timeval;
	=0;
}

layout wali_msghdr {
	+0	msg_name:	u32; // Pointer
	+0	msg_namelen:	u32;
	+0	msg_iov:	wali_iovec;
	+0	msg_iovlen:	i32;
	+0	pad1:		i32;
	+0	msg_control:	u32; // Pointer
	+0	msg_controllen:	u32;
	+0	pad2:		i32;
	+0	msg_flags:	i32;
	=0;
}

layout wali_pollfd {
	+0	fd:		i32;
	+0	events:		i16;
	+0	revents:	i16;
	=0;
}

layout wali_rlimit {
	+0	rlim_cur:	u64;
	+0	rlim_max:	u64;
	=0;
}

layout wali_rusage {
	+0	ru_utime:	wali_timeval;
	+0	ru_stime:	wali_timeval;
	+0	ru_maxrss:	i64;
	+0	ru_ixrss:	i64;
	+0	ru_idrss:	i64;
	+0	ru_isrss:	i64;
	+0	ru_minflt:	i64;
	+0	ru_majflt:	i64;
	+0	ru_nswap:	i64;
	+0	ru_inblock:	i64;
	+0	ru_oublock:	i64;
	+0	ru_msgsng:	i64;
	+0	ru_msgrcv:	i64;
	+0	ru_nsignals:	i64;
	+0	ru_nvcsw:	i64;
	+0	ru_nivcsw:	i64;
	+0	reserved:	u8[128];
	=0;
}

layout wali_sigaction {
	+0	sa_handler:	u32; // Pointer
	+0	sa_mask:	u8[127];
	+0	sa_flags:	i32;
	+0	sa_restorer:	u32; // Pointer
	=0;
}

layout wali_sockaddr {
	+0	sa_family:	u16;
	+0	sa_data:	u8[14];
	=16;
}

layout wali_statfs {
	+0	f_type:		u64;
	+0	f_bsize:	u64;

	+0	f_blocks:	u64;
	+0	f_bfree:	u64;
	+0	f_bavail:	u64;

	+0	f_files:	u64;
	+0	f_ffree:	u64;
	+0	f_fsid:		u32[2];

	+0	f_namelen:	u64;
	+0	f_frsize:	u64;
	+0	f_flags:	u64;
	+0	f_spare:	u8[16];
	=0;
}

layout wali_stx_time {
	+0	tv_sec:		u64;
	+0	tv_nsec:	u32;
	=16;
}

layout wali_statx {
	+0	stx_mask:		u32;
	+0	stx_blksize:		u32;
	+0	stx_attributes:		u64;
	+0	stx_nlink:		u32;
	+0	stx_uid:		u32;
	+0	stx_gid:		u32;
	+0	stx_mode:		u16;
	+0	pad1:			u16;
	+0	stx_ino:		u64;
	+0	stx_size:		u64;
	+0	stx_blocks:		u64;
	+0	stx_attributes_mask:	u64;
	+0	stx_atime:		wali_stx_time;
	+0	stx_btime:		wali_stx_time;
	+0	stx_ctime:		wali_stx_time;
	+0	stx_mtime:		wali_stx_time;
	+0	stx_rdev_major:		u32;
	+0	stx_rdev_minor:		u32;
	+0	stx_dev_major:		u32;
	+0	stx_dev_minor:		u32;
	+0	spare:			u8[112];
	=0;
}

layout wali_sysinfo {
	+0	uptime:		u64;
	+0	loads:		u64[3];
	+0	totalram:	u64;
	+0	freeram:	u64;
	+0	sharedram:	u64;
	+0	bufferram:	u64;
	+0	totalswap:	u64;
	+0	freeswap:	u64;
	+0	procs:		u16;
	+0	pad:		u16;
	+0	totalhigh:	u64;
	+0	freehigh:	u64;
	+0	mem_unit:	u32;
	+0	reserved:	u8[255];
	=0;
}

layout wali_utimbuf {
	+0	actime:		u64;
	+0	modtime:	u64;
	=16;
}

layout wali_utsname {
	+0	sysname:	u8[64];
	+0	nodename:	u8[64];
	+0	release:	u8[64];
	+0	version:	u8[64];
	+0	machine:	u8[64];
	+0	domainname:	u8[64];
	=0;
}

layout wali_fd_set {
	+0	fds_bits:	u8[127];
	=127;
}

layout wali_cpu_set_t {
	+0	bits:		u8[127];
	=127;
}
*/
