// Copyright 2023 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component Termios {
	def TCGETS     = 0x5401;     // TCGETS get terminal attributes
	def TCSETS     = 0x5402;     // TCSETS set terminal attributes
	def TIOCGWINSZ = 0x5413;     // TIOCGWINSZ used to get the terminal window size
	def TIOCSWINSZ = 0x5414;     // TIOCSWINSZ used to set the terminal window size
	def TIOCGPTN   = 0x80045430; // TIOCGPTN IOCTL used to get the PTY number
	def TIOCSPTLCK = 0x40045431; // TIOCSPTLCK IOCT used to lock/unlock PTY
	def CBAUD      = 0x100F;     // CBAUD Serial speed settings
	def CBAUDEX    = 0x1000;     // CBAUDX Serial speed settings
}

enum TermiosBaud(code: u32) {
	B0	(0x0),
	B50	(0x1),
	B75	(0x2),
	B110	(0x3),
	B134	(0x4),
	B150	(0x5),
	B200	(0x6),
	B300	(0x7),
	B600	(0x8),
	B1200	(0x9),
	B1800	(0xA),
	B2400	(0xB),
	B4800	(0xC),
	B9600	(0xD),
	B19200	(0xE),
	B38400	(0xF),
}

enum TermiosInputFlag(mask: u32) {
	IGNBRK  (0x0001), // ignore break characters
	BRKINT  (0x0002), // Break generates an interrupt signal
	IGNPAR  (0x0004), // Ignore characters with parity errors
	PARMRK  (0x0008), // Mark parity errors byte{ff,0}
	INPCK   (0x0010), // enable parity checking
	ISTRIP  (0x0020), // Clear 8th bit of input characters
	INLCR   (0x0040), // Translate LF => CR
	IGNCR   (0x0080), // Ignore Carriage Return
	ICRNL   (0x0100), // Translate CR => NL
	IUCLC   (0x0200), // Translate uppercase to lowercase
	IXON    (0x0400), // Enable flow control
	IXANY   (0x0800), // let any char restart input
	IXOFF   (0x1000), // start sending start/stop chars
	IMAXBEL (0x2000), // Sound the bell and skip flushing input buffer
	IUTF8   (0x4000), // assume input being utf-8
}

enum TermiosOutputFlag(mask: u32) {
	OPOST  (0x01), // post process output
	OLCUC  (0x02), // translate lower case to upper case
	ONLCR  (0x04), // Map NL -> CR-NL
	OCRNL  (0x08), // Map CR -> NL
	ONOCR  (0x10), // No CR at col 0
	ONLRET (0x20), // NL also do CR
	OFILL  (0x40), // Fillchar for delay
	OFDEL  (0x80), // use delete instead of null
}

enum TermiosControlMode(mask: u32) {
	CSIZE  (0x030), // used as mask when setting character size
	CS5    (0x000), // char size 5bits
	CS6    (0x010), // char size 6bits
	CS7    (0x020), // char size 7bits
	CS8    (0x030), // char size 8bits
	CSTOPB (0x040), // two stop bits
	CREAD  (0x080), // enable input
	PARENB (0x100), // generate and expect parity bit
	PARODD (0x200), // set odd parity
	HUPCL  (0x400), // send HUP when last process closes term
	CLOCAL (0x800), // no modem control signals
}

// TERM modes
enum TermiosMode(mask: u32) {
	ISIG    (0x0001), // enable Interrupt,quit and suspend chars
	ICANON  (0x0002), // enable erase, kill, werase and rprnt chars
	XCASE   (0x0004), // preceedes all uppercase chars with '\'
	ECHO    (0x0008), // echo input characters
	ECHOE   (0x0010), // erase => BS - SPACE - BS
	ECHOK   (0x0020), // add newline after kill char
	ECHONL  (0x0040), // echo NL even without other characters
	NOFLSH  (0x0080), // no flush after interrupt and kill characters
	TOSTOP  (0x0100), // stop BG jobs trying to write to term
	ECHOCTL (0x0200), // will echo control characters as ^c
	ECHOPRT (0x0400), // will print erased characters between \ /
	ECHOKE  (0x0800), // kill all line considering ECHOPRT and ECHOE flags
	IEXTEN  (0x8000), // enable non POSIX special characters
}

enum TermiosControlChar(code: u5) {
	VINTR    (0),  // char will send an interrupt signal
	VQUIT    (1),  // char will send a quit signal
	VERASE   (2),  // char will erase last typed char
	VKILL    (3),  // char will erase current line
	VEOF     (4),  // char will send EOF
	VTIME    (5),  // set read timeout in tenths of seconds
	VMIN     (6),  // set min characters for a complete read
	VSWTC    (7),  // char will switch to a different shell layer
	VSTART   (8),  // char will restart output after stopping it
	VSTOP    (9),  // char will stop output
	VSUSP    (10), // char will send a stop signal
	VEOL     (11), // char will end the line
	VREPRINT (12), // will redraw the current line
	VDISCARD (13),
	VWERASE  (14), // char will erase last word typed
	VLNEXT   (15), // char will enter the next char quoted
	VEOL2    (16), // char alternate to end line
}

// This struct is passed to kernel {ioctl} calls.
layout ioctl_termios {
	+0	iflag:		u32;
	+4	oflag:		u32;
	+8	cflag:		u32;
	+12	lflag:		u32;
	+16	line:		byte;
	+20	cc:		byte[32];
	+52	ispeed:		u32;
	+56	ospeed:		u32;
	+60	winsize:	u32;
	=64;
}
