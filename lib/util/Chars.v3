// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Low-level utility methods for characters.
component Chars {
	// hexadecimal characters for each 0-15 integer value
	def hexMap_u = "0123456789ABCDEF";
	def hexMap_l = "0123456789abcdef";

	// Return the hexadecimal value of the character; -1 if not a valid hexadecimal character.
	def hexValue(ch: byte) -> int {
		if (ch < '0')  return -1;
		if (ch <= '9') return int.!(ch) - '0';
		if (ch < 'A')  return -1;
		if (ch <= 'F') return 10 + int.!(ch) - 'A';
		if (ch < 'a')  return -1;
		if (ch <= 'f') return 10 + int.!(ch) - 'a';
		return -1;
	}
	// Check if {ch} is an ASCII base-10 digit.
	def isDecimal(ch: byte) -> bool {
		return (u32.view(ch) - '0') <= 9;
	}
	// Check if {ch} is an ASCII base-16 digit.
	def isHex(ch: byte) -> bool {
		var u = u32.view(ch);
		return ((u - '0') <= 9) || ((u - 'a') <= 5) || ((u - 'A') <= 5);
	}
	// Check if {ch} is an ASCII base-8 digit.
	def isOctal(ch: byte) -> bool {
		return (u32.!(ch) - '0') <= u32.!(7);
	}
	// Checks if {ch} is an ASCII binary digit.
	def isBinary(ch: byte) -> bool {
		return (u32.view(ch) - '0') <= 1;
	}
	// Parse a (single-quoted) literal in the given range {a}, returning a pair of
	// status (# success characters if > 0) and the value.
	def parseLiteral(a: Range<byte>) -> (int, byte) {
		if (a.length < 2) return (-1, 0);
		if (a[0] != '\'') return (-1, 0);
		var ch = a[1];
		if (ch < ' ' || ch > 127) return (-2, 0);
		if (ch == '\'') return (-2, 0);
		if (ch == '\"') return (-2, 0);
		var end = 2;
		if (ch == '\\') {
			var p = parseEscape(a[2 ...]);
			if (p.0 <= 0) return (p.0 - 2, ch);
			else ch = p.1;
			end = end + p.0;
		}
		if (end >= a.length) return (0 - end, 0);
		if (a[end] == '\'') return (1 + end, ch);
		return (0 - (1 + end), 0);
	}
	// Parse an escaped byte such as \n, \r, \t, \\, \xXX in the range {a}.
	def parseEscape(a: Range<byte>) -> (int, byte) {
		if (a.length == 0) return (0, 0);
		match (a[0]) {
			'r' => return (1, '\r');
			't' => return (1, '\t');
			'n' => return (1, '\n');
			'\"' => return (1, '\"');
			'\'' => return (1, '\'');
			'\\' => return (1, '\\');
			'x' => {
				if (a.length < 2) return (-1, 0);
				if (!isHex(a[1])) return (-1, 0);
				if (!isHex(a[2])) return (-2, 0);
				return (3, byte.view(Chars.hexValue(a[1]) << 4
					| Chars.hexValue(a[2])));
			}
		}
		return (-1, 0);
	}
}
