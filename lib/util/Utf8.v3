// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utilities for decoding and validating UTF-8 strings and encoding them.
component Utf8 {
	// Returns {true} if {str} is valid UTF-8, false otherwise.
	def validate(str: string) -> bool {
		return findError(str) < 0;
	}
	// Returns the offset of any UTF-8 encoding error in the given string.
	// Returns {-1} if there is no error in the given string.
	def findError(str: string) -> int {
		if (str == null) return -1;
		return decodeUnicode(str, 0, str.length, nop);
	}
	// Encode {codepoint} into the {dest} array at {pos}, assuming there is
	// enough space for up to maximum 4 bytes, returning the number of
	// bytes used. If the codepoint cannot be encoded into UTF-8 (e.g. is
	// invalid), return {0}.
	def encode(codepoint: u32, dest: Array<byte>, pos: int) -> int {
		if (!isValidCodepoint(codepoint)) return 0;
		if (codepoint < (1 << 7)) {
			dest[pos] = byte.view(codepoint);
			return 1;
		}
		if (codepoint < (1 << 11)) {
			dest[pos]   = byte.view((codepoint >> 6) | 0b11000000u);
			dest[pos+1] = byte.view((0b00111111u & codepoint) | 0b10000000u);
			return 2;
		}
		if (codepoint < (1 << 16)) {
			dest[pos]   = byte.view((codepoint >> 12) | 0b11100000u);
			dest[pos+1] = byte.view((0b00111111u & (codepoint >> 6)) | 0b10000000u);
			dest[pos+2] = byte.view((0b00111111u & codepoint) | 0b10000000u);
			return 3;
		}
		dest[pos]   = byte.view((codepoint >> 18) | 0b11110000u);
		dest[pos+1] = byte.view((0b00111111u & (codepoint >> 12)) | 0b10000000u);
		dest[pos+2] = byte.view((0b00111111u & (codepoint >> 6)) | 0b10000000u);
		dest[pos+3] = byte.view((0b00111111u & codepoint) | 0b10000000u);
		return 4;
	}
	// Check if {codepoint} is valid for UTF-8 encoding.
	def isValidCodepoint(codepoint: u32) -> bool {
		if (codepoint > 0x10FFFF) return false; // not encodable by UTF-16
		if (codepoint >= 0xD800 && codepoint <= 0xDFFF) return false; // UTF-16 surrogates
		return true;
	}
	// Decode a UTF-8 sequences of bytes to one Unicode codepoint. Returns a
	// pair of the status (# of bytes read if successful, <= 0 if failure),
	// and the value.
	def decode1(str: Range<byte>) -> (/*status:*/int, /*value:*/u32) {
		var i = 0;
		var end = str.length;
		var b = str[i++], codepoint: u32 = b;
		if ((b & 0x80) == 0) {
			return (i, codepoint);
		}

		// Compute how many continuation bytes there are.
		var extra = 0, min = 0u;
		if ((b & 0b11100000u) == 0b11000000u) {
			extra = 1;
			min = 0x80u;
		} else if ((b & 0b11110000u) == 0b11100000u) {
			extra = 2;
			min = 0x800u;
		} else if ((b & 0b11111000u) == 0b11110000u) {
			extra = 3;
			min = 0x10000u;
		} else {
			return (0 - i, 0); // completely invalid character
		}

		// Check the continuation bytes and compute the codepoint.
		var next = i + extra;
		codepoint = codepoint & ~(0xFFFFFFFFu << u5.view(6 - extra));
		if (next > end) return (0 - i, 0);
		while (i < next) {
			var b = str[i++];
			if ((b & 0b11000000u) != 0b10000000u) return (0 - i, 0);
			codepoint = codepoint << 6 | (b & 0b00111111u);
		}
		// Check for invalid codepoints.
		if (!isValidCodepoint(codepoint)) return (0 - i, 0);
		// Check for overlong character.
		if (codepoint < min) return (0 - i, 0);
		return (i, codepoint);
	}
	// Decode a UTF-8 sequences of bytes to Unicode codepoints. Applies the {f} function for
	// each codepoint. Returns {-1} if successful, or the byte offset of the invalid
	// character otherwise.
	def decodeUnicode(str: Array<byte>, start: int, end: int, f: u32 -> void) -> int {
		var i = start;
		while (i < end) {
			var p = decode1(str[i ... end]);
			if (p.0 <= 0) return i - p.0;
			f(p.1);
			i += p.0;
		}
		return -1;
	}
	// Decode a UTF-8 byte sequence to an array of UTF-16 characters.
	// Returns the array and {-1} if successful, or {null} and the byte offset
	// of the error otherwise.
	def decodeUtf16(str: Array<byte>, start: int, end: int) -> (Array<u16>, int) {
		var buf = Vector<u16>.new().grow(end - start);
		var err = decodeUnicode(str, start, end, addUtf16(buf, _));
		return if(err < 0, (buf.extract(), -1), (null, err));
	}
	// For validity checking.
	private def nop(u: u32) { }
	// Convert {codepoint} into 1 or 2 UTF-16 characters and add them to {buf}.
	private def addUtf16(buf: Vector<u16>, codepoint: u32) {
		if (codepoint > 0xFFFFu) {
			var x = codepoint - 0x10000;
			buf.put(u16.view(0xD800u + (x >> 10)));
			buf.put(u16.view(0xDC00u + u10.view(x)));
		} else {
			buf.put(u16.view(codepoint));
		}
	}
}
