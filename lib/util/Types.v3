// Copyright 2025 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Provides simple type reflection by reifying its type parameter <T>.
private type ReifiedType<T>() #unboxed {
	// Check if a value {v} is of type <T>.
	def query<B>(v: B) -> bool { return T.?<B>(v); }
	// Cast a value {v} to type <T>.
	def cast<B>(v: B) -> T { return T.!<B>(v); }
	// Check type <T> is equal to <B>.
	def eq<B>() -> bool { return ReifiedType<B>.?(this); }
}

// Utility methods for types.
component Types {
	// Check if two types are exactly equal.
	def equal<A, B>() -> bool { return ReifiedType<A>().eq<B>(); }
	// Check if a value {a} is of type <B>. For some types like functions and tuples,
	// it is not syntactically valid to write B.?(a).
	def query<A, B>(a: A) -> bool { return B.?(a); }
	// Check if a value {a} is of type <B>. For some types like functions and tuples,
	// it is not syntactically valid to write B.!(a).
	def cast<A, B>(a: A) -> B { return B.!(a); }
}
