// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// An efficient data structure for a matrix of boolean values.
class BitMatrix(var numrows: int, var numcols: int) {
	def var width: int = (numcols + 31) >>> 5;      // width (in integers) of each row
	def var bits = Array<int>.new(numrows * width); // array that stores the data
	// get the value of the bit at {row, col}
	def [row: int, col: int] -> bool {
		var i = row * width + (col >>> 5), mask = 1 << u5.view(col);
		return (bits[i] & mask) != 0;
	}
	// set the bit at {row, col}, returning its previous value
	def [row: int, col: int] = val: bool {
		var i = row * width + (col >>> 5), mask = 1 << u5.view(col);
		var prev = bits[i];
		if (val) {
			// set the bit if not already set.
			if ((prev & mask) == 0) bits[i] = prev | mask;
		} else {
			// clear the bit if it is set.
			if ((prev & mask) != 0) bits[i] = prev & ~mask;
		}
	}
	// set the bit at the specified position, returning its previous value
	def set(row: int, col: int) -> bool {
		var i = row * width + (col >> 5), mask = 1 << u5.view(col);
		var val = bits[i];
		if ((val & mask) == 0) {
			bits[i] = val | mask;
			return false;
		}
		return true;
	}
	// clear the bit at the specified position, returning its previous value
	def clear(row: int, col: int) -> bool {
		var i = row * width + (col >> 5), mask = 1 << u5.view(col);
		var val = bits[i];
		if ((val & mask) != 0) {
			bits[i] = val & (-1 ^ mask);
			return true;
		}
		return false;
	}
	// clear the row at the specified position
	def clearRow(row: int) {
		var i = row * width;
		for (j < width) bits[i + j] = 0;
	}
	// set the row at the specified position
	def setRow(row: int) {
		var i = row * width;
		for (j < width) bits[i + j] = 0xffffffff;
	}
	// OR rows {a} and {b} together, storing the result in row {a}
	def or(a: int, b: int) {
		var array = bits;
		var da = a * width, db = b * width;
		for (i < width) array[da + i] = array[da + i] | array[db + i];
	}
	// AND rows {a} and {b} together, storing the result in row {a}
	def and(a: int, b: int) {
		var array = bits;
		var da = a * width, db = b * width;
		for (i < width) array[da + i] = array[da + i] & array[db + i];
	}
	// copy row {b} into row {a}
	def copy(a: int, b: int) {
		var array = bits;
		var da = a * width, db = b * width;
		for (i < width) array[da + i] = array[db + i];
	}
	// extract a range of rows from {minRow} inclusive to {maxRow} exclusive into a new BitMatrix
	def range(minRow: int, maxRow: int) -> BitMatrix {
		var numrows = maxRow - minRow;
		var result = BitMatrix.new(numrows, numcols);
		var start = minRow * width, end = maxRow * width;
		var sbits = this.bits, rbits = result.bits;
		for (i = start; i < end; i++) rbits[i - start] = sbits[i];
		return result;
	}
	// apply {func} to every bit that is set in row {row}
	def apply<T>(row: int, func: (int, T) -> void, arg: T) {
		var start = width * row;
		for (i < width) {
			var col = i * 32;
			for (b = bits[i + start]; b != 0; b = b >>> 1) {
				if ((b & 1) != 0) func(col, arg);
				col++;
			}
		}
	}
	// grow this bit matrix to {nrows} rows
	def grow(nrows: int) -> this {
		bits = Arrays.grow(bits, nrows * width);
		numrows = nrows;
	}
	// grow this bit matrix to the specified number of columns
	def widen(ncols: int) -> this {
		if (ncols <= numcols) return;
		var nwidth = (ncols + 31) >>> 5;
		if (nwidth <= width) {
			numcols = ncols;
			return;
		}
		var nbits = Array<int>.new(numrows * nwidth);
		for (i < numrows) {
			for (j < width) {
				nbits[i * nwidth + j] = bits[i * width + j];
			}
		}
		numcols = ncols;
		width = nwidth;
		bits = nbits;
	}
	def count(row: int) -> int {
		var result = 0, max = (row + 1) * width;
		for (i = row * width; i < max; i++) {
			var val = bits[i];
			while (val != 0) {
				if ((val & 1) != 0) result++;
				val >>>= 1;
			}
		}
		return result;
	}
	def render(buf: StringBuilder) -> StringBuilder {
		for (i < numrows) renderRow(i, buf);
		return buf;
	}
	def renderRow(row: int, buf: StringBuilder) -> StringBuilder {
		buf.putd(row);
		buf.puts(": ");
		var start = row * width, end = start + width;
		for (i = start; i < end; i++) {
			var w = bits[i];
			for (j < 32) {
				buf.putc(byte.view('0' + (w & 1)));
				w = w >> 1;
			}
			buf.sp();
		}
		buf.ln();
		return buf;
	}
}
