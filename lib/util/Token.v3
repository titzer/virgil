// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A point in a file, including the file name, beginning line, and beginning column.
class FilePoint(fileName: string, beginLine: int, beginColumn: int) {
	// create a range starting from this line and column, extending {len} characters
	def rangeOf(len: int) -> FileRange {
		return FileRange.new(fileName, beginLine, beginColumn, beginLine,
			beginColumn + len);
	}
	// extract the line from the {input} file that contains this file point, using
	// precomputed {lineEnds} for efficient selection
	def extractLine(input: Array<byte>, lineEnds: Vector<int>) -> string {
		if (input == null || lineEnds == null || beginLine == 0) return null;
		var start = 0;
		if (beginLine > 1) start = lineEnds[beginLine - 2] + 1;
		var end = start;
		while (end < input.length) {
			if (input[end] == '\n') break;
			end++;
		}
		return Arrays.range(input, start, end);
	}
}
// A range within a file, including a start location and end location
class FileRange extends FilePoint  {
	def endLine: int;
	def endColumn: int;

	new(fileName: string, beginLine: int, beginColumn: int, endLine, endColumn)
		super(fileName, beginLine, beginColumn) { }
	// get a FilePoint corresponding to the end of this range
	def end() -> FilePoint {
		return FilePoint.new(fileName, endLine, endColumn);
	}
	def lastByte() -> FileRange {
		if (endColumn > beginColumn || endLine > beginLine) {
			return FileRange.new(fileName, endLine, endColumn -1,
				endLine, endColumn);
		}
		return end().rangeOf(1);
	}
}
// A range of characters with location information in a file
class Token extends FilePoint {
	def image: string;

	new(fileName: string, image, beginLine: int, beginColumn: int) 
		super(fileName, beginLine, beginColumn) { }

	def copy(image: string) -> Token {
		return Token.new(fileName, image, beginLine, beginColumn);
	}
	def range() -> FileRange {
		return rangeOf(image.length);
	}
}
