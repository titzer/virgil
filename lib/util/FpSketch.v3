// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A utility for computing (binary) floating point literals from decimal
// source literals. Implemented as an arbitrarily-large array of 32-bit
// words and an exponent, this class has just barely enough arithmetic
// support to properly compute and round large bit strings.
// Always mutable; arithmetic is done in-place.
class FpSketch {
	var words = Array<u32>.new(1); // base 2^32 digits.
	var exp: int;

	// multiply this number by 10 and add a low-order base 10 digit.
	def addDecDigit(val: u32) -> this {
		mulAdd32(10u, val);
	}
	// multiply this number by {factor} and add {carry}.
	def mulAdd32(factor: u32, carry: u32) -> this {
		var max = words.length;
		for (i < max) {
			var d = u64.view(words[i]) * factor + carry;
			carry = u32.view(d >> 32);
			words[i] = u32.view(d);
		}
		if (carry > 0) {
			words = Arrays.grow(words, max + 1);
			words[max] = carry;
		}
	}
	// Multiply this number by {10^exp}.
	def mulPow10(exp: u32) -> this {
		// handle positive exponents with repeated multiplications
		while (exp >= 9) {
			mulAdd32(1000000000u, 0);  // speed up big exponents
			exp -= 9;
		}
		if (exp > 0) mulAdd32(pow10[exp], 0);
	}
	// Round (ties to even) the high-order bits of this number to the specified
	// {width} bits, in place.
	def round(width: int) -> this {
		roundg(width, false);
	}
	// Round (ties to even) the high-order bits of this number to the specified
	// {width} bits, in place. The {guard} bit can be used to express whether
	// there are any non-zero words after the word point, which is needed in
	// breaking ties.
	def roundg(width: int, guard: bool) -> this {
		var r = highestOneBit() - width;  // bit-index of first rounded-off bit
		if (r < 0) return; // either 0 or less than width => no rounding
		var i = r >> 5;    // digit-index containing first rounded-off bit
		var o = u5.view(r);   // bit-offset of first rounded-off bit

		// zero low order words and record if all of them and guard are zero
		var zero = !guard;
		for (j < i) {
			zero = zero && words[j] == 0;
			words[j] = 0;
		}

		// zero the low order bits of this digit
		var d = words[i];
		var s = byte.view(1 + o);
		words[i] = (d >> s) << s;

		// determine if we should round up or down, breaking ties if necessary
		// by looking at the lowest order non-rounded off bit
		var b = d << u5.view(31 - o);

		if (b < 0x80000000u) {
			// round down; do nothing
		} else if (b > 0x80000000u || !zero || readBit(r+1) == 1) {
			// round up
			addPow2(r+1);
		}
	}
	// Add {2^exp} to this number in place.
	def addPow2(exp: int) -> this {
		var max = words.length;
		var carry = 1u << u5.view(exp);
		for (i = exp >> 5; i < max; i++) {
			var d = u64.view(words[i]) + carry;
			carry = u32.view(d >> 32);
			words[i] = u32.view(d);
		}
		if (carry > 0) {
			words = Arrays.grow(words, max + 1);
			words[max] = carry;
		}
	}
	// Return the bit-index of the highest 1 bit in this number, -1 if this number
	// is 0.
	def highestOneBit() -> int {
		var i = highestNonZeroDigit();
		if (i < 0) return -1;
		var d = words[i], result = 31 + i * 32;
		while (d < 0x80000000u) {
			result--;
			d = d << 1;
		}
		return result;
	}
	// Return the digit-index of the highest non-zero digit, -1 if this number is 0.
	private def highestNonZeroDigit() -> int {
		var i = words.length - 1;
		while (true) {
			if (words[i] != 0) break;
			if (i-- == 0) return -1;
		}
		return i;
	}
	// Read the bit of this number at the given bit-index.
	def readBit(b: int) -> u1 {
		var i = b >> 5;
		if (i >= words.length) return 0;
		var o = u5.view(b);
		return u1.view(words[i] >> o);
	}
	// Check if this number is equal to zero.
	def isZero() -> bool {
		for (i < words.length) if (words[i] != 0) return false;
		return true;
	}
	// Return the 32-bit mantissa (upper bits without highest 1) and exponent.
	def mantissa32() -> (u32, int) {
		var h = highestOneBit();
		if (h < 0) return (0, int.min); // this number == 0
		if (h == 0) return (0, 0);      // this number == 1
		var r = h - 1, i = r >> 5, s = u5.view(r);
		var d = words[i];
		if (s < 31) {
			d <<= u5.view(31 - s);
			if (i > 0) d |= words[i-1] >> u5.view(s+1); // part of next lowest digit
		}
		return (d, h + this.exp * 32);
	}
	// Return the 64-bit mantissa (upper bits without highest 1) and exponent.
	def mantissa64() -> (u64, int) {
		var h = highestOneBit();
		if (h < 0) return (0, int.min); // this number == 0
		if (h == 0) return (0, 0);      // this number == 1
		var r = h - 1, i = r >> 5, s = u5.view(r);
		var d = u64.view(words[i]) << 32;
		if (i > 0) d |= words[i-1];
		if (s < 31) {
			d <<= u5.view(31 - s);
			if (i > 1) d |= words[i-2] >> u5.view(s+1); // part of next lowest digit
		}
		return (d, h + this.exp * 32);
	}
	// Copy the words of this number into another number.
	def copyInto(d: FpSketch) -> FpSketch {
		if (d.words.length < words.length) {
			d.words = Arrays.dup(this.words);
			return d;
		}
		Arrays.copyInto(this.words, d.words, 0);
		for (i = this.words.length; i < d.words.length; i++) d.words[i] = 0;
		return d;
	}
	// Divide this number by {10^exp} in place, producing at least {qmin} quotient words.
	// Returns {true} if the divison was exact, {false} otherwise.
	def divPow10(exp: u32, qmin: u31) -> bool {
		// Small power of 10 => single word divisor.
		if (exp < 10) return divU32(pow10[exp], qmin);
		var di = FpSketch.new();
		di.words[0] = 1;
		// XXX: padr() once and then use simpler repeated division by u32
		return div(di.mulPow10(exp), qmin);
	}
	// Divide this number by {di} in place, producing at least {qmin} quotient words.
	// Returns {true} if the divison was exact, {false} otherwise.
	def div(di: FpSketch, qmin: u31) -> bool {
		// Single word divisor has a faster method.
		var dwords = di.words.length, dextra = dwords - 2;
		if (dwords == 1) {
			this.exp -= di.exp;
			return divU32(di.words[0], qmin);
		}

		// Move this number into a new one large enough to hold all partial remainders.
		// If this number is actually zero, then we are done because 0/di == 0.
		if (this.padr(dwords + qmin)) return true;
		var ri = FpSketch.new();
		ri.words = this.words;
		ri.exp = this.exp;

		// Allocate space for quotients in this number.
		var qi = this;
		qi.words = Array<u32>.new(ri.words.length);
		qi.exp = ri.exp - di.exp - dextra;

		// Reusable space for a temporary multiplier each time through the loop.
		var mi = FpSketch.new();

		// Long-division starting from the highest-order words. Compute one
		// word {q} of the quotient at a time. To estimate {q} within +/-2
		// each iteration, use the upper two words {dh2} of {di} and do
		// either 96x64-bit or 64x64-bit division.
		var dh2 = di.u64at(dwords-2);
		var rlast = 0u;  // upper 32 bits of 96-bit numerator
		for (npos = ri.words.length -2; npos >= dextra; npos--) {
			var q: u32;
			var nd = ri.u64at(npos);
			if (rlast == 0) { // 64x64 bit divide
				var qe = nd / dh2;
				q = u32.view(qe);
			} else { // 96x64 bit divide; shift in rlast bits
				var shift = 1 + Longs.log(rlast);
				var sdh2 = dh2 >> u6.view(shift);
				var snd = nd >> u6.view(shift) | (u64.view(rlast) << u6.view(64 - shift));
				var qe = snd / sdh2;
				q = if(qe > 0xFFFFFFFFu, 0xFFFFFFFFu, u32.view(qe)); // +1 or +2 overestimate
			}
			while (q > 0) {
				var si = if(q == 1, di, di.copyInto(mi).mulAdd32(q, 0));
				var borrow = ri.subRange(si, npos - dextra, npos + 3);
				if (borrow == 0) break;
				// q was over-estimated (by +2 max); restore previous words and try again
				q--;
				ri.addRange(si, npos - dextra, npos + 3);
			}
			rlast = ri.words[npos+1];
			qi.words[npos] = q;
		}
		var exact = ri.isZero() && rlast == 0;
		return exact;
	}
	// Divide this number by {d} in place, producing at least {qmin} quotient words.
	// Returns {true} if the divison was exact, {false} otherwise.
	def divU32(d: u32, qmin: u31) -> bool {
		// Move this number into a new one large enough to hold all partial remainders.
		// If this number is actually zero, then we are done because 0/di == 0.
		if (this.padr(1 + qmin)) return true;
		var ri = FpSketch.new();
		ri.words = this.words;
		ri.exp = this.exp;

		// Allocate space for quotients in this number.
		var qi = this;
		qi.words = Array<u32>.new(ri.words.length);
		qi.exp = ri.exp;

		// Long-division starting at highest word; grade-school algorithm.
		var rem = 0u;
		for (npos = ri.words.length -1; npos >= 0; npos--) {
			var nd = (u64.view(rem) << 32) | ri.words[npos];
			rem = u32.view(nd % d);
			qi.words[npos] = u32.view(nd / d);
		}
		return rem == 0;
	}
	// Subtract {num * 2^(32*pos)} from this number, in place, returning the borrow
	// from the {maxPos} position.
	def subRange(num: FpSketch, pos: int, maxPos: int) -> u32 {
		var nd = num.words, borrow = 0u;
		for (i < nd.length) {
			var p = pos + i;
			var b = words[p], r = long.view(b) - nd[i] - borrow;
			words[p] = u32.view(r);
			borrow = if(r < 0, 1, 0);
		}
		if (maxPos > words.length) maxPos = words.length;
		for (p = nd.length + pos; p < maxPos; p++) {
			var b = words[p], r = b - borrow;
			words[p] = r;
			if (r <= b) return 0;
		}
		return borrow;
	}
	// Add {num * 2^(32*pos)} to this number, in place, returning the carry
	// out from the highest order digit of {num}.
	def addRange(num: FpSketch, pos: int, maxPos: int) -> u32 {
		var nd = num.words, carry = 0u;
		for (i < nd.length) {
			var p = pos + i;
			var b = words[p], r = u64.view(b) + nd[i] + carry;
			words[p] = u32.view(r);
			carry = u32.view(r >> 32);
		}
		if (maxPos > words.length) maxPos = words.length;
		for (p = nd.length + pos; p < words.length; p++) {
			var b = words[p], r = b + carry;
			words[p] = r;
			if (r >= b) return 0;
		}
		return carry;
	}
	def render(buf: StringBuilder) -> StringBuilder {
		buf.puts("0x");
		for (i = words.length-1; i >= 0; i--) {
			if (i < words.length-1) buf.putc('_');
			buf.putx_32(words[i]);
		}
		if (this.exp != 0) buf.puts("w").putd(this.exp);
		return buf;
	}
	private def u64at(pos: int) -> u64 {
		return u64.view(words[pos+1]) << 32 | words[pos];
	}
	private def padr(nwords: int) -> bool {
		var w = words, l = w.length;
		while (true) {
			if (l == 0) return true; // zero
			if (w[l-1] == 0) l--;
			else break;
		}
		var d = nwords - l;
		if (d <= 0) return false;
		words = Array<u32>.new(nwords);
		for (i < l) words[i + d] = w[i];
		exp -= d;
		return false;
	}
}
def pow10 = [  // cached powers of 10 for small cases
	1u, 10u, 100u, 1000u, 10000u, 100000u, 1000000u, 10000000u, 100000000u, 1000000000u
];
