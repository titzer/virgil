// Copyright 2010 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utility methods for arrays.
component Arrays {
	// get the length of {array}, but returning 0 for a null array
	def length<T>(array: Array<T>) -> int {
		return if(array == null, 0, array.length);
	}
	// compute a hash of {array}, given a {hash} function for each element
	def hash<T>(h0: int, array: Array<T>, hash: T -> int) -> int {
		for (e in array) h0 = h0 * 33 + hash(e);
		return h0;
	}
	// compare elements of {arr1} and {arr2} for equality
	def equal<A>(arr1: Array<A>, arr2: Array<A>) -> bool {
		if (arr1 == arr2) return true;
		if (arr1.length != arr2.length) return false;
		for (i < arr1.length) if (arr1[i] != arr2[i]) return false;
		return true;
	}
	// map {func} over an input {array}, returning a new array of the results
	def map<A, B>(array: Array<A>, func: A -> B) -> Array<B> {
		if (array == null) return null;
		var max = array.length, r = Array<B>.new(max);
		for (i < max) r[i] = func(array[i]);
		return r;
	}
	// map {func} over an input {array}, storing the results in the {dest}
	def mapInto<A, B>(array: Array<A>, func: A -> B, dest: Array<B>) {
		if (array == null) return;
		for (i < array.length) dest[i] = func(array[i]);
	}
	// make a copy of a {src} array
	def dup<T>(src: Array<T>) -> Array<T>{
		var max = src.length, dst = Array<T>.new(max);
		for (i < max) dst[i] = src[i];
		return dst;
	}
	// copy elements from {src} into {dst}, up to {dst.length}
	def copy<T>(src: Array<T>, dst: Array<T>) -> Array<T>{
		var max = src.length;
		if (max > dst.length) max = dst.length;
		for (i < max) dst[i] = src[i];
		return dst;
	}
	// copy elements from {src} into {dst}, starting at destination index {destIndex}
	def copyInto<T>(src: Array<T>, dst: Array<T>, destIndex: int) {
		var max = src.length;
		for (i < max) dst[i + destIndex] = src[i];
	}
	// grow an {array} if it is smaller than size, returning either {array} or a new one
	def grow<T>(array: Array<T>, size: int) -> Array<T> {
		if (size > array.length) {
			var n = Array<T>.new(size), max = array.length;
			for (i < max) n[i] = array[i];
			return n;
		}
		return array;
	}
	// prepend a single {val} to an {array}, returning a new array
	def prepend<T>(val: T, array: Array<T>) -> Array<T> {
		var max = array.length;
		if (array == null || max == 0) return [val];
		var narray = Array<T>.new(max + 1);
		narray[0] = val;
		for (i < max) narray[i + 1] = array[i];
		return narray;
	}
	// append a single {val} to an {array}, returning a new array
	def append<T>(val: T, array: Array<T>) -> Array<T> {
		var result = grow(array, array.length + 1);
		result[array.length] = val;
		return result;
	}
	// make a copy of a range of an {array}, from {start} inclusive to {end} exclusive
	def range<T>(array: Array<T>, start: int, end: int) -> Array<T> {
		var n = Array<T>.new(end - start);
		for (i = start; i < end; i++) n[i - start] = array[i];
		return n;
	}
	// remove the element from {array} at {index} and slide elements down
	def removeIndex<T>(array: Array<T>, index: int) {
		for (i = index + 1; i < array.length; i++) {
			array[i - 1] = array[i];
		}
	}
	// perform mergesort on {array} for elements between {start} inclusive and {end} exclusive,
	// using the {cmp} function
	def sort<T>(array: Array<T>, start: int, end: int, cmp: (T, T) -> bool) -> Array<T> {
		var size = end - start;
		if (size == 0) return [];
		if (size == 1) return [array[start]];
		if (size == 2) {
			var s = array[start], e = array[end - 1];
			if (cmp(e, s)) return [e, s];
			return [s, e];
		}
		if (size > 2) {
			var middle = (start + end) / 2;
			var a = sort(array, start, middle, cmp); // sort left
			var b = sort(array, middle, end, cmp); // sort right
			// merge
			var n = Array<T>.new(size);
			var i = 0, j = 0;
			for (k < n.length) {
				var l = a[i], r = b[j];
				if (cmp(l, r)) {
					n[k] = l;
					if (++i == a.length) return finish(n, k + 1, b, j); 
				} else {
					n[k] = r;
					if (++j == b.length) return finish(n, k + 1, a, i); 
				}
			}
			return n;
		}
		return array;
	}
	// helper for merge sort routine
	private def finish<T>(array: Array<T>, k: int, end: Array<T>, i: int) -> Array<T> {
		while (k < array.length) array[k++] = end[i++];
		return array;
	}
}
