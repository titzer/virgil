// Copyright 2010 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utility methods for arrays.
component Arrays {
	// Get the length of {array}, returning {0} for a null array.
	def length<T>(array: Array<T>) -> int {
		return if(array == null, 0, array.length);
	}
	// Compute a hash of {array}, given a {hash} function for each element.
	def hash<T>(h0: int, array: Array<T>, hash: T -> int) -> int {
		for (e in array) h0 = h0 * 33 + hash(e);
		return h0;
	}
	// Compare elements of {x} and {y} for equality.
	def equal<A>(x: Array<A>, y: Array<A>) -> bool {
		if (x == y) return true;
		if (x.length != y.length) return false;
		for (i < x.length) if (x[i] != y[i]) return false;
		return true;
	}
	// Check if a value is contained in an array.
	def contains<T>(array: Array<T>, element: T) -> bool {
		if (array == null) return false;
		for (i < array.length) if (array[i] == element) { return true; }
		return false;
	}
	// Filter an array, keeping elements whose {func} value is true,
	// returning a new array of the results.
	def filter<T>(array: Array<T>, func: T -> bool) -> Array<T> {
		if (array == null) return null;
		var max = array.length, t = Array<T>.new(max);
		var j = 0;
		for (i < max) { if (func(array[i])) { t[j] = array[i]; j++; }}
		var r = Array<T>.new(j);
		for (i < j) r[i] = t[i];
		return r;
	}
	// Map {func} over an input {array}, returning a new array of the results.
	def map<A, B>(array: Array<A>, func: A -> B) -> Array<B> {
		if (array == null) return null;
		var max = array.length, r = Array<B>.new(max);
		for (i < max) r[i] = func(array[i]);
		return r;
	}
	// Map {func} over an input {array}, storing the results in the {dest}.
	def mapInto<A, B>(array: Array<A>, func: A -> B, dest: Array<B>) {
		if (array == null) return;
		for (i < array.length) dest[i] = func(array[i]);
	}
	// Make a copy of a {src} array.
	def dup<T>(src: Array<T>) -> Array<T>{
		var max = src.length, dst = Array<T>.new(max);
		for (i < max) dst[i] = src[i];
		return dst;
	}
	// Make a copy of {array} and replace {array[index]} with {val}.
	def replace<T>(array: Array<T>, index: int, val: T) -> Array<T> {
		array = dup(array);
		array[index] = val;
		return array;
	}
	// Delete the element at {index} in {array}.
	def deleteAt<T>(array: Array<T>, index: int) -> Array<T> {
		var n = Array<T>.new(array.length - 1);
		for (i < index) n[i] = array[i];
		for (i = index + 1; i < array.length; i++) n[i - 1] = array[i];
		return n;
	}
	// Copy elements from {src} into {dst}, up to {dst.length}.
	def copy<T>(src: Array<T>, dst: Array<T>) -> Array<T>{
		var max = src.length;
		if (max > dst.length) max = dst.length;
		for (i < max) dst[i] = src[i];
		return dst;
	}
	// Copy elements from {src} into {dst}, starting at destination index {destIndex}.
	def copyInto<T>(src: Array<T>, dst: Array<T>, destIndex: int) {
		var max = src.length;
		for (i < max) dst[i + destIndex] = src[i];
	}
	// Concatentate arrays {a} and {b} into a new array.
	def concat<T>(a: Array<T>, b: Array<T>) -> Array<T> {
		var amax = a.length;
		var r = Array<T>.new(amax + b.length);
		for (i < amax) r[i] = a[i];
		var bmax = b.length;
		for (i < bmax) r[i + amax] = b[i];
		return r;
	}
	// Grow an {array} if it is smaller than {size}, returning either {array} or a new one.
	def grow<T>(array: Array<T>, size: int) -> Array<T> {
		if (size > array.length) {
			var n = Array<T>.new(size), max = array.length;
			for (i < max) n[i] = array[i];
			return n;
		}
		return array;
	}
	// Grow an {array} if its smaller than {nlength}, using the specified {val} for new
	// elements.
	def growV<T>(array: Array<T>, nlength: int, val: T) -> Array<T> {
		var narray = Array<T>.new(nlength);
		for (i < array.length) narray[i] = array[i];
		for (i = array.length; i < narray.length; i++) narray[i] = val;
		return narray;
	}
	// Prepend a single {val} to an {array}, returning a new array.
	def prepend<T>(val: T, array: Array<T>) -> Array<T> {
		var max = array.length;
		if (array == null || max == 0) return [val];
		var narray = Array<T>.new(max + 1);
		narray[0] = val;
		for (i < max) narray[i + 1] = array[i];
		return narray;
	}
	// Append a single {val} to an {array}, returning a new array.
	def append<T>(val: T, array: Array<T>) -> Array<T> {
		var result = grow(array, array.length + 1);
		result[array.length] = val;
		return result;
	}
	// Make a copy of a range of an {array}, from {start} inclusive to {end} exclusive.
	def range<T>(array: Array<T>, start: int, end: int) -> Array<T> {
		var n = Array<T>.new(end - start);
		for (i = start; i < end; i++) n[i - start] = array[i];
		return n;
	}
	// Remove the element from {array} at {index} and slide elements down.
	def removeIndex<T>(array: Array<T>, index: int) {
		for (i = index + 1; i < array.length; i++) {
			array[i - 1] = array[i];
		}
	}
	// Return {true} if for all {i}, {cond(arr1[i], arr2[i])}.
	def allTrue<T>(x: Array<T>, y: Array<T>, cond: (T, T) -> bool) -> bool {
		if (x.length != y.length) return false;
		for (i < x.length) if (!cond(x[i], y[i])) return false;
		return true;
	}
	// Return {true} if for any {i}, {cond(arr1[i], arr2[i])}.
	def anyTrue<T>(x: Array<T>, y: Array<T>, cond: (T, T) -> bool) -> bool {
		for (i < x.length) {
			if (i >= y.length) return false;
			if (cond(x[i], y[i])) return true;
		}
		return false;
	}
	// Perform mergesort on {array} for elements between {start} inclusive and {end} exclusive,
	// using the {cmp} function.
	def sort<T>(array: Array<T>, start: int, end: int, cmp: (T, T) -> bool) -> Array<T> {
		var size = end - start;
		if (size == 0) return [];
		if (size == 1) return [array[start]];
		if (size == 2) {
			var s = array[start], e = array[end - 1];
			if (cmp(e, s)) return [e, s];
			return [s, e];
		}
		if (size > 2) {
			var middle = (start + end) / 2;
			var a = sort(array, start, middle, cmp); // sort left
			var b = sort(array, middle, end, cmp); // sort right
			// merge
			var n = Array<T>.new(size);
			var i = 0, j = 0;
			for (k < n.length) {
				var l = a[i], r = b[j];
				if (cmp(l, r)) {
					n[k] = l;
					if (++i == a.length) return finish(n, k + 1, b, j);
				} else {
					n[k] = r;
					if (++j == b.length) return finish(n, k + 1, a, i);
				}
			}
			return n;
		}
		return array;
	}
	// Helper for merge sort routine.
	private def finish<T>(array: Array<T>, k: int, end: Array<T>, i: int) -> Array<T> {
		while (k < array.length) array[k++] = end[i++];
		return array;
	}
}
