// Copyright 2020 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A mutable stack data structure.
class Stack<T> {
	// Push {val} onto the top of the stack.
	def push(val: T);
	// Peek at the top element of the stack.
	def peek() -> T;
	// Pop the top element off the stack.
	def pop() -> T;
	// Check if this stack is empty.
	def empty() -> bool;
}
// Stack implementation using a list as storage.
class ListStack<T> extends Stack<T> {
	def var top: List<T>;

	def push(val: T) {
		top = List.new(val, top);
	}
	def peek() -> T {
		return top.head;
	}
	def pop() -> T {
		var result = top.head;
		top = top.tail;
		return result;
	}
	def empty() -> bool {
		return top == null;
	}
}
// Stack implementation using an array as storage.
class ArrayStack<T> extends Stack<T> {
	def var elems = Array<T>.new(10);
	var top = 0; // TODO: stack top should not be directly mutable

	def push(v: T) {
		if (top == elems.length) {
			elems = Arrays.grow(elems, elems.length * 4);
		}
		elems[top++] = v;
	}
	def peek() -> T {
		return if(top > 0, elems[top - 1]);
	}
	def pop() -> T {
		return if(top > 0, elems[--top]);
	}
	def peekn(n: int) -> Range<T> {
		return elems[(top - n) ... top];
	}
	def empty() -> bool {
		return top == 0;
	}
	// Push the elements in {v}.
	def pusha(v: Array<T>) {
		pushr(v);
	}
	// Push the elements in range {r}.
	def pushr(r: Range<T>) {
		var end = top + r.length;
		if (end > elems.length) {
			elems = Arrays.grow(elems, end + elems.length * 3);
		}
		for (i < r.length) elems[top + i] = r[i];
		top = end;
	}
	// Push {v} {n} times.
	def pushn(v: T, n: int) -> this {
		var ntop = top + n;
		if (ntop > elems.length) elems = Arrays.grow(elems, elems.length + ntop);
		for (i < n) elems[top + i] = v;
		top += n;
	}
	// FAST: Peek at the storage just above the top.
	def next() -> T {
		return if(top < elems.length - 1, elems[top]);
	}
	// Discard all elements on the stack.
	def clear() {
		top = 0;
	}
	// Resize the internal storage to {ntop} and set the top of the stack to be {ntop}.
	def resize(ntop: int) {
		if (ntop > elems.length) {
			elems = Arrays.grow(elems, ntop + elems.length);
		}
		top = ntop;
	}
}
