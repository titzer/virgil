type SExpr {
    case Atom(data: string);
    case List(elems: List<SExpr>); // usually Cons

    def buildString(buf: StringBuilder) {
        match (this) {
            Atom(data) => buf.puts(data);
            List(elems) => {
                buf.putc('(');
		var elem = elems;
		while (elem.tail != null) {
                    elem.head.buildString(buf);
                    buf.sp();
		    elem = elem.tail;
		}
                elem.head.buildString(buf);
                buf.putc(')');
            }
        }
    }

    def forceAtom() -> string {
        match (this) {
            Atom(s) => return s;
            _ => return null;
        }
    }

    def forceList() -> List<SExpr> {
        match (this) {
            Atom(_) => return null;
            List(elems) => return elems;
        }
    }

    def matchesAtom(atom_str: string) -> bool {
        match (this) {
            Atom(s) => return Strings.equal(s, atom_str);
            _ => return false;
        }
    }
}

type ParseResult<T> {
    case Success(res: T);
    case Expected(str: string);
    case EmptySExpr;
}

class SExprParser extends TextReader {
    new(filename: string, data: Array<byte>) super(filename, data) {}

    def atomChar(b: byte) -> bool {
        match (b) {
            ' ' => return false;
            '\t' => return false;
            '\n' => return false;
            ')' => return false;
            _ => return true;
        }
    }

    // can't make it ParseResult<SExpr.Atom>?
    def readAtom() -> ParseResult<SExpr> {
        skipWhitespace();
        def atom_end = star_rel(1, atomChar);
        if (atom_end == -1) return ParseResult.Expected("atom");

        def tok = readToken(atom_end - pos);
        skipWhitespace();
        return ParseResult.Success(SExpr.Atom(tok.image));
    }

    def readSExpr() -> ParseResult<SExpr> {
        skipWhitespace();
        if (req1('(') == -1) return ParseResult.Expected("(");
        skipWhitespace();

        def elems = Vector<SExpr>.new();
        while (opt1(')') == -1) {
            skipWhitespace();
            def res: ParseResult<SExpr> = if(peekRel(0) == '(', readSExpr(), readAtom());

            match (res) {
                Success(elt) => elems.put(elt);
                _ => return res;
            }
        }

        skipWhitespace();

        match (elems.length) {
            0 => return ParseResult.EmptySExpr;
            1 => return ParseResult.Success(elems[0]);
            _ => {
		def ls = Lists.fromArray(elems.copy());
	        return ParseResult.Success(SExpr.List(ls));
	    }
        }
    }
}
