def rn = [
	// Lfsr16
	0xD04AD3C5, 0x363496DE, 0x46C56B60, 0x74EADBE6, 0x5D679B84, 0x45C7FDD9, 0x086AF487, 0x91591D01,
	0xB0DC9599, 0x6E8A97E9, 0x79170B64, 0xBBD05F7D, 0xFB7A416D, 0x8C327AC4, 0x1DA4F629, 0xB02AC3CA,
	// Schneier2
	0x9C53E0BE, 0x85A79755, 0x0F7567DE, 0x7200227C, 0xA62D9D07, 0x7C1994B2, 0xCBF3B0E7, 0x8A37E3EF,
	0x4B3C435E, 0x20D9DBE3, 0x1B1EA99F, 0x45703CCD, 0xF989DFA0, 0x31ADF488, 0x860D308F, 0x6C4B478D,
	// Schneier1
	0x970CD661, 0xB1FA33BB, 0x18694805, 0x9647DD77, 0xF493B3CE, 0xEBA79828, 0xF41B23E2, 0x6CE62FE7,
	0x04DFC534, 0x2E7944E1, 0xFE521026, 0x93EFB1BF, 0x4BAF09E4, 0xE69441C3, 0x1AECCA91, 0xEA37151B,
	// VirgilLib
	0x792395C3, 0xEFEF22F4, 0x40126E98, 0x0874DED6, 0x3A253D82, 0x2A824367, 0x5088CC4B, 0xA41B5BF5,
	0x370FD1AC, 0xAB5AF33F, 0x5ECCB456, 0xE0953A5F, 0xB58811D9, 0x5BBC4A16, 0xC7156E76, 0x8D983612,
	// LinearCongru
	0x580C0F98, 0x10F0107F, 0x0CDF381A, 0x543F0159, 0x01F6786C, 0x227671C3, 0x0EFA350E, 0x71488C3D,
	0x9E0A6680, 0x24207F47, 0xEC70B942, 0x32921D61, 0xECDFADD4, 0xC9927D0B, 0x7006B8B6, 0x66A198C5,
	// XorShift
	0xFDE82F85, 0x57DB6D95, 0x4A3BEFE7, 0x9B0C7C5C, 0xEFED7FA0, 0x3F9CB374, 0x81591F11, 0x35CDCA07,
	0x949A97C4, 0x89CBF490, 0xE0F937FB, 0x93112ADC, 0x23B51D45, 0xD730C41E, 0x6B67BD4A, 0x1321E003,
	// XorShift2
	0x1074F69E, 0xB91D57CF, 0x8AEFC207, 0xFA1DCE9E, 0x4149D7AA, 0x2F54E3B0, 0x914E9CBF, 0x8244A5D7,
	0x469AF6B6, 0x796EC2ED, 0x4D6156B4, 0x745A8A07, 0xD824040A, 0x58AA3ACF, 0x7813B121, 0x03890DDA,
	-1
];

def printInt(name: string, array: Array<int>) {
	System.puts(name);
	for (v in array) {
		System.puti(v);
		System.putc(' ');
	}
	System.ln();
}

def printBool(name: string, array: Array<bool>) {
	System.puts(name);
	for (v in array) {
		System.putc(if(v, '+', '-'));
	}
	System.ln();
}

def doFolded() -> Array<int> {
	return [
		0x27B0002F + 0x3C44C19C,
		0x83ABB0F9 - 0x59EA5FF6,
		0x6F1333AB * 0x0F59B2C1,
		0x0D12F572 / 0xE996F118,
		0xB4B41C86 % 0x49376949,
		0xB9786ED6 & 0xB587E26B,
		0x1843171A | 0xAA832908,
		0xFD3086DA ^ 0x061D3ADE,
		0x1074F69E >> 9,
		0x8AEFC207 << 0x1D,
		0x4149D7AA >>> 0xB,
		-1
	];
}

// Arithmetic tests for integers.
def doOne(a: int) -> Array<int> {
	return [
		a,
		a + 5,	660 + a, 	0 + a, a + 0, a + a,
		a - 99, 333 - a,	0 - a, a - 0, a - a,
		a * 3,	-9 * a,		a * a, a * 0, a * 1,
		a / 65,	666 / a,	a / a, a / 1, 0 / a,
		a % 93,	7777 % a,	a % a, a % 1, a % a,
		a & 0xff, 7 & a,	a & 0, a & -1, a & a,
		a | 0xea, 17 | a,	a | 0, a | -1, a | a,
		a ^ 0x1d, 27 ^ a,	a ^ 0, a ^ -1, a ^ a,
		a << 0, a << 16, a << 31, a << 32,
		a >> 0, a >> 16, a >> 31, a >> 32,
		a >>> 0, a >>> 16, a >>> 31, a >>> 32,
		-1
	];
}

def doTwo(a: int, b: int) -> Array<int> {
	return [
		a, b,
		a + a, a + b,
		a - a, a - b,
		a * a, a * b,
		a / a, a / b,
		a % a, a % b,
		a & a, a & b,
		a | a, a | b,
		a ^ a, a ^ b,
		a >> u5.view(b),
		a << u5.view(b),
		a >>> u5.view(b),
		-1
	];
}

def doCmpOne(a: int) -> Array<bool> {
	return [
		a == -5,
		-4 == a,
		a != -3,
		-2 != a,
		a < -1,
		a <= 0,
		a > 1,
		a >= 2,
		3 < a,
		4 <= a,
		5 > a,
		6 >= a,
		false
	];
}

def doCmp(a: int, b: int) -> Array<bool> {
	return [
		a == b,
		b == a,
		a != b,
		b != a,
		a < b,
		a <= b,
		a > b,
		a >= b,
		b < a,
		b <= a,
		b > a,
		b >= a,
		false
	];
}

def kFolded = doFolded();
def kOne = doOne(0xD04AD3C5);
def kTwo = doTwo(0x000567DE, 0x7200227C);

def kBool = [
	doCmp(0, 0),
	doCmp(-1, 0),
	doCmp(1, 0x80000000),
	doCmp(0x7fffffff, -1),
	doCmp(0x80000000, 0x7fffffff),
	doCmpOne(13),
	doCmpOne(-1)
];

component Arithmetic {
	def run() {
		printInt("kFolded: ", kFolded);
		printInt("rFolded: ", doFolded());
		printInt("kOne:    ", kOne);
		printInt("rOne(0): ", doOne(0xD04AD3C5));
		printInt("rOne(1): ", doOne(0x003636DE));
		printInt("rOne(2): ", doOne(0xFF3C5614));

		printInt("kTwo:    ", kTwo);
		printInt("kTwo(0): ", doTwo(0x000567DE, 0x7200227C));
		printInt("kTwo(1): ", doTwo(0x0EFA350E, 0x71488C3D));
		printInt("kTwo(2): ", doTwo(0xFFFFFFFF, 0x80000000));
		printInt("kTwo(2): ", doTwo(0x7FFFFFFF, 0x80000001));

		for (t in kBool) printBool("kBool:  ", t);
		for (r in [
			doCmp(7, 7),
			doCmp(-1, 0),
			doCmp(1, 0x80000000),
			doCmp(0x7fffffff, -1),
			doCmp(0x80000000, 0x7fffffff)
		]) printBool("rBool: ", r);

		for (a = -6; a < 9; a++) printBool("aBool: ", doCmpOne(a));
	}
}