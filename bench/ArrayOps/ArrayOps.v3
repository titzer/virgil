// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Microbenchmark for array implementations, including bulk operations
component ArrayOps {
	def main(arg: Array<string>) -> int {
		if (arg.length < 2) {
			System.puts("Usage: ArrayOps <count> <file>\n");
			return 1;
		}
		var count = Int.parse(arg[0]);
		var data = System.fileLoad(arg[1]);
		if (data == null) {
			System.puts("File not found: ");
			System.puts(arg[1]);
			System.ln();
			return 1;
		}
		// perform N + 1 array copies
		var d2 = copy(data, null);
		while (count > 0) {
			d2 = copy(data, d2);
			var t = data;
			data = d2;
			d2 = t;
			count--;
		}
		// perform N + 1 comparisons
		var d3 = copy(data, null);
		while (count > 0) {
			var t = equal(data, d3);
			count--;
		}
		// print first 80 byteacters to terminal
		for (i = 0; i < 80 && i < data.length; i++) {
			System.putc(data[i]);
		}
		System.ln();
		return 0;
	}
	// element-by-element array comparison
	def equal<A>(arr1: Array<A>, arr2: Array<A>) -> bool {
		if (arr1 == arr2) return true;
		if (arr1.length != arr2.length) return false;
		for (i < arr1.length) {
			if (arr1[i] != arr2[i]) return false;
		}
		return true;
	}
	// array copy
	def copy<T>(src: Array<T>, dst: Array<T>) -> Array<T>{
		var max = src.length;
		if (dst == null) dst = Array<T>.new(max);
		else if (max > dst.length) max = dst.length;
		for (i < max) dst[i] = src[i];
		return dst;
	}
}
