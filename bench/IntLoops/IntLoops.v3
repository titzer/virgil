// This test contains some of the loops from the GCC vectorizer example page [1].
// [1] - http://gcc.gnu.org/projects/tree-ssa/vectorization.html

def N = 1024;
def M = 32;
def K = 4;

class A {
	def ca = Array<int>.new(N);
}

def makeN<T>(view: int -> T) -> Array<T> {
	var result = Array<T>.new(N);
	for (i < result.length) {
		result[i] = view(Random.seed);
		Random.random2(16, i);
	}
	return result;
}

def makeN2<T>(view: int -> T) -> Array<T> {
	var result = Array<T>.new(N * 2);
	for (i < result.length) {
		result[i] = view(Random.seed);
		Random.random2(16, i);
	}
	return result;
}

def makeMN<T>(view: int -> T) -> Array<Array<T>> {
	var result = Array<Array<T>>.new(M);
	for (i < M) result[i] = makeN(view);
	return result;
}

def usa = makeN<u16>(u16.view);
def sa = makeN<i16>(i16.view);
def sb = makeN<i16>(i16.view);
def sc = makeN<i16>(i16.view);
def ua = makeN<i16>(i16.view);
def ia = makeN<i32>(i32.view);
def ib = makeN<i32>(i32.view);
def ic = makeN<i32>(i32.view);
def ub = makeN<u32>(u32.view);
def uc = makeN<u32>(u32.view);
def dj = makeN<i32>(i32.view);

def a = makeN2<i32>(i32.view);
def b = makeN2<i32>(i32.view);
def c = makeN2<i32>(i32.view);
def d = makeN2<i32>(i32.view);

def G = makeMN<i32>(i32.view);

def anA = A.new();

def loop1() {
	for (i < 256) a[i] = b[i] + c[i];
}

def loop2(n: int, x: int) {
	for (i < n) b[i] = x;
}

def loop3(n: int, x: int) {
	var i = 0;
	while (n-- > 0) {
		a[i] = b[i] & x;
		i++;
	}
}

def loop4(n: int) {
	var i = 0;
	while (n-- > 0) {
		a[i] = b[i] & c[i];
		i++;
	}
}

def loop5(x: int) {
	for (i < N) a[i] = b[i + x];
}

def loop6(x: int) {
	for (i < M) for (j < N) G[i][j] = x;
}

def loop7() -> u32 {
	var diff: u32;
	for (i < N) diff = diff + ub[i] - uc[i];
	return diff;
}

def loop8(sa: Array<i16>, sb: Array<i16>, sc: Array<i16>, ia: Array<i32>, ib: Array<i32>, ic: Array<i32>) {
	for (i < N) {
		ia[i] = ib[i] + ic[i];
		sa[i] = sb[i] + sc[i];
	}
}

def loop9(sa: Array<i16>, sb: Array<i16>, sc: Array<i16>, ia: Array<i32>, ib: Array<i32>, ic: Array<i32>) {
	for (i < N) ia[i] = i32.!(sb[i]);
}

def loop10() {
	for (i < N/2) {
		a[i] = b[2*i+1] * c[2*i+1] - b[2*i] * c[2*i];
		d[i] = b[2*i] * c[2*i+1] + b[2*i+1] * c[2*i];
	}
}

def loop11() {
	for (i < N) a[i] = i;
}

def loop12(A: Array<Array<int>>, B: Array<Array<int>>, out: Array<int>) {
	for (i < M) {
		var diff = 0;
		for (j = 0; j < N; j = j + 8) {
			diff = diff + A[i][j] - B[i][j];
		}
		out[i] = diff;
	}
}

def loop13(ina: Array<Array<int>>, coeff: Array<Array<int>>, out: Array<int>) {
	for (k < K) {
		var sum = 0;
		for (j < M) for (i < N) sum = sum + ina[i+k][j] * coeff[i][j];
		out[k] = sum;
	}
}

def loop14(b: Array<int>, n: int) {
	var a = 0;
	for (i = n-1; i >= 0; i--) a = a + b[i];
	b[0] = a;
}

def loop15(n: int, s: A) {
	for (i < n) s.ca[i] = 5;
}

var iterations = 100;

def bench<T, R>(name: string, f: T -> R, p: T) {
	System.puts("Running: ");
	System.puts(name);
	System.puts(" (");
	System.puti(iterations);
	System.puts(" iterations)...");

	for (i < iterations) f(p);

	System.puts("done\n");
}

def digest<T>(a: Array<T>) {
	var hash = 1;
	for (e in a) hash = hash * 33 + int.view(long.!(e)); 
	System.puts("  ");
	System.puti(hash);
	System.ln();
}

def digest2<T>(x: Array<Array<T>>) {
	var hash = 1;
	for (a in x) for (e in a) hash = hash * 33 + int.view(long.!(e)); 
	System.puts("  ");
	System.puti(hash);
	System.ln();
}

def main(args: Array<string>) {
	iterations = Util.intArg(args, 100);

	bench("loop1", loop1, ());
	digest(a);

	bench("loop2", loop2, (N, 2));
	digest(b);

	bench("loop3", loop3, (N, 2));
	digest(a);

	bench("loop4", loop4, (N));
	digest(a);

	bench("loop5", loop5, 4);
	digest(a);

	bench("loop6", loop6, 8);
	digest2(G);

	bench("loop7", loop7, ());
	System.puts("  ");
	System.puti(int.view(loop7()));
	System.ln();

	bench("loop8", loop8, (sa,sb,sc,ia,ib,ic));
	digest(ia);
	digest(sa);

	bench("loop9", loop9, (sa,sb,sc,ia,ib,ic));
	digest(ia);

	bench("loop10", loop10, ());
	digest(a);
	digest(d);

	bench("loop11", loop11, ());
	digest(a);

	bench("loop12", loop12, (G, G, ia));
	digest(ia);

//	bench("loop13", loop13, (G, G, ib));
	digest(ib);

	bench("loop14", loop14, (a, N));
	digest(a);

	bench("loop15", loop15, (N, anA));
	digest(anA.ca);
}
