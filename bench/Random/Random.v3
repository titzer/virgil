// XOR-shift pseudo random generator from Wikipedia example:
// http://en.wikipedia.org/wiki/Xorshift
component XorShift {
	var x = 0x25a3b2d7u;
	var y = 0x40704769u;
	var z = 0x131f8c74u;
	var w = 0xb25a36c1u;
 
	def random() -> u32 {
		var t = x ^ (x << 11);
		x = y; y = z; z = w;
		return w = w ^ (w >>> 19) ^ t ^ (t >>> 8);
	}
}

// XOR-shift pseudo random generator.
component XorShift2 {
	var seed = 0x25a3b2d740704769ul;
	def random() -> u32 {
		seed = seed ^ (seed << 21);
		seed = seed ^ (seed >>> 35);
		seed = seed ^ (seed << 4);
		return u32.view(seed);
	}
}

// Linear-congruential pseudo random number generator.
component LinearCongru {
	var seed = 121013;

	def random() -> u32 {
		return u32.view(seed = seed * 1664525 + 1013904223);
	}
}

// Linear-congruential pseudo random number generator with folded highbits
// modification from standard Virgil library.
component VirgilLib {
	var seed = 121013;

	def random() -> u32 {
		var s = seed * 1664525 + 1013904223;         // multiplicativea random
		return u32.view(seed = s ^ (s >>> 16) ^ (s >>> 24));   // XOR of higher bits
	}
}

// Example LFSR from Bruce Schneider.
// https://www.schneier.com/paper-pseudorandom-sequence.html
component Schneier1 {
	var register = 0x8815262bu;

	def random() -> u32 {
		var x = 0u;
		for (i < 32) x = (x << 1) | bit();
		return x;
	}
	def bit() -> u1 {
		register = ((((register >>> 31)  // Shift the 32nd bit to the first bit
			 ^ (register >>> 6)      // XOR it with the seventh bit
			 ^ (register >>> 4)      // XOR it with the fifth bit
			 ^ (register >>> 2)      // XOR it with the third bit
			 ^ (register >>> 1)      // XOR it with the second bit
			 ^ register)             // and XOR it with the first bit.
			 & 0x0000001)            // Strip all the other bits off and
			 << 31)                 // move it back to the 32nd bit.
			 | (register >>> 1);     // Or with the register shifted right.
		return u1.view(register);           // Return the first bit.
	}
}

// Example 3-LFSR from Bruce Schneider.
// https://www.schneier.com/paper-pseudorandom-sequence.html
component Schneier2 {
	var regA = 0x9baccbd6u;
	var regB = 0x1086f5ecu;
	var regC = 0x7af794dbu;

	def random() -> u32 {
		var x = 0u;
		for (i < 32) x = (x << 1) | bit();
		return x;
	}
	def bit() -> u1 {
		regA = ((((regA >>> 31) ^ (regA >>> 6) ^ (regA >>> 4) ^ (regA >>> 2) ^ (regA << 1) ^ regA)
		& 0x00000001) << 31) | (regA >>> 1);
		regB = ((((regB >>> 30) ^ (regB >>> 2)) & 0x00000001) << 30) | (regB >>> 1);
		regC = ((((regC >>> 28) ^ (regC >>> 1)) & 0x00000001) << 28) | (regC >>> 1);
		// regB is a 31-bit LFSR.  regC is a 29-bit LFSR.
		// Both feedback sequences are chosen to be maximum length.
		return u1.view((regA & regB) | ((1u ^ regA) & regC));
		// Above is equivalant to:  if A then return B else return C.*/
	}
}

// Example 2-LFSR from:
// http://www.maximintegrated.com/en/app-notes/index.mvp/id/4400
component Lfsr16 {
	var lfsr32 = 0xABCDEu;
	var lfsr31 = 0x23456789u;
	def random() -> u32 {
		return (u32.view(word()) << 16) | word();
	}
	def word() -> u16 {
		{ // LFSR 32 round 1.
			var f = u1.view(lfsr32);
			lfsr32 = lfsr32 >>> 1;
			if (f != 0) lfsr32 = lfsr32 ^ 0xB4BCD35C;
		}

		{ // LFSR 32 round 2.
			var f = u1.view(lfsr32);
			lfsr32 = lfsr32 >>> 1;
			if (f != 0) lfsr32 = lfsr32 ^ 0xB4BCD35C;
		}

		{ // LFSR 31
			var f = u1.view(lfsr31);
			lfsr31 = lfsr31 >>> 1;
			if (f != 0) lfsr31 = lfsr31 ^ 0x7A5BC2E3;
		}
		return u16.view(lfsr32 ^ lfsr31);
	}
}
def buf = Array<byte>.new(8);
def hexMap = "0123456789ABCDEF";
def putx(val: int) {
	for (i = 7; i >= 0; i--) {
		buf[i] = hexMap[val & 0xf];
		val = val >>> 4;
	}
	System.fileWriteK(1, buf, 0, 8);
}
def main(args: Array<string>) {
	var iterations = Util.intArg(args, 1000);
	def entries = [
		("Lfsr16", Lfsr16.random),
		("Schneier2", Schneier2.random),
		("Schneier1", Schneier1.random),
		("VirgilLib", VirgilLib.random),
		("LinearCongru", LinearCongru.random),
		("XorShift", XorShift.random),
		("XorShift2", XorShift2.random)
	];
	for (e in entries) {
		System.puts(e.0);
		System.ln();
		for (i < 16) {
			for (j < iterations) e.1();
			putx(int.view(e.1()));
			if ((i & 0x7) == 0x7) System.ln();
			else System.putc(' ');
		}
		System.ln();
	}
}
