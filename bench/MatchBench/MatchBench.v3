// Class-kind dispatch
class A(kind: int) { }
class A01 extends A(1) { }
class A02 extends A(2) { }
class A03 extends A(3) { }
class A04 extends A(4) { }
class A05 extends A(5) { }
class A06 extends A(6) { }
class A07 extends A(7) { }
class A08 extends A(8) { }
class A09 extends A(9) { }
class A10 extends A(10) { }
class A11 extends A(11) { }
class A12 extends A(12) { }
class A13 extends A(13) { }
class A14 extends A(14) { }
class A15 extends A(15) { }
class A16 extends A(16) { }
class A17 extends A(17) { }
class A18 extends A(18) { }
class A19 extends A(19) { }
class A20 extends A(20) { }

// Class-type dispatch
class B { }
class B01 extends B { }
class B02 extends B { }
class B03 extends B { }
class B04 extends B { }
class B05 extends B { }
class B06 extends B { }
class B07 extends B { }
class B08 extends B { }
class B09 extends B { }
class B10 extends B { }
class B11 extends B { }
class B12 extends B { }
class B13 extends B { }
class B14 extends B { }
class B15 extends B { }
class B16 extends B { }
class B17 extends B { }
class B18 extends B { }
class B19 extends B { }
class B20 extends B { }

// ADT enum dispatch
type C {
	case C01;
	case C02;
	case C03;
	case C04;
	case C05;
	case C06;
	case C07;
	case C08;
	case C09;
	case C10;
	case C11;
	case C12;
	case C13;
	case C14;
	case C15;
	case C16;
	case C17;
	case C18;
	case C19;
	case C20;
}

// ADT with field dispatch
type D {
	case D01(f: int);
	case D02(f: int);
	case D03(f: int);
	case D04(f: int);
	case D05(f: int);
	case D06(f: int);
	case D07(f: int);
	case D08(f: int);
	case D09(f: int);
	case D10(f: int);
	case D11(f: int);
	case D12(f: int);
	case D13(f: int);
	case D14(f: int);
	case D15(f: int);
	case D16(f: int);
	case D17(f: int);
	case D18(f: int);
	case D19(f: int);
	case D20(f: int);
}

// enum dispatch
enum E {
	E01, E02, E03, E04, E05, E06, E07, E08, E09, E10, 
	E11, E12, E13, E14, E15, E16, E17, E18, E19, E20
}

def matchA(a: A) -> int {
	match (a.kind) {
		1 => return 11;
		2 => return 12;
		3 => return 13;
		4 => return 14;
		5 => return 15;
		6 => return 16;
		7 => return 17;
		8 => return 18;
		9 => return 19;
		10 => return 20;
		11 => return 21;
		12 => return 22;
		13 => return 23;
		14 => return 24;
		15 => return 25;
		16 => return 26;
		17 => return 27;
		18 => return 28;
		19 => return 29;
		20 => return 30;
	}
	return -99;
}

def matchB(b: B) -> int {
	match (b) {
		x: B01 => return 11;
		x: B02 => return 12;
		x: B03 => return 13;
		x: B04 => return 14;
		x: B05 => return 15;
		x: B06 => return 16;
		x: B07 => return 17;
		x: B08 => return 18;
		x: B09 => return 19;
		x: B10 => return 20;
		x: B11 => return 21;
		x: B12 => return 22;
		x: B13 => return 23;
		x: B14 => return 24;
		x: B15 => return 25;
		x: B16 => return 26;
		x: B17 => return 27;
		x: B18 => return 28;
		x: B19 => return 29;
		x: B20 => return 30;
	}
	return -99;
}

def matchC(c: C) -> int {
	match (c) {
		C01 => return 11;
		C02 => return 12;
		C03 => return 13;
		C04 => return 14;
		C05 => return 15;
		C06 => return 16;
		C07 => return 17;
		C08 => return 18;
		C09 => return 19;
		C10 => return 20;
		C11 => return 21;
		C12 => return 22;
		C13 => return 23;
		C14 => return 24;
		C15 => return 25;
		C16 => return 26;
		C17 => return 27;
		C18 => return 28;
		C19 => return 29;
		C20 => return 30;
	}
}

def matchD(d: D) -> int {
	match (d) {
		D01(f) => return 11;
		D02(f) => return 12;
		D03(f) => return 13;
		D04(f) => return 14;
		D05(f) => return 15;
		D06(f) => return 16;
		D07(f) => return 17;
		D08(f) => return 18;
		D09(f) => return 19;
		D10(f) => return 20;
		D11(f) => return 21;
		D12(f) => return 22;
		D13(f) => return 23;
		D14(f) => return 24;
		D15(f) => return 25;
		D16(f) => return 26;
		D17(f) => return 27;
		D18(f) => return 28;
		D19(f) => return 29;
		D20(f) => return 30;
	}
}

def matchE(e: E) -> int {
	match (e) {
		E01 => return 11;
		E02 => return 12;
		E03 => return 13;
		E04 => return 14;
		E05 => return 15;
		E06 => return 16;
		E07 => return 17;
		E08 => return 18;
		E09 => return 19;
		E10 => return 20;
		E11 => return 21;
		E12 => return 22;
		E13 => return 23;
		E14 => return 24;
		E15 => return 25;
		E16 => return 26;
		E17 => return 27;
		E18 => return 28;
		E19 => return 29;
		E20 => return 30;
	}
}

var ITERATIONS = 100000;

def bench<T>(name: string, m: T -> int, av: Array<T>) {
	System.puts(name);
	System.puts(": ");
	var before = System.ticksUs();
	for (i < ITERATIONS) {
		for (v in av) m(v);
	}
	var after = System.ticksUs();
	System.puti(after - before);
	System.puts(" us");
	System.ln();
}

def front<T>(n: int, a: Array<T>) -> Array<T> {
	var r = Array<T>.new(a.length);
	for (i < r.length) {
		r[i] = a[i % n];
	}
	return r;
}

def back<T>(n: int, a: Array<T>) -> Array<T> {
	var r = Array<T>.new(a.length);
	for (i < r.length) {
		r[i] = a[(i % n) + a.length - n];
	}
	return r;
}

def main(args: Array<string>) {
	ITERATIONS = if (args.length > 0, Int.parse(args[0]), ITERATIONS);
	
	var aa = [
		A01.new(), A02.new(), A03.new(), A04.new(), A05.new(), A06.new(), A07.new(), A08.new(), A09.new(), A10.new(),
		A11.new(), A12.new(), A13.new(), A14.new(), A15.new(), A16.new(), A17.new(), A18.new(), A19.new(), A20.new()
	];
	var ba = [
		B01.new(), B02.new(), B03.new(), B04.new(), B05.new(), B06.new(), B07.new(), B08.new(), B09.new(), B10.new(),
		B11.new(), B12.new(), B13.new(), B14.new(), B15.new(), B16.new(), B17.new(), B18.new(), B19.new(), B20.new()
	];
	var ca = [
		C.C01, C.C02, C.C03, C.C04, C.C05, C.C06, C.C07, C.C08, C.C09, C.C10,
		C.C11, C.C12, C.C13, C.C14, C.C15, C.C16, C.C17, C.C18, C.C19, C.C20
	];
	var da = [
		D.D01(1), D.D02(2), D.D03(3), D.D04(4), D.D05(5), D.D06(6), D.D07(7), D.D08(8), D.D09(9), D.D10(10),
		D.D11(1), D.D12(2), D.D13(3), D.D14(4), D.D15(5), D.D16(6), D.D17(7), D.D18(8), D.D19(9), D.D20(10)
	];
	var ea = [
		E.E01, E.E02, E.E03, E.E04, E.E05, E.E06, E.E07, E.E08, E.E09, E.E10,
		E.E11, E.E12, E.E13, E.E14, E.E15, E.E16, E.E17, E.E18, E.E19, E.E20
	];
	for (i < 5) {
		System.puts("----\n");
		bench<A>("A", matchA, back(5, aa));
		bench<B>("B", matchB, back(5, ba));
		bench<C>("C", matchC, back(5, ca));
		bench<D>("D", matchD, back(5, da));
		bench<E>("E", matchE, back(5, ea));
	}
}
