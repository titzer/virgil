// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// an error, such as a user error, a parsing or typechecking error, etc
class Error {
	def range: FileRange;
	def sourceLine: string;
	def var error: string;
	def var description: string;

	new(range, sourceLine, error, description) { }

	// convert this error to a string
	def toString() -> string {
		var buf = StringBuilder.new();
		if (range != null) {
			if (range.beginLine == 0) buf.put1("[%s]", range.fileName);
			else buf.put3("[%s @ %d:%d] ", range.fileName, range.beginLine, range.beginColumn);
		}
		if (error != null) {
			buf.puts(error);
			if (description != null) buf.puts(": ").puts(description);
		} else {
			buf.puts(Strings.nonnull(description));
		}
		return buf.toString();
	}
	// report this error to the console, including color highlighting
	def report() {
		if (range != null) {
			Terminal.putc('[');
			Terminal.blue(range.fileName, 0);
			if (range.beginLine > 0) {
				Terminal.put(" @ ");
				Terminal.put(Terminal.CTRL_CYAN);
				Terminal.put2("%d:%d", range.beginLine, range.beginColumn);
				Terminal.put(Terminal.CTRL_DEFAULT);
			}
			Terminal.put("] ");
		}
		if (error == null) Terminal.red("Error", 0);
		else Terminal.red(error, 0);
		Terminal.put(": ");
		Terminal.put(Strings.nonnull(description));
		Terminal.ln();
		if (sourceLine != null && range != null) {
			Terminal.put(sourceLine);
			Terminal.ln();
			var i = 1;
			while (i++ < range.beginColumn) Terminal.sp();
			Terminal.putc('^');
			if (range.endLine == range.beginLine) {
				while (i++ < range.endColumn) Terminal.putc('^');
			}
			Terminal.ln();
		}
	}
}

class ErrorGen(maxErrors: int) {
	var errors: List<Error>;
	var numErrors: int;
	var notTooMany: bool = true;
	var noErrors: bool = true;
	var errorType: Type;
	var unresolvedTypeCache = Strings.newMap<TypeCon>();
	var typeCache: TypeCache;

	def report() {
		Lists.apply(Lists.reverse(errors), Error.report);
		errors = null;
	}
	def fatalReport(context: string) {
		if (noErrors) return;
		report();
		System.error(context, "expected no errors");
	}
	def copy(that: ErrorGen) {
		this.errors = that.errors;
		this.noErrors = that.noErrors;
		this.numErrors = that.numErrors;
		this.notTooMany = that.notTooMany;
	}
	def firstError() -> string {
		if (errors != null) return Lists.reverse(errors).head.toString();
		return "";
	}
	def getErrorTypeCon(name: string) -> TypeCon {
		var typeCon = unresolvedTypeCache[name];
		if (typeCon == null) {
			if (typeCache == null) typeCache = TypeCache.new();
			typeCon = TypeCon.new(name, Kind.VOID, -1, typeCache);
			unresolvedTypeCache[name] = typeCon;
		}
		return typeCon;
	}
	def getErrorTypeNamed(name: string) -> Type {
		return getErrorTypeCon(name).create0();
	}
	def getErrorType() -> Type {
		if (errorType != null) return errorType;
		return errorType = getErrorTypeCon("?").create0();
	}
	def unimplemented() {
		fail("not implemented");
	}
	def fail(msg: string) {
		if (CLOptions.FATAL.get()) return V3.fail(msg);
		addError(null, null, V3Exception.InternalError, msg);
	}
	def OutputError(fileName: string) {
		addError(null, null, "Cannot create output file", fileName);
	}
	def ExceptionInInitialization(meth: VstMethod, except: Exception) {
		var msg = TerminalBuffer.new().putv(except, null).toString();
		addError(meth.token.range(), null, "ExceptionInInitialization", msg);
	}
	def FileNotFound(fname: string) {
		addError(null, null, "File not found", fname);
	}
	def MainNotFound() {
		addError(null, null, null, "Main not found");
	}
	def addError(range: FileRange, sourceLine: string, error: string, msg: string) {
		errors = List.new(Error.new(range, sourceLine, error, msg), errors);
		incErrors();
	}
	def addErrorObj(error: Error) {
		errors = List.new(error, errors);
		incErrors();
	}
	def unexpectedType<T>(t: Type, v: T) -> T {
		var msg = Strings.format1("unexpected type %q", t.render);
		if (CLOptions.FATAL.get()) return V3.fail(msg);
		addError(null, null, null, msg);
		return v;
	}
	def incErrors() {
		numErrors++;
		noErrors = false;
		if (numErrors >= maxErrors) notTooMany = false;
	}
}

// An error associated with source code. Instances of this class should not be created directly;
// instead it is created and added to the {ErrorGen} by helper methods. The methods on this
// class help with classifying and formatting error messages, e.g. by doing
// {verifier.errAtPoint(p).InheritanceError("not ok")}.
class SourceCodeError extends Error {
	new(range: FileRange, sourceLine: string) super(range, sourceLine, null, null) { }

	def EnumSetTooLarge(t: Type, tref: TypeRef, size: int) {
		set("EnumSetTooLarge", Strings.format2("enum \"%q\" has too many cases to build a set (%d)", t.render, size));
	}
	def UnresolvedType(tref: TypeRef) {
		set("UnresolvedType", Strings.format1("type \"%q\" cannot be found", tref.render));
	}
	def MainMethodError(msg: string) {
		set("MainMethodError", msg);
	}
	def TypeRedefined(tref: Token) {
		set("TypeRedefined", Strings.format1("type \"%s\" redefined", tref.image));
	}
	def ParamDeclError(msg: string) {
		set("ParamDeclError", msg);
	}
	def VarDeclError(msg: string) {
		set("VarDeclError", msg);
	}
	def FieldDeclError(msg: string) {
		set("FieldDeclError", msg);
	}
	def ExportDeclError(msg: string) {
		set("ExportDeclError", msg);
	}
	def ImportError(msg: string) {
		set("ImportError", msg);
	}
	def IndexDeclError(msg: string) {
		set("IndexDeclError", msg);
	}
	def CaseDeclError(msg: string) {
		set("CaseDeclError", msg);
	}
	def UnimplementedError(msg: string) {
		set("UnimplementedError", msg);
	}
	def MethodDeclError(msg: string) {
		set("MethodDeclError", msg);
	}
	def TypeParamArityError(kind: string, name: string, expect: int, got: int) {
		var decl = Strings.format2("%s \"%s\"", kind, name), msg: string;
		if (expect == 0) msg = Strings.format1("%s cannot have type arguments", decl);
		else msg = Strings.format3("%s expects %d type arguments and found %d", decl, expect, got);
		set("TypeError", msg);
	}
	def InheritanceError(msg: string) {
		set("InheritanceError", msg);
	}
	def InheritanceError2(msg: string, t1: Type, t2: Type) {
		set("InheritanceError", Strings.format2(msg, TYPE(t1), TYPE(t2)));
	}
	def MemberRedefined(decl: Token) {
		set("MemberRedefined", Strings.format1("member \"%s\" redefined", decl.image));
	}
	def ConstructorError(msg: string) {
		set("ConstructorError", msg);
	}
	def TypeParamRedefined(tparam: TypeParamType) {
		set("TypeParamRedefined", Strings.format1("type parameter \"%s\" redefined", tparam.token.image));
	}
	def TypeExprError(t1: Type) {
		set("TypeError", Strings.format1("type \"%q\" cannot be used as an expression", t1.render));
	}
	def PtrAtFieldError() {
		set("TypeError", "operator \"Pointer.atField\" must be applied to a class or component field reference");
	}
	def PtrAtUnboxedFieldError(msg: string) {
		set("TypeError", msg);
	}
	def MemberNotInitialized(msg: string) {
		set("MemberNotInitialized", msg);
	}
	def InvalidThisUse() {
		set("InvalidThisUse", "\"this\" cannot be used in a field initializer");
	}
	def TypeCastError(fromType: Type, toType: Type, msg: string) {
		set("TypeError", Strings.format3("type cast %q.!(%q) %s", toType.render, fromType.render, msg));
	}
	def TypeQueryError(fromType: Type, toType: Type, msg: string) {
		set("TypeError", Strings.format3("type query %q.?(%q) %s", toType.render, fromType.render, msg));
	}
	def TypeError(expected: Type, got: Type, what: string) {
		set("TypeError", Strings.format3("expected %s in %s, got %s", TYPE(expected), what, TYPE(got)));
	}
	def TypeInferError(reason: string) {
		set("TypeInferError", reason);
	}
	def UnresolvedIdentifier(token: Token) {
		set("UnresolvedIdentifier", Strings.format1("identifier \"%s\" cannot be found", token.image));
	}
	def UnresolvedOp(token: Token, t1: Type, t2: Type) {
		var buf = StringBuilder.new().put1("operator \"%s\" cannot be found", token.image);
		if (t1 != null) buf.put1(" for type \"%q\"", t1.render);
		if (t2 != null && t2 != t1) buf.put1(" or type \"%q\"", t2.render);
		set("UnresolvedOp", buf.toString());
	}
	def UnresolvedMember(token: Token, inType: bool, tref: Type) {
		var msg = "expression of type %s has no such member \"%s\"";
		if (inType) msg = "type %s has no such member \"%s\"";
		set("UnresolvedMember", Strings.format2(msg, TYPE(tref), token.image));
	}
	def StatementError() {
		set("StatementError", "not a statement");
	}
	def UnreachableCode() {
		set("UnreachableCode", "unreachable code");
	}
	def MissingReturn() {
		set("MissingReturn", "method does not end in a return statement");
	}
	def AssignError() {
		set("AssignError", "expression is not assignable");
	}
	def MatchError( msg: string) {
		set("MatchError", msg);
	}
	def LoopError(msg: string) {
		set("LoopError", msg);
	}
	def ParamExprError(msg: string) {
		set("ParamExprError", msg);
	}
	def ArityMismatch(op: string, expect: int, found: int) {
		if (expect == 1) set("TypeError", Strings.format2("%s requires 1 argument and found %d", op, found));
		else set("TypeError", Strings.format3("%s requires %d arguments and found %d", op, expect, found));
	}
	def UnresolvedPackingBit(ch: byte) {
		set("UnresolvedPackingBit", Strings.format1("packing bit \'%c\' not found", ch));
	}
	def ExtraPackingBit(name: string, max: byte) {
		set("ExtraPackingBit", Strings.format3("packing parameter \"%s\" is only %d bit%s wide", name, max, if(max > 1, "s", "")));
	}
	def BitPatternTooLong(max: byte, got: int) {
		set("BitPatternTooLong", Strings.format2("expected bit pattern <= width %d, got %d", max, got));
	}
	def PackingExprTooLong(max: byte, got: int) {
		set("PackingExprTooLong", Strings.format2("expected packing expression <= width %d, got %d", max, got));
	}
	def PackingParamReused(name: string) {
		set("PackingFieldReused", Strings.format1("packing parameter \"%s\" already used", name));
	}
	def PackingBitsMissing(name: string, width: byte, got: int) {
		var buf = StringBuilder.new().put2("parameter \"%s\" is %d bit", name, width);
		if (width > 1) buf.putc('s');
		buf.puts(" wide, ");
		if (got == 0) buf.puts("but no bits found in pattern");
		else buf.put1("only %d found in pattern", got);
		ParamDeclError(buf.toString());
	}
	def PackingRedefined(p: Token) {
		set("PackingRedefined", Strings.format1("packing \"%s\" redefined", p.image));
	}
	// Simply set the kind of error and its description.
	def set(error: string, description: string) {
		this.error = error;
		this.description = description;
	}
}
def TYPE(tref: Type) -> string {
	if (tref == null) return "<null>";
	return tref.render(StringBuilder.new()).toString();
}
