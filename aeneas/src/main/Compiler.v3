// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Parser and collection of optimization settings, using a customized flag format
// -opt=none|all|unsafe|Opt|+Opt|-Opt
class OptimizationFlags {
	var map: PartialMap<string, bool>;
	var none: bool;
	var all: bool;
	var unsafe: bool;
	new(input: string, ERROR: ErrorGen) {
		if (input != null && input.length > 0) {
			map = Strings.newMap();
			var opt = Arrays.concat("-opt=", input);
			var f = ParsedFile.new("flags", opt);
			var p = ParserState.new(f, ERROR, skip, null);
			parseFlags(p);
		}
	}
	def parseFlags(p: ParserState) {
		p.advance(5); // advance past "-opt="
		while (true) {
			var lastPos = p.curPos;
			parseFlag(p);
			if (p.curPos == lastPos) return; // didn't parse anything
			if (p.curByte == '\x00') return; // end of input
			if (p.opt1(',') < 0) return p.error(", expected");
		}
	}
	def parseFlag(p: ParserState) {
		var val = p.opt1('+') >= 0 || p.opt1('-') < 0;
		if (!Char.isIdentStart(p.curByte)) return p.error("optimization flag name expected");
		var d = p.input, q = p.curPos + 1;
		while (q < d.length) {
			if (!Char.isIdentMiddle(d[q])) break;
			q++;
		}
		return setFlag(p.token(q - p.curPos), val);
	}
	def setFlag(t: Token, val: bool) {
		if (Strings.equal("none", t.image)) none = true;
		else if (Strings.equal("all", t.image)) all = true;
		else if (Strings.equal("unsafe", t.image)) all = unsafe = true;
		else map[t.image] = val;
	}
	def get(name: string, val: bool) -> bool {
		if (all) return true;
		if (none) return false; // all optimizations turned off
		if (map != null && map.has(name)) val = map[name]; // check for flag
		return val; // return default
	}
	def getUnsafe(name: string) -> bool {
		return unsafe || (map != null && map.has(name));
	}
	def skip(p: ParserState) {
		// don't skip any characters
	}
}
// A stateless representation of a compiler that is configured once at startup
// and then can be reused to compile various programs.
class Compiler(target: Target) {
	def optError = ErrorGen.new(1);
	def flags = OptimizationFlags.new(CLOptions.OPT.get(), optError);
	def printSsaMatcher = CLOptions.PRINT_SSA.get();
	def printMachMatcher = CLOptions.PRINT_MACH.get();
	def statsMatcher = CLOptions.PRINT_SSA_STATS.get();
	def useGlobalRegAllocMatcher = CLOptions.USE_GLOBALREGALLOC.get();
	var icMon: (IrSpec, IcMethod) -> void;	 // monitor for IC generation
	// major phases of compilation
	var Trace			= CLOptions.TRACE.get();
	var TraceCalls			= CLOptions.TRACE_CALLS.get();
	var TraceParent			= CLOptions.TRACE_PARENT.get();
	var VstVerify			= true;
	var VstInit			= true;
	var GenVariantEqual		= false;
	var Reachability		= CLOptions.RA.get();
	// reachability/normalization settings
	var MaxReturnValues		= CLOptions.MAXR.get();
	var MaxParams			= CLOptions.MAXP.get();
	var MixedArrays			= CLOptions.MA.get();
	var MaxFlatDataValues		= CLOptions.MAXD.get(); // TODO: more explanatory option
	var MaxFlatVariantValues	= CLOptions.MAXV.get(); // TODO: more explanatory option
	var NonRefClosureReceiver	= true;
	var AnyRefOverflow		= true;
	// optimization settings
	var VstBranchOpt		= flags.get("VstBranchOpt", true);
	var VstControlOpt		= flags.get("VstControlOpt", true);
	var VstLoopOpt			= flags.get("VstLoopOpt", true);
	var PartialBoundsChecks 	= flags.get("PartialBoundsChecks", true);
	var PartialSpecialization	= flags.get("PartialSpecialization", false);
	var ChaDevirtualize		= flags.get("ChaDevirtualize", true);
	var RaDevirtualize		= flags.get("RaDevirtualize", true);
	var InlineEarly			= flags.get("InlineEarly", false);
	var LoadOptimize		= flags.get("LoadOptimize", true);
	var PostpassOptimize		= flags.get("PostpassOptimize", true);
	var EmitSwitch			= flags.get("EmitSwitch", true);
	var LocalRegAlloc		= flags.get("LocalRegAlloc", true);
	var NormOptimize		= flags.get("NormOptimize", false);
	var MachOptimize		= flags.get("MachOptimize", false);
	// XXX: flags for folding, reduction, typechecks, dead code, phi simplification
	// XXX: implement CSE and code motion
	// unsafe optimization settings; for performance testing only
	var DisableBoundsChecks		= flags.getUnsafe("DisableBoundsChecks");
	var DisableNullChecks		= flags.getUnsafe("DisableNullChecks");
	var DisableTypeChecks		= flags.getUnsafe("DisableTypeChecks");
	var DisableLengthChecks		= flags.getUnsafe("DisableLengthChecks");

	new() {
		// target configures the compiler only once
		if (target != null) target.configureCompiler(this);
	}

	def getOutputFileName(fileName: string, ext: string) -> string {
		return Paths.assemble(CLOptions.OUTPUT.get(), fileName, ext);
	}
	def makeExecutable(fileName: string) {
		if (CLOptions.SET_EXEC.get()) System.chmod(fileName, 493); // 0755 = rwxr-xr-x
	}
	def setSignatureLimits(maxp: int, maxr: int) {
		if (maxp < MaxParams) MaxParams = maxp;
		if (maxr < MaxReturnValues) MaxReturnValues = maxr;
	}
	def emitBashScriptHeader(fd: int) {
		for (l in BASH_HEADER) System.fileWriteK(fd, l, 0, l.length);
	}
	// Computes whether a null check is required, either because they are disabled by a compiler flag,
	// the {app} instruction has been marked as {O_NO_NULL_CHECK}, or the {obj} is not null.
	def nullity(app: SsaInstr, obj: SsaInstr) -> Fact.set {
		if (DisableNullChecks) return Fact.O_NO_NULL_CHECK;
		if (obj != null && obj.facts.V_NON_ZERO) return Fact.O_NO_NULL_CHECK;
		return if(app != null, app.facts & Fact.O_NO_NULL_CHECK);
	}
}
def BASH_HEADER = [
	"#!/bin/bash\n",
	"S=${BASH_SOURCE[0]}\n",
	"while [ -h \"$S\" ]; do\n",
	"  DIR=$(cd -P $(dirname \"$S\") >/dev/null 2>&1 && pwd)\n",
	"  S=$(readlink \"$S\")\n",
	"  [[ $S != /* ]] && S=$DIR/$S\n",
	"done\n",
	"DIR=$(cd -P $(dirname \"$S\") >/dev/null 2>&1 && pwd)\n"
];
// phases of compilation, including parsing, typechecking, initialization, etc
class Compilation(compiler: Compiler, prog: Program) {
	new() {
		if (compiler.target != null) compiler.target.configureProgram(prog);
	}
	// perform all phases of compilation
	def compile() -> bool {
		if (compiler.optError.numErrors > 0) {
			prog.ERROR.copy(compiler.optError);
			return false;
		}
		return parse()
			&& (!compiler.VstVerify || verify())
			&& (!compiler.VstInit || init())
			&& (!compiler.Reachability || reachability())
			&& emit()
			&& prog.ERROR.noErrors;
	}
	def parse() -> bool {
		prog.vst = VstModule.new();
		var files = prog.files;
		var vec = Vector<VstFile>.new().grow(files.length);
		for (i = 0; i < files.length && prog.ERROR.notTooMany; i++) {
			var fileName = files[i], input = prog.inputs[i];
			if (input == null) {
				input = System.fileLoad(fileName);
				if (input == null) {
					prog.ERROR.FileNotFound(fileName);
					continue;
				}
				prog.inputs[i] = input;
			}
			vec.put(Parser.parseFile(fileName, input, prog.ERROR, prog.typeCache));
		}
		prog.vst.files = vec.extract();
		return prog.ERROR.noErrors;
	}
	def verify() -> bool {
		if (prog.ERROR.notTooMany) {
			Verifier.new(compiler, prog).verify();
			if (CLOptions.PRINT_VST.get()) VstPrinter.new().printProgram(prog);
		}
		return prog.ERROR.noErrors;
	}
	def init() -> bool {
		prog.initState = Array.new(prog.ir.init.length);
		prog.compRecords = Array.new(prog.vst.numComponents);
		prog.strRecords = Array.new(prog.vst.numStrings);
		for (i < prog.vst.components.length) {
			var decl = prog.vst.components[i];
			var record = prog.newRecord(decl.getDeclaredType(), decl.numFields);
			prog.compRecords[decl.recordIndex] = record;
		}
		var invoker = getInterpreter();
		for (i < prog.initState.length) {
			if (prog.initState[i] == InitState.Uninit) {
				prog.initState[i] = InitState.Running;
				if (!runInitMethod(prog.ir.init[i], invoker)) break;
				prog.initState[i] = InitState.Done;
			}
		}
		return prog.ERROR.noErrors;
	}
	def runInitMethod(meth: IrMethod, invoker: (Closure, Array<Val>) -> Result) -> bool {
		var ctype = meth.receiver;
		var newRef = IrSpec.new(ctype, [ctype], meth);
		var result = invoker(Closure.new(Values.BOTTOM, newRef), null);
		if (Exception.?(result)) {
			prog.ERROR.ExceptionInInitialization(meth.source, Exception.!(result));
			return false;
		}
		return true;
	}
	def reachability() -> bool {
		var main = prog.getMain();
		if (main == null) return false;
		if (compiler.target != null) compiler.target.addRoots(compiler, prog);
		var ra = ReachabilityAnalyzer.new(this);
		ra.analyze();
		if (CLOptions.PRINT_RA.get()) ra.dump();
		ra.transform();
		return prog.ERROR.noErrors;
	}
	def emit() -> bool {
		if (compiler.target != null) {
			if (prog.getMain() == null) return false;
			compiler.target.emit(compiler, prog);
		}
		return true;
	}
	def runMain() -> Result {
		var main = prog.getMain();
		if (main == null) return null;
		var invoker = getInterpreter();
		var argVals: Array<Val>;
		var atypes = prog.getMain().getParamTypes();
		if (atypes.length == 1 && atypes[0] == V3.stringArrayType) {
			// box the argument as an array of strings
			var args = prog.args;
			var array = prog.newRecord(V3.stringArrayType, args.length);
			for (i < args.length) {
				array.values[i] = Byte.boxString(args[i], prog);
			}
			argVals = [array];
		} else {
			// TODO: parse arguments as literal values
			argVals = Array.new(atypes.length);
		}
		return invoker(Closure.new(Values.BOTTOM, main), argVals);
	}
	def getInterpreter() -> (Closure, Array<Val>) -> Result {
		if (CLOptions.SSA_INT.val) {
			var interp = SsaInterpreter.new(prog, genSsa);
			interp.setTrace(compiler.Trace);
			return interp.invoke;
		} else {
			var interp = IcInterpreter.new(prog, genIc);
			if (compiler.Trace) IcTracer.new(interp);
			if (compiler.TraceCalls != VstMatcher.None) {
				var tracer = IcCallTracer.new(compiler.TraceCalls, compiler.TraceParent);
				compiler.icMon = tracer.onGen;
			}
			return interp.invoke;
		}
	}
	def genIc(memberRef: IrSpec) -> IcMethod {
		var icm: IcMethod;
		genSsa(memberRef, 0);
		// XXX: cache the SsaContext for creating IC?
		icm = SsaIcGen.new(SsaContext.new(compiler, prog).enterSpec(memberRef)).generate();
		if (compiler.icMon != null) compiler.icMon(memberRef, icm);
		if (CLOptions.PRINT_IC.val.matches(memberRef.source())) IrPrinter.new(prog).doIc(icm);
		return icm;
	}
	def genSsa(memberRef: IrSpec, depth: int) -> SsaGraph {
		var meth = memberRef.asMethod();
		if (meth.ssa == null) {
			var context = SsaContext.new(compiler, prog).enterSpec(memberRef);
			var gen = VstSsaGen.new(context, prog.opBuilder);
			gen.recordDirectCalls = compiler.InlineEarly || CLOptions.INLINE.val != VstMatcher.None;
			var graph = gen.generate();
			context.verify();
			meth.ssa = graph;
			if (gen.directCallBlocks != null) {
				// Perform inlining.
				// TODO: -inline=foo also enables heuristic-based early inlining
				SsaEarlyInliner.new(context, this, gen).inline(depth);
			}
			if (compiler.VstControlOpt && graph.isMultiBlock()) {
				// Perform control flow optimizations.
				SsaCfOptimizer.new(context).optimize();
				context.printSsa("Control Optimized");
			}
			if (compiler.LoadOptimize) {
				// Perform load elimination.
				if (SsaLoadOptimizer.new(context).optimize()) {
					context.printSsa("Load Optimized");
				}
			}
			if (compiler.PostpassOptimize) {
				// Run the post-pass optimizer.
				var opt = SsaOptimizer.new(context);
				opt.optGraph();
				context.printSsa("Postpass Optimized");
			}
		}
		return meth.ssa;
	}
}
// Configures compilation based on the properties of a target platform, including
// instruction set, operating system, etc.
class Target(name: string) {
	var typedMain: bool;

	def configureCompiler(compiler: Compiler) { }
	def configureProgram(prog: Program) { }
	def emit(compiler: Compiler, prog: Program) { }
	def addRoots(compiler: Compiler, prog: Program) { }
	def computeFieldOffsets(prog: Program, b: Vector<IrField>, start: int) {
		// XXX: is this the best place for computing field offsets?
		for (i = start; i < b.length; i++) {
			b[i].machOffset = i;
		}
	}
	def verifyMain(main: VstMethod, error: (FileRange, string) -> void) {
		if (!typedMain) return;
		var ftype = main.getType();
		var paramType = Function.getParamType(ftype);
		if (paramType != Void.TYPE && paramType != V3.stringArrayType) {
			error(main.token.range(), "Main method parameter type must be void|Array<string>");
		}
		var returnType = main.getReturnType();
		match (returnType.typeCon.kind) {
			V3Kind.INT, V3Kind.BOOL, V3Kind.VOID => {}
		} else {
			error(main.getReturnRange(), "Main method return type must be void|bool|byte|int");
		}
	}
}
