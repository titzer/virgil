// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Command-line options to the compiler.
component CLOptions {
	def options = BasicOptions.new(null);
	def x = options.setUnmatched = setUnmatchedOption;
	def o = options;
	def actionOpt = OptionGroup.new("ACTION", options);
	def sharedOpt = OptionGroup.new("SHARED", options);
	def runOpt = OptionGroup.new("RUN", options);
	def testOpt = OptionGroup.new("TEST", options);
	def compileOpt = OptionGroup.new("COMPILE", options);
	def wasmOpt = OptionGroup.new("WASM TARGET", options);
	def jvmOpt = OptionGroup.new("JVM TARGET", options);
	def debugOpt = OptionGroup.new("DEBUGGING", options);
	def langOpt = OptionGroup.new("LANGUAGE", options);

	// Action options
	def HELP		= actionOpt.newBoolOption("help", false,
		"Print this help text.");
	def RUN			= actionOpt.newBoolOption("run", false,
		"Run the input .v3 files in the built-in interpreter.");
	// Language options
	def READONLY_ARRAYS	= langOpt.newBoolOption("read-only-arrays", false,
		"Enable read-only arrays and ranges for the Virgil language.");
	def LEGACY_INFER	= langOpt.newBoolOption("legacy-infer", true,
		"Enable legacy type inference algorithm for the Virgil language.");
	def OPT			= sharedOpt.newStringOption("opt", null,
		"Set optimization configuration options.");
	def MAXR		= sharedOpt.newIntOption("maxr", 100000,
		"Limit the maximum number of return values in normalization.");
	def MAXP		= sharedOpt.newIntOption("maxp", 100000,
		"Limit the maximum number of parameters in normalization.");
	def MAXD		= sharedOpt.newIntOption("maxd", 0,
		"Set the maximum number of data slots allowed for auto-unboxing data types.");
	def MAXV		= sharedOpt.newIntOption("maxv", 0,
		"Set the maximum number of variant slots allowed for auto-unboxing variant types.");
	def INLINE		= sharedOpt.newMatcherOption("inline",
		"Force inlining of direct calls to the given method(s).");
	// Debugging options
	def PRINT_IC		= debugOpt.newMatcherOption("print-ic",
		"Printer internal interpreter code as it is generated.");
	def PRINT_ID		= debugOpt.newBoolOption("print-id", false,
		"Print additional internal IR ids.");
	def PRINT_INLINING	= debugOpt.newBoolOption("print-inlining", false,
		"Print inlining decisions.");
	def PRINT_VST		= debugOpt.newBoolOption("print-vst", false,
		"Print the Virgil syntax tree.");
	def PRINT_RA		= debugOpt.newBoolOption("print-ra", false,
		"Print the results of reachability analysis.");
	def PRINT_SSA		= debugOpt.newMatcherOption("print-ssa",
		"Print internal SSA code as it is generated.");
	def PRINT_SSA_STATS	= debugOpt.newMatcherOption("print-ssa-stats",
		"Print statistics about SSA code.");
	def PRINT_MACH		= debugOpt.newMatcherOption("print-mach",
		"Print machine code or machine IR as it is generated.");
	def PRINT_PATCH		= debugOpt.newBoolOption("print-patch", false,
		"Print patching of machine-level code.");
	def PRINT_MACH_DATA	= debugOpt.newBoolOption("print-mach-data", false,
		"Print machine-level data generated.");
	def PRINT_STACKMAP	= debugOpt.newBoolOption("print-stackmap", false,
		"Print stackmap information as it is generated.");
	def PRINT_CFG		= debugOpt.newBoolOption("print-cfg", false,
		"Print control flow graphs.");
	def PRINT_BIN		= debugOpt.newBoolOption("print-bin", false,
		"Print binary code as it is generated.");
	def PRINT_SIZE		= debugOpt.newBoolOption("print-size", false,
		"Print the size of binary code.");
	def PRINT_DEAD_CODE	= debugOpt.newBoolOption("print-dead-code", false,
		"Print information about dead code and data in the program.");
	def PRINT_STACKIFY	= debugOpt.newBoolOption("print-stackify", false,
		"Print the steps of the stackification algorithm.");
	def PRINT_REGALLOC	= debugOpt.newBoolOption("print-regalloc", false,
		"Print register allocation.");
	def FATAL		= debugOpt.newBoolOption("fatal", false,
		"Treat program errors as fatal errors and exit with a compiler stacktrace.");
	def START_UID		= debugOpt.newIntOption("start-uid", 0,
		"Set the starting value for internal identifiers.");

	def VERSION		= actionOpt.newBoolOption("version", false,
		"Print the version of the compiler and exit.");
	def TEST		= actionOpt.newBoolOption("test", false,
		"Run the input .v3 files as parse, semantic, or execute tests.");
	def TEST_ST		= testOpt.newBoolOption("test.st", false,
		"Convert input .v3 files from execution tests to stacktrace tests.");
	def TEST_GC		= testOpt.newStringOption("test.gc", "",
		"Interpret input .v3 files as execute tests and list ones that allocate into the given output file.");
	def EXPECT		= testOpt.newPathOption("expect", null,
		"Specify a file that contains a set of expected test failures.");

	def TRACE		= runOpt.newBoolOption("trace", false,
		"Trace execution of interpreter code.");
	def SSA_INT		= runOpt.newBoolOption("ssa-int", false,
		"Use the SsaInterpreter instead of the IC interpreter");
	def TRACE_PARENT	= runOpt.newBoolOption("trace-parent", false,
		"Trace the parent of function callers during intepretation.");
	def TRACE_CALLS		= runOpt.newMatcherOption("trace-calls",
		"Trace function calls during interpretation.");
	def FATAL_CALLS		= runOpt.newMatcherOption("fatal-calls",
		"Treat calls to the given functions as fatal errors.");
	def PROFILE		= runOpt.newMatcherOption("profile",
		"Enable the profiler and emit a report after running the program.");
	def INSTR_PROFILE	= runOpt.newMatcherOption("iprofile",
		"Enable the instruction profiler and emit a report after running the program.");
	def PROFILE_DEPTH	= runOpt.newIntOption ("profile-depth", 0,
		"Set the depth of the calling-context tree reported by the profiler.");
	def COVERAGE		= runOpt.newMatcherOption("coverage",
		"Enable the code coverage analyzer and emit a report after running the program.");
	def INSTR_COVERAGE	= runOpt.newBoolOption("icoverage", false,
		"Enable the instruction coverage analyzer and emit a report after running the program.");
	// User options
	def MULTIPLE		= compileOpt.newBoolOption("multiple", false,
		"Compile each input .v3 file as a separate program, sharing any -rt.files.");
	def TARGET		= actionOpt.newOption("target", null, "=<target>", Aeneas.getTarget,
		"Selects a target platform and compiles the input program(s).");
	def OUTPUT		= compileOpt.newPathOption("output", null,
		"Specify the output directory for compilation results.");
	def PROGRAM_NAME	= compileOpt.newStringOption("program-name", null,
		"Specify an explicit name for the compilation results.");
	def SYMBOLS		= compileOpt.newBoolOption("symbols", false,
		"Generate symbols in the compiled binary.");
	def RA			= sharedOpt.newBoolOption("ra", false,
		"Enable reachability analysis and normalization before running the program.");
	def MA			= sharedOpt.newBoolOption("ma", true,
		"Generate mixed arrays for arrays of tuples, rather than tuples of arrays.");
	def SET_EXEC		= compileOpt.newBoolOption("set-exec", true,
		"Automatically execute permission for compiled binaries.");
	def HEAP_SIZE		= compileOpt.newSizeOption("heap-size", 0,
		"Set the heap size of the compiled program.");
	def STACK_SIZE		= compileOpt.newSizeOption("stack-size", 0,
		"Set the stack size of the compiled program, enabling robust stack overflow checking.");
	def RT_STTABLES		= compileOpt.newBoolOption("rt.sttables", false,
		"Generate runtime metadata for generating stack traces.");
	def RT_GCTABLES		= compileOpt.newBoolOption("rt.gctables", false,
		"Generate runtime metadata for stackwalking for garbage collection.");
	def RT_GC		= compileOpt.newBoolOption("rt.gc", false,
		"Enable runtime support for garbage collection.");
	def RT_TEST_GC		= compileOpt.newBoolOption("rt.test-gc", false,
		"Enable GC testing mode where every allocation triggers a collection.");
	def RT_FILES		= compileOpt.newOption("rt.files", Array<string>.new(0), "=<path*>", parseStringArray,
		"Specify a list of .v3 files that are included with every compiled program (with -multiple).");
	// JVM target options
	def JVM_RT_PATH		= jvmOpt.newStringOption("jvm.rt-path", null,
		"Specify the path to the Java runtime.");
	def JVM_GEN_SCRIPT	= jvmOpt.newBoolOption("jvm.script", false,
		"Enable generation of a script that runs generated JVM code.");
	def JVM_ARGS		= jvmOpt.newStringOption("jvm.args", null,
		"Specify additional arguments to the JVM that should be added to JVM scripts.");
	// Wasm target options
	def SHADOW_STACK_SIZE	= wasmOpt.newSizeOption("shadow-stack-size", 0,
		"Set the shadow stack size of the compiled program, enabling GC root finding.");
	def SHADOW_STACK_PERCENT= wasmOpt.newSizeOption("shadow-stack-percent", 0,
		"Set the shadow stack size as the given percentage of the heap size.");
	def WASM_RUN_COMMAND	= wasmOpt.newStringOption("wasm.runcmd", null,
		"Specify the command to run a Wasm program that should be added to WASM scripts.");
	def WASM_GC		= wasmOpt.newBoolOption("wasm.gc", false,
		"Generate code that targets the Wasm GC proposal.");
	def WASM_MULTI_VALUE	= wasmOpt.newBoolOption("wasm.multi-value", false,
		"Generate code that uses Wasm multivalue.");
	def WASM_EXPORT_MEM	= wasmOpt.newBoolOption("wasm.export-mem", true,
		"Export the Wasm memory from generated modules.");
	def MAIN_EXPORT		= wasmOpt.newStringOption("main-export", "main",
		"Specify the name of the main export from a generated Wasm module.");
	def ENTRY_EXPORT	= wasmOpt.newStringOption("entry-export", "entry",
		"Specify the name of the entry export from a generated Wasm module.");

	def parseMatcher(str: string) -> VstMatcher {
		if (str == null) return VstMatcher.All;
		return VstMatchers.parse(str);
	}
	def setUnmatchedOption(str: string, val: string) {
		if (!Strings.startsWith(str, "P")) return;
		for (i = 1; i < str.length; i++) {
			match (str[i]) {
				's' => CLOptions.PRINT_SSA.val = VstMatcher.All;
				'm' => CLOptions.PRINT_MACH.val = VstMatcher.All;
				'd' => CLOptions.PRINT_MACH_DATA.val = true;
				'v' => CLOptions.PRINT_VST.val = true;
				'r' => CLOptions.PRINT_RA.val = true;
				'b' => CLOptions.PRINT_BIN.val = true;
				'c' => CLOptions.PRINT_CFG.val = true;
				't' => CLOptions.PRINT_STACKIFY.val = true;
				'i' => CLOptions.PRINT_IC.val = VstMatcher.All;
				'n' => CLOptions.PRINT_INLINING.val = true;
			}
		}
	}
	def parseStringArray(str: string) -> Array<string> {
		var v = Vector<string>.new();
		var start = 0, pos = 0;
		while (pos < str.length) {
			var ch = str[pos];
			if (ch == ' ' || ch == '\n') {
				if (pos > start) v.put(Arrays.range(str, start, pos));
				start = pos + 1;
			}
			pos++;
		}
		if (pos > start) v.put(Arrays.range(str, start, pos));
		return v.extract();
	}
	def printHelp(args: Array<string>) {
		Aeneas.printVersion(true, "\n");

		var buf = TerminalBuffer.new();
		if (TEST.val) {
			printUsageAndSharedOptions(buf, "Usage: v3c -test [options] <v3 test files>");
			testOpt.print(buf);
		} else if (RUN.val) {
			printUsageAndSharedOptions(buf, "Usage: v3c -run [options] <v3 files>");
			runOpt.print(buf);
		} else if (TARGET.val != null) {
			printUsageAndSharedOptions(buf, "Usage: v3c -target=<target> [options] <v3 files>");
			compileOpt.print(buf);
			wasmOpt.print(buf);
			jvmOpt.print(buf);
		} else {
			printUsageAndSharedOptions(buf, "Usage: v3c (-run|-test|-version|-target=<target>) [options] <v3 files>");
			actionOpt.print(buf);
		}
		debugOpt.print(buf);
		buf.outt(); // to be sure
	}
	def printUsageAndSharedOptions(buf: TerminalBuffer, usage: string) {
		buf.puts(usage).ln().ln();
		langOpt.print(buf);
		sharedOpt.print(buf);
	}
}
class OptionGroup(name: string, o: BasicOptions) {
	var list: List<(Opt, string, string)>;

	def newMatcherOption(name: string, help: string) -> Option<VstMatcher> {
		var r: Option<VstMatcher> = Option.new(name, VstMatcher.None, CLOptions.parseMatcher);
		return add(o.add(r), "[=<method pattern(s)>]", help);
	}
	def newIntOption(name: string, defval: int, help: string) -> Option<int> {
		return add(o.newIntOption(name, defval), "=<int>", help);
	}
	def newBoolOption(name: string, defval: bool, help: string) -> Option<bool> {
		return add(o.newBoolOption(name, defval), "[=(true|false)]", help);
	}
	def newStringOption(name: string, defval: string, help: string) -> Option<string> {
		return add(o.newStringOption(name, defval), "=<string>", help);
	}
	def newPathOption(name: string, defval: string, help: string) -> Option<string> {
		return add(o.newStringOption(name, defval), "=<path>", help);
	}
	def newSizeOption(name: string, defval: u32, help: string) -> Option<u32> {
		return add(o.newSizeOption(name, defval), "=<int[K|M|G]>", help);
	}
	def newOption<T>(name: string, defval: T, typename: string, parseFun: string -> T, help: string) -> Option<T> {
		return add(o.newOption(name, defval, parseFun), typename, help);
	}
	def add<T>(opt: Option<T>, typename: string, help: string) -> Option<T> {
		list = List.new((opt, typename, help), list);
		return opt;
	}

	def print(buf: TerminalBuffer) {
		buf.put1("%s OPTIONS\n\n", name);
		for (l = Lists.reverse(list); l != null; l = l.tail) {
			var t = l.head;
			buf.put2("    -%s%s\n", t.0.name, t.1);
			buf.put1("        %s\n", t.2);
		}
		buf.outln();
	}
}
