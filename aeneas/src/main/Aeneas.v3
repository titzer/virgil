// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The main component of the Aeneas compiler. It provides many global command line
// options. From the options and command line arguments, it decides what action
// should be performed on the program(s) on the command line.
component Aeneas {
	var targets: List<Target>;
	var startup: void -> void;

	def main(args: Array<string>) -> int {
		args = CLOptions.options.parse(args);
		if (CLOptions.START_UID.val != 0) UID.next = CLOptions.START_UID.val;
		if (CLOptions.VERSION.get()) {
			printVersion(true, "\n");
			if (startup != null) startup();
			return 0;
		}
		if (startup != null) startup();
		if (CLOptions.HELP.get() || CLOptions.HELP2.get()) return zero(CLOptions.printHelp(args));
		if (args.length == 0) return zero(printVersion(false, ": no input files\n"));
		if (CLOptions.TEST.get()) return passed(Regression.new().run(args));
		if (CLOptions.RUN.get() || CLOptions.DEBUG.get()) return compileAndRun(args);
		if (CLOptions.MULTIPLE.get()) return passed(compileMultiple(args));
		return passed(!compile(args).reportErrors());
	}
	def compileMultiple(args: Array<string>) -> bool {
		var failed = false;
		var progress = ProgressPrinter.new(args.length);
		var compiler = Compiler.new(CLOptions.TARGET.get());
		for (i < args.length) {
			progress.begin(args[i]);
			var prog = makeProgram(compiler, [args[i]]);
			var compilation = Compilation.new(compiler, prog);
			compilation.compile();
			if (prog.ERROR.numErrors > 0) {
				failed = true;
				progress.fail(prog.ERROR.firstError());
			} else {
				progress.pass();
			}
		}
		return failed;
	}
	def makeProgram(compiler: Compiler, args: Array<string>) -> Program {
		var prog = Program.new();
		prog.explicitName = CLOptions.PROGRAM_NAME.val;
		if (compiler.target == null) SystemCalls.install(prog);
		setArgs(prog, args);
		return prog;
	}
	def setArgs(prog: Program, args: Array<string>) {
		// parse arguments: "A.v3 ... Z.v3 x y" into {prog.files = ["A.v3", "B.v3"]} and {prog.args = ["x", "y"]}
		for (i = 0; true; i++) {
			if (i == args.length) {
				prog.files = args;
				prog.args = [];
				break;
			}
			var arg = args[i];
			if (!Strings.endsWith(arg, ".v3")) {
				prog.files = Arrays.copy(args, Array<string>.new(i));
				prog.args = Arrays.range(args, i, args.length);
				break;
			}
		}
		// Prepend -rt.files option to program files
		var rtfiles = CLOptions.RT_FILES.get();
		if (rtfiles.length > 0) {
			var v = Vector<string>.new().grow(rtfiles.length + prog.files.length);
			v.puta(prog.files);
			v.puta(rtfiles);
			prog.files = v.extract();
		}
		// Allocate space for all the input data
		prog.inputs = Array.new(prog.files.length);
	}
	def compile(args: Array<string>) -> Program {
		var compiler = Compiler.new(CLOptions.TARGET.get());
		var prog = makeProgram(compiler, args);
		Compilation.new(compiler, prog).compile();
		return prog;
	}
	def compileAndRun(args: Array<string>) -> int {
		var compiler = Compiler.new(CLOptions.TARGET.get());
		var prog = makeProgram(compiler, args);
		var compilation = Compilation.new(compiler, prog);
		var after: void -> void;
		if (CLOptions.COVERAGE.val != VstMatcher.None) {
			var p = SsaCoverage.new(compiler, prog, CLOptions.INSTR_COVERAGE.val);
			compiler.ssaMon = compiler.filter(CLOptions.COVERAGE.val, _, p.onGen);
			after = p.report;
		} else if (CLOptions.INSTR_PROFILE.val != VstMatcher.None) {
			var p = SsaBlockProfiler.new();
			compiler.ssaMon = compiler.filter(CLOptions.INSTR_PROFILE.val, _, p.onGen);
			after = p.report;
		} else if (CLOptions.PROFILE.val != VstMatcher.None) {
			var p = SsaTreeProfiler.new();
			compiler.ssaMon = compiler.filter(CLOptions.PROFILE.val, _, p.onGen);
			after = p.report;
		}
		compilation.compile();
		if (!prog.reportErrors()) return -1;
		var result = compilation.runMain();
		if (Exception.?(result)) {
			var rettype = prog.getMain().getReturnType();
			V3.renderResult(result, rettype, TerminalBuffer.new()).ln().send(System.write(2, _));
		}
		if (after != null) after();
		match (result) {
			x: Box<int> => return x.val;
			x: Box<long> => return int.view(x.val);
			_ => return 0;
		}
	}
	def registerTarget(target: Target) {
		targets = List<Target>.new(target, targets);
	}
	def getTarget(name: string) -> Target {
		if (name == null) return null;
		for (list = targets; list != null; list = list.tail) {
			if (Strings.equal(list.head.name, name)) return list.head;
		}
		Terminal.put("Unknown target: ");
		Terminal.put(name);
		Terminal.ln();
		return null;
	}
	def printVersion(long: bool, next: string) {
		Terminal.put("Aeneas ");
		Terminal.put(Version.version);
		if (!Debug.UNSTABLE) Terminal.put(" stable");
		var data = Version.buildData;
		if (long && data != null) {
			Terminal.put("\nBuild Data: ");
			Terminal.put(data);
		}
		Terminal.put(next);
	}
	def zero<T>(v: T) -> int {
		return 0;
	}
	def passed(v: bool) -> int {
		return if(v, 1, 0);
	}
}
