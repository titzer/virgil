// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The main component of the Aeneas compiler. It provides many global command line
// options. From the options and command line arguments, it decides what action
// should be performed on the program(s) on the command line.
component Aeneas {
	def options = BasicOptions.new(null);
	def o = options;

	// Action options
	def HELP		= o.newBoolOption("help", false);
	def VERSION		= o.newBoolOption("version", false);
	def TEST		= o.newBoolOption("test", false);
	def TEST_ST		= o.newBoolOption("test.st", false);
	def TEST_GC		= o.newStringOption("test.gc", "");
	def RUN			= o.newBoolOption("run", false);
	def PROFILE		= o.newMatcherOption("profile");
	def INSTR_PROFILE	= o.newMatcherOption("iprofile");
	def PROFILE_DEPTH	= o.newIntOption ("profile-depth", 0);
	def COVERAGE		= o.newMatcherOption("coverage");
	def INSTR_COVERAGE	= o.newBoolOption("icoverage", false);
	// User options
	def MULTIPLE		= o.newBoolOption("multiple", false);
	def TARGET		= o.newOption("target", null, getTarget);
	def OUTPUT		= o.newStringOption("output", null);
	def PROGRAM_NAME	= o.newStringOption("program-name", null);
	// Language options
	def FLOAT		= o.newBoolOption("fp", false);
	// Internal testing options
	def VERBOSE		= o.newIntOption("verbose", 1);
	def EXPECT		= o.newStringOption("expect", null);
	def RA			= o.newBoolOption("ra", false);
	def SET_EXEC		= o.newBoolOption("set-exec", true);
	def HEAP_SIZE		= o.newSizeOption("heap-size", 0);
	def SHADOW_STACK_SIZE	= o.newSizeOption("shadow-stack-size", 0);
	def RT_STTABLES		= o.newBoolOption("rt.sttables", false);
	def RT_GCTABLES		= o.newBoolOption("rt.gctables", false);
	def RT_GC		= o.newBoolOption("rt.gc", false);
	def RT_TEST_GC		= o.newBoolOption("rt.test-gc", false);
	def OPT			= o.newStringOption("opt", null);
	def MAXR		= o.newIntOption("maxr", 100000);
	def MAXP		= o.newIntOption("maxp", 100000);
	// Debugging options
	def PRINT_IC		= o.newMatcherOption("print-ic");
	def PRINT_INLINING	= o.newBoolOption("print-inlining", false);
	def PRINT_VST		= o.newBoolOption("print-vst", false);
	def PRINT_RA		= o.newBoolOption("print-ra", false);
	def PRINT_SSA		= o.newMatcherOption("print-ssa");
	def PRINT_SSA_STATS	= o.newMatcherOption("print-ssa-stats");
	def PRINT_MACH		= o.newMatcherOption("print-mach");
	def PRINT_MACH_DATA	= o.newBoolOption("print-mach-data", false);
	def PRINT_CFG		= o.newBoolOption("print-cfg", false);
	def PRINT_BIN		= o.newBoolOption("print-bin", false);
	def PRINT_SIZE		= o.newBoolOption("print-size", false);
	def PRINT_DEAD_CODE	= o.newBoolOption("print-dead-code", false);
	def PRINT_STACKIFY	= o.newBoolOption("print-stackify", false);
	def FATAL		= o.newBoolOption("fatal", false);
	def TRACE		= o.newBoolOption("trace", false);
	def TRACE_PARENT	= o.newBoolOption("trace-parent", false);
	def TRACE_CALLS		= o.newMatcherOption("trace-calls");
	def FATAL_CALLS		= o.newMatcherOption("fatal-calls");

	var targets: List<Target>;
	var startup: void -> void;

	def main(args: Array<string>) -> bool {
		args = options.parse(args);
		if (VERSION.get()) {
			printVersion(true, "\n");
			if (startup != null) startup();
			return false;
		}
		if (startup != null) startup();
		if (args.length == 0) return printVersion(false, ": no input files\n");
		if (TEST.get()) return Regression.new().run(args);
		if (HELP.get()) return printHelp(args);
		if (RUN.get()) return compileAndRun(args);
		if (MULTIPLE.get()) return compileMultiple(args);
		return !compile(args).reportErrors();
	}
	def getTarget(name: string) -> Target {
		if (name == null) return null;
		for (list = targets; list != null; list = list.tail) {
			if (Strings.equal(list.head.name, name)) return list.head;
		}
		Terminal.put("Unknown target: ");
		Terminal.put(name);
		Terminal.ln();
		return null;
	}
	def compileMultiple(args: Array<string>) -> bool {
		var failed = false, verbose = VERBOSE.get();
		var progress = ProgressPrinter.new(args.length, verbose);
		var compiler = Compiler.new(TARGET.get());
		for (i < args.length) {
			progress.begin(args[i]);
			var prog = makeProgram(compiler, [args[i]]);
			compiler.compile(prog);
			if (prog.ERROR.numErrors > 0) {
				failed = true;
				progress.fail(prog.ERROR.firstError());
			} else {
				progress.pass();
			}
		}
		if (verbose > 0) progress.report();
		return failed;
	}
	def makeProgram(compiler: Compiler, args: Array<string>) -> Program {
		var prog = Program.new();
		prog.explicitName = PROGRAM_NAME.val;
		if (compiler.target == null) SystemCalls.install(prog);
		else compiler.target.configure(compiler, prog);
		compiler.setArgs(prog, args);
		return prog;
	}
	def compile(args: Array<string>) -> Program {
		var compiler = Compiler.new(TARGET.get());
		var prog = makeProgram(compiler, args);
		compiler.compile(prog);
		return prog;
	}
	def compileAndRun(args: Array<string>) -> bool {
		var compiler = Compiler.new(TARGET.get());
		var prog = makeProgram(compiler, args);
		var after: void -> void;
		if (COVERAGE.val != VstMatcher.None) {
			after = IcCoverage.new(compiler, prog, COVERAGE.val, INSTR_COVERAGE.val).report;
		} else if (INSTR_PROFILE.val != VstMatcher.None) {
			after = IcInstrProfiler.new(compiler, prog, INSTR_PROFILE.val).report;
		} else if (PROFILE.val != VstMatcher.None) {
			after = IcTreeProfiler.new(compiler, prog, PROFILE.val).report;
		}
		compiler.compile(prog);
		if (!prog.reportErrors()) return true;
		var result = compiler.runMain(prog);
		if (Exception.?(result)) {
			var rettype = prog.getMain().getReturnType();
			Terminal.putbln(V3.renderResult(result, rettype, StringBuffer.new()));
		}
		if (after != null) after();
		return false;
	}
	def registerTarget(target: Target) {
		targets = List<Target>.new(target, targets);
	}
	def printHelp(args: Array<string>) -> bool {
		return printVersion(true, "\n");
	}
	def printVersion(long: bool, next: string) -> bool {
		Terminal.put("Aeneas ");
		Terminal.put(Version.version);
		var data = Version.buildData;
		if (long && data != null) {
			Terminal.put("\nBuild Data: ");
			Terminal.put(data);
		}
		Terminal.put(next);
		return false;
	}
}
