// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utilities for working with the representation of function types in the compiler.
component Function {
	def CLOSURE = Function_TypeCon.new(Kind.CLOSURE);
	def FUNCREF  = Function_TypeCon.new(Kind.FUNCREF);

	def getParamType(ftype: Type) -> Type {
		return checkTypeCon(ftype).nested.head;
	}
	def getParamTypeList(ftype: Type) -> List<Type> {
		return Tuple.toTypeList(checkTypeCon(ftype).nested.head);
	}
	def getParamTypeArray(ftype: Type) -> Array<Type> {
		return Lists.toArray(Tuple.toTypeList(checkTypeCon(ftype).nested.head));
	}
	def getReturnType(ftype: Type) -> Type {
		return checkTypeCon(ftype).nested.tail.head;
	}
	def newType(paramType: Type, returnType: Type) -> Type {
		return CLOSURE.create(Lists.cons2(paramType, returnType));
	}
	def funcRefType(ftype: Type) -> Type {
		if (ftype.typeCon == FUNCREF) return ftype;
		return FUNCREF.create(ftype.nested);
	}
	private def checkTypeCon(ftype: Type) -> Type {
		if (!Function_TypeCon.?(ftype.typeCon)) return V3.fail1("not a function type: %q", ftype.render);
		return ftype;
	}
	def prependParamType(ptype: Type, ftype: Type) -> Type {
		var params = List.new(ptype, getParamTypeList(ftype));
		return ftype.typeCon.create(Lists.cons2(Tuple.newType(params), getReturnType(ftype)));
	}
	def prependParamTypes(ptypes: Array<Type>, ftype: Type) -> Type {
		var params = Arrays.concat(ptypes, getParamTypeArray(ftype));
		return ftype.typeCon.create(Lists.cons2(Tuple.fromTypeArray(params), getReturnType(ftype)));
	}
	def sig(paramType: Type, returnType: Type) -> Signature {
		return FuncType.!(Function.newType(paramType, returnType)).sig();
	}
	def siga(paramTypes: Array<Type>, returnType: Type) -> Signature {
		return Signature.new(null, paramTypes, [returnType]);
	}
}
// TypeCon for function types in the compiler
class Function_TypeCon extends TypeCon {
	new(kind: Kind) super("closure", kind, 2, TypeUtil.globalCache) { }

	def alloc(hash: int, nested: List<Type>) -> FuncType {
		return FuncType.new(hash, this, nested);
	}
	def renderType(buffer: StringBuilder, list: List<Type>) -> StringBuilder {
		var paramType = list.head, isFunc = Function_TypeCon.?(paramType.typeCon);
		if (kind == Kind.FUNCREF) buffer.puts("&(");
		if (isFunc) buffer.putc('(');
		paramType.render(buffer);
		if (isFunc) buffer.putc(')');
		buffer.puts(" -> ");
		list.tail.head.render(buffer);
		if (kind == Kind.FUNCREF) buffer.puts(")");
		return buffer;
	}
}
// Representation of a function type.
class FuncType extends Type {
	private var sigcache: Signature;
	new(hash: int, typeCon: TypeCon, nested: List<Type>)
		super(hash, typeCon, nested) { }
	def paramType() -> Type { return nested.head; }
	def returnType() -> Type { return nested.tail.head; }
	def prependParam(t: Type) -> FuncType {
		var paramType = Tuple.fromTypeArray(Arrays.prepend(t, sig().paramTypes));
		return FuncType.!(typeCon.create(Lists.cons2(paramType, returnType())));
	}
	def sig() -> Signature {
		if (sigcache == null) {
			var paramTypes = Tuple.toTypeArray(nested.head);
			var returnTypes = Tuple.toTypeArray(nested.tail.head);
			sigcache = Signature.new(this, paramTypes, returnTypes);
		}
		return sigcache;
	}
}
// A first-class function that is bound to an object
class Closure(val: Val, memberRef: IrSpec) extends Val {
	def equals(other: Val) -> bool {
		if (other == this) return true;
		if (Closure.?(other)) {
			var odel = Closure.!(other);
			if (!Values.equal(odel.val, val)) return false;
			return odel.memberRef.equals(memberRef);
		}
		return false;
	}
	def hash() -> int {
		return Values.hash(val) + memberRef.member.uid;
	}
}
// A first class function that is not bound to an object
class FuncVal(memberRef: IrSpec) extends Val {
	def equals(other: Val) -> bool {
		if (other == this) return true;
		return FuncVal.?(other) && FuncVal.!(other).memberRef.equals(memberRef);
	}
}
// A cache of the array of parameter and return types for a function type.
class Signature {
	private var ftype: FuncType;
	private var bound0: Signature;
	def paramTypes: Array<Type>;
	def returnTypes: Array<Type>;
	new(ftype, paramTypes, returnTypes) { }
	def funcType() -> FuncType {
		if (ftype == null) {
			ftype = FuncType.!(Function.newType(Tuple.fromTypeArray(paramTypes), Tuple.fromTypeArray(returnTypes)));
		}
		return ftype;
	}
	def hash() -> int { return funcType().hash; }
	def equals(that: Signature) -> bool {
		return funcType() == that.funcType();
	}
	def subst(f: Type -> Type) -> Signature {
		return Signature.new(null, Arrays.map(paramTypes, f), Arrays.map(returnTypes, f));
	}
	def returnType() -> Type {
		match (returnTypes.length) {
			0 => return Void.TYPE;
			1 => return returnTypes[0];
			_ => return Function.getReturnType(funcType());
		}
	}
	// Get the type of this signature when the given parameter indices are bound
	def getResidualType(indexMap: Array<int>) -> Type {
		if (indexMap.length == 0) return funcType();
		return Function.newType(getResidualParamType(indexMap), returnType());
	}
	// get the list of residual types
	def getResidualParamTypeList(indexMap: Array<int>) -> List<Type> {
		if (indexMap.length == 0) return null;
		var rl: List<Type>;
		var p = paramTypes, iv = indexMap.length - 1;
		for (i = p.length - 1; i >= 0; i--) {
			var pt = p[i];
			if (iv < 0 || i != indexMap[iv]) rl = List.new(pt, rl);
			else iv--;
		}
		return rl;
	}
	def getResidualParamType(indexMap: Array<int>) -> Type {
		return Tuple.TYPECON.create(getResidualParamTypeList(indexMap));
	}
}
