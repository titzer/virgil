// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component Float {
	def FLOAT32_TYPECON = Float_TypeCon.new(8, 23, "float");
	def FLOAT64_TYPECON = Float_TypeCon.new(11, 52, "double");
	def FLOAT32 = FloatType.!(FLOAT32_TYPECON.create0());
	def FLOAT64 = FloatType.!(FLOAT64_TYPECON.create0());

	def VIEW_TYPE_PARAM_LIST_32 = List.new(TypeUtil.newTypeParamWithConstraint(TypeUtil.BUILTIN_TOKEN, TypeUtil.globalCache,
		true, checkFloatViewTypeArg(32, _, _)), null);
	def VIEW_TYPE_PARAM_LIST_64 = List.new(TypeUtil.newTypeParamWithConstraint(TypeUtil.BUILTIN_TOKEN, TypeUtil.globalCache,
		true, checkFloatViewTypeArg(64, _, _)), null);
	def ROUNDI_TYPE_PARAM_LIST = List.new(TypeUtil.newTypeParamWithConstraint(TypeUtil.BUILTIN_TOKEN, TypeUtil.globalCache,
		true, checkFloatRoundITypeArg), null);

	def F32_ZERO = Float32Val.new(0);
	def F64_ZERO = Float64Val.new(0);
	def F32_ONE = Float32Val.new(0x3f800000);
	def F64_ONE = Float64Val.new(0x3ff0000000000000);
	def F32_TWO = Float32Val.new(0x40000000);
	def F64_TWO = Float64Val.new(0x4000000000000000);
	def F32_NAN = Float32Val.new(0x7fc00000);
	def F64_NAN_BITS = 0x7ff8000000000000u;
	def F64_NAN = Float64Val.new(0x7ff8000000000000);
	def F64_MANTISSA_MASK = 0x7FFFFFFFFFFFFu;
	def F32_MINUS_ZERO = Float32Val.new(0x80000000u);
	def F64_MINUS_ZERO = Float64Val.new(0x8000000000000000ul);
	def F32_MINUS_INFINITY = Float32Val.new(0xff800000u);
	def F64_MINUS_INFINITY = Float64Val.new(0xfff0000000000000ul);
	def F32_INFINITY = Float32Val.new(0x7f800000u);
	def F64_INFINITY = Float64Val.new(0x7ff0000000000000ul);

	def f32(sign: int, exp: int, mantissa: u32) -> Float32Val {
		var bits = if(sign != 0, 0x80000000u);
		if (exp < -150) return Float32Val.new(bits);
		if (exp <= -127) {
			// subnormal; make implicit 1 explicit and shift right
			mantissa = 0x80000000u | mantissa >> 1;
			var shift = -127 - exp;
			mantissa = (u32.view(roundOff(mantissa, 9 + shift)) << 9) + (mantissa >> u5.view(shift));
			exp = -127;
		} else if (exp >= 128) {
			// saturate large exponents to infinity
			return if (sign != 0, F32_MINUS_INFINITY, F32_INFINITY);
		}
		bits |= (u32.view(u8.view(exp + 127)) << 23);
		bits |= mantissa >> 9;
		return Float32Val.new(bits);
	}
	def f64(sign: int, exp: int, mantissa: u64) -> Float64Val {
		var bits = if(sign != 0, 0x8000000000000000ul);
		if (exp < -1076) return Float64Val.new(bits);
		if (exp <= -1023) {
			// subnormal; make implicit 1 explicit and shift right
			mantissa = 0x8000000000000000ul | mantissa >> 1;
			var shift = -1023 - exp;
			mantissa = (u64.view(roundOff(mantissa, 12 + shift)) << 12) + (mantissa >> u6.view(shift));
			exp = -1023;
		} else if (exp >= 1024) {
			// saturate large exponents to infinity
			return if (sign != 0, F64_MINUS_INFINITY, F64_INFINITY);
		}
		bits |= (u64.view(u11.view(exp + 1023)) << 52);
		bits |= mantissa >> 12;
		return Float64Val.new(bits);
	}
	def roundOff(val: u64, bits: int) -> u1 {
		var b = val << u6.view(64 - bits);
		var max = 0x8000000000000000uL;
		if (b < max) return 0;
		if (b > max) return 1;
		if ((val << u6.view(63 - bits)) >= max) return 1;
		return 0;
	}
	def isNan32(bits: u32) -> bool {
		return (bits & 0x7f800000u) == 0x7f800000u && (bits & 0x7FFFFFu) != 0;
	}
	def isNan64(bits: u64) -> bool {
		return (bits & 0x7ff0000000000000u) == 0x7ff0000000000000u && (bits & 0xFFFFFFFFFFFFFu) != 0;
	}
}
// Type constructor for floating point types. Generalized to have a configurable
// exponent and fraction width (in bits) and a sign bit.
class Float_TypeCon extends TypeCon {
	def exp_width: byte;
	def fraction_width: byte;

	new(exp_width, fraction_width, name: string) super(name, Kind.FLOAT, 0, TypeUtil.globalCache) {
		var ft = FloatType.new(exp_width, fraction_width, this);
		singleton = ft;
	}

}
class FloatType extends PrimType {
	def exp_width: byte;
	def fraction_width: byte;
	def is64 = (1 + exp_width + fraction_width) == 64;
	private var cache: FloatOpCache;

	new(exp_width, fraction_width, typeCon: Float_TypeCon) super(typeCon.uid, typeCon, byte.!(1 + exp_width + fraction_width)) { }
	def opcache() -> FloatOpCache {
		if (cache == null) cache = FloatOpCache.new(this);
		return cache;
	}
	def min(itt: IntType) -> Val {
		if (itt.signed)	return if(is64, Float.f64(-1, itt.width - 1, 0), Float.f32(-1, itt.width - 1, 0));
		return if(is64, Float.F64_ZERO, Float.F32_ZERO);
	}
	def mind(itt: IntType) -> double {
		if (itt.signed)	return double.view(Float.f64(-1, itt.width - 1, 0).bits);
		return 0;
	}
	def max(itt: IntType) -> Val {
		var width = if(itt.signed, itt.width - 1, itt.width);
		if (is64) {
			if (width == 0) return Float.F64_ZERO;
			var mantissa = u64.max << u6.view(64 - width);
			return Float.f64(0, width - 1, mantissa << 1);
		} else {
			if (width == 0) return Float.F32_ZERO;
			var mantissa = u32.max;
			if (width < 32) mantissa = mantissa << u5.view(32 - width);
			return Float.f32(0, width - 1, mantissa << 1);
		}
	}
	def maxplus1(itt: IntType) -> Val {
		if (itt.signed) return if(is64, Float.f64(0, itt.width - 1, 0), Float.f32(0, itt.width - 1, 0));
		return if(is64, Float.f64(0, itt.width, 0), Float.f32(0, itt.width, 0));
	}
	def maxplus1d(itt: IntType) -> double {
		if (itt.signed) return double.view(Float.f64(0, itt.width - 1, 0).bits);  // XXX: boxing
		return double.view(Float.f64(0, itt.width, 0).bits);
	}
	def exponentBias() -> int {
		return (1 << u5.view(exp_width - 1)) - 1;
	}
	def tryPromoteS(v: long) -> Val {
		if (v == long.min) return null; // not representable
		return if (v < 0, tryPromoteU(1, u64.view(0 - v)), tryPromoteU(0, u64.view(v)));
	}
	def tryPromoteU(sign: u1, v: u64) -> Val {
		if (v == 0) {
			return if(is64, Float.F64_ZERO, Float.F32_ZERO);
		}
		var exponent = 62u + (1u << u5.view(exp_width-1));
		while ((v >> 63) == 0) {
			v = v << 1;
			exponent--;
		}
		v = v << 1; // shift off implicit 1 bit
		var shift = u6.view(64 - fraction_width);
		var fraction = (v >> shift);
		if (v != (fraction << shift)) return null; // requires rounding
		var r = u64.view(sign) << u6.view(width - 1);
		r |= u64.view(exponent) << u6.view(fraction_width);
		r |= fraction;
		return if(is64, Float64Val.new(r), Float32Val.new(u32.view(r)));
	}
}
class FloatOpCache(ft: FloatType) {
	def arr_t: Array<Type> = [ft];
	def typeArgs = arr_t;
	def tupleType = Tuple.newType(Lists.cons2(ft, ft));
	def unopSig = Function.sig(ft, ft);
	def binopSig = Function.sig(tupleType, ft);
	def cmpSig = Function.sig(tupleType, Bool.TYPE);

	def opAdd = newOp(Opcode.FloatAdd(ft.is64), typeArgs, binopSig);
	def opSub = newOp(Opcode.FloatSub(ft.is64), typeArgs, binopSig);
	def opMul = newOp(Opcode.FloatMul(ft.is64), typeArgs, binopSig);
	def opDiv = newOp(Opcode.FloatDiv(ft.is64), typeArgs, binopSig);

	def opSign = V3Op.newVstSugar(VstOperator.FloatSign, arr_t, arr_t, Int.getType(false, 1));
	def opExponent = V3Op.newVstSugar(VstOperator.FloatExponent, arr_t, arr_t, Int.getType(true, ft.exp_width));
	def opFraction = V3Op.newVstSugar(VstOperator.FloatFraction, arr_t, arr_t, Int.getType(false, ft.fraction_width));

	def opAbs = newOp(Opcode.FloatAbs(ft.is64), typeArgs, unopSig);
	def opCeil = newOp(Opcode.FloatCeil(ft.is64), typeArgs, unopSig);
	def opFloor = newOp(Opcode.FloatFloor(ft.is64), typeArgs, unopSig);
	def opSqrt = newOp(Opcode.FloatSqrt(ft.is64), typeArgs, unopSig);

	def opEqual = newOp(Opcode.FloatEq(ft.is64), typeArgs, cmpSig);
	def opNotEqual = newOp(Opcode.FloatNe(ft.is64), typeArgs, cmpSig);
	def opLt = newOp(Opcode.FloatLt(ft.is64), typeArgs, cmpSig);
	def opLteq = newOp(Opcode.FloatLteq(ft.is64), typeArgs, cmpSig);
	def opGt = V3Op.newVstSugar(VstOperator.Commute(opLt), arr_t, [ft, ft], Bool.TYPE);
	def opGteq = V3Op.newVstSugar(VstOperator.Commute(opLteq), arr_t, [ft, ft], Bool.TYPE);

	def none() -> Operator {
		return null;
	}
}
def newOp(op: Opcode, typeArgs: Array<Type>, sig: Signature) -> Operator {
	return Operator.new(op, typeArgs, sig);
}
class Float32Val(bits: u32) extends Val {
	def equals(that: Val) -> bool {
		if (Float.isNan32(bits)) return false;
		return Float32Val.?(that) && Float32Val.!(that).bits == bits;
	}
}
class Float64Val(bits: u64) extends Val {
	def equals(that: Val) -> bool {
		if (Float.isNan64(bits)) return false;
		return Float64Val.?(that) && Float64Val.!(that).bits == bits;
	}
}
def checkFloatViewTypeArg(width: int, tv: TypeVarType, t: Type) -> Type {
	if (IntType.?(t)) {
		var it = IntType.!(t);
		if (it.width <= width) return Int.getType(it.signed, width);
	}
	if (!tv.error) {
		tv.error = true;
		tv.error_msg = Strings.format1("view requires %d-bit integral type argument", width);
	}
	return null;
}
def checkFloatRoundITypeArg(tv: TypeVarType, t: Type) -> Type {
	if (t.typeCon.kind != Kind.INT) {
		if (!tv.error) {
			tv.error = true;
			tv.error_msg = "roundi requires integral type argument";
		}
		return null;
	}
	return t;
}
