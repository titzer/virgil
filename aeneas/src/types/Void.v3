// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Representation of the void type.
component Void {
	def TYPE = TypeUtil.singleType("void", V3Kind.VOID, VoidType.new);
	def ERROR_TYPE = TypeUtil.singleType("#error", V3Kind.VOID, ErrorType.new);
}
// Representation of the null type, used internally.
component Null {
	def TYPE = TypeUtil.singleType("#null", V3Kind.CLASS, NullType.new);
}
// Representation of the "any object" type, used internally.
component AnyRef {
	def TYPE = TypeUtil.singleType("#ref", V3Kind.CLASS, AnyRefType.new);
}
// Representation of the "any function" type, used internally.
component AnyFunction {
	def TYPE = TypeUtil.singleType("#func", V3Kind.ANYFUNC, AnyFuncType.new);
}
// The (singleton) {void} type.
class VoidType extends Type {
	new(typeCon: TypeCon) super(typeCon.uid, typeCon, null) { }
}
// The (singleton) {null} type.
class NullType extends Type {
	new(typeCon: TypeCon) super(typeCon.uid, typeCon, null) { }
}
// The (singleton) type representing the supertype of all reference types.
class AnyRefType extends Type {
	new(typeCon: TypeCon) super(typeCon.uid, typeCon, null) { }
}
// The (singleton) type representing the supertype of all function types.
class AnyFuncType extends Type {
	new(typeCon: TypeCon) super(typeCon.uid, typeCon, null) { }
}
// The (singleton) type representing an error.
class ErrorType extends Type {
	new(typeCon: TypeCon) super(typeCon.uid, typeCon, null) { }
}
