// Copyright 2024 Virgil Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.


// IntRepresentedType represents a scalar backed by its integer representation.
// In other words, the integer operations should work on values of this type,
// but it carries information about the underlying scalar type so that
// references and non-references can be distinguished at lower phases.
class IntRepType extends IntType {
	def scalar: Scalar;

	new(scalar, tc: Int_TypeCon) super(scalar.size, false, tc) {}
	def render(buf: StringBuilder) -> StringBuilder {
		return buf.put2("u%d[%s]", scalar.size, scalar.name);
	}
}

class IntRep_TypeCon extends TypeCon {
	new(scalar: Scalar, tc: Int_TypeCon) super(IntRep.name(scalar), Kind.INT, 0, TypeUtil.globalCache) {
		singleton = IntRepType.new(scalar, tc);
	}
}

component IntRep {
	private def cache = Array<IntRepType>.new(16);

	def name(scalar: Scalar) -> string {
		return Strings.format2("u%d[%s]", scalar.size, scalar.name);
	}
	def getType(scalar: Scalar) -> IntRepType {
		if (cache[scalar.tag] != null) return cache[scalar.tag];
		var tc = Int_TypeCon.new(scalar.size, false);
		cache[scalar.tag] = IntRepType.new(scalar, tc);
		return cache[scalar.tag];
	}
}
