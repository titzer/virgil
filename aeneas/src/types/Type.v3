// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The fixed set of kinds for Virgil types.
enum Kind {
	VOID,
	BOOL,
	INT,
	FLOAT,
	ARRAY,
	COMPONENT,
	CLASS,
	CLOSURE,
	TUPLE,
	TYPE_PARAM,
	TYPE_VAR,
	FUNCREF,
	ANYREF,
	ANYFUNC,
	VARIANT,
	ENUM,
	ENUM_SET,
	POINTER,
	REF,
	RANGE,
	RANGE_START
}

// Some constants for internal masking.
component TypeConst {
	def TYPEVAR_MASK   = 0x40000000;
	def TYPEPARAM_MASK = 0x20000000;
	def OPEN_MASK      = 0x60000000;
	def UID_MASK       = 0x1FFFFFFF;
}

// Representation of a type.
class Type {
	def hash: int;		// hash and bits indicating openness
	def typeCon: TypeCon;	// type constructor
	def nested: List<Type>;	// nested types, if any
	var link: Type;		// used as a link in the hash bucket chain

	new(hash, typeCon, nested) { }

	def open() -> bool { return (hash & TypeConst.OPEN_MASK) != 0; }
	def hasTypeVars() -> bool { return (hash & TypeConst.TYPEVAR_MASK) != 0; }
	def render(buffer: StringBuilder) -> StringBuilder {
		return typeCon.renderType(buffer, nested);
	}
	def substitute(typeSubst: TypeSubst) -> Type {
		if (typeSubst == null) return this;
		if ((hash & TypeConst.TYPEVAR_MASK) != 0) {
			// if no nested types, then this must itself be a type variable
			if (nested == null) return typeSubst.substituteTypeVar(TypeVarType.!(this));
			return recurse(typeSubst);
		}
		if ((hash & TypeConst.TYPEPARAM_MASK) != 0) {
			// if no nested types, then this must itself be a type parameter
			if (nested == null) return typeSubst.substituteTypeParam(TypeParamType.!(this));
			return recurse(typeSubst);
		}
		return this;
	}
	private def recurse(typeSubst: TypeSubst) -> Type {
		// recursively substitute type variables / parameters
		var ntypes: List<Type> = null;
		var changed = false;
		for (list = nested; list != null; list = list.tail) {
			var otype = list.head;
			var ntype = otype.substitute(typeSubst);
			changed |= otype != ntype;
			ntypes = List.new(ntype, ntypes); // XXX: skip creating the intermediate list if no change
		}
		if (changed) return typeCon.create(Lists.reverse(ntypes));
		return this;
	}
}
// Representation of a type parameter.
class TypeParamType extends Type {
	def token: Token;
	def hard: bool;  // whether the constraint is hard
	def constraint: (TypeVarType, Type) -> Type;
	var index: int;
	new(hash: int, token, typeCon: TypeCon, hard, constraint)
		super(hash | TypeConst.TYPEPARAM_MASK, typeCon, null) { }
}
// Representation of a type variable.
class TypeVarType extends Type {
	def token: Token;
	def typeParam: TypeParamType;
	var vtype: Type;
	var error: bool;
	var error_msg: string;
	new(hash: int, typeCon: TypeCon, token, typeParam)
		super(hash | TypeConst.TYPEVAR_MASK, typeCon, null) { }
	def setType(t: Type) {
		if (typeParam.constraint != null) t = typeParam.constraint(this, t);
		vtype = t;
	}
}
// Enforces reference equality for types using a customized hashing representation.
// Makes use of the "link" var of a type, using the type itself as the hash bucket.
// A type is created by only one type constructor and cached in only one TypeCache.
class TypeCache {
	def uid = UID.next++;
	var singleBuckets = Array<Type>.new(11);
	var multiBuckets  = Array<Type>.new(13);

	def get1(hash: int, typeCon: TypeCon, t: Type) -> Type {
		var index = hash % singleBuckets.length;
		var bucket = singleBuckets[index], chain = 0;
		// search the bucket chain for a type with the same typecon and nested
		for (b = bucket; b != null; b = b.link) {
			// specialized search for a single nested type
			chain++;
			if (b.hash != hash) continue;
			if (b.typeCon != typeCon) continue;
			if (b.nested.head == t) return b;
		}
		// not found, create and insert.
		var n = typeCon.alloc(hash, List.new(t, null));
		n.link = bucket;
		singleBuckets[index] = n;
		if (chain > 5) singleBuckets = rebalance(singleBuckets);
		return n;
	}
	def getN(hash: int, typeCon: TypeCon, nested: List<Type>) -> Type {
		var index = hash % multiBuckets.length;
		var bucket = multiBuckets[index], chain = 0;
		// search the bucket chain for a type with the same typecon and nested
		for (b = bucket; b != null; b = b.link) {
			chain++;
			if (b.hash != hash) continue;
			if (b.typeCon != typeCon) continue;
			if (TypeUtil.equalsList(nested, b.nested)) return b;
		}
		// not found, create and insert.
		var n = typeCon.alloc(hash, nested);
		n.link = bucket;
		multiBuckets[index] = n;
		if (chain > 5) multiBuckets = rebalance(multiBuckets);
		return n;
	}
	private def rebalance(buckets: Array<Type>) -> Array<Type> {
		if (buckets.length > 10000) return buckets; // enforce maximum size
		var newsize = 7 * buckets.length + 112; // grow fast (11 -> 189 -> 1435 -> 10157)
		var newbuckets = Array<Type>.new(newsize);
		for (b in buckets) {
			if (b == null) continue;
			var p = b.link;
			for (o = b; o != null; o = p) {
				p = o.link;
				var index = o.hash % newsize;
				o.link = newbuckets[index];
				newbuckets[index] = o;
			}
		}
		return newbuckets;
	}
}
// Constructs all types, using a type cache for enforcing reference equality.
// Either uses this typecache or the typecache with the largest UID of any of the
// nested types. E.g. Array<T> will be cached in either Array's typecache or T's
// typecache, depending on which has the higher ID.
class TypeCon {
	def uid  = UID.next++;		// unique id for type constructor
	def name: string;		// name of the type
	def kind: Kind;			// kind of the type constructor
	def arity: int;			// expected number of type parameters
	def typeCache: TypeCache;	// per-language or per-program type cache
	var singleton: Type;		// type with 0 nested types

	new(name, kind, arity, typeCache) { }
	def alloc(hash: int, nested: List<Type>) -> Type {
		return Type.new(hash, this, nested);
	}
	def create(nested: List<Type>) -> Type {
		if (nested == null) return create0();
		if (nested.tail == null) return create1(nested.head);
		var cache = typeCache, hash = uid;
		for (l = nested; l != null; l = l.tail) {
			var t = l.head, tc = t.typeCon.typeCache;
			if (tc.uid > cache.uid) cache = tc;
			hash = (TypeConst.UID_MASK & (t.hash + hash * 33)) | (TypeConst.OPEN_MASK & (t.hash | hash));
		}
		return cache.getN(hash, this, nested);
	}
	def create0() -> Type {
		if (singleton == null) singleton = alloc(uid, null);
		return singleton;
	}
	def create1(t: Type) -> Type {
		var cache = typeCache, tc = t.typeCon.typeCache;
		if (tc.uid > cache.uid) cache = tc;
		var hash = (TypeConst.UID_MASK & (t.hash + uid * 33)) | (TypeConst.OPEN_MASK & t.hash);
		return cache.get1(hash, this, t);
	}
	def renderType(buffer: StringBuilder, typeParams: List<Type>) -> StringBuilder {
		buffer.puts(name);
		if (typeParams != null) {
			buffer.putc('<');
			Lists.render(buffer, Type.render, typeParams);
			buffer.putc('>');
		}
		return buffer;
	}
}
// A special type constructor for type variables.
class TypeVar_TypeCon extends TypeCon {
	def typeParam: TypeParamType;
	var typeVar: TypeVarType;
	new(token: Token, typeParam, typeCache: TypeCache) super(typeParam.token.image, Kind.TYPE_VAR, 0, typeCache) {
		singleton = typeVar = TypeVarType.new(UID.next++, this, token, typeParam);
	}
	def renderType(buffer: StringBuilder, typeParams: List<Type>) -> StringBuilder {
		return render(buffer);
	}
	private def render(buffer: StringBuilder) -> StringBuilder{
		buffer.putc('?');
		buffer.puts(name);
		if (typeVar.vtype != null) {
			buffer.putc('=');
			if (typeVar.vtype.typeCon == this) buffer.putc('?');
			else typeVar.vtype.render(buffer);
		}
		return buffer;
	}
}
// Abstract class that can recursively substitute a type for a type parameter
class TypeSubst {
	def substitute(t: Type) -> Type { return t.substitute(this); }
	def substituteTypeParam(typeParam: TypeParamType) -> Type { return typeParam; }
	def substituteTypeVar(typeVar: TypeVarType) -> Type { return typeVar; }
}
// A utility class to substitute type params for their bound types.
// Generates an error if an unbound type variable is encountered.
class TypeVarEliminator extends TypeSubst {
	def error: TypeVarType -> Type;
	def default: Type; // default type to use if variable has no solution

	new(error, default) { }

	def substituteTypeVar(typeVar: TypeVarType) -> Type {
		if (typeVar.vtype == null) {
			if (error == null) {
				if (default == null) return typeVar;
				return default;
			}
			return error(typeVar);
		}
		if (typeVar.error_msg != null) {
			return error(typeVar);
		}
		return typeVar.vtype;
	}
	def substituteTypeParam(typeParam: TypeParamType) -> Type {
		return typeParam;
	}
}
// Represents the substitution of type arguments for type parameters
class TypeArgs(typeEnv: TypeEnv, types: Array<Type>) extends TypeSubst {
	new() { if(typeEnv == null) var x=1/0; }
	def substituteTypeVar(typeVar: TypeVarType) -> Type {
		return typeVar;
	}
	def substituteTypeParam(typeParam: TypeParamType) -> Type {
		if (types != null) {
			var index = typeParam.index, typeParamArray = typeEnv.paramArray;
			if (index < typeParamArray.length) {
				if (typeParam == typeParamArray[index]) return types[index];
			}
		}
		return typeParam;
	}
	def copy(ntypes: Array<Type>) -> TypeArgs {
		return TypeArgs.new(typeEnv, ntypes);
	}
	def render(buffer: StringBuilder) -> StringBuilder {
		buffer.putc('<');
		var unbound = (types == null);
		for (i < typeEnv.paramArray.length) {
			if (i > 0) buffer.csp();
			if (unbound) {
				typeEnv.paramArray[i].render(buffer);
				buffer.puts("=?");
			} else {
				types[i].render(buffer);
			}
		}
		buffer.putc('>');
		return buffer;
	}
}
