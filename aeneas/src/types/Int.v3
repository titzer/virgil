// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utility methods for working with ints, including parsing and rendering,
// as well as the representation of the "int" type in the compiler
component Int {
	def MAX_WIDTH = 64;
	private def cache = Array<IntType>.new(2 * MAX_WIDTH + 1);
	def TYPE      = getType(true, 32);
	def ARRAY_T: Array<Type> = [TYPE];
	def ZERO      = Box.new(0);
	def ONE       = Box.new(1);
	def TWO       = Box.new(2);
	def FOUR      = Box.new(4);
	def MINUS_1   = Box.new(-1);
	def MAX_VALUE = 2147483647;
	def MIN_VALUE = -2147483648;
	def VIEW_TYPE_PARAM_LIST = List.new(TypeUtil.newTypeParamWithConstraint(TypeUtil.BUILTIN_TOKEN, TypeUtil.globalCache,
		true, checkIntViewTypeArg(-1, _, _)), null);
	def VIEW_TYPE_PARAM_LIST_32 = List.new(TypeUtil.newTypeParamWithConstraint(TypeUtil.BUILTIN_TOKEN, TypeUtil.globalCache,
		true, checkIntViewTypeArg(32, _, _)), null);
	def VIEW_TYPE_PARAM_LIST_64 = List.new(TypeUtil.newTypeParamWithConstraint(TypeUtil.BUILTIN_TOKEN, TypeUtil.globalCache,
		true, checkIntViewTypeArg(64, _, _)), null);

	def getType(signed: bool, width: int) -> IntType {
		if (width <= 0 || width > MAX_WIDTH) return null;
		var index = if (signed, width, width + MAX_WIDTH);
		var t = cache[index];
		if (t == null) t = cache[index] = IntType.!(Int_TypeCon.new(byte.view(width), signed).singleton);
		return t;
	}
	def getTypeCon(signed: bool, width: int) -> Int_TypeCon {
		var t = getType(signed, width);
		return if(t != null, Int_TypeCon.!(t.typeCon));
	}
	def lookupFsi(name: string, signed: bool) -> Int_TypeCon {
		if (name.length < 2 || name.length > 3) return null;
		var width = name[1] - int.view('0');
		if (width < 1 || width > 9) return null;
		if (name.length == 3) {
			var low = name[2] - int.view('0');
			if (low < 0 || low > 9) return null;
			width = width * 10 + low;
		}
		return getTypeCon(signed, width);
	}
	def unbox(val: Val) -> int {
		if (val == null) return 0;
		return Box<int>.!(val).val;
	}
	def box(val: int) -> Box<int> {
		return Box.new(val);
	}
	def newMap<V>() -> HashMap<int, V> {
		return HashMap<int, V>.new(int.!<int>, int.==);
	}
	// convert a width and a signed-ness into the name of the integer type
	def name(width: byte, signed: bool) -> string {
		if (width == 16 && signed) return "short";
		if (width == 32 && signed) return "int";
		if (width == 64 && signed) return "long";
		if (width == 8 && !signed) return "byte";
		if (width < 10) return [if(signed, 'i', 'u'), byte.view('0' + width)];
		return [if(signed, 'i', 'u'), byte.view('0' + (width / 10)), byte.view('0' + (width % 10))];
	}
	def rankOf(width: byte, signed: bool) -> IntRank {
		if (width < 32) return if(signed, IntRank.SUBI32, IntRank.SUBU32);
		if (width == 32) return if(signed, IntRank.I32, IntRank.U32);
		if (width < 64) return if(signed, IntRank.SUBI64, IntRank.SUBU64);
		return if(signed, IntRank.I64, IntRank.U64);
	}
}
// Useful classification of integer sizes for 32 and 64-bit machines.
enum IntRank {
	SUBI32,  // signed, < 32 bits
	I32,     // signed, 32 bit
	SUBI64,  // signed, 32 < bits < 64
	I64,     // signed, 64 bit
	SUBU32,  // unsigned, < 32 bits
	U32,     // unsigned, 32 bits
	SUBU64,  // unsigned, 32 < bits < 64
	U64      // unsigned, 64 bits
}
// Utility methods for working with longs.
component Long {
	def TYPE = Int.getType(true, 64);
	def unboxSU(val: Val, signed: bool) -> long {
		if (val == null) return 0;
		if (Box<long>.?(val)) return Box<long>.!(val).val;
		if (Box<int>.?(val)) {
			var v = Box<int>.!(val).val;
			return if(signed, v, u32.view(v));
		}
		return V3.fail("expected integer box");
	}
	def split(val: long) -> (int, int) {
		return (int.view(val >> 32), int.view(val));
	}
	def box(val: long) -> Box<long> {
		return if(val != 0, Box.new(val));
	}
	def hash(val: long) -> int {
		return int.view(val) ^ int.view(val >> 32);
	}
}
// Type constructor for integral types, including a width and a signed-ness attribute.
class Int_TypeCon extends TypeCon {
	new(width: byte, signed: bool) super(Int.name(width, signed), V3Kind.INT, 0, TypeUtil.globalCache) {
		singleton = IntType.new(width, signed, this);
	}
}
class IntType extends Type {
	def width: byte;  // width in bits (1-64)
	def signed: bool; // true if signed, false if unsigned
	def size = byte.view((7 + width) >> 3);
	def rank = Int.rankOf(width, signed);
	def ishift = u5.view(32 - width);
	def lshift = u6.view(64 - width);
	private var cache: IntOpCache;
	var max: Val;
	var min: Val;

	new(width, signed, typeCon: Int_TypeCon) super(typeCon.uid, typeCon, null) {
		if (width <= 32) {
			min = if(signed, Box<int>.new(-1 << (width - byte.view(1))));
			max = Box<int>.new(-1 ^ (0xFFFFFFFF << (width - if(signed, byte.view(1)))));
		} else {
			min = if(signed, Box<long>.new(-1L << (width - byte.view(1))));
			max = Box<long>.new(-1L ^ (0xFFFFFFFFFFFFFFFFL << (width - if(signed, byte.view(1)))));
		}
	}
	def opcache() -> IntOpCache {
		if (cache == null) return cache = IntOpCache.new(this);
		return cache;
	}
	def box(v: int) -> Val {
		if (v == 0) return null;
		if (width > 32) return Box<long>.new(v);
		return Box.new(v);
	}
	def boxL(v: long) -> Val {
		if (v == 0) return null;
		return Box.new(v);
	}
	def byteSize() -> int {
		if (width <= 8) return 1;
		if (width <= 16) return 2;
		if (width <= 32) return 4;
		return 8;
	}
	def packedByteSize() -> int {
		return (width + 7) >> 3;
	}
	def opEq() -> Operator { return opcache().compare(V3Infix.EqEq, Opcode.IntEq); }
	def opLt() -> Operator { return opcache().compare(V3Infix.Lt, Opcode.IntLt); }
	def opLtEq() -> Operator { return opcache().compare(V3Infix.LtEq, Opcode.IntLteq); }
	def opAdd() -> Operator { return opcache().arith(V3Infix.Add, Opcode.IntAdd); }
	def opSub() -> Operator { return opcache().arith(V3Infix.Sub, Opcode.IntSub); }
	def opMul() -> Operator { return opcache().arith(V3Infix.Mul, Opcode.IntMul); }
	def opDiv() -> Operator { return opcache().arith(V3Infix.Div, Opcode.IntDiv); }
	def opMod() -> Operator { return opcache().arith(V3Infix.Mod, Opcode.IntMod); }
	def opAnd() -> Operator { return opcache().arith(V3Infix.And, Opcode.IntAnd); }
	def opOr() -> Operator { return opcache().arith(V3Infix.Or, Opcode.IntOr); }
	def opXor() -> Operator { return opcache().arith(V3Infix.Xor, Opcode.IntXor); }
	def opShl() -> Operator { return opcache().shift(V3Infix.Shl, Opcode.IntShl); }
	def opSar() -> Operator { return opcache().shift(V3Infix.Sar, if(signed, Opcode.IntSar, Opcode.IntShr)); }
	def opShr() -> Operator { return opcache().shift(V3Infix.Shr, Opcode.IntShr); }
	def unsigned() -> IntType {
		return if(signed, Int.getType(false, width), this);
	}
	def wider(rtype: Type) -> IntType {
		if (rtype == this) return this;
		if (IntType.?(rtype)) {
			var that = IntType.!(rtype);
			if (this.width < that.width) {
				if (this.signed == that.signed) return that;
				if (this.signed) return null;
				return that;
			}
			if (that.width < this.width) {
				if (this.signed == that.signed) return this;
				if (that.signed) return null;
				return this;
			}
		}
		return null;
	}
	def widerUnsigned(rtype: Type) -> IntType {
		if (rtype == this && !signed) return this;
		if (IntType.?(rtype)) {
			var that = IntType.!(rtype);
			var max = if(this.width > that.width, this, that).width;
			return Int.getType(false, max);
		}
		return null;
	}
	def viewi(i: int) -> int {
		if (signed) return (i << ishift) >> ishift;
		return (i << ishift) >>> ishift;
	}
	def viewu(i: u32) -> u32 {
		if (signed) return u32.view(int.view(i << ishift) >> ishift);
		return (i << ishift) >>> ishift;
	}
	def viewl(l: long) -> long {
		if (signed) return (l << lshift) >> lshift;
		return (l << ishift) >>> lshift;
	}
	def viewq(l: u64) -> u64 {
		if (signed) return u64.view(long.view(l << lshift) >> lshift);
		return (l << ishift) >>> lshift;
	}
}
// A cache of integer arithmetic operators that is referenced from the TypeCon.
class IntOpCache(it: IntType) {
	def typeArgs: Array<Type> = [it];
	def tupleType = Tuple.newType(Lists.cons2(it, it));
	def binopSig = Function.sig(tupleType, it);
	def cmpSig = Function.sig(tupleType, Bool.TYPE);
	def cache = Array<Operator>.new(V3Infix.None.tag + 1);

	def compare(infix: V3Infix, opcode: Opcode) -> Operator {
		var op = cache[infix.tag];
		if (op != null) return op;
		return cache[infix.tag] = Operator.new(opcode, typeArgs, cmpSig);
	}
	def arith(infix: V3Infix, opcode: Opcode) -> Operator {
		var op = cache[infix.tag];
		if (op != null) return op;
		return cache[infix.tag] = Operator.new(opcode, typeArgs, binopSig);
	}
	def shift(infix: V3Infix, opcode: Opcode) -> Operator {
		var op = cache[infix.tag];
		if (op != null) return op;
		return cache[infix.tag] = Operator.new(opcode, typeArgs, Function.siga([it, Byte.TYPE], it));
	}
}

def checkIntOpTypeArg(op: string, tv: TypeVarType, t: Type) -> Type {
	match (t) {
		x: FloatType => return t;
		x: IntType => return t;
	}
	if (!tv.error) {
		tv.error = true;
		tv.error_msg = Strings.format1("%s requires integral type argument", op);
	}
	return null;
}
def checkIntViewTypeArg(width: int, tv: TypeVarType, t: Type) -> Type {
	match (t) {
		x: IntType => return t;
		x: FloatType => if (x.total_width == width) return t;
	}
	if (!tv.error) {
		tv.error = true;
		tv.error_msg = Strings.format1("view requires integral or %d-bit float type argument", width);
	}
	return null;
}