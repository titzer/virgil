// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Class that manages the representation of the Virgil heap when targeting the JVM.
class JvmHeap(jprog: JvmProgram) {
	def instrs = Vector<JvmHI>.new();
	var jvmRecords: Array<JvmHI_Record>;
	var heapBuilder: JvmClassfileBuilder;
	var fieldID: int;
	var recursionDepth = 0;

	new() {
		var name = jprog.mangleTypeName("V3H_", jprog.prog.getMain().receiver);
		var heapClass = JvmClass.new(name, JvmTypes.jlo);
		heapBuilder = JvmClassfileBuilder.new(jprog, heapClass);
		jvmRecords = Array<JvmHI_Record>.new(jprog.prog.recordCount);
	}
	def emitValue(code: JvmCodeBuilder, etype: Type, val: Val) {
		if (FuncVal.?(val)) return emitFunctionValue(code, etype, FuncVal.!(val));
		match (etype.typeCon.kind) {
			BOOL =>		code.iconst(Bool.toInt(Bool.unbox(val)));
			ENUM_SET =>	emitIntValue(code, V3.getEnumSetType(etype), val);
			ENUM =>		emitIntValue(code, V3.getVariantTagType(etype), val);
			INT =>		emitIntValue(code, IntType.!(etype), val);
			FLOAT =>	emitFloatValue(code, FloatType.!(etype), val);
			ARRAY,
			VARIANT,
			CLASS =>	emitRecordValue(code, Record.!(val));
			ANYFUNC,
			FUNCREF =>	emitFunctionValue(code, etype, FuncVal.!(val));
			VOID,
			COMPONENT =>	; // emit nothing
		} else {
			var buf = StringBuilder.new().puts("unexpected value: ");
			V3.renderResult(val, etype, buf);
			buf.puts(" of type ");
			etype.render(buf);
			jprog.context.fail(buf.toString());
		}
	}
	private def emitIntValue(code: JvmCodeBuilder, tt: IntType, val: Val) {
		if (tt.byteSize <= 4) code.iconst(V3.unboxI32(val));
		else code.lconst(Long.unboxSU(val, tt.signed));
	}
	private def emitFloatValue(code: JvmCodeBuilder, ft: FloatType, val: Val) {
		if (ft.is64) {
			code.dconst(if(val == null, 0, Float64Val.!(val).bits));
		} else {
			code.fconst(if(val == null, 0, Float32Val.!(val).bits));
		}
	}
	private def emitFunctionValue(code: JvmCodeBuilder, etype: Type, fval: FuncVal) {
		if (fval == null) return code.aconst_null();
		var jclass = jprog.newClosure(fval.memberRef);
		code.getstatic(jclass, "instance", jclass);
		var exactType = fval.memberRef.getFuncType();
		if (exactType != etype) emitFunctionConversion(code, exactType, etype);
	}
	private def emitRecordValue(code: JvmCodeBuilder, rval: Record) {
		if (rval == null) return code.aconst_null();
		var jrec = makeRecord(rval, ROOT);
		makeField(jrec);
		jrec.emitGetField(this, code);
	}
	def emitJvmTypeConversion(code: JvmCodeBuilder, exactType: Type, implicitType: Type) {
		if (implicitType != exactType) {
			if (V3.isTuple(implicitType)) {
				// convert a tuple by deconstructing and reconstructing it
				emitTupleConversion(code, exactType, implicitType);
			} else if (V3.isFunction(implicitType) && exactType != Null.TYPE) {
				// convert a closure by wrapping it in a special invoker
				emitFunctionConversion(code, exactType, implicitType);
			} else if (V3.isClass(implicitType) || V3.isVariant(implicitType)) {
				if (!jprog.isSubclass(exactType, implicitType)) {
					// object type subsumption is implicit on the Jvm, except downcasts
					code.checkcast(jprog.jvmClass(implicitType));
				}
			}
			// (byte -> int) is implicit on the Jvm
		}
	}
	def emitTupleConversion(code: JvmCodeBuilder, exactType: Type, implicitType: Type) {
		var xt = Tuple.toTypeArray(exactType), it = Tuple.toTypeArray(implicitType);
		var tvar = code.max_locals++;
		code.store(JvmTypes.KIND_OBJECT, tvar);
		var xc = JvmClass.!(jprog.jvmType(exactType));
		var ic = JvmClass.!(jprog.jvmType(implicitType));
		code.newobject(ic);
		code.dup();
		for (i < xt.length) {
                        var fname = Strings.format1("f%d", i);
                        code.load(JvmTypes.KIND_OBJECT, tvar);
                        code.getfield(xc, fname, jprog.jvmType(xt[i]));
                        emitJvmTypeConversion(code, xt[i], it[i]);
		}
		var ftype = Function.newType(implicitType, implicitType);
		code.invokestatic(ic.name, "$new", jprog.jvmSig(ftype));
	}
	def emitFunctionConversion(code: JvmCodeBuilder, exactType: Type, implicitType: Type) {
		if (implicitType == AnyRef.TYPE) return;
		if (implicitType == AnyFunction.TYPE) return;
		var adapter = jprog.newClosureAdapter(exactType, implicitType);
		code.invokestatic(adapter.builder.jclass.name, "$new", adapter.initSig);
	}
	def emit() {
		var clinit_method = heapBuilder.newMethod("<clinit>", "()V");
		var clinit_code = heapBuilder.newCodeBuilder();
		clinit_method.setFlag(true, JvmConstant.ACC_STATIC);
		var ovf_count = 0;

		var last_split_pos = -1; // the last position at which a split could occur
		var max_size = CLOptions.JVM_HEAP_INIT_METH_SIZE.val;
		for (j < instrs.length) {
			var pos = clinit_code.cur_pos;
			var i = instrs[j];
			if (i == null) { // null is used to signal a possible split point
				last_split_pos = pos;
				continue;
			}
			i.emitInit(this, clinit_code);

			// Check if the code exceeds the maximum size and split the method if so.
			if (clinit_code.cur_pos > max_size) {
				// create an overflow method
				var name = StringBuilder.new().put1("clinit%d", ovf_count++).toString();
				var ovf_method = heapBuilder.newMethod(name, "()V");
				ovf_method.setFlag(true, JvmConstant.ACC_STATIC);

				// Split previous method at last split point
				var ovf_code = clinit_code.splitAt(last_split_pos);

				// Finish previous method
				clinit_code.invokestatic(heapBuilder.jclass.name, name, JvmTypes.SIG_VOID);
				clinit_code.retvoid();
				clinit_code.attach(clinit_method);

				// Switch to new method
				clinit_method = ovf_method;
				clinit_code = ovf_code;
			}
		}

		clinit_code.retvoid();
		clinit_code.attach(clinit_method);
		jprog.emitJvmClassfile(heapBuilder.file);
	}
	private def nameOf(i: JvmHI) -> string {
		match (i) {
			x: JvmHI_Value => return "val";
			x: JvmHI_NewArray => return "newarray";
			x: JvmHI_String => return "string";
			x: JvmHI_ArrayIndex => return "arrayindex";
			x: JvmHI_ArrayStore => return "arraystore";
			x: JvmHI_UselessArray => return "uselessarray";
			x: JvmHI_InitObject => return "initobject";
			x: JvmHI_Load => return "load";
		}
		return "unknown";
	}
	private def makeField(jrec: JvmHI_Record) {
		if (jrec.fname == null) {
			jrec.fname = Strings.format1("r%d", fieldID++);
			var fld = heapBuilder.newField(jrec.fname, jrec.jtype.descriptor());
			fld.setFlag(true, JvmConstant.ACC_STATIC);
		}
	}
	private def isSimpleString(rval: Record) -> bool {
		var values = rval.values, str = Array<byte>.new(values.length);
		for (i < values.length) {
			var ch = Byte.unbox(values[i]);
			if (ch <= '\x00' || ch > '~') return false;
		}
		return true;
	}
	private def makeRecord(rval: Record, link: JvmHI_Link) -> JvmHI_Record {
		if (rval.id >= jvmRecords.length) jvmRecords = Arrays.grow(jvmRecords, rval.id + 1);
		var jrec = jvmRecords[rval.id];
		if (jrec == null) {
			// Not seen yet. Recurse on the contents of the record if necessary.
			var jtype = jprog.jvmType(rval.rtype);
			jrec = JvmHI_Record.new(rval, jtype);
			jvmRecords[rval.id] = jrec;
			jrec.onstack = true;
			var t = rval.rtype;
			if (jprog.isUselessArray(t)) {
				// Allocate a useless array as an integer box.
				instrs.put(JvmHI_UselessArray.new(jrec, jrec.rval.values.length));
			} else if (V3.isString(t) && isSimpleString(rval)) {
				// Emit the bytes as a string constant instead of a byte-by-byte init.
				var str = Arrays.map(rval.values, Byte.unbox);
				instrs.put(JvmHI_String.new(jrec, str));
			} else if (V3.isArray(t)) {
				// Emit the array allocation, then recurse on elements.
				var etype = V3Array.elementType(rval.rtype);
				var jetype = jprog.jvmType(etype);
				var narray = JvmHI_NewArray.new(jrec, jetype, rval.values.length);
				instrs.put(narray);
				var values = rval.values;
				for (i < values.length) {
					var val = values[i];
					if (!Values.equal(val, Values.BOTTOM)) {
						// initialize non-default array elements.
						instrs.put(JvmHI_ArrayIndex.new(i));
						makeValue(val, etype, JvmHI_Link(jrec, i));
						instrs.put(JvmHI_ArrayStore.new(jetype));
						jrec.inner = true;
					}
				}
			} else {
				// Recurse on the fields of an object, then emit the object allocation.
				var ctype = rval.rtype;
				var ic = jprog.prog.ir.getIrClass(ctype);
				var values = rval.values;
				for (i < values.length) {
					makeValue(values[i], ic.fields[i].fieldType, JvmHI_Link(jrec, i));
				}
				instrs.put(JvmHI_InitObject.new(jrec, "$heap", jprog.makeHeapSig(ctype)));
			}
			if (link.referrer == null) instrs.put(null); // mark as possible split point
			else jrec.inner = true;
			jrec.onstack = false;
		} else if (jrec.onstack) {
			// this reference created a cycle; record it; break the cycle with null
			makeField(link.referrer);
			jrec.inner = true;
			jrec.cycles = List.new(link, jrec.cycles);
			instrs.put(JvmHI_Value.new(Values.BOTTOM, rval.rtype));
		} else if (link.referrer != null) {
			// Load onto the stack if a link is present
			makeField(jrec);
			instrs.put(JvmHI_Load.new(jrec));
		}

		return jrec;
	}
	private def makeValue(val: Val, vtype: Type, link: JvmHI_Link) {
		match (val) {
			rval: Record => makeRecord(rval, link);
			_ => instrs.put(JvmHI_Value.new(val, vtype));
		}
	}
}

// Tracks the incoming link for the recursive exploration of the object graph
type JvmHI_Link(referrer: JvmHI_Record, index: int) #unboxed;

def ROOT: JvmHI_Link;

class JvmHI {
	def emitInit(heap: JvmHeap, code: JvmCodeBuilder);
}

class JvmHI_Value(val: Val, vtype: Type) extends JvmHI {
	def emitInit(heap: JvmHeap, code: JvmCodeBuilder) {
		heap.emitValue(code, vtype, val);
	}
}

class JvmHI_String(rec: JvmHI_Record, str: Array<byte>) extends JvmHI {
	def emitInit(heap: JvmHeap, code: JvmCodeBuilder) {
		code.ldc(heap.heapBuilder.newString(str));
		code.invokevirtual(JvmTypes.java_lang_String.name, "getBytes", JvmTypes.SIG_VOID_BYTE_ARRAY);
		rec.emitPutField(heap, code, rec.jtype);
	}
}

class JvmHI_ArrayIndex(index: int) extends JvmHI {
	def emitInit(heap: JvmHeap, code: JvmCodeBuilder) {
		code.dup();
		code.iconst(index);
	}
}

class JvmHI_ArrayStore(jtype: JvmType) extends JvmHI {
	def emitInit(heap: JvmHeap, code: JvmCodeBuilder) {
		code.astore(jtype.kind);
	}
}

class JvmHI_UselessArray(rec: JvmHI_Record, length: int) extends JvmHI {
	def emitInit(heap: JvmHeap, code: JvmCodeBuilder) {
		code.newobject(JvmTypes.java_lang_Integer);
		code.dup();
		code.iconst(length);
		code.invokespecial(JvmTypes.java_lang_Integer.name, "<init>", JvmTypes.SIG_INT_VOID);
		rec.emitPutField(heap, code, rec.jtype);
	}
}

class JvmHI_InitObject(rec: JvmHI_Record, mname: string, sig: JvmSig) extends JvmHI {
	def emitInit(heap: JvmHeap, code: JvmCodeBuilder) {
		code.invokestatic(rec.jtype.name, mname, sig);
		rec.emitPutField(heap, code, rec.jtype);
		rec.emitFinishCycles(heap, code);
	}
}

class JvmHI_Load(jrec: JvmHI_Record) extends JvmHI {
	def emitInit(heap: JvmHeap, code: JvmCodeBuilder) {
		code.getstatic(heap.heapBuilder.jclass, jrec.fname, jrec.jtype);
	}
}

class JvmHI_NewArray(rec: JvmHI_Record, jtype: JvmType, length: int) extends JvmHI {
	def emitInit(heap: JvmHeap, code: JvmCodeBuilder) {
		code.iconst(length);
		code.newarray(jtype);
		rec.emitPutField(heap, code, rec.jtype);
		rec.emitFinishCycles(heap, code);
	}
}

class JvmHI_Record(rval: Record, jtype: JvmType) {
	var fname: string;
	var inner: bool;
	var onstack: bool;
	var cycles: List<JvmHI_Link>;

	def emitFinishCycles(heap: JvmHeap, code: JvmCodeBuilder) {
		for (l = cycles; l != null; l = l.tail) {
			var link = l.head;
			code.dup();
			link.referrer.emitFinishCycle(heap, code, link.index);
		}
		cycles = null;
	}
	def emitFinishCycle(heap: JvmHeap, code: JvmCodeBuilder, index: int) {
		if (V3.isClass(rval.rtype)) {
			// an object; emit a write to the appropriate field
			emitGetField(heap, code);
			var ic = heap.jprog.prog.ir.getIrClass(rval.rtype);
			var f = ic.fields[index];
			var ftype = heap.jprog.jvmClass(f.fieldType);
			code.swap();
			code.putfield(JvmClass.!(jtype), V3.mangleIrMember(f), ftype);
		} else {
			// an array; emit a write to the appropriate array element
			emitGetField(heap, code);
			code.swap();
			code.iconst(index);
			code.swap();
			code.astore(JvmTypes.KIND_OBJECT);
		}
	}
	def emitGetField(heap: JvmHeap, code: JvmCodeBuilder) {
		code.getstatic(heap.heapBuilder.jclass, fname, jtype);
	}
	def emitPutField(heap: JvmHeap, code: JvmCodeBuilder, jtype: JvmType) {
		if (fname != null) {
			if (inner) code.dup();
			code.putstatic(heap.heapBuilder.jclass, fname, jtype);
		}
	}
}
