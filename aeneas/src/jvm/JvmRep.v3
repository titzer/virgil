// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Manages the translation of Virgil types to JVM types
class JvmTypeReps(jprog: JvmProgram) {
	def jvmReps    = TypeUtil.newTypeMap<JvmType>();
	def jvmClasses = TypeUtil.newTypeMap<JvmClass>();
	def jvmComps   = Strings.newMap<Type>();

	def getRep(utype: Type) -> JvmType {
		var jtype = jvmReps[utype];
		if (jtype == null) jvmReps[utype] = jtype = makeRep(utype);
		return jtype;
	}
	def makeRep(utype: Type) -> JvmType {
		match (utype.typeCon.kind) {
			VOID => return JvmTypes.VOID;
			BOOL => return JvmTypes.BOOLEAN;
			INT => return getJvmIntType(IntType.!(utype));
			FLOAT => {
				return if(V3.isDouble(utype), JvmTypes.DOUBLE, JvmTypes.FLOAT);
			}
			ENUM => return getJvmIntType(V3.getVariantTagType(utype));
			ENUM_SET => return getJvmIntType(V3.getEnumSetType(utype));
			ARRAY => return makeJvmArray(utype);
			COMPONENT => return makeJvmComponent(utype);
			VARIANT,
			CLASS => {
				if (utype == Null.TYPE || utype == AnyRef.TYPE) return JvmTypes.java_lang_Object;
				var superType = V3.getSuperType(utype);
				var srep = if(superType != null, getRep(superType));
				return makeJvmClass(srep, utype);
			}
			FUNCREF => return makeJvmFunction(utype);
			ANYFUNC => return JvmTypes.java_lang_Object;
			TUPLE => return makeJvmTuple(utype);
			_ => ; // TODO: error?
		}
		jprog.context.fail1("unknown type: %q", utype.render);
		return JvmTypes.INT;
	}
	def getJvmIntType(tt: IntType) -> JvmType {
		match(tt.size) {
			1 => return if(tt == Byte.TYPE, JvmTypes.UBYTE, JvmTypes.BYTE);
			2 => return if (tt.signed, JvmTypes.SHORT, JvmTypes.CHAR);
			3, 4 => return JvmTypes.INT;
			5, 6, 7, 8 => return JvmTypes.LONG;
		}
		jprog.context.fail1("unexpected integer type: %q", tt.render);
		return JvmTypes.INT;
	}
	def getJvmClass(utype: Type) -> JvmClass {
		var rep = getRep(utype);
		if (JvmClass.?(rep)) return JvmClass.!(rep);
		return jvmClasses[utype]; // TODO: a hack for component types
	}
	private def makeJvmClass(superRep: JvmType, utype: Type) -> JvmType {
		var ic = jprog.prog.ir.getIrClass(utype);
		var className = jprog.mangleTypeName("V3C_", utype);
		var superName = JvmTypes.jlo;
		if (superRep != null) superName = superRep.name;
		var jclass = JvmClass.new(className, superName);
		jvmClasses[utype] = jclass;
		jprog.classQueue.put(JvmV3ClassGen.new(JvmClassfileBuilder.new(jprog, jclass), utype, ic));
		return jclass;
	}
	private def makeJvmComponent(utype: Type) -> JvmType {
		var ic = jprog.prog.ir.getIrClass(utype);
		var className = jprog.mangleTypeName("V3K_", utype);
		var ptype = jvmComps[className];
		if (ptype != null && ptype != utype) {
			// prevent name clashes between synthetic components and explicit components
			className = Strings.builderOf(className).putd(utype.hash).toString();
		}
		var jclass = JvmClass.new(className, JvmTypes.jlo);
		jvmClasses[utype] = jclass;
		jvmComps[className] = utype;
		jprog.classQueue.put(JvmV3ComponentGen.new(JvmClassfileBuilder.new(jprog, jclass), utype, ic));
		return JvmTypes.VOID;
	}
	private def makeJvmArray(utype: Type) -> JvmType {
		var elemRep = getRep(utype.nested.head);
		var jtype: JvmType = JvmTypes.java_lang_Integer;
		if (elemRep.kind.width > 0) jtype = elemRep.arrayType();
		return jtype;
	}
	private def makeJvmTuple(utype: Type) -> JvmType {
		var className = jprog.mangleTypeName("V3T_", utype);
		var jclass = JvmClass.new(className, JvmTypes.jlo);
		jvmClasses[utype] = jclass;
		jprog.classQueue.put(JvmV3TupleGen.new(JvmClassfileBuilder.new(jprog, jclass), utype));
		return jclass;
	}
	private def makeJvmFunction(utype: Type) -> JvmType {
		var className = jprog.mangleTypeName("V3F_", Function.CLOSURE.create(utype.nested));
		var superName = jprog.makeAbstractClosureClass().builder.jclass.name;
		var jclass = JvmClass.new(className, superName);
		jvmClasses[utype] = jclass;
		jprog.classQueue.put(JvmV3ClosureGen.new(JvmClassfileBuilder.new(jprog, jclass), utype, null, 0));
		return jclass;
	}
	def emitGetField(memberRef: IrSpec, code: JvmCodeBuilder) {
		var fieldType = memberRef.getFieldType();
		var r = getRep(fieldType);
		var isStatic = V3.isComponent(memberRef.receiver);
		var jclass = getJvmClass(memberRef.receiver);
		var fieldName = V3.mangleIrMember(memberRef.member);
		if (isStatic) code.getstatic(jclass, fieldName, r);
		else code.getfield(jclass, fieldName, r);
		if (r == JvmTypes.BYTE && !V3.isSigned(fieldType)) code.inl_izx(8);
	}
	def emitSetField(memberRef: IrSpec, code: JvmCodeBuilder, asVal: bool) {
		var r = getRep(memberRef.getFieldType());
		var isStatic = V3.isComponent(memberRef.receiver);
		var jclass = getJvmClass(memberRef.receiver);
		var fieldName = V3.mangleIrMember(memberRef.member);
		if (isStatic) {
			if (asVal) code.dupK(r.kind);
			code.putstatic(jclass, fieldName, r);
		} else {
			if (asVal) {
				code.dup_x1();
				if (r.kind.width > 1) code.dup_x1();
			}
			code.putfield(jclass, fieldName, r);
		}
	}
	def declareField(f: IrField, builder: JvmClassfileBuilder, static: bool) {
		var rep = getRep(f.fieldType);
		if (rep.kind.width > 0) {
			var jf = builder.newField(V3.mangleIrMember(f), rep.descriptor());
			if (static) {
				jf.setFlag(true, JvmConstant.ACC_STATIC + JvmConstant.ACC_PUBLIC);
				if (f.facts.F_VALUE) jf.setFlag(true, JvmConstant.ACC_FINAL);
			}
		}
	}
	def emitTupleCreate(t: Type, code: JvmCodeBuilder) {
		code.invokestatic(getJvmClass(t).name, "$new", jprog.jvmSig(Function.newType(t, t)));
	}
	def emitTupleGetElem(t: Type, index: int, code: JvmCodeBuilder) {
		var jclass = getJvmClass(t);
		var elemType = Lists.get(t.nested, index);
		// for now, we can assume that tuples are never null,
		// since they are only produced on return from a method
		code.getfield(jclass, Strings.format1("f%d", index), jprog.jvmType(elemType));
		zeroExtendSignedByte(elemType, code);
	}
	def emitArrayGetLength(arrayType: Type, code: JvmCodeBuilder) {
		var rep = getRep(arrayType);
		if (rep == JvmTypes.java_lang_Integer) {
			code.invokevirtual(JvmTypes.java_lang_Integer.name, "intValue", JvmTypes.SIG_VOID_INT);
		} else {
			code.arraylength();
		}
	}
	def emitArrayGetElem(arrayType: Type, code: JvmCodeBuilder) {
		var elemType = V3Array.elementType(arrayType), elemRep = getRep(elemType);
		if (elemRep.kind.width == 0) {
			emitExplicitBoundsCheck(arrayType, code);
		} else {
			code.aload(elemRep.kind);
			zeroExtendSignedByte(elemType, code);
		}
	}
	def zeroExtendSignedByte(t: Type, code: JvmCodeBuilder) {
		if (t == Byte.TYPE) return code.inl_izx(8);
		if (EnumType.?(t)) {
			t = EnumType.!(t).enumDecl.tagType;
			if (t == Byte.TYPE) return code.inl_izx(8);
		}
	}
	def emitArraySetElem(arrayType: Type, code: JvmCodeBuilder, asVal: bool) {
		var elemRep = getRep(V3Array.elementType(arrayType));
		if (elemRep.kind.width == 0) {
			emitExplicitBoundsCheck(arrayType, code);
		} else {
			if (asVal) {
				code.dup_x2();
				if (elemRep.kind.width > 1) code.dup_x2();
			}
			code.astore(elemRep.kind);
		}
	}
	def emitArrayAlloc(arrayType: Type, code: JvmCodeBuilder) {
		var elemRep = getRep(V3Array.elementType(arrayType));
		if (elemRep.kind.width == 0) {
			code.dup();
			emitExplicitArraySizeCheck(code);
			code.invokestatic(JvmTypes.java_lang_Integer.name, "valueOf", JvmTypes.SIG_INT_INTEGER);
		} else {
			code.newarray(elemRep);
		}
	}
	def emitExplicitBoundsCheck(arrayType: Type, code: JvmCodeBuilder) {
		var rep = getRep(arrayType);
		var height = code.cur_stack;
		if (rep == JvmTypes.java_lang_Integer) {
			code.swap();
			code.invokevirtual(JvmTypes.java_lang_Integer.name, "intValue", JvmTypes.SIG_VOID_INT);
		} else {
			code.swap();
			code.arraylength();
		}
		code.dup();
		code.iconst(0);
		var b1 = code.branch_fw(JvmBytecode.IF_ICMPGE);
		emitThrow(code, JvmTypes.java_lang_ArrayIndexOutOfBoundsException);
		code.patchBranch(b1);
		var b2 = code.branch_fw(JvmBytecode.IF_ICMPLT);
		emitThrow(code, JvmTypes.java_lang_ArrayIndexOutOfBoundsException);
		code.patchBranch(b2);
		code.cur_stack = height - 2;
	}
	def emitExplicitArraySizeCheck(code: JvmCodeBuilder) {
		code.iconst(0); // array size is already on stack
		var b = code.branch_fw(JvmBytecode.IF_ICMPGE);
		emitThrow(code, JvmTypes.java_lang_NegativeArraySizeException);
		code.patchBranch(b);
	}
	def emitThrow(code: JvmCodeBuilder, jclass: JvmClass) {
		code.newempty(jclass);
		code.athrow();
	}
	def emitInvokeVirtual(code: JvmCodeBuilder, spec: IrSpec, nonnull: bool) {
		var jclass = jprog.jvmClass(spec.receiver);
		var nsig = jprog.jvmSig(spec.getMethodType());
		var virtualName = V3.mangleIrMember(spec.member);
		code.invokevirtual(jclass.name, virtualName, nsig);
	}
}
