// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// information about a basic block when generating JVM code
class SsaJvmBlock(block: SsaBlock) {
	var codeStart: int = -1;
	var refs: List<int>;
}
// information about an instruction when generating JVM code
class SsaJvmInstr {
	var instr: SsaInstr;		// the ssa instruction
	var kind: JvmKind;		// JVM kind of the result
	var loads: List<SsaInstr>;	// loads inserted after instruction
	var used: bool;
	var store: bool;
}
def TRUNCATE = true;
def NO_TRUNCATE = false;
class SsaJvmCompareBranch {
	def lcmp: bool;
	def op: byte;
	def args: Array<SsaDfEdge>;
	new(lcmp, op, args) { }
}
// Emits JVM code for a method in SSA form.
class SsaJvmGen(jprog: JvmProgram, context: SsaContext, jsig: JvmSig, code: JvmCodeBuilder) {
	def blockMap = LazyMap<SsaBlock, SsaJvmBlock>.new(SsaBlock.uid, SsaBlock.==, SsaJvmBlock.new);

	var instrs: Array<SsaJvmInstr>;	// per-instruction info
	var stack: Array<SsaJvmInstr>;	// abstract stack contents
	var last: Array<SsaJvmInstr>;	// last instruction at each stack height
	var first = SsaJvmInstr.new();	// fake "first" instruction in a basic block
	var curHeight: int;		// current stack height

	var blocks: List<SsaJvmBlock>; // block queue
	var tableSwList: List<(int, Array<SsaCfEdge>)>;
	var ssaDecon: SsaDeconstructor;

	new() {
		ssaDecon = SsaDeconstructor.new(context, allocReg, emitMoveIR, emitMoveRR);
		ssaDecon.reset();
	}
	// emit code for all blocks
	def emit() {
		if (context.method.facts.M_ABSTRACT) return context.fail("is abstract");
		if (context.graph == null) return context.fail("no graph");
		mapParams();
		var start = context.graph.startBlock;
		initState(start.count() + 1);
		blocks = List.new(blockMap[start], null);
		// emit code for each block as it is queued
		while (blocks != null) {
			var b = blocks.head;
			blocks = blocks.tail;
			if (b.codeStart == -1) emitBlock(b);
		}
		// patch any tableswitches
		for (l = tableSwList; l != null; l = l.tail) {
			var s = l.head, succ = Arrays.range(s.1, 0, s.1.length - 1);
			var offsets = Arrays.map(succ, getCodeStart);
			code.patch_tableswitch(s.0, getCodeStart(s.1[s.1.length - 1]), offsets);
		}
	}
	def getCodeStart(e: SsaCfEdge) -> int {
		return blockMap[e.dest].codeStart;
	}
	def initState(size: int) {
		// allocate initial arrays
		stack = Array.new(size);
		last = Array.new(size);
		instrs = Array.new(size);
		for (i < size) instrs[i] = SsaJvmInstr.new();
	}
	// map parameters to java locals
	def mapParams() {
		var index = code.max_locals;
		for (p in context.graph.params) {
			ssaDecon.setReg(p, u31.!(index));
			index = index + jprog.jvmKind(p.vtype).width;
		}
		code.max_locals = index;
	}
	// emit code for a single basic block
	def emitBlock(b: SsaJvmBlock) {
		// mark beginning of block and patch branches to it
		b.codeStart = code.cur_pos;
		for (r = b.refs; r != null; r = r.tail) code.patchBranch(r.head);

		var block = b.block, count = block.count();
		context.block = block;
		// initialize abstract stack and instructions
		if (count >= instrs.length) grow(count + 1);
		curHeight = 0;		// clear stack
		first.loads = null;	// clear loads
		last[0] = first;

		// check for switch instruction combine first
		var cmpBranch = matchCompareBranch(b);
		var end = block.end(), max = 0, last = end.prev;
		// compute the effects on the stack of each instruction
		for (i = block.next; i != last; i = i.next) {
			if (SsaPhi.?(i)) continue;
			computeInstrEffect(block, max++, SsaInstr.!(i));
		}
		if (cmpBranch != null) {
			computeArgLoads(cmpBranch.args);
		} else {
			for (i = last; SsaInstr.?(i); i = i.next) {
				if (SsaPhi.?(i)) continue;
				computeInstrEffect(block, max++, SsaInstr.!(i));
			}
		}

		// use previous results to emit code that uses the Java operand stack well
		if (first.loads != null) emitLoads(first.loads);
		for (j < max) emitCode(block, instrs[j]);
		ssaDecon.genSsaMoves(block);

		// emit the control flow at the end of the block
		if (cmpBranch != null) emitCompareBranch(block, cmpBranch);
		else emitEnd(block, instrs[max - 1]);
		checkStackHeight(block);
	}
	def emitCompareBranch(block: SsaBlock, b: SsaJvmCompareBranch) {
		var b0 = block.succ(0).dest, b1 = block.succ(1).dest;
		if (b.lcmp) code.lcmp();
		emitBranchIf(b.op, b0, b1);
	}
	def compareIntType(t: Type) -> IntType {
		match (t.typeCon.kind) {
			V3Kind.INT => return IntType.!(t);
			V3Kind.VARIANT => return V3.getVariantTagType(t);
			V3Kind.ENUM => return EnumType.!(t).enumDecl.tagType;
			V3Kind.ENUM_SET => return EnumSetType.!(t).repType;
		}
		context.fail("expected integral type");
		return Int.TYPE;
	}
	def matchCompareBranch(b: SsaJvmBlock) -> SsaJvmCompareBranch {
		var block = b.block, end = block.end();
		if (!SsaIf.?(end)) return null;
		// Try to match the key if it is the last instruction in the block.
		var key = end.input0();
		if (key != end.prev) return null;
		if (key.useList.next != null) return null;
		if (!SsaApplyOp.?(key)) return null;
		var i = SsaApplyOp.!(key), lcmp = false, op: byte;
		match (i.op.opcode) {
			BoolEq => op = JvmBytecode.IF_ICMPEQ;
			IntEq => {
				var tt = compareIntType(i.op.typeArgs[0]);
				if (tt.width > 32) { lcmp = true; op = JvmBytecode.IFEQ; }
				else op = JvmBytecode.IF_ICMPEQ;
			}
			RefEq => op = JvmBytecode.IF_ACMPEQ;
			IntLt => {
				var t = i.op.sig.paramTypes[0];
				match (IntType.!(t).rank) {
					SUBI32, SUBU32, I32 => op = JvmBytecode.IF_ICMPLT;
					SUBI64, SUBU64, I64 => { lcmp = true; op = JvmBytecode.IFLT; }
					_ => return null;
				}
			}
			IntLteq => {
				var t = i.op.sig.paramTypes[0];
				match (IntType.!(t).rank) {
					SUBI32, SUBU32, I32 => op = JvmBytecode.IF_ICMPLE;
					SUBI64, SUBU64, I64 => { lcmp = true; op = JvmBytecode.IFLE; }
					_ => return null;
				}
			}
			// XXX: matchCompareBranch() of floating point comparisons
			_ => ;
		}
		return if(op != 0, SsaJvmCompareBranch.new(lcmp, op, i.inputs));
	}
	def checkStackHeight(block: SsaBlock) {
		if (code.cur_stack != 0) {
			context.fail1("B#%d: stack height should be zero", block.uid);
		}
	}
	def grow(size: int) {
		var old = instrs.length;
		var nsize = old + size;
		var n = Arrays.copy(instrs, Array<SsaJvmInstr>.new(nsize));
		for (i = old; i < nsize; i++) n[i] = SsaJvmInstr.new();
		instrs = n;
		// each instruction can push at most 1 element on the stack
		stack = Array.new(nsize);
		last = Array.new(nsize);
	}
	// first pass: compute effect information
	def computeInstrEffect(block: SsaBlock, index: int, i: SsaInstr) {
		// make the instruction
		var sji = instrs[index];
		sji.store = false;
		sji.used = false;
		sji.instr = i;
		sji.loads = null;
		sji.kind = jprog.jvmKind(i.getType());
		// compute where argument loads should occur
		computeArgLoads(getInputs(i));
		if (i.useList != null) {
			sji.store = true;     // might need to store it
			if (sji.kind.width > 0) push(sji); // put it on the stack for possible later use
		}
		last[curHeight] = sji;
	}
	def getInputs(i: SsaInstr) -> Array<SsaDfEdge> {
		if (SsaApplyOp.?(i)) {
			var apply = SsaApplyOp.!(i);
			match (apply.op.opcode) {
				CallMethod(method) => {
					var methodRef = V3Op.extractIrSpec(apply.op, method);
					if (V3.isComponent(methodRef.receiver)) return Arrays.range(i.inputs, 1, i.inputs.length);
				}
				_ => ;
			}
		}
		return i.inputs;
	}
	def computeArgLoads(args: Array<SsaDfEdge>) {
		var loads: List<SsaInstr>, s = 0, nextHeight = curHeight;
		for (j = 0; j < args.length; j++) {
			var a = args[j], i = a.dest;
			if (SsaConst.?(i) || SsaParam.?(i) || SsaPhi.?(i)) {
				// instruction won't be on stack, needs to be loaded
				loads = List.new(i, loads);
				continue;
			}
			var found = false;
			// not a loadable, search stack for this instruction
			while (s < curHeight) {
				var x = stack[s];
				if (x.instr == i) {
					if (loads != null) insertLoadsAfter(last[s], loads);
					if (nextHeight == curHeight) nextHeight = s;
					loads = null;
					markAsConsumed(x, a);
					found = true;
					s++;
					break;
				}
				s++;
			}
			if (!found) {
				// not found on the stack, load everything
				while (j < args.length) {
					loads = List.new(args[j++].dest, loads);
				}
				break;
			}
		}
		if (loads != null) insertLoadsAfter(last[curHeight], loads);
		curHeight = nextHeight;
	}
	def insertLoadsAfter(sji: SsaJvmInstr, loads: List<SsaInstr>) {
		while (loads != null) {
			sji.loads = List.new(loads.head, sji.loads);
			loads = loads.tail;
		}
	}
	def markAsConsumed(sji: SsaJvmInstr, edge: SsaDfEdge) {
		// mark the instruction that produced the value at the stack location as used
		sji.used = true;
		if (edge == sji.instr.useList && edge.next == null) {
			// this is the only use of this instruction, clear STORE
			sji.store = false;
		}
	}
	def push(sji: SsaJvmInstr) {
		stack[curHeight++] = sji;
	}
	// emit actual JVM code for a single instruction
	def emitCode(block: SsaBlock, sji: SsaJvmInstr) {
		// emit loads before this instruction
		var popped = false, i = sji.instr;
		if (SsaApplyOp.?(i)) {
			// emit an apply instruction
			var apply = SsaApplyOp.!(i);
			popped = emitApply(apply, apply.op, bool.||(sji.store, sji.used));
		}
		if (sji.store) {
			// store this into a temp
			if (sji.used) code.dupK(sji.kind);
			code.store(sji.kind, ssaDecon.mapReg(i));
		} else if (!popped && !sji.used) {
			// pop this value off the stack
			code.popK(sji.kind);
		}
		emitLoads(sji.loads);
	}
	def emitEnd(block: SsaBlock, sji: SsaJvmInstr) {
		emitLoads(sji.loads);
		var i = sji.instr;
		match (sji.instr) {
			x: SsaReturn => {
				// JVM cannot return multiple values, box them in a tuple
				if (i.inputs.length > 1) jprog.jrep.emitTupleCreate(context.method.sig.returnType(), code);
				code.ret(jsig.returnType.kind);
			}
			x: SsaIf => emitBranchIf(JvmBytecode.IFNE, x.succs[0].dest, x.succs[1].dest);
			x: SsaGoto => emitGotoOrFallThru(x.succs[0].dest);
			x: SsaSwitch => emitSwitch(block, x);
			x: SsaThrow => emitThrow(x.exception);
			x: SsaNewVar => ; // do nothing
			x: SsaDeleteVar => ; // do nothing
			x: SsaProbe => ; // do nothing
			_ => context.fail("unexpected SSA end type");
		}
	}
	def emitBranchIf(opTrue: byte, tb: SsaBlock, fb: SsaBlock) {
		var ti = blockMap[tb], fi = blockMap[fb];
		if (fi.codeStart < 0) {
			emitBranch(opTrue, ti);
			blocks = List.new(fi, blocks);
			return;
		}
		if (ti.codeStart < 0) {
			emitBranch(inverse(opTrue), fi);
			blocks = List.new(ti, blocks);
			return;
		}
		emitBranch(opTrue, ti);
		emitGotoOrFallThru(fb);
	}
	def emitBranch(opcode: byte, bi: SsaJvmBlock) {
		if (bi.codeStart >= 0) return code.branch_bw(opcode, bi.codeStart);
		bi.refs = List.new(code.branch_fw(opcode), bi.refs);
		blocks = List.new(bi, blocks); // enqueue block
	}
	def emitGotoOrFallThru(block: SsaBlock) {
		var di = blockMap[block];
		if (di.codeStart >= 0) code.goto_bw(di.codeStart); // already visited
		else blocks = List.new(di, blocks); // visit it next (fall through)
	}
	def emitSwitch(block: SsaBlock, sw: SsaSwitch) {
		tableSwList = List.new((code.cur_pos, block.succs()), tableSwList);
		code.tableswitch(0, sw.maxValue);
		var succs = block.succs();
		for (i = succs.length - 1; i >= 0; i--) {  // enqueue successors
			var s = succs[i], di = blockMap[s.dest];
			if (di.codeStart < 0) blocks = List.new(di, blocks);
		}
	}
	def emitLoads(loads: List<SsaInstr>) {
		for (l = loads; l != null; l = l.tail) emitLoad(l.head);
	}
	def emitMoveRR(t: Type, from: int, to: int) {
		var kind = jprog.jvmKind(t);
		code.load(kind, from);
		code.store(kind, to);
	}
	def emitMoveIR(t: Type, from: SsaInstr, to: int) {
		emitLoad(from);
		code.store(jprog.jvmKind(t), to);
	}
	def emitLoad(i: SsaInstr) {
		if (SsaConst.?(i)) code.builder.emitValue(code, i.getType(), SsaConst.!(i).val);
		else code.load(jprog.jvmKind(i.getType()), ssaDecon.mapReg(i));
	}
	// emit a single apply instruction
	def emitApply(i: SsaApplyOp, op: Operator, leave: bool) -> bool {
		var popped = false;
		// arguments are already assumed to be on the stack
		match (op.opcode) {
			BoolEq => {
				code.iconst_1();
				code.binop(JvmBytecode.IXOR);
				code.binop(JvmBytecode.IXOR);
			}
			IntEq => {
				var tt = compareIntType(op.typeArgs[0]);
				if (tt.width > 32) {
					code.lcmp();
					branchValue(JvmBytecode.IFEQ);
				} else {
					branchValue(JvmBytecode.IF_ICMPEQ);
				}
			}
			RefEq => {
				var t = op.typeArgs[0];
				if (t.typeCon.kind == V3Kind.FUNCREF) {
					code.invokesystem("equals", JvmTypes.SIG_EQUALS);
				} else {
					branchValue(JvmBytecode.IF_ACMPEQ);
				}
			}
			IntAdd =>		emitIntBinop(i, JvmBytecode.IADD, JvmBytecode.LADD, !i.facts.O_NO_INT_TRUNC);
			IntSub =>		emitIntBinop(i, JvmBytecode.ISUB, JvmBytecode.LSUB, !i.facts.O_NO_INT_TRUNC);
			IntMul =>		emitIntBinop(i, JvmBytecode.IMUL, JvmBytecode.LMUL, !i.facts.O_NO_INT_TRUNC);
			IntDiv, IntMod =>	emitIntDiv(i);
			IntAnd =>		emitIntBinop(i, JvmBytecode.IAND, JvmBytecode.LAND, NO_TRUNCATE);
			IntOr =>		emitIntBinop(i, JvmBytecode.IOR, JvmBytecode.LOR, NO_TRUNCATE);
			IntXor =>		emitIntBinop(i, JvmBytecode.IXOR, JvmBytecode.LXOR, NO_TRUNCATE);
			IntShl, IntSar, IntShr => emitShift(i, op);
			IntLt =>		emitIntCmp(i, JvmBytecode.IF_ICMPLT, JvmBytecode.IFLT, "natLt", "natlLt");
			IntLteq =>		emitIntCmp(i, JvmBytecode.IF_ICMPLE, JvmBytecode.IFLE, "natLteq", "natlLteq");
			IntViewI => 		emitIntViewI(i);
			IntCastF(isDouble) =>	emitIntCastF(i, isDouble);
			IntQueryF(isDouble) =>	emitIntQueryF(i, isDouble);
			IntViewF(isDouble) =>	emitIntViewF(i, isDouble);
			IntTruncF(isDouble) =>  emitIntTruncF(i, isDouble);
			FloatCastI(isDouble) =>	emitFloatCastI(i, isDouble);
			FloatCastD =>		emitFloatCastD(i);
			FloatQueryI(isDouble) =>	emitFloatQueryI(i, isDouble);
			FloatQueryD =>			emitFloatQueryD(i);
			FloatPromoteI(isDouble) =>	emitFloatPromoteI(i, isDouble);
			FloatPromoteF =>		code.f2d();
			FloatViewI(isDouble) =>		emitFloatViewI(i, isDouble);
			FloatRoundI(isDouble) =>	emitFloatRoundI(i, isDouble);
			FloatRound(isDouble) =>		emitFloatRound(isDouble);
			FloatRoundD =>		code.d2f();
			FloatAdd(isDouble) =>	emitFloatBinop(isDouble, JvmBytecode.FADD, JvmBytecode.DADD);
			FloatSub(isDouble) =>	emitFloatBinop(isDouble, JvmBytecode.FSUB, JvmBytecode.DSUB);
			FloatMul(isDouble) =>	emitFloatBinop(isDouble, JvmBytecode.FMUL, JvmBytecode.DMUL);
			FloatDiv(isDouble) =>	emitFloatBinop(isDouble, JvmBytecode.FDIV, JvmBytecode.DDIV);
			FloatBitEq(isDouble) =>	{
				if (isDouble) code.invokesystem("deq", JvmTypes.SIG_DOUBLE_DOUBLE_BOOLEAN);
				else code.invokesystem("feq", JvmTypes.SIG_FLOAT_FLOAT_BOOLEAN);
			}
			FloatEq(isDouble) =>	emitFloatCmp(isDouble, JvmBytecode.FCMPL, JvmBytecode.DCMPL, JvmBytecode.IFNE);
			FloatNe(isDouble) =>	emitFloatCmp(isDouble, JvmBytecode.FCMPL, JvmBytecode.DCMPL, JvmBytecode.IFEQ);
			FloatLt(isDouble) =>	emitFloatCmp(isDouble, JvmBytecode.FCMPG, JvmBytecode.DCMPG, JvmBytecode.IFGE);
			FloatLteq(isDouble) =>	emitFloatCmp(isDouble, JvmBytecode.FCMPG, JvmBytecode.DCMPG, JvmBytecode.IFGT);
			FloatAbs(isDouble) =>	emitFloatAbs(isDouble);
			FloatCeil(isDouble) =>	emitDoubleMathCall(isDouble, "ceil");
			FloatFloor(isDouble) =>	emitDoubleMathCall(isDouble, "floor");
			FloatSqrt(isDouble) =>	emitDoubleMathCall(isDouble, "sqrt");
			BoolAnd =>		code.binop(JvmBytecode.IAND);
			BoolOr =>		code.binop(JvmBytecode.IOR);
			BoolNot => {
				code.iconst_1();
				code.binop(JvmBytecode.IXOR);
			}
			TypeCast =>		emitTypeCast(op.typeArgs[0], op.typeArgs[1]);
			TypeQuery =>		emitTypeQuery(op.typeArgs[0], op.typeArgs[1]);
			TypeSubsume => {
				var implicitType = op.typeArgs[1];
				if (V3.isFunction(implicitType)) {
					var exactType = op.typeArgs[0];
					if (exactType.typeCon.kind == V3Kind.ANYFUNC) {  // a cast inserted from overflow params.
						code.checkcast(jprog.jvmType(implicitType));
					} else {
						var adapter = jprog.newClosureAdapter(exactType, implicitType);
						code.invokestatic(adapter.builder.jclass.name, "$new", adapter.initSig);
					}
				}
				if (V3.isClass(implicitType) || V3.isVariant(implicitType)) {
					var exactType = op.typeArgs[0];
					if (!jprog.isSubclass(exactType, implicitType)) {
						code.checkcast(jprog.jvmType(implicitType));
					}
				} else if (V3.isArray(implicitType)) {
					code.checkcast(jprog.jvmType(implicitType));
				}
			}
			ArrayAlloc =>		jprog.jrep.emitArrayAlloc(op.typeArgs[0], code);
			ArrayInit(length) =>	emitArrayInit(op, length);
			ArrayGetElem =>		jprog.jrep.emitArrayGetElem(op.typeArgs[0], code);
			ArraySetElem => {
				jprog.jrep.emitArraySetElem(op.typeArgs[0], code, leave);
				if (!leave) popped = true; // already popped, pretend it's used
			}
			ArrayGetLength =>	jprog.jrep.emitArrayGetLength(op.typeArgs[0], code);
			ClassAlloc(method) => {
				var newRef = V3Op.extractIrSpec(op, method);
				var jclass = jprog.jvmClass(newRef.receiver);
				if (newRef.member != null) {
					var jclass = jprog.jvmType(newRef.receiver);
					var nsig = jprog.jvmSig(newRef.getMethodType());
					code.invokestatic(jclass.name, "$new", nsig);
				} else {
					// trivial constructor
					code.newempty(jclass);
				}
			}
			ClassGetField(field) => jprog.jrep.emitGetField(V3Op.extractIrSpec(op, field), code);
			ClassInitField(field)=> {
				jprog.jrep.emitSetField(V3Op.extractIrSpec(op, field), code, leave);
				if (!leave) popped = true; // already popped, pretend it's used
			}
			ClassSetField(field) => {
				// XXX: duplication of above case
				jprog.jrep.emitSetField(V3Op.extractIrSpec(op, field), code, leave);
				if (!leave) popped = true; // already popped, pretend it's used
			}
			ClassGetSelector(method) => {
				var methodRef = V3Op.extractIrSpec(op, method);
				var jclass = jprog.jvmClass(methodRef.receiver);
				var dclass = jprog.newClosure(methodRef);
				code.invokestatic(dclass.name, "$get", JvmSig.new([jclass], dclass));
			}
			VariantGetField(field) => {
				var fieldRef = V3Op.extractIrSpec(op, field);
				if (!i.facts.O_NO_NULL_CHECK) {
					code.dup();
					var b1 = code.branch_fw(JvmBytecode.IFNONNULL);
					code.pop();
					code.builder.emitValue(code, fieldRef.getFieldType(), null);
					var height = code.cur_stack;
					var b2 = code.goto_fw();
					code.patchBranch(b1);
					jprog.jrep.emitGetField(fieldRef, code);
					code.patchBranch(b2);
					code.cur_stack = height;
				} else {
					jprog.jrep.emitGetField(fieldRef, code);
				}
			}
			VariantGetSelector(method) => {
				var methodRef = V3Op.extractIrSpec(op, method);
				var jclass = jprog.jvmClass(methodRef.receiver);
				var dclass = jprog.newClosure(methodRef);
				code.invokestatic(dclass.name, "$get", JvmSig.new([jclass], dclass));
			}
			VariantReplaceNull => {
				var t = op.typeArgs[0];
				code.dup();
				var b = code.branch_fw(JvmBytecode.IFNONNULL);
				code.pop();
				code.builder.jprog.jrep.emitDefaultVariantRecord(t, code);
				code.patchBranch(b);
			}
			Init =>			; // do nothing
			ComponentGetField(field) =>	jprog.jrep.emitGetField(V3Op.extractIrSpec(op, field), code);
			ComponentSetField(field) => {
				jprog.jrep.emitSetField(V3Op.extractIrSpec(op, field), code, leave);
				if (!leave) popped = true; // already popped, pretend it's used
			}
			TupleCreate =>		jprog.jrep.emitTupleCreate(op.typeArgs[0], code);
			TupleGetElem(index) =>		jprog.jrep.emitTupleGetElem(op.typeArgs[0], index, code);
			NullCheck => {
				if (leave) code.dup();
				var height = code.cur_stack - 1; // will pop receiver
				var b = code.branch_fw(JvmBytecode.IFNONNULL);
				code.aconst_null();
				code.athrow();
				code.patchBranch(b);
				code.cur_stack = height;
				if (!leave) popped = true; // already popped
			}
			BoundsCheck =>		jprog.jrep.emitExplicitBoundsCheck(op.typeArgs[0], code);
			CallMethod(method) =>		emitCall(i, V3Op.extractIrSpec(op, method));
			CallClassMethod(method) => 	emitCall(i, V3Op.extractIrSpec(op, method));
			CallClassVirtual(method) => 	emitCall(i, V3Op.extractIrSpec(op, method));
			CallVariantVirtual(method) => 	emitCall(i, V3Op.extractIrSpec(op, method));
			CallClassSelector(selector) => 	emitCall(i, V3Op.extractIrSpec(op, selector));
			CallVariantSelector(selector) =>emitCall(i, V3Op.extractIrSpec(op, selector));
			CallFunction => {
				var mtype = jprog.jvmType(i.input0().getType());
				code.invokevirtual(mtype.name, "invoke", jprog.jvmSig(op.typeArgs[0]));
			}
			SystemCall(syscall) => {
				jprog.invokesystem(code, syscall.name, jprog.jvmSig(op.sig.funcType()));
			}
			VariantGetTag => {
				var b1: int;
				if (!i.facts.O_NO_NULL_CHECK) {
					code.dup();
					b1 = code.branch_fw(JvmBytecode.IFNULL);
				}

				var jclass = jprog.jvmClass(op.typeArgs[0]);
				code.invokevirtual(jclass.name, "tag", JvmTypes.SIG_VOID_INT);

				if (!i.facts.O_NO_NULL_CHECK) {
					var b2 = code.goto_fw();
					code.patchBranch(b1);
					code.pop();
					code.iconst(0);
					code.patchBranch(b2);
				}
			}
			ConditionalThrow(exception) => {
				var b = code.branch_fw(JvmBytecode.IFEQ);
				emitThrow(exception);
				code.patchBranch(b);
			}
			ByteArrayGetField(offset) => {
				var fieldType = op.typeArgs[0];
				code.iconst(offset);
				match (fieldType) {
					x: IntType => {
						match (x.packedByteSize()) {
							1 => jprog.invokesystem(code, "readBytes1", JvmTypes.SIG_BYTE_ARRAY_INT_INT_BYTE);
							2 => jprog.invokesystem(code, "readBytes2", JvmTypes.SIG_BYTE_ARRAY_INT_INT_SHORT);
							3 => jprog.invokesystem(code, "readBytes3", JvmTypes.SIG_BYTE_ARRAY_INT_INT_INT);
							4 => jprog.invokesystem(code, "readBytes4", JvmTypes.SIG_BYTE_ARRAY_INT_INT_INT);
							5 => jprog.invokesystem(code, "readBytes5", JvmTypes.SIG_BYTE_ARRAY_INT_INT_LONG);
							6 => jprog.invokesystem(code, "readBytes6", JvmTypes.SIG_BYTE_ARRAY_INT_INT_LONG);
							7 => jprog.invokesystem(code, "readBytes7", JvmTypes.SIG_BYTE_ARRAY_INT_INT_LONG);
							8 => jprog.invokesystem(code, "readBytes8", JvmTypes.SIG_BYTE_ARRAY_INT_INT_LONG);
						}
						emitIntTrunc(x);
					}
					x: FloatType => {
						if (x == Float.FLOAT32) jprog.invokesystem(code, "readBytesFloat", JvmTypes.SIG_BYTE_ARRAY_INT_INT_FLOAT);
						else jprog.invokesystem(code, "readBytesDouble", JvmTypes.SIG_BYTE_ARRAY_INT_INT_DOUBLE);
					}
				}
			}
			ByteArraySetField(offset) => {
				var fieldType = op.typeArgs[0];
				code.iconst(offset);
				match (fieldType) {
					x: IntType => {
						match (x.packedByteSize()) {
							1 => jprog.invokesystem(code, "setBytes1", JvmTypes.SIG_BYTE_ARRAY_INT_BYTE_INT_VOID);
							2 => jprog.invokesystem(code, "setBytes2", JvmTypes.SIG_BYTE_ARRAY_INT_SHORT_INT_VOID);
							3 => jprog.invokesystem(code, "setBytes3", JvmTypes.SIG_BYTE_ARRAY_INT_INT_INT_VOID);
							4 => jprog.invokesystem(code, "setBytes4", JvmTypes.SIG_BYTE_ARRAY_INT_INT_INT_VOID);
							5 => jprog.invokesystem(code, "setBytes5", JvmTypes.SIG_BYTE_ARRAY_INT_LONG_INT_VOID);
							6 => jprog.invokesystem(code, "setBytes6", JvmTypes.SIG_BYTE_ARRAY_INT_LONG_INT_VOID);
							7 => jprog.invokesystem(code, "setBytes7", JvmTypes.SIG_BYTE_ARRAY_INT_LONG_INT_VOID);
							8 => jprog.invokesystem(code, "setBytes8", JvmTypes.SIG_BYTE_ARRAY_INT_LONG_INT_VOID);
						}
					}
					x: FloatType => {
						if (x == Float.FLOAT32) jprog.invokesystem(code, "setBytesFloat", JvmTypes.SIG_BYTE_ARRAY_INT_FLOAT_INT_VOID);
						else jprog.invokesystem(code, "setBytesDouble", JvmTypes.SIG_BYTE_ARRAY_INT_DOUBLE_INT_VOID);
					}
				}
			}
		} else {
			context.fail1("unexpected opcode in SSA->JVM: %s", op.opcode.name);
		}
		return popped;
	}
	def emitCall(i: SsaApplyOp, methodRef: IrSpec) {
		var jclass = jprog.jvmClass(methodRef.receiver);
		if (methodRef.isNew()) {
			var nsig = jprog.makeJvmSig(jclass, methodRef.getMethodType(), jclass);
			code.invokestatic(jclass.name, "$init", nsig);
		} else if (V3.isComponent(methodRef.receiver)) {
			var nsig = jprog.jvmSig(methodRef.getMethodType());
			code.invokestatic(jclass.name, V3.mangleIrMember(methodRef.member), nsig);
		} else {
			jprog.jrep.emitInvokeVirtual(code, methodRef, i.inputs[0].dest.facts.V_NON_ZERO);
		}
	}
	def branchValue(op: byte) {
		var b1 = code.branch_fw(op);
		code.iconst_0();
		var height = code.cur_stack;
		var b2 = code.goto_fw();
		code.patchBranch(b1);
		code.iconst_1();
		code.patchBranch(b2);
		code.cur_stack = height;
	}
	def emitShift(i: SsaApplyOp, op: Operator) {
		var t = op.sig.returnType(), tt = IntType.!(t);
		var left = Opcode.IntShl.?(op.opcode);
		var sar = Opcode.IntSar.?(op.opcode);
		var wide = IntType.!(op.sig.paramTypes[1]).width > 32;
		if (Opcode.IntShr.?(op.opcode)  && !i.input0().facts.V_NON_NEGATIVE) {
			if (tt.width < 32) {
				code.swap();
				emitIntTrunc(Int.getType(false, tt.width));
				code.swap();
			} else if (tt.width > 32 && tt.width < 64) {
				code.iconst(tt.lshift);
				return jprog.invokesystem(code, "lshr", JvmTypes.SIG_LONG_BYTE_BYTE_LONG);
			}
		}
		if (i.facts.O_NO_SHIFT_CHECK) {
			if (tt.width > 32) {
				if (wide) code.l2i();
				code.op(if(left, JvmBytecode.LSHL, if(sar, JvmBytecode.LSHR, JvmBytecode.LUSHR)));
				code.popN(1);
			} else {
				code.binop(if(left, JvmBytecode.ISHL, if(sar, JvmBytecode.ISHR, JvmBytecode.IUSHR)));
			}
		} else {
			if (tt.width > 32) {
				if (!wide) code.i2l();
				jprog.invokesystem(code, if(left, "lshl", if(sar, "lsar", "lshr")), JvmTypes.SIG_LONG_LONG_LONG);
			} else {
				jprog.invokesystem(code, if(left, "shl", if(sar, "sar", "shr")), JvmTypes.SIG_INT_INT_INT);
			}
		}
		emitIntTrunc(tt);
	}
	def emitIntBinop(i: SsaApplyOp, iop: byte, lop: byte, trunc: bool) {
		var tt = IntType.!(i.op.sig.returnType());
		if (tt.width <= 32) code.binop(iop);
		else code.lbinop(lop);
		if (trunc) emitIntTrunc(tt);
	}
	def emitIntDiv(i: SsaApplyOp) {
		var tt = IntType.!(i.op.sig.returnType());
		var isDiv = Opcode.IntDiv.?(i.op.opcode);
		match (tt.rank) {
			U32 => {
				var meth = if(isDiv, "natDiv", "natMod");
				jprog.invokesystem(code, meth, JvmTypes.SIG_INT_INT_INT);
			}
			SUBI32, SUBU32, I32 =>  {
				code.binop(if(isDiv, JvmBytecode.IDIV, JvmBytecode.IREM));
			}
			U64 => {
				var meth = if(isDiv, "natlDiv", "natlMod");
				jprog.invokesystem(code, meth, JvmTypes.SIG_LONG_LONG_LONG);
			}
			SUBI64, SUBU64, I64 => {
				code.lbinop(if(isDiv, JvmBytecode.LDIV, JvmBytecode.LREM));
			}
		}
		emitIntTrunc(tt);
	}
	def emitFloatAbs(isDouble: bool) {
		if (isDouble) {
			code.invokesystem("dabs", JvmTypes.SIG_DOUBLE_DOUBLE);
		} else {
			code.invokesystem("fabs", JvmTypes.SIG_FLOAT_FLOAT);
		}
	}
	def emitDoubleMathCall(isDouble: bool, name: string) {
		if (isDouble) {
			code.invokestatic(JvmTypes.java_lang_Math.name, name, JvmTypes.SIG_DOUBLE_DOUBLE);
		} else {
			code.f2d();
			code.invokestatic(JvmTypes.java_lang_Math.name, name, JvmTypes.SIG_DOUBLE_DOUBLE);
			code.d2f();
		}
	}
	def emitFloatBinop(isDouble: bool, fop: byte, dop: byte) {
		if (isDouble) code.lbinop(dop);
		else code.binop(fop);
	}
	def emitFloatCmp(isDouble: bool, fop: byte, dop: byte, ifop: byte) {
		if (isDouble) {
			code.lbinop(dop);
			code.popN(1);
		} else {
			code.binop(fop);
		}
		var height = code.cur_stack;
		var pos1 = code.branch_fw(ifop);
		code.iconst_1();
		var pos2 = code.goto_fw();
		code.patchBranch(pos1);
		code.iconst_0();
		code.patchBranch(pos2);
		code.cur_stack = height;
	}
	def emitFloatPromoteI(i: SsaApplyOp, isDouble: bool) {
		var ift = IntType.!(i.op.typeArgs[0]);
		if (isDouble) {
			match (ift.rank) {
				SUBI32, SUBU32, I32 => code.i2d();
				U32 => {
					code.inl_u2l();
					code.l2d();
				}
				SUBI64, SUBU64, I64, U64 => code.l2d();
			}
		} else {
			match (ift.rank) {
				SUBI32, SUBU32, I32 => code.i2f();
				U32 => {
					code.inl_u2l();
					code.l2f();
				}
				SUBI64, SUBU64, I64, U64 => code.l2f();
			}
		}
	}
	def emitFloatCastI(i: SsaApplyOp, isDouble: bool) {
		var ift = IntType.!(i.op.typeArgs[0]);
		var ool_meth: string, ool_sig: JvmSig;
		if (isDouble) {
			match (ift.rank) {
				SUBI32, SUBU32, I32 => {
					code.i2d();
					return;
				}
				U32 => {
					code.inl_u2l();
					code.l2d();
					return;
				}
				SUBI64, SUBU64, I64 => {
					ool_meth = "cast_l2d";
					ool_sig = JvmTypes.SIG_LONG_DOUBLE;
				}
				U64 => {
					ool_meth = "cast_ul2d";
					ool_sig = JvmTypes.SIG_LONG_DOUBLE;
				}
			}
		} else {
			match (ift.rank) {
				SUBI32, SUBU32, I32 => {
					ool_meth = "cast_i2f";
					ool_sig = JvmTypes.SIG_INT_FLOAT;
				}
				U32 => {
					code.inl_u2l();
					ool_meth = "cast_l2f";
					ool_sig = JvmTypes.SIG_LONG_FLOAT;
				}
				SUBI64, SUBU64, I64 => {
					ool_meth = "cast_l2f";
					ool_sig = JvmTypes.SIG_LONG_FLOAT;
				}
				U64 => {
					ool_meth = "cast_ul2d";
					ool_sig = JvmTypes.SIG_LONG_FLOAT;
				}
			}
		}
		code.invokesystem(ool_meth, ool_sig);
	}
	def emitFloatCastD(i: SsaApplyOp) {
		code.invokesystem("cast_d2f", JvmTypes.SIG_DOUBLE_FLOAT);
	}
	def emitFloatQueryI(i: SsaApplyOp, isDouble: bool) {
		var ift = IntType.!(i.op.typeArgs[0]);
		var ool_meth: string, ool_sig: JvmSig;
		if (isDouble) {
			match (ift.rank) {
				SUBI32, SUBU32, I32, U32 => {
					code.pop();
					code.iconst(1);
					return;
				}
				SUBI64, SUBU64, I64 => {
					ool_meth = "query_l2d";
					ool_sig = JvmTypes.SIG_LONG_BOOLEAN;
				}
				U64 => {
					ool_meth = "query_ul2d";
					ool_sig = JvmTypes.SIG_LONG_BOOLEAN;
				}
			}
		} else {
			match (ift.rank) {
				SUBI32, SUBU32, I32 => {
					ool_meth = "query_i2f";
					ool_sig = JvmTypes.SIG_INT_BOOLEAN;
				}
				U32 => {
					code.inl_u2l();
					ool_meth = "query_l2f";
					ool_sig = JvmTypes.SIG_LONG_BOOLEAN;
				}
				SUBI64, SUBU64, I64 => {
					ool_meth = "query_l2f";
					ool_sig = JvmTypes.SIG_LONG_BOOLEAN;
				}
				U64 => {
					ool_meth = "query_ul2f";
					ool_sig = JvmTypes.SIG_LONG_BOOLEAN;
				}
			}
		}
		code.invokesystem(ool_meth, ool_sig);
	}
	def emitFloatQueryD(i: SsaApplyOp) {
		code.invokesystem("query_d2f", JvmTypes.SIG_DOUBLE_BOOLEAN);
	}
	def emitFloatViewI(i: SsaApplyOp, isDouble: bool) {
		if (isDouble) code.invokestatic(JvmTypes.java_lang_Double.name, "longBitsToDouble", JvmTypes.SIG_LONG_DOUBLE);
		else code.invokestatic(JvmTypes.java_lang_Float.name, "intBitsToFloat", JvmTypes.SIG_INT_FLOAT);
	}
	def emitFloatRoundI(i: SsaApplyOp, isDouble: bool) {
		var ift = IntType.!(i.op.typeArgs[0]);
		match (ift.rank) {
			SUBI32, SUBU32, I32 => {
				i2xf(isDouble);
			}
			U32 => {
				code.inl_u2l();
				l2xf(isDouble);
			}
			SUBI64, SUBU64, I64 => {
				l2xf(isDouble);
			}
			U64 => {
				if (isDouble) {
					code.invokesystem("round_ul2d", JvmTypes.SIG_LONG_DOUBLE);
				} else {
					code.invokesystem("round_ul2f", JvmTypes.SIG_LONG_FLOAT);
				}
			}
		}
	}
	def emitFloatRound(isDouble: bool) {
		if (!isDouble) code.f2d();
		code.invokestatic(JvmTypes.java_lang_Math.name, "rint", JvmTypes.SIG_DOUBLE_DOUBLE);
		if (!isDouble) code.d2f();
	}
	def emitIntCastF(i: SsaApplyOp, isDouble: bool) {
		var itt = IntType.!(i.op.typeArgs[1]);
		var ft = i.op.typeArgs[0];
		if (!isDouble) code.f2d();
		if (itt.signed) {
			code.dconst(Float.f64(-1, itt.width - 1, 0).bits);
			code.dconst(Float.f64(0, itt.width - 1, 0).bits);
		} else {
			code.dconst(0);
			code.dconst(Float.f64(0, itt.width, 0).bits);
		}
		code.invokesystem("cast_d2l", JvmTypes.SIG_DOUBLE_DOUBLE_DOUBLE_LONG);
		if (itt.width <= 32) code.l2i();
	}
	def emitIntQueryF(i: SsaApplyOp, isDouble: bool) {
		var itt = IntType.!(i.op.typeArgs[1]);
		var ft = i.op.typeArgs[0];
		if (!isDouble) code.f2d();
		if (itt.signed) {
			code.dconst(Float.f64(-1, itt.width - 1, 0).bits);
			code.dconst(Float.f64(0, itt.width - 1, 0).bits);
		} else {
			code.dconst(0);
			code.dconst(Float.f64(0, itt.width, 0).bits);
		}
		code.invokesystem("query_d2l", JvmTypes.SIG_DOUBLE_DOUBLE_DOUBLE_BOOLEAN);
	}
	def emitIntViewF(i: SsaApplyOp, isDouble: bool) {
		if (isDouble) code.invokestatic(JvmTypes.java_lang_Double.name, "doubleToRawLongBits", JvmTypes.SIG_DOUBLE_LONG);
		else code.invokestatic(JvmTypes.java_lang_Float.name, "floatToRawIntBits", JvmTypes.SIG_FLOAT_INT);
	}
	def emitIntTruncF(i: SsaApplyOp, isDouble: bool) {
		var itt = IntType.!(i.op.typeArgs[1]);
		match (itt.rank) {
			SUBI32, SUBU32 => {
				xf2i(isDouble);
				code.iconst(Int.unbox(itt.min));
				code.iconst(Int.unbox(itt.max));
				code.invokesystem("satInt", JvmTypes.SIG_INT_INT_INT_INT);
			}
			I32 => {
				xf2i(isDouble);
			}
			U32 => {
				xf2l(isDouble);
				code.lconst(0);
				code.lconst(0xFFFFFFFFu);
				code.invokesystem("satLong", JvmTypes.SIG_LONG_LONG_LONG_LONG);
				code.l2i();
			}
			SUBI64, SUBU64 => {
				xf2l(isDouble);
				code.lconst(Long.unboxSU(itt.min, itt.signed));
				code.lconst(Long.unboxSU(itt.max, itt.signed));
				code.invokesystem("satLong", JvmTypes.SIG_LONG_LONG_LONG_LONG);
			}
			I64 => {
				xf2l(isDouble);
			}
			U64 => {
				if (!isDouble) code.f2d();
				// u64 case is too complicated for inline code
				code.invokesystem("d2ul", JvmTypes.SIG_DOUBLE_LONG);
			}
		}
	}
	def xf2i(isDouble: bool) {
		if (isDouble) code.d2i(); else code.f2i();
	}
	def xf2l(isDouble: bool) {
		if (isDouble) code.d2l(); else code.f2l();
	}
	def i2xf(isDouble: bool) {
		if (isDouble) code.i2d(); else code.i2f();
	}
	def l2xf(isDouble: bool) {
		if (isDouble) code.l2d(); else code.l2f();
	}
	def xfzero(isDouble: bool) {
		if (isDouble) code.dconst(0);
		else code.fconst(0);
	}
	def emitIntViewI(i: SsaApplyOp) {
		var ft = IntType.!(i.op.sig.paramTypes[0]), tt = IntType.!(i.op.sig.returnType());
		if (TypeSystem.isIntToLong(ft, tt)) {
			code.i2l();
			if (!ft.signed) {
				code.lconst(0xFFFFFFFFL);
				code.lbinop(JvmBytecode.LAND);
			}
		} else if (ft.width > 32 && tt.width <= 32) {
			code.l2i();
		}
		if (!TypeSystem.isIntPromotable(ft, tt)) emitIntTrunc(tt);
	}
	def emitIntTrunc(tt: IntType) {
		match (tt.rank) {
			SUBI32 => code.inl_isx(tt.width);
			SUBU32 => code.inl_izx(tt.width);
			SUBI64 => code.inl_lsx(tt.width);
			SUBU64 => code.inl_lzx(tt.width);
			I32, U32, I64, U64 => ; // nop
		}
	}
	def emitIntCmp(i: SsaApplyOp, iop: byte, lop: byte, isysMethName: string, lsysMethName: string) {
		var tt = IntType.!(i.op.sig.paramTypes[0]);
		if (tt.width > 32) {
			// XXX: inline 64-bit unsigned compare?
			if (tt.rank == IntRank.U64) return jprog.invokesystem(code, lsysMethName, JvmTypes.SIG_LONG_LONG_INT);
			code.lcmp();
			var height = code.cur_stack;
			var pos1 = code.branch_fw(lop);
			code.iconst_0();
			var pos2 = code.goto_fw();
			code.patchBranch(pos1);
			code.iconst_1();
			code.patchBranch(pos2);
			code.cur_stack = height;
		} else {
			// XXX: generate inline 32-bit unsigned compare?
			if (tt.rank == IntRank.U32) return jprog.invokesystem(code, isysMethName, JvmTypes.SIG_INT_INT_INT);
			var height = code.cur_stack - 1;
			var pos1 = code.branch_fw(iop);
			code.iconst_0();
			var pos2 = code.goto_fw();
			code.patchBranch(pos1);
			code.iconst_1();
			code.patchBranch(pos2);
			code.cur_stack = height;
		}
	}
	def emitTypeCast(t1: Type, t2: Type) {
		// XXX: clean up type cast handling in JVM backend
		if (t1 == t2) {
			// nop typecast
		} else if (V3.isClass(t2) && (t1 == Null.TYPE || V3.isClass(t1))) {
			// perform dynamic typecast
			code.checkcast(jprog.jvmType(t2));
		} else if (t1 != Byte.TYPE || t2 != Int.TYPE) {
			// cast will always fail
			code.newempty(JvmTypes.java_lang_ClassCastException);
			code.athrow();
		} // otherwise byte -> int is a nop
	}
	def emitTypeQuery(t1: Type, t2: Type) {
		if (V3.isClass(t2)) {
			if (V3.isClass(t1)) code.instanceof(jprog.jvmType(t2));
			else popValAndPushConst(t1, 0);
		} else if (V3.isArray(t2)) {
		 	if (V3.isArray(t1)) code.instanceof(jprog.jvmType(t2));
			else popValAndPushConst(t1, 0);
		} else {
			if (TypeSystem.isSubtype(t1, t2)) popValAndPushConst(t1, 1);
			else popValAndPushConst(t1, 0);
		}
	}
	def popValAndPushConst(t1: Type, val: int) {
		code.popK(jprog.jvmKind(t1));
		code.iconst(val);
	}
	def emitArrayInit(op: Operator, len: int) {
		var arrayType = op.typeArgs[0];
		code.iconst(len);
		jprog.jrep.emitArrayAlloc(arrayType, code);
		var elemRep = jprog.jrep.getRep(V3Array.elementType(arrayType));
		if (elemRep.kind.width == 1) {
			// store the elements into the array
			for (i = len - 1; i >= 0; i--) {
				code.dup_x1();
				code.swap();
				code.iconst(i);
				code.swap();
				code.astore(elemRep.kind);
			}
		} else if (elemRep.kind.width == 2) {
			// store the elements into the array
			for (i = len - 1; i >= 0; i--) {
				code.dup_x2();
				code.dup_x2();
				code.pop();
				code.iconst(i);
				code.dup_x2();
				code.pop();
				code.astore(elemRep.kind);
			}
		}

	}
	def emitThrow(ex: string) {
		if (Strings.equal(V3Exception.NullCheck, ex)) code.aconst_null();
		else if (Strings.equal(V3Exception.Unimplemented, ex)) code.newempty(JvmTypes.java_lang_AbstractMethodError);
		else if (Strings.equal(V3Exception.TypeCheck, ex)) code.newempty(JvmTypes.java_lang_ClassCastException);
		else if (Strings.equal(V3Exception.DivideByZero, ex)) code.newempty(JvmTypes.java_lang_ArithmeticException);
		else if (Strings.equal(V3Exception.BoundsCheck, ex)) code.newempty(JvmTypes.java_lang_ArrayIndexOutOfBoundsException);
		else if (Strings.equal(V3Exception.LengthCheck, ex)) code.newempty(JvmTypes.java_lang_NegativeArraySizeException);
		else {
			code.newobject(JvmTypes.java_lang_Exception);
			code.dup();
			code.ldc(code.builder.newString(ex));
			code.invokespecial(JvmTypes.java_lang_Exception.name, "<init>", JvmTypes.SIG_STRING_VOID);
		}
		code.athrow();
	}
	def allocReg(i: SsaInstr, t: Type) -> u31 {
		// for now, all types map to a single JVM stack slot
		var t = code.max_locals;
		code.max_locals = t + 1;
		return u31.!(t);
	}
	def inverse(op: byte) -> byte {
		match (op) {
			JvmBytecode.IF_ICMPEQ => return JvmBytecode.IF_ICMPNE;
			JvmBytecode.IF_ICMPNE => return JvmBytecode.IF_ICMPEQ;
			JvmBytecode.IF_ICMPLT => return JvmBytecode.IF_ICMPGE;
			JvmBytecode.IF_ICMPGE => return JvmBytecode.IF_ICMPLT;
			JvmBytecode.IF_ICMPGT => return JvmBytecode.IF_ICMPLE;
			JvmBytecode.IF_ICMPLE => return JvmBytecode.IF_ICMPGT;
			JvmBytecode.IF_ACMPEQ => return JvmBytecode.IF_ACMPNE;
			JvmBytecode.IF_ACMPNE => return JvmBytecode.IF_ACMPEQ;
			JvmBytecode.IFEQ =>      return JvmBytecode.IFNE;
			JvmBytecode.IFNE =>      return JvmBytecode.IFEQ;
			JvmBytecode.IFLT =>      return JvmBytecode.IFGE;
			JvmBytecode.IFGE =>      return JvmBytecode.IFLT;
			JvmBytecode.IFGT =>      return JvmBytecode.IFLE;
			JvmBytecode.IFLE =>      return JvmBytecode.IFGT;
			JvmBytecode.IFNULL =>    return JvmBytecode.IFNONNULL;
			JvmBytecode.IFNONNULL => return JvmBytecode.IFNULL;
		}
		return V3.fail1("cannot invert JvmBytecode %x", op);
	}
}
