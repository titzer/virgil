// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component JvmComponent {
	new() {
		Aeneas.registerTarget(JvmTarget.new("jvm-test", false, true));
		Aeneas.registerTarget(JvmTarget.new("jar", true, false));
	}
	def makeJvmRtFileName(fileName: string, ext: string) -> string {
		return Paths.assemble(CLOptions.JVM_RT_PATH.get(), fileName, ext);
	}
}

class JvmTarget extends Target {
	def jar: bool;
	def test: bool;
	new(name: string, jar, test) super(name) {
		this.typedMain = jar;
	}
	def emit(compiler: Compiler, prog: Program) {
		var jprog = JvmProgram.new(compiler, prog);
		jprog.makeJar = jar;
		jprog.test = test;
		jprog.build();
	}
	def configureCompiler(compiler: Compiler) {
		compiler.Reachability = true;
		compiler.PartialBoundsChecks = false;
		compiler.PartialSpecialization = false;
		compiler.RaDevirtualize = false;
		compiler.GenVariantEqual = true;

		var norm = compiler.NormConfig;
		norm.MixedArrays = false;
		norm.NonRefClosureReceiver = false;
		norm.NormalizeRange = false;
//		norm.setSignatureLimits(10000, 1);
		norm.GetScalar = getScalar;
		norm.UsedScalars = Scalar.B32 | Scalar.B64 | Scalar.F32 | Scalar.F64 | Scalar.Ref;
	}
	private def isRefType(t: Type) -> bool {
		match (t) {
			x: ClassType => return true;
			x: ArrayType => return true;
			_ => return false;
		}
	}
	private def getScalar(compiler: Compiler, prog: Program, t: Type) -> Scalar.set {
		var none: Scalar.set;
		match (t) {
			x: BoolType => return Scalar.B32 | Scalar.B64;
			x: IntType => return if(x.width <= 32, Scalar.B32 | Scalar.B64, Scalar.B64);
			x: FloatType => return if(x.is64, Scalar.F64, Scalar.F32);
			_ => return Scalar.Ref;
		}
	}
	def configureProgram(prog: Program) {
		SystemCalls.install(prog);
	}
}
