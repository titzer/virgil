// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Global state needed while translating a Virgil program to the JVM.
class JvmProgram(compiler: Compiler, prog: Program) {
	def context = SsaContext.new(compiler, prog);
	def classMap = Strings.newMap<JvmClass>();
	def jvmSigs = TypeUtil.newTypeMap<JvmSig>();
	def closureAdapters = TypeUtil.newTypePairMap<JvmV3ClosureAdapterGen>();
	def classQueue = Vector<JvmClassGen>.new();
	def variantDefaultCaseClass = TypeUtil.newTypeMap<IrClass>();

	var jrep: JvmTypeReps;
	var jheap: JvmHeap;
	var makeJar: bool;
	var test: bool;
	var testPrefix: string;
	var jarFile: JARFile;
	var abstractClosureClass: JvmClassGen;
	var usingSystem: bool;

	new() {
		jrep = JvmTypeReps.new(this);
		jheap = JvmHeap.new(this);
	}

	def build() {
		if (makeJar) {
			var main = prog.getMain();
			var fileName = compiler.getOutputFileName(prog.name(), "jar");
			jarFile = JARFile.new(fileName);
			jarFile.create(prog.ERROR);
			if (jarFile.fid < 0) return;
			jarFile.addManifest(mangleTypeName("V3K_", main.receiver));
		}
		// always create the main method's receiver class first.
		if (prog.getMain() != null) jvmType(prog.getMain().receiver);
		prog.ir.classes.apply(processIrClass);
		var pos = Vectors.drain(classQueue, 0, JvmClassGen.build);
		context.method = null;
		context.block = null;
		context.graph = null;
		jheap.emit();
		Vectors.drain(classQueue, pos, JvmClassGen.build);
		classQueue.apply(JvmClassGen.emit);

		if (usingSystem) copySystemClasses();
		if (makeJar) jarFile.finish();
		if (CLOptions.JVM_GEN_SCRIPT.get()) genScript();
	}
	def copySystemClasses() {
		var inFile = JvmComponent.makeJvmRtFileName(JvmTypes.systemClassName, "class");
		var data = System.fileLoad(inFile);
		if (data != null) {
			if (makeJar) {
				var outFile = Paths.assemble(null, JvmTypes.systemClassName, "class");
				var jff = JARFileFile.new(outFile);
				jff.outK(data, 0, data.length);
				jarFile.addFile(jff);
			} else {
				var outFile = compiler.getOutputFileName(JvmTypes.systemClassName, "class");
				var file = System.fileOpen(outFile, false);
				if (file >= 0) {
					var stream = FileStream.new(file);
					stream.outK(data, 0, data.length);
					stream.close();
				} else {
					prog.ERROR.OutputError(outFile);
				}
			}
		} else {
			// the file couldn't be found, issue a warning
			Terminal.put1("Warning: could not find runtime class %s\n", inFile);
		}
	}
	def genScript() {
		// generate a bash script which invokes the JVM with the JAR and parameters
		var programName = prog.name();
		var fileName = compiler.getOutputFileName(programName, null);
		var fd = System.fileOpen(fileName, false);
		if (fd < 0) return prog.ERROR.OutputError(fileName);
		// XXX: factor script header out into rt/jvm/script file ?
		compiler.emitBashScriptHeader(fd);
		System.write(fd, "java ");
		var args = CLOptions.JVM_ARGS.get();
		if (args != null && args.length > 0) {
			System.write(fd, args);
			System.write(fd, " ");
		}
		if (makeJar) System.write(fd, "-jar $DIR/");
		else System.write(fd, "-cp $DIR V3K_");
		System.write(fd, programName);
		if (makeJar) System.write(fd, ".jar");
		System.write(fd, " \"$@\"\n");
		System.fileClose(fd);
		compiler.makeExecutable(fileName);
	}
	def processIrClass(ic: IrClass) {
		var utype = ic.ctype;
		match (utype.typeCon.kind) {
			VARIANT => {
				jvmType(utype);
				if (V3.getVariantTag(utype) == 0) {
					var superType = V3.getSuperType(utype);
					if (superType != null) variantDefaultCaseClass[superType] = ic;
				}
			}
			CLASS => jvmType(utype);
			COMPONENT => jvmType(utype);
			_ => ;
		}
	}
	def getIrClass(vtype: Type) -> IrClass {
		var ic = prog.ir.getIrClass(vtype);
		if (ic == null) {
			var message = vtype.render(Strings.builderOf("IrClass not found: "));
			context.fail(message.toString());
		}
		return ic;
	}
	def isSubclass(t: Type, u: Type) -> bool {
		var ic = prog.ir.getIrClass(t);
		var sc = prog.ir.getIrClass(u);
		while (ic != null) {
			if (ic == sc) return true;
			ic = ic.parent;
		}
		return false;
	}
	def jvmClass(vtype: Type) -> JvmClass { return jrep.getJvmClass(vtype); }
	def jvmKind(vtype: Type) -> JvmKind { return jvmType(vtype).kind; }
	def jvmType(vtype: Type) -> JvmType {
		return jrep.getRep(vtype);
	}
	def jvmSig(ftype: Type) -> JvmSig {
		var sig = jvmSigs[ftype];
		if (sig == null) {
			sig = makeJvmSig(null, ftype, null);
			jvmSigs[ftype] = sig;
		}
		return sig;
	}
	def makeJvmSig(receiver: JvmType, ftype: Type, retType: JvmType) -> JvmSig {
		var vec = Vector<JvmType>.new();
		if (receiver != null) { vec.put(receiver); }
		for (p = Function.getParamTypeList(ftype); p != null; p = p.tail) {
			var jrep = jrep.getRep(p.head);
			if (jrep.kind.width > 0) vec.put(jrep);
		}
		if (retType == null) {
			retType = jrep.getRep(Function.getReturnType(ftype));
		}
		return JvmSig.new(vec.extract(), retType);
	}
	def makeHeapSig(ctype: Type) -> JvmSig {
		return JvmSig.new(Arrays.map(getIrClass(ctype).fields, getFieldJvmType), jvmType(ctype));
	}
	def getFieldJvmType(f: IrField) -> JvmType {
		return jvmType(f.fieldType);
	}
	def mangleConvertName(prefix: string, exactType: Type, implicitType: Type) -> string {
		return mangleTypeName(prefix, Function.newType(exactType, implicitType));
	}
	def mangleClosureName(memberRef: IrSpec) -> string {
		var buffer = StringBuilder.new();
		buffer.puts(mangleTypeName("V3D_", memberRef.receiver));
		buffer.puts("$D");
		var methName = V3.mangleIrMember(memberRef.member);
		buffer.puts(methName);
		return buffer.toString();
	}
	def mangleTypeName(prefix: string, t: Type) -> string {
		var r = t.render(StringBuilder.new());
		var target = Strings.builderOf(prefix);
		if (test) {
			// in testing mode, uniquify classes with the program name after the prefix.
			if (testPrefix == null) {
				// use the name of the file as the uniquifier
				var test = Paths.baseName(prog.files[0]);
				testPrefix = Mangle.mangleInto(test, test.length, StringBuilder.new()).toString();
			}
			for (i < testPrefix.length) {
				if (i >= r.length || r.buf[i] != testPrefix[i]) {
					// name of the type doesn't already include the test prefix
					target.puts(testPrefix).putc('_');
					break;
				}
			}
		}
		var name_builder = Mangle.mangleB(r, target);
		if (ClassType.?(t) && ClassType.!(t).classDecl.isPrivate) {
			// uniquify private classes with the type uid to avoid namespace clashes
			return name_builder.put1("_%d", t.typeCon.uid).toString();
		}
		return name_builder.toString();
	}
	def newClosure(memberRef: IrSpec) -> JvmClass {
		var className = mangleClosureName(memberRef);
		var jclass = classMap[className];
		if (jclass == null) {
			var funcType = memberRef.getFuncType();
			jclass = JvmClass.new(className, jrep.getJvmClass(funcType).name);
			classMap[className] = jclass;
			classQueue.put(JvmV3ClosureGen.new(JvmClassfileBuilder.new(this, jclass), funcType, memberRef, getMethodID(memberRef)));
		}
		return jclass;

	}
	def newClosureAdapter(exactType: Type, implicitType: Type) -> JvmV3ClosureAdapterGen {
		var adapter = closureAdapters[exactType, implicitType];
		if (adapter == null) {
			var className = mangleConvertName("V3A_", exactType, implicitType);
			var superName = jrep.getJvmClass(implicitType).name;
			var jclass = JvmClass.new(className, superName);
			adapter = JvmV3ClosureAdapterGen.new(JvmClassfileBuilder.new(this, jclass), exactType, implicitType);
			closureAdapters[(exactType, implicitType)] = adapter;
			classQueue.put(adapter);
		}
		return adapter;
	}
	def getMethodID(memberRef: IrSpec) -> int {
		var meth = memberRef.asMethod();
		var root = prog.ir.getIrClass(meth.receiver).root(meth);
		return root.uid;
	}
	def emitJvmClassfile(jvmClass: JvmClassfile) {
		if (makeJar) {
			var fileName = Paths.assemble(null, jvmClass.className, "class");
			// TUNABLE: initial buffer size for JAR file output
			var jfile = JARFileFile.new(fileName), buffer = Buffer.new(4096, jfile.outK);
			jvmClass.emit(buffer.getWriter());
			buffer.flush();
			jarFile.addFile(jfile);
		} else {
			var fileName = compiler.getOutputFileName(jvmClass.className, "class");
			var file = System.fileOpen(fileName, false);
			if (file >= 0) {
				// TUNABLE: initial buffer size for class file output
				var stream = FileStream.new(file), buffer = Buffer.new(1024, stream.outK);
				jvmClass.emit(buffer.getWriter());
				buffer.flush();
				System.fileClose(file);
			} else {
				prog.ERROR.OutputError(fileName);
			}
		}
	}
	def makeAbstractClosureClass() -> JvmClassGen {
		if (abstractClosureClass == null) {
			var jclass = JvmClass.new("V3D", JvmTypes.jlo);
			abstractClosureClass = JvmV3AbstractClosureGen.new(JvmClassfileBuilder.new(this, jclass));
			classQueue.put(abstractClosureClass);
		}
		return abstractClosureClass;
	}
	def isUseless(vtype: Type) -> bool {
		return vtype == Void.TYPE || V3.isComponent(vtype);
	}
	def isUselessArray(vtype: Type) -> bool {
		return V3.isArray(vtype) && isUseless(vtype.nested.head);
	}
	def invokesystem(code: JvmCodeBuilder, name: string, sig: JvmSig) {
		usingSystem = true;
		code.invokesystem(name, sig);
	}
}
// Generates a single Jvm class
class JvmClassGen(builder: JvmClassfileBuilder) {
	def build(); // subclasses generate code
	// shorthand utilities for subclasses
	def jvmType(t: Type) -> JvmType { return builder.jprog.jvmType(t); }
	def jvmKind(t: Type) -> JvmKind { return builder.jprog.jvmType(t).kind; }
	def jvmSig(t: Type) -> JvmSig { return builder.jprog.jvmSig(t); }
	def addEmptyInit() {
		// add an empty initializer
		var jinit_none = builder.newMethod("<init>", "()V");
		var jinit_none_code = builder.newCodeBuilder();
		jinit_none_code.aload_0();
		jinit_none_code.invokespecial(builder.jclass.superName, "<init>", JvmTypes.SIG_VOID);
		jinit_none_code.retvoid();
		jinit_none_code.attach(jinit_none);
	}
	def genCode(builder: JvmClassfileBuilder, m: IrMethod, name: string, jsig: JvmSig, static: bool) -> JvmMethod {
		var jmeth = builder.newMethod(name, jsig.descriptor());
		jmeth.setFlag(static, JvmConstant.ACC_STATIC);
		var code = builder.newCodeBuilder();
		SsaJvmGen.new(builder.jprog, builder.jprog.context.enterMethod(m), jsig, code).emit();
		code.attach(jmeth);
		return jmeth;
	}
	def emit() {
		builder.jprog.emitJvmClassfile(builder.file);
	}
}
// Generates a Jvm class from a Virgil III class
class JvmV3ClassGen extends JvmClassGen {
	def classType: Type;
	def ic: IrClass;
	var superType: Type;
	new(builder: JvmClassfileBuilder, classType: Type, ic: IrClass) super(builder) {
		this.superType = V3.getSuperType(classType);
	}
	def build() {
		if (ic != null) {
			for (f in ic.fields) buildField(f);
			for (m in ic.methods) buildMethod(m);
			// add a heap initializer method if there are live instances
			if (ic.facts.C_HEAP) buildHeapInitializer();
			if (V3.isVariant(ic.ctype)) buildTagMethod();
		}
		addEmptyInit();
	}
	def buildNew(m: IrMethod) {
		// build the special "$new" method which is the real constructor
		var ntype = m.getMethodType();
		var nsig = builder.jprog.makeJvmSig(null, ntype, builder.jclass);
		var jnew_meth = builder.newStaticMethod("$new", nsig.descriptor());
		var jnew_code = builder.newCodeBuilder();

		jnew_code.newempty(builder.jclass);
		builder.emitLoadArguments(jnew_code, ntype, ntype, 0);
		var isig = builder.jprog.makeJvmSig(builder.jclass, ntype, builder.jclass);
		jnew_code.invokestatic(builder.jclass.name, "$init", isig);
		jnew_code.ret(JvmTypes.KIND_OBJECT);
		jnew_code.attach(jnew_meth);

		// build the $init method which contains the constructors' translated code
		genCode(builder, m, "$init", isig, false).setFlag(true, JvmConstant.ACC_STATIC);
	}
	def buildHeapInitializer() {
		var jprog = builder.jprog;
		var init_sig = jprog.makeHeapSig(classType);
		var init_meth = builder.newStaticMethod("$heap", init_sig.descriptor());
		var init_code = builder.newCodeBuilder();
		// 1. allocate an empty object
		init_code.newempty(builder.jclass);
		// emit initialization of each field
		var index = 0;
		for (i < ic.fields.length) {
			// load each parameter
			var f = ic.fields[i];
			var jtype = jprog.jvmType(f.fieldType);
			init_code.dup();
			init_code.load(jtype.kind, index);
			init_code.putfield(builder.jclass, V3.mangleIrMember(f), jtype);
			index = index + jtype.kind.width;
		}
		init_code.max_locals = index;
		init_code.ret(JvmTypes.KIND_OBJECT);
		init_code.attach(init_meth);
	}
	def buildField(f: IrField) {
		if (ic.inherits(f)) return;
		// this field is declared in this type.
		builder.jprog.jrep.declareField(f, builder, false);
	}
	def buildMethod(m: IrMethod) {
		if (m == null) return;
		if (m.facts.M_NEW) {
			buildNew(m);
			return;
		}
		if (ic.inherits(m)) return;
		// this method is declared in this type.
		var name = V3.mangleIrMember(if(m.source == null, ic.root(m), m));
		var methType = m.getMethodType();
		var jsig = jvmSig(methType);
		if (m.facts.M_ABSTRACT) {
			// method implementation is not used, just mark as abstract
			var jmeth = builder.newMethod(name, jsig.descriptor());
			jmeth.setFlag(true, JvmConstant.ACC_ABSTRACT);
			builder.file.setFlag(true, JvmConstant.ACC_ABSTRACT);
			return;
		}
		genCode(builder, m, name, jsig, false);
		if (m.facts.M_OVERRIDE) {
			// this is an override. check if bridge method is needed
			var sic = builder.jprog.getIrClass(superType);
			var sm = sic.methods[m.index];
			var smType = sm.getMethodType();
			if (smType != methType) {
				// this method overrides the parent method's type. generate a bridge.
				var bridge_meth = builder.newMethod(name, jvmSig(smType).descriptor());
				var bridge_code = builder.newCodeBuilder();
				bridge_code.aload_0();
				builder.emitLoadArguments(bridge_code, methType, smType, 1);
				bridge_code.invokevirtual(builder.jclass.name, name, jsig);
				bridge_code.ret(jvmKind(Function.getReturnType(methType)));
				bridge_code.attach(bridge_meth);
			}
		}
	}
	def buildTagMethod() {
		// emit the tag() method which gets the variant tag
		var sig = JvmTypes.SIG_VOID_INT;
		var tag_meth = builder.newMethod("tag", sig.descriptor());
		tag_meth.setFlag(true, JvmConstant.ACC_PUBLIC);
		var tag_code = builder.newCodeBuilder();
		tag_code.locals(sig.localsSize(true));
		tag_code.iconst(V3.getVariantTag(ic.ctype));
		tag_code.ret(JvmTypes.KIND_INT);
		tag_code.attach(tag_meth);
	}
}
// Generates a Jvm class from a Virgil III component
class JvmV3ComponentGen extends JvmClassGen {
	def componentType: Type;
	def ic: IrClass;
	var clinit_meth: JvmMethod;
	var clinit_code: JvmCodeBuilder;
	new(builder: JvmClassfileBuilder, componentType, ic) super(builder) {
	}

	def build() {
		for (f in ic.fields) buildField(f);
		for (m in ic.methods) buildMethod(m);

		if (clinit_code != null) {
			clinit_code.retvoid();
			clinit_code.attach(clinit_meth);
		}
	}
	def buildField(f: IrField) {
		builder.jprog.jrep.declareField(f, builder, true);
		buildInit(f);
	}
	def buildMethod(m: IrMethod) {
		if (m == null || m.facts.M_ABSTRACT) return;

		var methType = m.getMethodType();
		var jname = V3.mangleIrMember(m);
		var jsig = jvmSig(methType);
		genCode(builder, m, jname, jsig, true).setFlag(true, JvmConstant.ACC_PUBLIC);

		// check to see if this method is the main method and requires a main bridge
		if (!builder.jprog.test) {
			var mainMethod = builder.jprog.prog.getMain();
			if (mainMethod != null && m == mainMethod.member) {
				var args = Function.getParamType(methType);
				buildMainMethodBridge(jname, jsig, args, Function.getReturnType(methType));
			}
		}
	}
	def buildInit(f: IrField) {
		if (clinit_code == null) {
			clinit_meth = builder.newStaticMethod("<clinit>", "()V");
			clinit_code = builder.newCodeBuilder();
		}

		var record = builder.jprog.prog.getComponentRecord(V3.componentDecl(componentType));
		builder.emitValue(clinit_code, f.fieldType, record.values[f.index]);
		var memberRef = IrSpec.new(ic.ctype, [ic.ctype], f);
		builder.jprog.jrep.emitSetField(memberRef, clinit_code, false);
	}
	def buildMainMethodBridge(jname: string, jsig: JvmSig, args: Type, rt: Type) {
		var main_meth = builder.newStaticMethod("main", JvmTypes.SIG_JAVA_MAIN.descriptor());
		main_meth.setFlag(true, JvmConstant.ACC_PUBLIC);
		var main_code = builder.newCodeBuilder();

		// create the array of byte arrays
		if (args == V3.stringArrayType) {
			main_code.aload_0();
			main_code.arraylength();
			main_code.newarray(JvmTypes.BYTE_ARRAY);
			main_code.store(JvmTypes.KIND_OBJECT, 1);

			// start the loop at index 0
			main_code.iconst(0);
			main_code.store(JvmTypes.KIND_INT, 2);

			var loop_start = main_code.cur_pos;
			main_code.load(JvmTypes.KIND_INT, 2);
			main_code.aload_0();
			main_code.arraylength();
			var loop_test = main_code.branch_fw(JvmBytecode.IF_ICMPGE);

			// load the argument from the array
			main_code.aload_0();
			main_code.load(JvmTypes.KIND_INT, 2);
			main_code.aload(JvmTypes.KIND_OBJECT);
			// and convert it to a byte array
			main_code.invokevirtual(JvmTypes.java_lang_String.name, "getBytes", JvmTypes.SIG_VOID_BYTE_ARRAY);

			// and store it in the byte array array
			main_code.load(JvmTypes.KIND_INT, 2);
			main_code.swap();
			main_code.aload_1();
			main_code.dup_x2();
			main_code.pop();
			main_code.astore(JvmTypes.KIND_OBJECT);

			// and jump back to the beginning
			main_code.iinc(2, 1);
			main_code.goto_bw(loop_start);

			main_code.patchBranch(loop_test);
			main_code.aload_1();
		} else {
			main_code.locals(1);
		}
		main_code.invokestatic(builder.jclass.name, jname, jsig);
		if (rt == Int.TYPE || rt == Byte.TYPE || rt == Bool.TYPE) {
			main_code.invokestatic(JvmTypes.java_lang_System.name, "exit", JvmTypes.SIG_INT_VOID);
		}
		main_code.retvoid();
		main_code.attach(main_meth);
	}
}
// Generates a Jvm class representing a tuple
class JvmV3TupleGen extends JvmClassGen {
	def tupleType: Type;

	new(builder: JvmClassfileBuilder, tupleType) super(builder) { }

	def build() {
		// add the empty initializer
		addEmptyInit();

		// now build a static $new(...) method
		var ftype = Function.newType(tupleType, tupleType);
		var nsig = jvmSig(ftype);
		var new_meth = builder.newStaticMethod("$new", nsig.descriptor());
		var new_code = builder.newCodeBuilder();

		// allocate a tuple object
		new_code.newempty(builder.jclass);

		// initialize all of its fields in the $new(...) method
		var i = 0, localNum = 0;
		for (list = tupleType.nested; list != null; list = list.tail) {
			var vtype = list.head;
			if (!builder.jprog.isUseless(vtype)) {
				// declare the field
				var name = Strings.format1("f%d", i);
				var jtype = jvmType(vtype);
				var jval = builder.newField(name, jtype.descriptor());
				jval.setFlag(true, JvmConstant.ACC_PUBLIC);

				// emit the field assignment
				new_code.dup();
				new_code.load(jtype.kind, localNum);
				new_code.putfield(builder.jclass, name, jtype);
				localNum = localNum + jtype.kind.width;
			}
			i++;
		}
		new_code.ret(builder.jclass.kind);
		new_code.attach(new_meth);
	}
}
// Generates a class representing the base class of all closures
class JvmV3AbstractClosureGen extends JvmClassGen {
	new(builder: JvmClassfileBuilder) super(builder) { }

	def build() {
		builder.file.setFlag(true, JvmConstant.ACC_ABSTRACT);
		builder.newField("method", "I");
		addEmptyInit();

		// emit the equals() method which compares "method" and "object()"
		var equals_meth = builder.newMethod("equals", JvmTypes.SIG_EQUALV.descriptor());
		equals_meth.setFlag(true, JvmConstant.ACC_PUBLIC);
		var equals_code = builder.newCodeBuilder();
		equals_code.aload_1();
		equals_code.instanceof(builder.jclass);
		var b1 = equals_code.branch_fw(JvmBytecode.IFNE);
		equals_code.iconst_0();
		equals_code.ret(JvmTypes.KIND_BOOLEAN);
		equals_code.patchBranch(b1);

		equals_code.aload_0();
		equals_code.getfield(builder.jclass, "method", JvmTypes.INT);
		equals_code.aload_1();
		equals_code.checkcast(builder.jclass);
		equals_code.getfield(builder.jclass, "method", JvmTypes.INT);
		var b2 = equals_code.branch_fw(JvmBytecode.IF_ICMPEQ);
		equals_code.iconst_0();
		equals_code.ret(JvmTypes.KIND_BOOLEAN);
		equals_code.patchBranch(b2);

		equals_code.iconst_1();
		equals_code.ret(JvmTypes.KIND_BOOLEAN);
		equals_code.attach(equals_meth);
	}
}
// Generates a closure class which invokes a particular method on an object
class JvmV3ClosureGen extends JvmClassGen {
	def memberRef: IrSpec;
	def methodID: int;
	def methType: Type;
	def funcType = Function.prependParamType(AnyRef.TYPE, methType);
	var invoke_sig: JvmSig;

	new(builder: JvmClassfileBuilder, methType, memberRef, methodID) super(builder) {
		invoke_sig = builder.jprog.jvmSig(funcType);
	}

	def build() {
		var invoke_meth = builder.newMethod("invoke", invoke_sig.descriptor());

		if (memberRef == null) {
			buildAbstractClass(invoke_meth);
		} else {
			if (V3.isComponent(memberRef.receiver)) buildComponentClosure(invoke_meth);
			else buildClassClosure(invoke_meth);
		}
	}
	def buildAbstractClass(invoke_meth: JvmMethod) {
		builder.file.setFlag(true, JvmConstant.ACC_ABSTRACT);
		invoke_meth.setFlag(true, JvmConstant.ACC_ABSTRACT);
		addEmptyInit();
	}
	def buildClassClosure(invoke_meth: JvmMethod) {
		// add the object field and the initializer
		var classType = builder.jprog.jvmClass(memberRef.receiver);

		addEmptyInit();
		emitSingletonField();

		// build the static $get(...) method
		var new_method = builder.newStaticMethod("$get", JvmSig.new([classType], builder.jclass).descriptor());
		var new_code = builder.newCodeBuilder();
		new_code.locals(1);
		var isVariant = V3.isVariant(memberRef.receiver);
		if (!isVariant) {
			// perform an explicit null check for non-variant methods
			new_code.aload_0();
			var b = new_code.branch_fw(JvmBytecode.IFNONNULL);
			new_code.aconst_null();
			new_code.athrow();
			new_code.patchBranch(b);
		}
		// XXX: use the instance directly for variants; no need for a $get method.
		new_code.getstatic(builder.jclass, "instance", builder.jclass);
		new_code.ret(classType.kind);
		new_code.attach(new_method);

		// emit the invocation method
		var invoke_code = builder.newCodeBuilder();
		invoke_code.locals(invoke_sig.localsSize(true));
		builder.emitLoadArguments(invoke_code, funcType, memberRef.getUnboundType(), 1);
		builder.jprog.jrep.emitInvokeVirtual(invoke_code, memberRef, true);
		invoke_code.ret(jvmKind(Function.getReturnType(funcType)));
		invoke_code.attach(invoke_meth);
	}
	def buildComponentClosure(invoke_meth: JvmMethod) {
		addEmptyInit();
		emitSingletonField();

		// emit the invocation method
		var invoke_code = builder.newCodeBuilder();
		builder.emitLoadArguments(invoke_code, methType, methType, 2);
		var jclass = builder.jprog.jvmClass(memberRef.receiver);
		invoke_code.locals(invoke_sig.localsSize(true));
		invoke_code.invokestatic(jclass.name, V3.mangleIrMember(memberRef.member), jvmSig(methType));
		invoke_code.ret(jvmKind(Function.getReturnType(funcType)));
		invoke_code.attach(invoke_meth);
	}
	def emitSingletonField() {
		// emit the static singleton field
		var field_inst = builder.newField("instance", builder.jclass.descriptor());
		field_inst.setFlag(true, JvmConstant.ACC_PUBLIC + JvmConstant.ACC_STATIC + JvmConstant.ACC_FINAL);

		// emit the static initializer which creates the singleton
		var clinit_meth = builder.newStaticMethod("<clinit>", "()V");
		var clinit_code = builder.newCodeBuilder();

		clinit_code.newempty(builder.jclass);
		clinit_code.dup();
		clinit_code.iconst(methodID);
		clinit_code.putfield(builder.jclass, "method", JvmTypes.INT);
		clinit_code.putstatic(builder.jclass, "instance", builder.jclass);
		clinit_code.retvoid();
		clinit_code.attach(clinit_meth);
	}
}
// Generates a class that adapts between closures (because of incompatible Jvm types)
class JvmV3ClosureAdapterGen extends JvmClassGen {
	var exactFuncType: Type;
	var implicitFuncType: Type;
	var closureClass: JvmClass;
	var initSig: JvmSig;
	new(builder: JvmClassfileBuilder, exactType: Type, implicitType: Type) super(builder) {
		closureClass = builder.jprog.jvmClass(exactType);
		exactFuncType = Function.prependParamType(AnyRef.TYPE, exactType);
		implicitFuncType = Function.prependParamType(AnyRef.TYPE, implicitType);
		initSig = JvmSig.new([closureClass], jvmType(implicitType));
	}

	def build() {
		var invoke_sig = jvmSig(implicitFuncType);
		var invoke_meth = builder.newMethod("invoke", invoke_sig.descriptor());

		// add the closure field to the initializer
		var object_field = builder.newField("closure", closureClass.descriptor());

		addEmptyInit();

		// build the $new() method
		var new_method = builder.newStaticMethod("$new", initSig.descriptor());
		var new_code = builder.newCodeBuilder();
		new_code.newempty(builder.jclass);
		new_code.dup();
		new_code.aload_0();
		new_code.getfield(closureClass, "method", JvmTypes.INT);
		new_code.putfield(builder.jclass, "method", JvmTypes.INT);
		new_code.dup();
		new_code.aload_0();
		new_code.putfield(builder.jclass, "closure", closureClass);
		new_code.ret(JvmTypes.KIND_OBJECT);
		new_code.attach(new_method);

		// emit the invocation method
		var invoke_code = builder.newCodeBuilder();
		invoke_code.locals(invoke_sig.localsSize(true));
		invoke_code.aload_0();
		invoke_code.getfield(builder.jclass, "closure", closureClass);
		builder.emitLoadArguments(invoke_code, implicitFuncType, exactFuncType, 1);
		invoke_code.invokevirtual(closureClass.name, "invoke", jvmSig(exactFuncType));
		var exactReturn = Function.getReturnType(exactFuncType);
		var implicitReturn = Function.getReturnType(implicitFuncType);
		builder.jprog.jheap.emitJvmTypeConversion(invoke_code, exactReturn, implicitReturn);
		invoke_code.ret(jvmKind(implicitReturn));
		invoke_code.attach(invoke_meth);
	}
}
