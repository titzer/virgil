// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Kernels whose calling conventions various backends may understand.
enum Kernel(typename: string) {
	UNKNOWN("Unknown"), LINUX("Linux"), DARWIN("Darwin")
}
// Utility to build a new kernel call operator
def newOp(kernel: Kernel, retType: Type) -> Operator {
	var typeParam = TypeUtil.ONE_TYPE_PARAM.head;
	var paramType = Tuple.newType(Lists.cons2(Int.TYPE, typeParam));
	var ftype = FuncType.!(Function.newType(paramType, retType));
	return V3Op.newCallKernel(kernel, [typeParam], ftype.sig());
}
// Kernels have a "Kernel.syscall<T>(int, T) -> retType" member.
class Kernel_TypeCon(kernel: Kernel, retType: Type) extends Member_TypeCon {
	def OP = newOp(kernel, retType);
	new() super(kernel.typename, Kind.VOID, 0, TypeUtil.globalCache) { }
	def lookupMember(caller: VstFunc, t: Type, name: string) -> LookupResult {
		if (Strings.equal(name, "syscall")) return LookupResult.Inst(OP, TypeUtil.ONE_TYPE_PARAM);
		return LookupResult.None;
	}
}
