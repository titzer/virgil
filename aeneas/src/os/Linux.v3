// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Contains logic to generate a Linux executable (ELF) file.
class LinuxTarget extends Target {
	def space: AddressSpace;
	def intNorm: IntNormalizer;
	def machLoweringConfig: MachLoweringConfig;
	def newBackend: (Compiler, Program, MachProgram, MachDataWriter, Dwarf) -> MachBackend;
	def kernelCallReturnType: Type;
	def linuxComponent = Kernel_TypeCon.new(Kernel.LINUX, kernelCallReturnType);
	def DEFAULT_VADDR_START = 0x08000000;
	def elf_machine: int;

	new(name: string, space, intNorm, machLoweringConfig, newBackend, elf_machine, kernelCallReturnType) super(name) {
		if (space.addressWidth == 64) refPatterns = ScalarPatterns.TAGGED_PTR_64;
		else refPatterns = ScalarPatterns.TAGGED_PTR_32;
	}

	def configureCompiler(compiler: Compiler) {
		compiler.Reachability = true;
		if (false && space.addressWidth != 32) { // TODO: enable 64-bit range start
			var it = Int.getType(true, space.addressWidth);
			compiler.NormConfig.RangeStartType = it; // XXX: use unsigned for range start type?
			compiler.NormConfig.ArrayIndexType = it;
		}
		compiler.NormConfig.GetScalar = getScalar;
		compiler.NormConfig.GetBitWidth = getBitWidth;
	}
	private def getScalar(t: Type) -> Scalar.set {
		if (space.addressWidth == 32) {
			match (t) {
				x: BoolType => return Scalar.B32 | Scalar.B64;
				x: IntType => return if(x.width <= 32, Scalar.B32 | Scalar.B64, Scalar.B64); // XXX: Scalar.R64, once packed refs
				x: FloatType => return if(x.is64, Scalar.F64 | Scalar.B64, Scalar.F32 | Scalar.B32);
				_ => return Scalar.R32;
			}
		} else {
			match (t) {
				x: BoolType => return Scalar.B64;
				x: IntType => return Scalar.B64; // XXX: Scalar.R64, once packed refs
				x: FloatType => return Scalar.F64 | Scalar.B64;
				_ => return Scalar.R64;
			}
		}
	}
	private def getBitWidth(t: Type) -> byte {
		match (t) {
			x: BoolType => return 1;
			x: IntType => return x.width;
			x: FloatType => return x.total_width;
			_ => return space.addressWidth;
		}
	}
	def configureProgram(prog: Program) {
		var mach = MachProgram.new(prog, space, space, intNorm);
		prog.tprog = mach;
		var rt = MachRuntime.new(mach);
		mach.runtime = rt;
		MachModule.install(prog, mach); // installs "Pointer" typecon
		prog.typeEnv.add(linuxComponent);
		prog.typeEnv.add(rt.typeCon); // installs "CiRuntime" component (for RiRuntime code)
	}
	def addRoots(compiler: Compiler, prog: Program) {
		getRuntime(prog).addRoots();
	}
	private def getRuntime(prog: Program) -> MachRuntime {
		return MachProgram.!(prog.tprog).runtime;
	}
	def emit(compiler: Compiler, prog: Program) {
		var rt = getRuntime(prog), mach = rt.mach;
		mach.build(compiler, machLoweringConfig);

		// make an ELF file
		var elf = ElfHeader.new();
		elf.e_machine = elf_machine;

		// allocate section headers for string, symbol table
		var sections = if(CLOptions.SYMBOLS.val || compiler.DebugSymbol, ElfSections.new(elf, compiler.DebugSymbol));
		var dwarf = if(compiler.DebugSymbol, Dwarf.new(elf, sections, prog, mach));

		var pageAlign = rt.codeRegion.space.pageAlign;

		var vaddr_start = int.view(CLOptions.VM_START_ADDR.get());
		if (vaddr_start == 0) vaddr_start = DEFAULT_VADDR_START;
		var w = MachDataWriter.new(rt.codeRegion.space.pageAlign,
			vaddr_start, 300);

		// allocate a stack segment if a non-zero stack size is specified
		var stackSize = pageAlign.alignUp(int.!(CLOptions.STACK_SIZE.get()));
		if (stackSize > 0) {
			var stack = elf.addProgramHeader();
			stack.p_type = ElfConst.PT_LOAD;
			stack.p_filesz = 0;
			stack.p_offset = 0;
			stack.p_memsz = stackSize;
			stack.p_flags = ElfConst.PF_RW;
			stack.p_vaddr = w.startAddr;
			rt.recordStackStart(w.startAddr);
			w.startAddr += stackSize;
			rt.recordStackEnd(w.startAddr);
		}

		// fill out the code section
		var code = elf.addProgramHeader();
		code.p_type = ElfConst.PT_LOAD;
		code.p_offset = 0;
		code.p_filesz = pageAlign.size;
		code.p_memsz = pageAlign.size;
		code.p_flags = ElfConst.PF_RX;

		// ex segment for trapping explicit checks
		var ex = if(rt.src != null, elf.addProgramHeader());

		// fill out the data section
		var data = elf.addProgramHeader();
		data.p_type = ElfConst.PT_LOAD;
		data.p_filesz = pageAlign.size;
		data.p_memsz = pageAlign.size;
		data.p_flags = ElfConst.PF_RW;

		w.skipN(int.!(elf.size()));

		// emit code
		var backend = newBackend(compiler, prog, mach, w, dwarf);
		code.p_vaddr = w.endPageAddr();
		backend.genAllCode();
		rt.recordCodeStart(mach.entryStub.absolute);
		elf.e_entry = mach.entryStub.absolute;
		rt.recordCodeEnd(w.endAddr());
		mach.layoutMeta(w);
		mach.layoutRuntime(w);
		code.p_filesz = w.end();
		code.p_memsz = pageAlign.alignUp64(code.p_filesz);
		code.p_offset = 0;

		// generate the unmapped "ex" region for trapping explicit checks
		if (ex != null) {
			w.skipPage();
			var exStart = w.endPageAddr();
			var exSize = pageAlign.alignUp(rt.src.layoutExRegion(exStart));
			w.startAddr = w.startAddr + exSize;
			ex.p_vaddr = exStart;
			ex.p_memsz = exSize;
			ex.p_filesz = 0;
			ex.p_offset = 0;
		}

		// emit data
		w.skipPage();
		w.atEnd().align(mach.data.addressSize);
		data.p_vaddr = w.endPageAddr();
		data.p_offset = data.p_vaddr - w.startAddr;
		rt.recordDataStart(w.endAddr());
		mach.layoutData(w);
		rt.recordDataEnd(w.endAddr());
		rt.addHeapPointers(w);
		data.p_filesz = w.end() - data.p_offset;
		data.p_memsz = pageAlign.alignUp64(data.p_filesz + int.view(rt.heapSize));

		// patch all addresses in the binary
		match (backend) {
			b: Arm64LinuxBackend => w.patchArm64(backend.patchCodeAddrArm64);
			_ => w.patch(backend.patchCodeAddr);
		}

		if (sections != null) {
			sections.data.sh_addr = data.p_vaddr;
			sections.data.sh_offset = data.p_offset;
			sections.data.sh_size = data.p_filesz;

			sections.text.sh_addr = code.p_vaddr;
			sections.text.sh_offset = code.p_offset;
			sections.text.sh_size = code.p_filesz;

			sections.startStringSection(w);

			if (CLOptions.SYMBOLS.val) {
				sections.addFuncSymbol(w, ".entry", mach.entryStub);
				if (mach.allocStub != null) sections.addFuncSymbol(w, ".alloc", mach.allocStub);
				if (mach.signalStub != null) sections.addFuncSymbol(w, ".signal", mach.signalStub);

				var buf = StringBuilder.new();
				for (i < prog.ir.methods.length) {
					var m = prog.ir.methods[i];
					if (m.source == null) continue;
					var addr = mach.methodMap[m];
					if (addr == null || addr.absolute < 0) continue;
					sections.addMethodSymbol(w, m, addr, buf);
				}
				sections.finishStringSection(w);
				// encode the symbol table entries
				sections.encodeSymbolTable(w);
			} else {
				sections.finishStringSection(w);
			}
		}

		if (dwarf != null) {
			dwarf.emit(w);
		}

		// encode ELF header section
		elf.encode(w.at(0));

		var file = compiler.getOutputFileName(prog.name(), null);
		var fd = System.fileOpen(file, false);
		if (fd < 0) return prog.ERROR.OutputError(file);
		// write the entire file from the buffer array
		System.fileWriteK(fd, w.data, 0, w.end());
		System.fileClose(fd);
		// change permissions to make binary executable
		compiler.makeExecutable(file);
	}
}

enum DebugSection(printName: string) {
	str(".debug_str\x00"),
	loclists(".debug_loclists\x00"),
	info(".debug_info\x00"),
	abbrev(".debug_abbrev\x00"),
	line_str(".debug_line_str\x00"),
	line(".debug_line\x00"),
}
def DebugSectionCount = 6;

class ElfSections(elf: ElfHeader, debugSymbol: bool) {
	def str = ElfSectionHeader.new();
	def sym = ElfSectionHeader.new();
	def text = ElfSectionHeader.new();
	def data = ElfSectionHeader.new();
	def debugs = Array<ElfSectionHeader>.new(DebugSectionCount);
	def symbols = Vector<ElfSymbol>.new();

	var str_start: int;

	new() {
		elf.sheaders.put(ElfSectionHeader.new());
		str.index = elf.sheaders.length;
		elf.sheaders.put(str);
		if (CLOptions.SYMBOLS.val) {
			sym.index = elf.sheaders.length;
			elf.sheaders.put(sym);
		}
		text.index = elf.sheaders.length;
		elf.sheaders.put(text);
		data.index = elf.sheaders.length;
		elf.sheaders.put(data);

		if (debugSymbol) {
			for (e in DebugSection) {
				var section = ElfSectionHeader.new();
				debugs[e.tag] = section;
				section.index = elf.sheaders.length;
				elf.sheaders.put(section);
				section.sh_type = ElfConst.SHT_PROGBITS;;
			}
		}

		str.sh_type = ElfConst.SHT_STRTAB;
		if (CLOptions.SYMBOLS.val) {
			symbols.put(ElfSymbol.new());
			sym.sh_type = ElfConst.SHT_SYMTAB;
			sym.sh_link = str.index;
			sym.sh_entsize = if(elf.is64(),
				ElfConst.STENTSIZE64,
				ElfConst.STENTSIZE32);
			sym.sh_info = 1;
		}

		elf.e_shstrndx = str.index;
		text.sh_type = ElfConst.SHT_PROGBITS;
		text.sh_addralign = 1;
		data.sh_type = ElfConst.SHT_PROGBITS;
		data.sh_addralign = 4;

		text.sh_flags = ElfConst.SHF_ALLOC | ElfConst.SHF_EXECINSTR;
		data.sh_flags = ElfConst.SHF_ALLOC | ElfConst.SHF_WRITE;
	}
	def startStringSection(w: DataWriter) {
		w.atEnd();
		str_start = w.pos;
		w.putb(0);
		str.sh_offset = str_start;
		str.sh_name = w.pos - str_start;
		w.puta(".strtab\x00");

		if (CLOptions.SYMBOLS.val) {
			sym.sh_name = w.pos - str_start;
			w.puta(".symtab\x00");
		}

		text.sh_name = w.pos - str_start;
		w.puta(".text\x00");

		data.sh_name = w.pos - str_start;
		w.puta(".data\x00");

		if (debugSymbol) {
			for (e in DebugSection) {
				var section = debugs[e.tag];
				section.sh_name = w.pos - str_start;
				w.puta(e.printName);
			}
		}
	}
	def finishStringSection(w: DataWriter) {
		str.sh_size = w.pos - str_start;
	}
	def encodeSymbolTable(w: DataWriter) {
		sym.sh_offset = w.pos;
		if (elf.is64()) {
			for (i < symbols.length) symbols[i].encode64(w);
		} else {
			for (i < symbols.length) symbols[i].encode32(w);
		}
		sym.sh_size = w.pos - sym.sh_offset;
	}
	def addFuncSymbol(w: MachDataWriter, str: string, addr: Addr) {
		var entry = ElfSymbol.new();
		symbols.put(entry);
		entry.st_info = ElfConst.STB_GLOBAL | ElfConst.STT_FUNC;
		entry.st_name = w.pos - str_start;
		entry.st_value = addr.absolute;
		entry.st_size = addr.size;
		entry.st_index = i16.view(text.index);
		w.puta(str);
		w.putb(0);
	}
	def addMethodSymbol(w: DataWriter, m: IrMethod, addr: Addr, buf: StringBuilder) {
		var entry = ElfSymbol.new();
		symbols.put(entry);
		entry.st_info = ElfConst.STB_GLOBAL | ElfConst.STT_FUNC;
		entry.st_name = w.pos - str_start;
		entry.st_value = addr.absolute;
		entry.st_size = addr.size;
		entry.st_index = i16.view(text.index);
		buf.reset();
		m.source.renderLong(buf);
		buf.send(w.putr);
		w.putb(0);
	}
}
