// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def STDOUT = System.fileWriteK(1, _, _, _);
// Utility class for pretty colors and formatting output to the terminal.
component Terminal {
	def CTRL_BLACK        = "\x1B[0;30m";
	def CTRL_RED          = "\x1B[0;31m";
	def CTRL_GREEN        = "\x1B[0;32m";
	def CTRL_BROWN        = "\x1B[0;33m";
	def CTRL_BLUE         = "\x1B[0;34m";
	def CTRL_PURPLE       = "\x1B[0;35m";
	def CTRL_CYAN         = "\x1B[0;36m";
	def CTRL_LIGHTGRAY    = "\x1B[0;37m";
	def CTRL_DARKGRAY     = "\x1B[1;30m";
	def CTRL_BRIGHT_RED   = "\x1B[1;31m";
	def CTRL_BRIGHT_GREEN = "\x1B[1;32m";
	def CTRL_YELLOW       = "\x1B[1;33m";
	def CTRL_BRIGHT_BLUE  = "\x1B[1;34m";
	def CTRL_MAGENTA      = "\x1B[1;35m";
	def CTRL_BRIGHT_CYAN  = "\x1B[1;36m";
	def CTRL_WHITE        = "\x1B[1;37m";
	def CTRL_DEFAULT      = "\x1B[1;00m";

	// XXX: putc buffer is not future-proof for multiple threads
	private var putc_buffer: Array<byte> = Array.new(1);
	private def buf = TerminalBuffer.new();

	def putln(str: string) {
		put(str);
		ln();
	}
	def put(str: string) { System.puts(str); }
	def putc(ch: byte) {
		putc_buffer[0] = ch;
		System.puts(putc_buffer);
	}
	def ln() { putc('\n'); }
	def sp() { putc(' '); }
	def putd(val: int) { System.puti(val); }
	def put1<A>(fmt: string, a: A) { buf.put1(fmt, a).outt(); }
	def put2<A, B>(fmt: string, a: A, b: B) { buf.put2(fmt, a, b).outt(); }
	def put3<A, B, C>(fmt: string, a: A, b: B, c: C) { buf.put3(fmt, a, b, c).outt(); }
	def cyan<T>(fmt: string, a: T) { color(CTRL_CYAN, fmt, a); }
	def blue<T>(fmt: string, a: T) { color(CTRL_BLUE, fmt, a); }
	def red<T>(fmt: string, a: T) { color(CTRL_RED, fmt, a); }
	def green<T>(fmt: string, a: T) { color(CTRL_GREEN, fmt, a); }
	def yellow<T>(fmt: string, a: T) { color(CTRL_YELLOW, fmt, a); }
	def color<T>(c: string, fmt: string, a: T) {
		buf.puts(c).put1(fmt, a).puts(CTRL_DEFAULT).outt();
	}
}
// adds colorization methods to string buffers
class TerminalBuffer extends StringBuilder {
	var color: string;
	def blue() -> this {
		puts(color = Terminal.CTRL_BLUE);
	}
	def green() -> this {
		puts(color = Terminal.CTRL_GREEN);
	}
	def cyan() -> this {
		puts(color = Terminal.CTRL_CYAN);
	}
	def red() -> this {
		puts(color = Terminal.CTRL_RED);
	}
	def yellow() -> this {
		puts(color = Terminal.CTRL_YELLOW);
	}
	def purple() -> this {
		puts(color = Terminal.CTRL_PURPLE);
	}
	def end() -> this {
		if (color != null) puts(Terminal.CTRL_DEFAULT);
		color = null;
	}
	def putv(v: Result, t: Type) -> this {
		valColor();
		V3.renderResult(v, t, this);
		end();
	}
	def puthashv(v: Result, t: Type) -> this {
		valColor();
		putc('#');
		V3.renderResult(v, t, this);
		end();
	}
	def putcv(v: Result, t: Type) -> this {
		valColor();
		V3.renderResult(v, t, this);
		end();
	}
	def outln() -> this {
		ln().out(STDOUT).reset();
	}
	def outt() -> this {
		if (length > 0) out(STDOUT).reset();
	}
	def putref(i: SsaLink) -> this {
		instrUidColor();
		putc('@');
		putd(i.uid);
		end();
	}
	// Selectable palette
	def valColor() -> this {
		puts(color = Terminal.CTRL_MAGENTA);
	}
	def blockColor() -> this {
		puts(color = Terminal.CTRL_BLUE);
	}
	def instrColor() -> this {
		puts(color = Terminal.CTRL_GREEN);
	}
	def typeColor() -> this {
		puts(color = Terminal.CTRL_YELLOW);
	}
	def instrUidColor() -> this {
		puts(color = Terminal.CTRL_CYAN);
	}
}
