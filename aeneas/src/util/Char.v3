// Copyright 2014 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utilities for classifying characters, useful in parsing.
component Char {
	// stores the hex values and the properties of characters.
	var properties = Array<byte>.new(256);
	def IS_HEX          = '\x10';
	def IS_DECIMAL      = '\x20';
	def IS_IDENT_START  = '\x40';
	def IS_IDENT_MIDDLE = '\x80';
	new() {
		for (i = '0'; i <= '9'; i++) properties[i] = byte.!(i - '0');
		for (i = 'A'; i <= 'F'; i++) properties[i] = byte.!(10 + i - 'A');
		for (i = 'a'; i <= 'f'; i++) properties[i] = byte.!(10 + i - 'a');
		setRange(IS_IDENT_MIDDLE, 'a', 'z');
		setRange(IS_IDENT_MIDDLE, 'A', 'Z');
		setRange(IS_IDENT_MIDDLE | IS_DECIMAL | IS_HEX, '0', '9');
		setRange(IS_IDENT_MIDDLE, '_', '_');
		setRange(IS_IDENT_START, 'a', 'z');
		setRange(IS_IDENT_START, 'A', 'Z');
		setRange(IS_HEX, 'a', 'f');
		setRange(IS_HEX, 'A', 'F');
	}
	def setRange(p: byte, low: int, high: int) {
		for (i = low; i <= high; i++) properties[i] = properties[i] | p;
	}
	def hexValue(ch: byte) -> int {
		return properties[ch] & 0xF;
	}
	def isDecimal(ch: byte) -> bool {
		return (properties[ch] & IS_DECIMAL) != 0;
	}
	def isOctal(ch: byte) -> bool {
		return (u32.!(ch) - '0') <= u32.!(7);
	}
	def isHex(ch: byte) -> bool {
		return (properties[ch] & IS_HEX) != 0;
	}
	def isBinary(ch: byte) -> bool {
		return (u32.!(ch) - '0') <= u32.!(1);
	}
	def isIdentStart(ch: byte) -> bool {
		return (properties[ch] & IS_IDENT_START) != 0;
	}
	def isIdentMiddle(ch: byte) -> bool {
		return (properties[ch] & IS_IDENT_MIDDLE) != 0;
	}
	def renderEscaped(ch: byte, buf: StringBuilder) -> StringBuilder {
		match (ch) {
			'\'' => buf.puts("\\\'");
			'\"' => buf.puts("\\\"");
			'\t' => buf.puts("\\t");
			'\r' => buf.puts("\\r");
			'\n' => buf.puts("\\n");
			'\\' => buf.puts("\\\\");
		} else if (ch <= '~' && ch >= ' ') {
			buf.putc(ch);
		} else {
			// append a hex representation
			buf.putc('\\');
			buf.putc('x');
			buf.putc(Chars.hexMap_u[ch >>> 4]);
			buf.putc(Chars.hexMap_u[ch & 0xf]);
		}
		return buf;
	}
}
