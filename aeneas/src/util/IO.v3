// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// An abstraction for a stream which accepts bytes in large chunks.
class Stream {
	def outK(data: Array<byte>, start: int, len: int);
}
// A closure over a file descriptor which allows it to act as a stream.
class FileStream(file: int) extends Stream {
	def outK(data: Array<byte>, offset: int, length: int) {
		System.fileWriteK(file, data, offset, length);
	}
	def close() {
		System.fileClose(file);
	}
}
// A utility to buffer writes of bytes to a flushing function, with the assumption
// that the flushing function is more efficient with larger writes.
class Buffer {
	private def bufSize: int;
	private def ffunc: (Array<byte>, int, int) -> void;
	private var writer: DataWriter;
	private var total: int;

	// Create a new buffer with {bufSize} bytes which flushes to {ffunc}.
	new(bufSize, ffunc) {
		var array = Array<byte>.new(bufSize);
		writer = DataWriter.new().reset(array, 0, array.length);
		writer.refill = refill;
	}
	// Refill the {writer} with {size} bytes when full.
	private def refill(writer: DataWriter, size: int) -> DataWriter {
		if (size > writer.data.length) {
			// a larger buffer is necessary
			var ndata = Arrays.grow(writer.data, size + writer.data.length);
			writer.reset(ndata, writer.pos, ndata.length);
		} else {
			// current buffer will suffice, but need to flush it
			flush();
		}
		return writer;
	}
	// Flush any remaining data to the flush function.
	def flush() {
		if (writer.pos > 0) {
			total = total + writer.pos;
			ffunc(writer.data, 0, writer.pos);
			writer.at(0);
		}
	}
	// Get the writer which can output to this buffer.
	def getWriter() -> DataWriter {
		return writer;
	}
	// Get the total number of bytes output to this buffer.
	def getTotal() -> int {
		return total + writer.pos;
	}
}
