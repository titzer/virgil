// Copyright 2023 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class SsaCoverage(compiler: Compiler, prog: Program, matcher: VstMatcher, instr: bool) {
	var methList: List<IrMethod>;

	new() {
		compiler.ssaMon = onGen;
	}
	def onGen(memberRef: IrSpec) {
		if (!matcher.matches(memberRef.source())) return;
		var m = memberRef.asMethod();
		methList = List.new(m, methList);
		for (b in m.ssa.bfBlocks(null)) {
			var p = SsaCoverageProbe.new();
			var i = b.next;
			while (i != b && SsaPhi.?(i)) i = i.next;
			p.insertBefore(i);
		}
	}
	def report() {
		var results = Arrays.map(Lists.toArray(methList), count);
		results = Arrays.sort(results, 0, results.length, cmp);
		for (e in results) print(e);
	}
	def count(m: IrMethod) -> (IrMethod, int, int) {
		var count = 0, executed = 0;
		for (b in m.ssa.bfBlocks(null)) {
			for (i = b.next; i != b; i = i.next) match (i) {
				x: SsaCoverageProbe => {
					count++;
					if (x.executed) executed++;
				}
			}
		}
		return (m, executed, count);
	}
	def cmp(a: (IrMethod, int, int), b: (IrMethod, int, int)) -> bool {
		var ap = double.!(a.1) / double.!(a.2);
		var bp = double.!(b.1) / double.!(b.2);
		return ap > bp;
	}
	def print(m: IrMethod, executed: int, count: int) {
		var percent = (executed * 100) / count;
		if (percent < 100) Terminal.sp();
		if (percent < 10)  Terminal.sp();
		Terminal.cyan("%d", percent);
		Terminal.put("% ");
		if (percent < 100) Terminal.yellow("%q", m.renderLong);
		else Terminal.green("%q", m.renderLong);
		Terminal.ln();
/*TODO		if (percent < 100 && instr) {
			var printer = IcPrinter.new(null);
			printer.indent = 2;
			for (i < m.iccode.length) {
				var buf = TerminalBuffer.new();
				if (!wasExecuted(m, i)) buf.red();
				printer.render(buf, i, m.iccode[i]);
				buf.end().outt();
			}
		}
*/
	}
}

class SsaCoverageProbe extends SsaProbe {
	var executed = false;

	def fire(i: SsaInterpreter) {
		executed = true;
	}
	def dup() -> SsaProbe {
		var x = SsaCoverageProbe.new();
		x.executed = this.executed;
		return x;
	}
	def render(buf: StringBuilder) -> StringBuilder {
		return buf.put1("coverage-probe[executed=%z]", executed);
	}
}
