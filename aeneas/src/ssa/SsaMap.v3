// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A high-performance 1-N mapping from SsaInstr -> SsaInstr.
class SsaMap {
	private var map = Array<(int, int)>.new(32);
	private var numMapped = 0;
	private var idMark: int;
	private var startMark: int;
	private var instrs = Array<SsaInstr>.new(32);
	private var numInstrs = 0;
	private var graph: SsaGraph;

	// Reset the mapping for the given graph {g}.
	def reset(g: SsaGraph) {
		this.graph = g;
		idMark = g.markGen++;
		startMark = g.markGen++;
		map[0] = (0, 0);
		numMapped = 1;
		numInstrs = 0;
	}

	// Map {i} to 0 instructions.
	def set0(i: SsaInstr) {
		i.mark = startMark;
	}
	// Map {i} to itself.
	def setId(i: SsaInstr) {
		i.mark = idMark;
	}
	// Map {i} to {j}.
	def [i: SsaInstr] = t: SsaInstr {
		set1(i, t);
	}
	def set1(i: SsaInstr, j: SsaInstr) {
		if (i == j) return void(i.mark = idMark); // id mark
		i.mark = graph.markGen++;
		var index = i.mark - startMark;
		addMapping(index, addInstr(j));
	}
	// Map {i} to the multiple instructions in {r}.
	def setN(i: SsaInstr, r: Range<SsaInstr>) {
		i.mark = graph.markGen++;
		var index = i.mark - startMark;
		addMapping(index, (numInstrs, numInstrs + r.length));
		instrs = Arrays.grow(instrs, instrs.length + r.length + 10);
		for (j < r.length) instrs[numInstrs + j] = r[j];
		numInstrs += r.length;
	}
	// Check if there is any mapping at all for {i}.
	def has(i: SsaInstr) -> bool {
		if (i.mark == idMark) return true;
		return i.mark >= startMark;
	}
	// Check if there is a mapping for {i} and that it is exactly 1 instruction.
	def has1(i: SsaInstr) -> bool {
		if (i.mark == idMark) return true;
		if (i.mark < startMark) return false;
		var m = map[i.mark - startMark];
		return m.1 == (1 + m.0);
	}
	// Get the mapping for {i}, assuming it is exactly 1 instruction.
	def [i: SsaInstr] -> SsaInstr {
		return get1(i);
	}
	def get1(i: SsaInstr) -> SsaInstr {
		if (i.mark == idMark) return i;
		if (i.mark < startMark) return null;
		var index = i.mark - startMark;
		var m = map[index];
		return instrs[m.0]; // TODO: check that it is 1 entry
	}
	// Get the mapping for {i}, returning a range.
	def getN(i: SsaInstr) -> Range<SsaInstr> {
		if (i.mark == idMark) { // id mapping, not yet in the array
			i.mark = graph.markGen++;
			var index = i.mark - startMark;
			var t = addInstr(i);
			addMapping(index, t);
			return instrs[t.0 ... t.1];
		}
		var index = i.mark - startMark;
		var m = map[index];
		return instrs[m.0 ... m.1];
	}
	// Put the mapping for {i} into the Vector {vec}.
	def putInto(i: SsaInstr, vec: Vector<SsaInstr>) -> bool {
		if (i.mark == idMark) {
			vec.put(i);
			return true;
		}
		if (i.mark < startMark) return false;
		var index = i.mark - startMark;
		var m = map[index];
		for (j = m.0; j < m.1; j++) vec.put(instrs[j]);
		return true;
	}

	private def addInstr(j: SsaInstr) -> (int, int) {
		if (numInstrs >= instrs.length) instrs = Arrays.grow(instrs, instrs.length * 2);
		var n = numInstrs;
		instrs[n] = j;
		return (n, numInstrs = (n + 1));
	}
	private def addMapping(index: int, range: (int, int)) {
		if (index >= map.length) map = Arrays.grow(map, map.length + index + 10);
		map[index] = range;
	}

}
