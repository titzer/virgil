// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def CACHE_SIZE = 7;
def VOID_ENTRY = SsaConstCacheEntry.new(0, Void.TYPE, null, Fact.V_ZERO);
def TRUE_ENTRY = SsaConstCacheEntry.new(1, Bool.TYPE, Bool.TRUE, Fact.V_NON_ZERO);
def FALSE_ENTRY = SsaConstCacheEntry.new(2, Bool.TYPE, Bool.FALSE, Fact.V_ZERO);
def ZERO_ENTRY = SsaConstCacheEntry.new(3, Int.TYPE, null, Facts.V_DEFAULT);
def ONE_ENTRY = SsaConstCacheEntry.new(4, Int.TYPE, Int.ONE, Facts.intFacts(1));
def TWO_ENTRY = SsaConstCacheEntry.new(5, Int.TYPE, Int.TWO, Facts.intFacts(2));
def FOUR_ENTRY = SsaConstCacheEntry.new(6, Int.TYPE, Int.FOUR, Facts.intFacts(4));

class SsaConstCacheEntry(index: byte, vtype: Type, val: Val, facts: Fact.set) {
	def get(graph: SsaGraph) -> SsaConst {
		var v: SsaConst;
		if (graph.values != null) {
			v = graph.values[index];
			if (v != null) return v;
		}
		return graph.newSsaConst(index, vtype, val, facts);
	}
}
// Represents a graph of SSA code.
// Canonicalizes constants, contains parameters, etc.
class SsaGraph {
	var params: Array<SsaParam>;
	var returnType: Type;
	def startBlock = SsaBlock.new();
	var values: Array<SsaConst>;
	var valuesPos = CACHE_SIZE;
	var valueMap: HashMap<(Type, Val), int>; // XXX: make a custom hashmap for Ssa constants
	var markGen: int;		// marking generation
	var numValues: int;		// used in SSA interpreter

	new(params, returnType) { }

	def isMultiBlock() -> bool {
		return startBlock.succs().length > 0;
	}
	def intConst(v: int) -> SsaConst {
		match (v) {
			0 => return ZERO_ENTRY.get(this);
			1 => return ONE_ENTRY.get(this);
			2 => return TWO_ENTRY.get(this);
			4 => return FOUR_ENTRY.get(this);
		}
		return getConst(Int.TYPE, Int.box(v), Facts.intFacts(v));
	}
	def longConst(v: long) -> SsaConst {
		match (v) {
			0 => return ZERO_ENTRY.get(this);
			1 => return ONE_ENTRY.get(this);
			2 => return TWO_ENTRY.get(this);
			4 => return FOUR_ENTRY.get(this);
		}
		return getConst(Long.TYPE, Long.box(v), Facts.longFacts(v));
	}
	def arrayRangeStartConst(v: int, arrayType: Type) -> SsaConst {
		return getConst(V3Range.START_TYPE, ArrayRangeStart.new(v, arrayType), Facts.NONE);
	}
	def pointerRangeStartConst(addr: Addr) -> SsaConst {
		return getConst(V3Range.START_TYPE, PointerRangeStart.new(addr), Facts.NONE);
	}
	def boolConst(v: bool) -> SsaConst {
		return if(v, trueConst(), falseConst());
	}
	def trueConst() -> SsaConst {
		return TRUE_ENTRY.get(this);
	}
	def falseConst() -> SsaConst {
		return FALSE_ENTRY.get(this);
	}
	def zeroConst() -> SsaConst {
		return ZERO_ENTRY.get(this);
	}
	def oneConst() -> SsaConst {
		return ONE_ENTRY.get(this);
	}
	def twoConst() -> SsaConst {
		return TWO_ENTRY.get(this);
	}
	def fourConst() -> SsaConst {
		return FOUR_ENTRY.get(this);
	}
	def nullConst(t: Type) -> SsaConst {
		match (t.typeCon.kind) {
			BOOL => return falseConst();
			INT => {
				if (t == Int.TYPE) return zeroConst();
				if (IntType.!(t).width <= 32) return zeroConst();
				// XXX: long value ugliness
			}
			VOID => return nop();
			_ => ;
		}
		return getConst(t, null, Facts.V_DEFAULT);
	}
	def valConst(t: Type, v: Val) -> SsaConst {
		if (v == null) return nullConst(t);
		if (Box<bool>.?(v)) return boolConst(Box<bool>.!(v).val);
		if (IntType.?(t)) {
			var it = IntType.!(t);
			if (it.width <= 32) {
				match (v) {
					x: Box<int> => return intConst(x.val);
				}
			} else {
				match (v) {
					x: Box<int> => return longConst(if(it.signed, x.val, u32.view(x.val)));
				}
			}
		}
		if (Record.?(v)) return getConst(Record.!(v).rtype, v, Fact.V_NON_ZERO);
		return getConst(t, v, Facts.NONE);
	}
	def recordConst(r: Record) -> SsaConst {
		return getConst(r.rtype, r, Fact.V_NON_ZERO);
	}
	def nullReceiver() -> SsaConst {
		return nullConst(AnyRef.TYPE);
	}
	def nop() -> SsaConst {
		return VOID_ENTRY.get(this);
	}
	def bfBlocks(marker: SsaMarker) -> Array<SsaBlock> {
		var succs = startBlock.succs();
		if (succs == null || succs.length == 0) return [startBlock];
		if (marker == null) marker = SsaExternalMarker.new();
		marker.reset(this);
		var queue = Vector<SsaBlock>.new().grow(10); // TUNABLE: queue size
		queue.put(startBlock);
		// do breadth-first walk over all reachable blocks
		marker.setMark(startBlock, 0);
		for (i < queue.length) {
			var block = queue[i];
			for (e in block.succs()) {
				var b = e.dest;
				if (marker.getMark(b) < 0) {
					marker.setMark(b, 0);
					queue.put(b);
				}
			}
		}
		return queue.extract();
	}
	def addSuccessors(block: SsaBlock, queue: Vector<SsaBlock>, mark: int) {
		for (e in block.succs()) {
			var b = e.dest;
			if (b != null && b.mark != mark) {
				queue.put(b);
				b.mark = mark;
			}
		}
	}
	private def getConst(t: Type, v: Val, facts: Fact.set) -> SsaConst {
		if (valueMap != null) {
			// search using the hashmap if there is one.
			var index = valueMap[t, v];
			if (index > 0) {
				var vi = values[index-1];
				if (vi != null) return vi;
			}
		} else if (values != null) {
			// linear search of existing values.
			for (i = CACHE_SIZE; i < values.length; i++) {
				var vi = values[i];
				if (vi != null && vi.vtype == t && Values.equal(vi.val, v)) return vi;
			}
		}
		return newSsaConst(valuesPos++, t, v, facts);
	}
	private def hash(t: Type, v: Val) -> int {
		return t.hash + Values.hash(v);
	}
	private def equal(a: (Type, Val), b: (Type, Val)) -> bool {
		return a.0 == b.0 && Values.equal(a.1, b.1);
	}
	def newSsaConst(index: int, t: Type, v: Val, facts: Fact.set) -> SsaConst {
		if (values == null) {
			// Allocate new values array.
			values = Array.new(CACHE_SIZE + 4);
		} else if (valuesPos == values.length) {
			// Overflow of values array.
			if (valueMap == null) {
				// Allocate hashmap on first grow.
				valueMap = HashMap.new(hash, equal);
				for (i < values.length) {
					var v = values[i];
					if (v != null) valueMap[(v.vtype, v.val)] = i + 1;
				}
			}
			values = Arrays.grow(values, values.length * 2);
		}
		if (valueMap != null) valueMap[(t, v)] = index + 1;
		var instr = SsaConst.new(t, v);
		instr.facts = facts;
		values[index] = instr;
		return instr;
	}
}

// Base class of internal and external markers.
class SsaMarker {
	def reset(graph: SsaGraph) -> this;
	// Get the mark on a node, if one exists. Returns a negative number of no mark on this node.
	def getMark(i: SsaLink) -> int;
	// Set the mark on a node to a non-negative number, overwriting any previous mark.
	def setMark(i: SsaLink, mark: u31);
	// Allocate a new mark for this node which is greater than any mark on any other node.
	def allocMark(i: SsaLink) -> u31;
	// Clear the mark on the given node.
	def clearMark(i: SsaLink);
	// Get the number of marks allocated.
	def countMarks() -> u31;
}

// Marker that uses external storage (i.e. a {HashMap} to store marks on nodes.
class SsaExternalMarker extends SsaMarker {
	private var map: HashMap<SsaLink, int>;
	private var marks = 0;

	def reset(graph: SsaGraph) -> this {
		map = HashMap<SsaLink, int>.new(SsaLink.uid, SsaLink.==);
		marks = 0;
	}
	def getMark(i: SsaLink) -> int {
		return if(map.has(i), map[i], -1);
	}
	def setMark(i: SsaLink, mark: u31) {
		var max = mark + 1;
		if (max > marks) marks = max;
		map[i] = mark;
	}
	def allocMark(i: SsaLink) -> u31 {
		var mark = marks++;
		map[i] = mark;
		return u31.!(mark);
	}
	def countMarks() -> u31 {
		return u31.!(marks);
	}
}

// Marker that uses the internal {SsaLink.mark} field to store marks on nodes.
// More efficient than an {SsaExternalMarker}, but only one internal marker can be used
// at a time.
class SsaInternalMarker extends SsaMarker {
	var graph: SsaGraph;
	var base: int;

	def reset(graph: SsaGraph) -> this {
		this.graph = graph;
		base = if(graph != null, ++graph.markGen, -1);
	}

	def getMark(i: SsaLink) -> int {
		if (i.mark < base) return -1;
		return i.mark - base;
	}
	def setMark(i: SsaLink, mark: u31) {
		var m = base + mark;
		i.mark = m;
		var max = m + 1;
		if (max > graph.markGen) graph.markGen = max;
	}
	def allocMark(i: SsaLink) -> u31 {
		var mark = graph.markGen++;
		i.mark = mark;
		return u31.!(mark - base);
	}
	def countMarks() -> u31 {
		return u31.!(graph.markGen - base);
	}
}
