// Copyright 2016 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def newMap<T>() -> HashMap<SsaLink, T> {
	return HashMap<SsaLink, T>.new(SsaLink.uid, SsaLink.==);
}
class SsaGraphVerifier(context: SsaContext) {
	def seen = newMap<bool>();
	def blocks = Vector<SsaBlock>.new();
	def instrs = Vector<SsaLink>.new();
	def marks = newMap<int>();
	var allowCriticalEdges = true;
	var allowDeadNodes = true;
	var allowUnreachablePreds = false;

	def verify() {
		var graph = context.graph;
		// Mark constants.
		if (graph.values != null) {
			for (v in graph.values) {
				if (v != null) {
					instrs.put(v);
					marks[v] = instrs.length;
				}
			}
		}
		// Mark parameters.
		for (p in graph.params) checkAndMark(p);

		// Traverse blocks in breadth-first order.
		var seen = newMap<bool>();
		seen[graph.startBlock] = true;
		blocks.put(graph.startBlock);
		for (i = 0; i < blocks.length; i++) {
			var block = blocks[i];
			verifyBlock(block);
			for (s in block.succs()) {
				var d = s.dest;
				if (seen[d]) continue;
				seen[d] = true;
				blocks.put(d);
			}
		}

		// Check that all links point to marked nodes.
		for (j < instrs.length) {
			var i = instrs[j];
			var inputs = Ssa.NO_DF_EDGES;
			if (SsaInstr.?(i)) inputs = SsaInstr.!(i).inputs;
			for (e in inputs) {
				check(marks[e.dest] > 0, "instr @%d references unreachable input", i);
			}
		}

		// Check for references from dead nodes to live nodes.
		if (!allowDeadNodes) {
			for (j < instrs.length) {
				var i = instrs[j];
				if (!SsaInstr.?(i)) continue;
				for (l: Edge<SsaInstr> = SsaInstr.!(i).useList; l != null; l = l.next) {
					check2(marks[l.src] > 0, "instr @%d used by dead instruction @%d", i, l.src);
				}
			}
		}

		// Check all predecessors of reachable blocks are reachable.
		if (!allowUnreachablePreds) {
			for (i < blocks.length) {
				var b = blocks[i];
				for (edge in b.preds) {
					var src = edge.src.block();
					check2(seen[src], "predecessor #%d -> #%d is unreachable", src, edge.dest);
				}
			}
		}
	}
	def checkAndMark(i: SsaLink) {
//		Terminal.put1("  checkAndMark @%d\n", i.uid);
		check(!i.facts.O_KILLED, "@%d has been marked as killed", i);
		check(marks[i] == 0, "@%d is already marked", i);
		instrs.put(i);
		marks[i] = instrs.length;
	}
	def verifyBlock(block: SsaBlock) {
//		Terminal.put1("verifyBlock #%d\n", block.uid);
		context.block = block;
		var start = instrs.length;
		checkAndMark(block);

		// Verify that no predecessors are null.
		for (i < block.preds.length) {
			var p = block.preds[i];
			check(p != null, "null predecessor", block);
			check(p.dest == block, "predecessor has wrong destination", block);
			check(p.desti == i, "predecessor has wrong destination index", block);
		}
		// Verify that if the block is empty, it points to itself in a cycle.
		if (block.next == block) {
			check(block.prev == block, "block.next == block but block.prev != block", block);
			return;
		}
		// Otherwise, check the last instruction is an end.
		check(SsaEnd.?(block.prev), "block.prev @%d is not an SsaEnd", block.prev);
		// Gather the instructions in the block.
		for (i: SsaLink = block.next; true; i = i.next) {
			check(i != null, "null link in block", i);
			if (i == null) break;
//			Terminal.put2("  marks[@%d] == %d\n", i.uid, marks[i]);
			if (marks[i] > 0) {
				check(i == block, "block head should complete cycle, instead @%d did", i);
				break;
			}
			checkAndMark(i);
		}
		// Verify the forward and backward directions of the links.
		for (i = start; i < instrs.length; i++) {
			var instr = instrs[i], prev: SsaLink;
			if (i > start) prev = instrs[i - 1];
			else prev = instrs[instrs.length - 1];
			check(prev == instr.prev, "backward link integrity @%d", instr);
			check(prev.next == instr, "forward link integrity @%d", prev);
		}
		// Verify the instructions in the block.
		var nonphi = false;
		for (i = start + 1; i < instrs.length; i++) {
			match (instrs[i]) {
				x: SsaPhi => {
					check(!nonphi, "phi @%d is preceded by non-phi instruction", x);
					verifyPhi(block, x);
				}
				x: SsaInstr => {
					verifyInstr(x);
					nonphi = true;
				}
				x: SsaEnd => {
					verifyEnd(x);
					check(i == instrs.length - 1, "end @%d is in middle of block", x);
					nonphi = true;
				}
				_ => nonphi = true;
			}
		}
		// Verify the control edges.
		var end = block.end();
		if (end == null) {
			context.fail1("no end found for block #%d", block.uid);
			return;
		}
		for (s in end.succs) {
			check(s.dest != null, "control edge has null destination", block);
			var found = false;
			for (i < s.dest.preds.length) {
				var p = s.dest.preds[i];
				if (p == s) {
					found = true;
					if (i != s.desti) {
						var msg = StringBuilder.new()
							.put2("control edge #%d -> #%d", s.src.uid, s.dest.uid)
							.put2(" at dest.preds[%d], src.desti=%d", i, s.desti);
						check(false, msg.toString(), s.dest);
					}
					break;
				}
				if (!allowCriticalEdges) {
					check(end.succs.length <= 1 || s.dest.preds.length <= 1, "critical edge found ->#%d", s.dest);
				}
			}
			check(found, "control edge not found in #%d.preds", s.dest);
		}
	}
	def verifyPhi(block: SsaBlock, phi: SsaPhi) {
		check(phi.inputs.length == block.preds.length, "phi @%d has the wrong number of inputs", phi);
	}
	def verifyInstr(instr: SsaInstr) {
		for (x in instr.inputs) {
			check(marks[x.dest] < marks[instr], "input does not dominate @%d", instr);
		}
	}
	def verifyEnd(end: SsaEnd) {
		for (x in end.inputs) {
			check(marks[x.dest] < marks[end], "input does not dominate @%d", end);
		}
	}
	def check(cond: bool, msg: string, i: SsaLink) {
		if (cond) return;
		var p = SsaPrinter.new();
		//if (context.block != null)
		p.printBlock(context.block);
		context.fail1(msg, if(i == null, -1, i.uid));
	}
	def check2(cond: bool, msg: string, i: SsaLink, j: SsaLink) {
		if (cond) return;
		var p = SsaPrinter.new();
		//if (context.block != null)
		p.printBlock(context.block);
		context.fail(Strings.format2(msg, if(i == null, -1, i.uid), if(j == null, -1, j.uid)));
	}
}
