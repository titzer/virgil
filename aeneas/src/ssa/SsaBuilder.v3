// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def checkNoTypeVarsInOp(op: Operator) {
	for (t in op.typeArgs) checkNoTypeVars(t);
	for (t in op.sig.paramTypes) checkNoTypeVars(t);
	for (t in op.sig.returnTypes) checkNoTypeVars(t);
}
def checkNoTypeVars(t: Type) {
	if (t.hasTypeVars()) return V3.fail("no type vars allowed");
}
def checkInputs(inputs: Array<SsaInstr>) {
	for (i in inputs) if (i == null) return V3.fail("null input");
}

def NEW_OPTIMIZER = false;
def N = Facts.NONE;
// Support class for constructing SSA instruction-by-instruction.
class SsaBuilder extends SsaBlockState {
	def context: SsaContext;
	def graph: SsaGraph;
	var block: SsaBlock;
	var pt: SsaLink;
	var opt: SsaOptimizer;
	var source: Source;

	new(context, graph, block) { }

	// General methods.
	def addApply(source: Source, op: Operator, args: Array<SsaInstr>) -> SsaInstr {
		if (Debug.PARANOID) { checkNoTypeVarsInOp(op); checkInputs(args); }
		if (end) return unreachable(op.sig.returnType());
		var opcode = op.opcode;
		if (Opcode.VstSugar.?(opcode)) {
			return at(source).addApplyVst(source, op, Opcode.VstSugar.!(opcode).op, args);
		}
		var i = SsaApplyOp.new(source, op, args);
		i.setFact(Opcodes.facts(op.opcode));
		append(i);
		if (NEW_OPTIMIZER && opt != null) return opt.reduceApply(this, i);
		return i;
	}
	def addApplyF(op: Operator, args: Array<SsaInstr>, facts: Fact.set) -> SsaInstr {
		if (Debug.PARANOID) { checkNoTypeVarsInOp(op); checkInputs(args); }
		if (end) return unreachable(op.sig.returnType());
		var opcode = op.opcode;
		if (Opcode.VstSugar.?(opcode)) {
			return at(source).addApplyVst(source, op, Opcode.VstSugar.!(opcode).op, args);
		}
		var i = SsaApplyOp.new(source, op, args);
		i.setFact(Opcodes.facts(op.opcode) | facts);
		append(i);
		if (NEW_OPTIMIZER && opt != null) return opt.reduceApply(this, i);
		return i;
	}
	def addApplyVst(source: Source, op: Operator, vst: VstOperator, args: Array<SsaInstr>) -> SsaInstr {
		var pt = op.sig.paramTypes;
		if (args.length != pt.length) args = normalizeArgs(pt, args);
		match (vst) {
			TypeCast => return opTypeCast(op.typeArgs[0], op.typeArgs[1], args[0]);
			TypeQuery => return opTypeQuery(op.typeArgs[0], op.typeArgs[1], args[0]);
			NotEqual => return opBoolNot(opEqual(pt[0], args[0], args[1]));
			BoolAndAnd => return opBoolAnd0(args[0], args[1]); // laziness handled in VstSsaGen
			BoolOrOr => return opBoolOr0(args[0], args[1]); // laziness handled in VstSsaGen
			Commute(op) => return addApply(source, op, [args[1], args[0]]);
			IntMixedEqual => return opIntCompare(true, IntType.opEq, pt[0], pt[1], args[0], args[1]);
			IntMixedNotEqual => return opBoolNot(opIntCompare(true, IntType.opEq, pt[0], pt[1], args[0], args[1]));
			IntMixedLt => return opIntCompare(false, IntType.opLt, pt[0], pt[1], args[0], args[1]);
			IntMixedLteq => return opIntCompare(false, IntType.opLtEq, pt[0], pt[1], args[0], args[1]);
			IntBitwiseNeg => return opBitwiseNeg(IntType.!(op.typeArgs[0]), args[0]);
			IntView => return opIntView(op.typeArgs[0], IntType.!(op.typeArgs[1]), args[0]);
			FloatSign => {
				var ft = FloatType.!(op.typeArgs[0]);
				return opFloatBitField(op, ft, ft.total_width - byte.!(1), 0, args[0]);
			}
			FloatExponent => {
				var ft = FloatType.!(op.typeArgs[0]);
				return opFloatBitField(op, ft, ft.fraction_width, 0 - ft.exponentBias(), args[0]);
			}
			FloatFraction => {
				var ft = FloatType.!(op.typeArgs[0]);
				return opFloatBitField(op, ft, 0, 0, args[0]);
			}
			VariantGetName => {
				var t = op.typeArgs[0];
				var record: Record;
				if (EnumType.?(t)) record = EnumType.!(t).getNames(context.prog);
				else record = V3Class_TypeCon.!(t.typeCon).getNames(context.prog);
				var array = graph.recordConst(record);
				var tag = add(V3Op.newVariantGetTag(op.typeArgs[0]), args, N);
				var index = opIntViewI0(V3.getVariantTagType(t), Int.TYPE, tag);
				return add(V3Op.newArrayGetElem(V3.stringArrayType), [array, index], Facts.O_SAFE_BOUNDS | Fact.O_PURE);
			}
			EnumGetParam(field) => {
				var constructor = field.receiver.constructor;
				if (constructor.initIndex >= 0) {
					// initialize the enum fields if necessary
					opInit(context.prog.ir.makeIrClass(field.receiver.declType).methods[0]);
				}
				var arrayType = field.enumVals.rtype;
				var array = graph.recordConst(field.enumVals);
				return add(V3Op.newArrayGetElem(arrayType), [array, args[0]], Facts.O_SAFE_BOUNDS | Fact.O_PURE);
			}
			EnumSetHas(vcase) => {
				var etc = EnumSetType.!(pt[0]), it = etc.repType;
				var val: Val = if(it.width <= 32, Int.box(1 << u5.!(vcase.tag)), Long.box(1L << u6.!(vcase.tag)));
				var mask = graph.valConst(it, val);
				var and = add(it.opAnd(), [args[0], mask], N);
				return add(it.opEq(), [and, mask], N);
			}
			EnumSetUnion => {
				var etc = EnumSetType.!(pt[0]), it = etc.repType;
				return add(it.opOr(), args, N);
			}
			EnumSetIntersect => {
				var etc = EnumSetType.!(pt[0]), it = etc.repType;
				return add(it.opAnd(), args, N);
			}
			EnumSetSubtract => {
				var etc = EnumSetType.!(pt[0]), it = etc.repType;
				var minus_one = graph.valConst(it, it.box(-1));
				var inv = add(it.opXor(), [args[1], minus_one], N);
				return add(it.opAnd(), [args[0], inv], N);
			}
			EnumSetStrictSubset => {
				var etc = EnumSetType.!(pt[0]), it = etc.repType;
				var intersect = add(it.opAnd(), args, N);
				var lt = add(it.opEq(), [args[0], intersect], N);
				var neq = opBoolNot(add(it.opEq(), [args[0], args[1]], N));
				return opBoolAnd0(lt, neq);
			}
			EnumSetStrictSuperset => {
				var etc = EnumSetType.!(pt[0]), it = etc.repType;
				var intersect = add(it.opAnd(), args, N);
				var gt = add(it.opEq(), [args[1], intersect], N);
				var neq = opBoolNot(add(it.opEq(), [args[0], args[1]], N));
				return opBoolAnd0(gt, neq);
			}
			EnumSetSubset => {
				var etc = EnumSetType.!(pt[0]), it = etc.repType;
				var intersect = add(it.opAnd(), args, N);
				return add(it.opEq(), [args[0], intersect], N);
			}
			EnumSetSuperset => {
				var etc = EnumSetType.!(pt[0]), it = etc.repType;
				var intersect = add(it.opAnd(), args, N);
				return add(it.opEq(), [args[1], intersect], N);
			}
		}
	}
	def opFloatBitField(op: Operator, ft: FloatType, shift: byte, plus: int, x: SsaInstr) -> SsaInstr {
		var viewOp = if(ft.is64, V3Op.opIntViewF64, V3Op.opIntViewF32);
		x = pure(viewOp, [x]);
		var ivt = IntType.!(viewOp.sig.returnType());
		var itt = IntType.!(op.sig.returnType());
		if (shift > 0) {
			x = add(ivt.opShr(), [x, graph.intConst(shift)], Fact.O_NO_SHIFT_CHECK);
		}
		if (plus != 0) {
			// XXX: can be a little more efficient to do the subtraction after truncation
			var val = if(ivt.width > 32, graph.longConst(plus), graph.intConst(plus));
			x = pure(ivt.opAdd(), [x, val]);
		}
		return opIntViewI0(ivt, itt, x);
	}
	def opFloatBitEq(isDouble: bool, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		return pure(if(isDouble, V3Op.opFloatBitEq64, V3Op.opFloatBitEq32), [x, y]);
	}
	def opBitwiseNeg(it: IntType, e: SsaInstr) -> SsaInstr {
		var const = if(it.width <= 32,
			graph.intConst(Eval.doIntTrunc32(it, -1)),
			graph.longConst(Eval.doIntTrunc64(it, -1)));
		return pure(it.opXor(), [e, const]);
	}
	def opIntView(ft: Type, itt: IntType, e: SsaInstr) -> SsaInstr {
		if (FloatType.?(ft)) {
			var op = if(FloatType.!(ft).is64, V3Op.opIntViewF64, V3Op.opIntViewF32);
			return pure(op, [e]);
		} else {
			return opIntViewI0(ft, itt, e);
		}
	}
	def opEnumSetHas(etc: EnumSetType, set: SsaInstr, e: SsaInstr) -> SsaInstr {
		var it = etc.repType;
		var one = graph.valConst(it, if(it.width <= 32, Int.ONE, Long.box(1L)));
		var mask = add(it.opShl(), [one, e], Fact.O_NO_SHIFT_CHECK);
		var and = add(it.opAnd(), [set, mask], N);
		return add(it.opEq(), [and, mask], N);
	}
	def opIntCompare(eq: bool, infix: IntType -> Operator, xt: Type, yt: Type, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		var lt = IntType.!(xt), rt = IntType.!(yt);
		if (lt == rt) return pure(infix(lt), [x, y]);
		// Handle mixed-sign comparisons.
		if (lt.signed) {
			var neg = opIntLtZero(lt, x);
			x = opIntSignedPromote(lt, rt, x);
			var cmp = add(infix(rt), [x, y], N);
			if (eq) return opBoolAnd0(opBoolNot(neg), cmp);
			return opBoolOr0(neg, cmp);
		} else {
			var neg = opIntLtZero(rt, y);
			y = opIntSignedPromote(rt, lt, y);
			var cmp = add(infix(lt), [x, y], N);
			if (eq) return opBoolAnd0(opBoolNot(neg), cmp);
			return opBoolAnd0(opBoolNot(neg), cmp);
		}
	}
	def opIntLtZero(t: IntType, x: SsaInstr) -> SsaInstr {
		if (x.facts.V_NON_NEGATIVE) return graph.falseConst();
		if (x.facts.V_BELOW_ZERO) return graph.trueConst();
		return add(t.opLt(), [x, graph.nullConst(t)], N);
	}
	def opIntQueryI(ift: IntType, itt: IntType, x: SsaInstr) -> SsaInstr {
		var diff = int.!(ift.width) - int.!(itt.width);
		if (diff > 0) {
			if (ift.signed) {
				if (itt.signed) {
					var d = graph.valConst(Byte.TYPE, Int.box(diff));
					var s = pure(ift.opShl(), [x, d]);
					s = pure(ift.opSar(), [s, d]);
					return pure(ift.opEq(), [x, s]); // ((x << diff) >> diff) == x
				} else {
					var s = pure(ift.opShr(), [x, graph.valConst(Byte.TYPE, Int.box(itt.width))]);
					return pure(ift.opEq(), [s, graph.nullConst(ift)]); // (x >> T.width) == 0
				}
			} else {
				return pure(ift.opLtEq(), [x, graph.valConst(ift, itt.max)]); // x <= T.max
			}
		} else if (diff == 0) {
			if (ift.signed == itt.signed) return graph.trueConst();
			if (ift.signed) return pure(ift.opLtEq(), [graph.nullConst(ift), x]); // x >= 0
			return pure(ift.opLtEq(), [x, graph.valConst(ift, itt.max)]); // x <= T.max
		} else {
			if (ift.signed && !itt.signed) {
				return pure(ift.opLtEq(), [graph.nullConst(ift), x]); // x >= 0
			}
			return graph.trueConst();
		}
	}
	def opIntCastI(ift: IntType, itt: IntType, x: SsaInstr) -> SsaInstr {
		var ok = opIntQueryI(ift, itt, x);
		var inv = opBoolNot(ok);
		opConditionalThrow(V3Exception.TypeCheck, inv);
		return opIntViewI0(ift, itt, x);
	}
	def opIntSignedPromote(st: IntType, ut: IntType, x: SsaInstr) -> SsaInstr {
		return if(st.width != ut.width, opIntViewI0(Int.getType(false, st.width), ut, x), x);
	}
	def normalizeArgs(paramTypes: Array<Type>, args: Array<SsaInstr>) -> Array<SsaInstr> {
		if (paramTypes.length == 0) return [];
		if (paramTypes.length == 1) {
			if (args.length == 0) return [graph.nullConst(paramTypes[0])];
			var tt = paramTypes[0];
			return [opTupleCreate(tt, args)];
		}
		if (args.length != 1) return V3.fail("expected to expand exactly one argument");
		var tt = Tuple.newType(Lists.fromArray(paramTypes));
		var arg0 = args[0];
		args = Array<SsaInstr>.new(paramTypes.length);
		for (i < paramTypes.length) args[i] = opTupleGetElem(tt, i, arg0);
		return args;
	}
	def addThrow(source: Source, ex: string) -> SsaInstr {
		if (end) return block.end();
		end = true;
		var t = SsaThrow.new(source, ex);
		block.append(t);
		return t;
	}
	def addGoto(target: SsaBlock) {
		if (end) return;
		end = true;
		block.append(SsaGoto.new(target));
	}
	def addReturn(vals: Array<SsaInstr>) {
		if (Debug.PARANOID) { checkInputs(vals); }
		if (end) return;
		end = true;
		block.append(SsaReturn.new(vals));
	}
	def addPhi(t: Type, vals: Array<SsaInstr>) -> SsaInstr {
		if (Debug.PARANOID) { checkInputs(vals); }
		var phi = SsaPhi.new(t, block, vals);
		block.prepend(phi);
		return phi;
	}
	def append(i: SsaInstr) {
		if (pt != null) i.insertBefore(pt);
		else block.append(i);
	}

	// sets the source position that will apply to subsequent instructions
	def at(source: Source) -> this {
		this.source = source;
	}
	def addIf(cond: SsaInstr, tblock: SsaBlock, fblock: SsaBlock) {
		if (Debug.PARANOID) { checkInputs([cond]); }
		if (end) return;
		if (SsaConst.?(cond)) {
			// fold if(#k)
			return addGoto(if(cond.unbox<bool>(), tblock, fblock));
		}
		if (SsaApplyOp.?(cond)) {
			// if(!op) t else f => if(op) f else t
			if (SsaApplyOp.!(cond).op.opcode == Opcode.BoolNot) return addIf(cond.input0(), fblock, tblock);
			// XXX: optimize if(x == true|false) and if(x != true|false)
		}
		end = true;
		var i = SsaIf.new(cond, tblock, fblock);
		append(i);
		if (NEW_OPTIMIZER && opt != null) opt.reduceIf(this, i);
	}
	def addIfNull(x: SsaInstr, tblock: SsaBlock, fblock: SsaBlock) {
		if (end) return;
		var t = x.getType();
		return addIf(pure(V3Op.newRefEq(t), [x, graph.nullConst(t)]), tblock, fblock);
	}
	def opEqualOf(op: Operator, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (x == y && !op.isPolymorphic() && !FloatType.?(op.typeArgs[0])) return graph.trueConst();
		return add(op, [x, y], N);
	}
	// x == y
	def opEqual(t: Type, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		match (t.typeCon.kind) {
			V3Kind.VOID,
			V3Kind.COMPONENT => return graph.trueConst();
			_ => return opEqualOf(V3Op.newEqual(t), x, y);
		}
	}
	// x != y
	def opNotEqual(t: Type, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		return opBoolNot(opEqual(t, x, y));
	}
	// x && y
	def opBoolAnd0(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		return opBoolAnd(V3Op.opBoolAnd, x, y);
	}
	def opBoolAnd(op: Operator, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (SsaConst.?(x)) return if(x.unbox<bool>(), y, x);
		if (SsaConst.?(y)) return if(y.unbox<bool>(), x, y);
		return if(x == y, x, add(op, [x, y], N));
	}
	// x || y
	def opBoolOr0(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		return opBoolOr(V3Op.opBoolOr, x, y);
	}
	def opBoolOr(op: Operator, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		if (SsaConst.?(x)) return if(x.unbox<bool>(), x, y);
		if (SsaConst.?(y)) return if(y.unbox<bool>(), y, x);
		return if(x == y, x, add(op, [x, y], N));
	}
	// !x
	def opBoolNot(x: SsaInstr) -> SsaInstr {
		if (SsaConst.?(x)) return graph.boolConst(!x.unbox<bool>());
		return pure(V3Op.opBoolNot, [x]);
	}
	// TypeCast<F, T>(x)
	def opTypeCast(ft: Type, tt: Type, x: SsaInstr) -> SsaInstr {
		if (ft == tt) return x; // fold TypeCast<T, T>
		if (tt == x.getType()) return x; // fold TypeCast<F, T>(x: T)
		var cast = TypeSystem.newTypeCast(ft, tt);
		if (cast != TypeCast.UNKNOWN_CAST && SsaConst.?(x)) {
			var r = Eval.doCast(cast, ft, tt, SsaConst.!(x).val);
			if (r.0) return graph.valConst(tt, r.1);
			else return addThrow(source, V3Exception.TypeCheck);
		}

		match (cast) {
			TRUE => return x; // fold TypeCast
			THROW => {
				return addThrow(source, V3Exception.TypeCheck); // fold TypeCast
			}
			THROW_IF_NOT_NULL => {
				// TypeCast -> ConditionalThrow(x != null)
				var cmp = opNotEqual(ft, x, graph.nullConst(ft));
				opConditionalThrow(V3Exception.TypeCheck, cmp);
				return graph.nullConst(tt);
			}
			INT_VIEW_I => {
				return opIntViewI0(ft, tt, x);
			}
			INT_CAST_I => {
				return opIntCastI(IntType.!(ft), IntType.!(tt), x);
			}
			FLOAT_PROMOTE_I => {
				return pure(V3Op.newFloatPromoteI(ft, tt), [x]);
			}
			FLOAT_PROMOTE_F => {
				return pure(V3Op.opFloatPromoteF, [x]);
			}
			FLOAT_CAST_I => {
				return add(V3Op.newFloatCastI(ft, tt), [x], Facts.NONE);
			}
			FLOAT_CAST_D => {
				return add(V3Op.opFloatCastD, [x], Facts.NONE);
			}
			INT_CAST_F => {
				return add(V3Op.newIntCastF(ft, tt), [x], Facts.NONE);
			}
			ENUM_TO_SET => {
				return EnumSetType.!(tt).genEnumToSet(x, this);
			}
			_ => {
				var facts = if(x.facts.V_NON_ZERO, Fact.O_NO_NULL_CHECK, Facts.NONE);
				return add(V3Op.newTypeCast(ft, tt), [x], facts);
			}
		}
	}
	def opIntViewI0(from: Type, to: Type, x: SsaInstr) -> SsaInstr {
		// XXX: integer promotions should propagate x.facts
		return opIntViewI(V3Op.newIntViewI(from, to), x);
	}
	def opIntViewI(op: Operator, x: SsaInstr) -> SsaInstr {
		return add(op, [x], N);
	}
	// TypeQuery<F, T>(x)
	def opTypeQuery(ft: Type, tt: Type, x: SsaInstr) -> SsaInstr {
		var query = TypeSystem.newTypeQuery(ft, tt);
		if (query != TypeQuery.UNKNOWN_QUERY && SsaConst.?(x)) {
			return graph.boolConst(Eval.doQuery(query, ft, tt, SsaConst.!(x).val));
		}
		match (query) {
			TRUE => return graph.trueConst();
			FALSE => return graph.falseConst();
			TRUE_IF_NOT_NULL => return opNotEqual(ft, x, graph.nullConst(ft));
			FLOAT_QUERY_I => return pure(V3Op.newFloatQueryI(ft, tt), [x]);
			FLOAT_QUERY_D => return pure(V3Op.opFloatQueryD, [x]);
			INT_QUERY_F => {
				return add(V3Op.newIntQueryF(ft, tt), [x], Facts.NONE);
			}
			INT_QUERY_I => {
				return opIntQueryI(IntType.!(ft), IntType.!(tt), x);
			}
			_ => {
				var facts = if(x.facts.V_NON_ZERO, Fact.O_NO_NULL_CHECK, Facts.NONE);
				return add(V3Op.newTypeQuery(ft, tt), [x], facts);
			}
		}
	}
	// TypeSubsume<F, T>(x)
	def opTypeSubsume(ft: Type, tt: Type, x: SsaInstr) -> SsaInstr {
 		if (ft == tt) return x; // fold TypeSubsume<T, T>(x)
 		if (tt == x.getType()) return x; // fold TypeSubsume<F, T>(x: T)
		match (tt.typeCon.kind) {
			V3Kind.CLASS => {
				if (ft == Null.TYPE) return graph.nullConst(tt);
				if (TypeSystem.isSubtype(ft, tt)) return x; // remove redundant subsume of class
			}
			V3Kind.INT => {
				if (ft.typeCon.kind != V3Kind.VARIANT && ft.typeCon.kind != V3Kind.ENUM) return opTypeCast(ft, tt, x);
			}
			V3Kind.TUPLE => {
				return opTypeCast(ft, tt, x);
			}
			V3Kind.ENUM_SET => {
				return EnumSetType.!(tt).genEnumToSet(x, this);
			}
			V3Kind.FLOAT => {
				return opTypeCast(ft, tt, x);
			}
		}
		if (SsaConst.?(x)) return graph.valConst(tt, SsaConst.!(x).val); // fold TypeSubsume(K)
 		return add(V3Op.newTypeSubsume(ft, tt), [x], x.facts);
	}
	// ConditionalThrow(exception, cond)
	def opConditionalThrow(ex: string, x: SsaInstr) -> SsaInstr {
		if (SsaConst.?(x)) {
			if (Bool.unbox(SsaConst.!(x).val)) return addThrow(source, ex);
			else return graph.nop();
		}
		return add(V3Op.newConditionalThrow(ex), [x], N);
	}
	def opArrayAlloc(arrayType: Type, x: SsaInstr) -> SsaInstr {
		return add(V3Op.newArrayAlloc(arrayType), [x], N);
	}
	def opArrayInit(arrayType: Type, x: Array<SsaInstr>) -> SsaInstr {
		return add(V3Op.newArrayInit(arrayType, x.length), x, Fact.V_NON_ZERO);
	}
	def opArrayGetElem(arrayType: Type, indexType: Type, facts: Fact.set, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		var it = IntType.!(indexType);
		if (it.width > 32) {
			y = opWideBoundsCheck(arrayType, it, x, y);
			facts |= Fact.O_NO_BOUNDS_CHECK;
		}
		if (!facts.O_NO_BOUNDS_CHECK) facts |= tryElimBoundsCheck(x, y);
		return add(V3Op.newArrayGetElem(arrayType), [x, y], facts);
	}
	def opArraySetElem(arrayType: Type, indexType: Type, facts: Fact.set, x: SsaInstr, y: SsaInstr, z: SsaInstr) -> SsaInstr {
		var it = IntType.!(indexType);
		if (it.width > 32) {
			y = opWideBoundsCheck(arrayType, it, x, y);
			facts |= Fact.O_NO_BOUNDS_CHECK;
		}
		if (!facts.O_NO_BOUNDS_CHECK) facts |= tryElimBoundsCheck(x, y);
		return add(V3Op.newArraySetElem(arrayType), [x, y, z], facts);
	}
	private def tryElimBoundsCheck(x: SsaInstr, y: SsaInstr) -> Fact.set {
		if (SsaConst.?(y)) {
			var yk = SsaConst.!(y).val;
			if (SsaConst.?(x)) {
				var r = Record.!(SsaConst.!(x).val);
				if (r != null && (yk == null || Box<int>.?(yk))) {
					var i = Int.unbox(yk);
					if (i >= 0 && i < r.values.length) return Fact.O_NO_BOUNDS_CHECK;
				}
			}
		}
		var none: Fact.set;
		return none;
	}
	def opWideBoundsCheck(arrayType: Type, it: IntType, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		var l = opArrayGetLength(arrayType, x);
		l = opIntViewI0(Int.TYPE, it, l);
		var ut = Int.getType(false, it.width);
		var c = pure(ut.opLtEq(), [l, y]);
		opConditionalThrow(V3Exception.BoundsCheck, c);
		y = opIntViewI0(it, Int.TYPE, y);
		return y;
	}
	// ArrayGetLength<T>(x)
	def opArrayGetLength(arrayType: Type, x: SsaInstr) -> SsaInstr {
		return add(V3Op.newArrayGetLength(arrayType), [x], Fact.O_FOLDABLE);
	}
	// ClassAlloc[new](args)
	def opClassAlloc(m: IrSpec, x: Array<SsaInstr>) -> SsaInstr {
		if (m.member == null) return add(V3Op.newEmptyClassAlloc(m.receiver), Ssa.NO_INSTRS, Fact.V_NON_ZERO);
		return add(V3Op.newClassAlloc(m), x, Fact.V_NON_ZERO);
	}
	// (Component|Class|Variant)GetField[f](x)
	def opGetField(f: IrSpec, x: SsaInstr) -> SsaInstr {
		var op: Operator;
		if (V3.isComponent(f.receiver)) op = V3Op.newComponentGetField(f);
		else if (V3.isVariant(f.receiver)) op = V3Op.newVariantGetField(f);
		else op = V3Op.newClassGetField(f);
		return add(op, [x], f.member.facts);
	}
	// ClassSetField[f](x, v)
	def opClassSetField(f: IrSpec, x: SsaInstr, v: SsaInstr, init: bool) -> SsaInstr {
		if (init) return add(V3Op.newClassInitField(f), [x, v], Fact.O_NO_NULL_CHECK);
		else return add(V3Op.newClassSetField(f), [x, v], Facts.NONE);
	}
	// {Class,Variant}GetVirtual[m](x)
	def opGetVirtual(m: IrSpec, x: SsaInstr) -> SsaInstr {
		var facts = if(x.facts.V_NON_ZERO, Fact.O_NO_NULL_CHECK);
		return add(V3Op.bestGetVirtual(m), [x], facts);
	}
	// {Class,Variant}GetSelector[m](x)
	def opGetSelector(m: IrSpec, x: SsaInstr) -> SsaInstr {
		var facts = if(x.facts.V_NON_ZERO, Fact.O_NO_NULL_CHECK);
		return add(V3Op.bestGetSelector(m), [x], facts);
	}
	// Init[new]
	def opInit(meth: IrMethod) -> SsaInstr {
		return add(V3Op.newInit(meth), Ssa.NO_INSTRS, N);
	}
	// ComponentSetField[f](x, v)
	def opComponentSetField(f: IrSpec, x: SsaInstr, v: SsaInstr) -> SsaInstr {
		return add(V3Op.newComponentSetField(f), [x, v], N);
	}
	// (x, y)
	def opTupleCreate(tupleType: Type, x: Array<SsaInstr>) -> SsaInstr {
		return add(V3Op.newTupleCreate(tupleType), x, N);
	}
	// e.N
	def opTupleGetElem(tupleType: Type, i: int, x: SsaInstr) -> SsaInstr {
		return add(V3Op.newTupleGetElem(tupleType, i), [x], N);
	}
	// NullCheck(x)
	def opNullCheck(rtype: Type, x: SsaInstr) -> SsaInstr {
		if (V3.isVariant(rtype)) return x;  // XXX: ugly
		return add(V3Op.newNullCheck(x.getType()), [x], N);
	}
	// BoundsCheck(array, index)
	def opBoundsCheck(rtype: Type, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		return add(V3Op.newBoundsCheck(rtype), [x, y], N);
	}
	// CallMethod[m](args)
	def opCallMethod(m: IrSpec, x: Array<SsaInstr>) -> SsaInstr {
		recordDirectCall(m);
		var facts = m.member.facts & Fact.O_PURE;
		var op = V3Op.newCallMethod(m);
		if (m.receiver.typeCon.kind == V3Kind.CLASS) {
			return add(op, x, facts);
		} else {
			return add(op, x, facts | Fact.O_NO_NULL_CHECK | Opcodes.facts(op.opcode));
		}
	}
	// Call{Class,Variant}Virtual[m](args)
	def opCallVirtual(m: IrSpec, x: Array<SsaInstr>) -> SsaInstr {
		var facts = m.member.facts & Fact.O_PURE;
		if(x[0].facts.V_NON_ZERO) facts |= Fact.O_NO_NULL_CHECK;
		return add(V3Op.bestCallVirtual(m), x, facts);
	}
	// CallClosure(args)
	def opCallClosure(ftype: Type, x: Array<SsaInstr>) -> SsaInstr {
		return add(V3Op.newCallClosure(ftype), x, N);
	}
	// CreateClosure[m](x)
	def opCreateClosure(m: IrSpec, x: SsaInstr) -> SsaInstr {
		return pure(V3Op.newCreateClosure(m, x.getType()), [x]);
	}
	def pure(op: Operator, args: Array<SsaInstr>) -> SsaApplyOp {
		return add(op, args, Fact.O_PURE);
	}
	def add(op: Operator, args: Array<SsaInstr>, facts: Fact.set) -> SsaApplyOp {
		if (Opcode.VstSugar.?(op.opcode)) return V3.fail("unexpected sugar");
		var i = SsaApplyOp.new(source, op, args).setFact(facts | Opcodes.facts(op.opcode));
		if (!end) append(i);
		return i;
	}
	def opIntAdd(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		return add(Int.TYPE.opAdd(), [x, y], N);
	}
	def opIntAnd(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		return add(Int.TYPE.opAnd(), [x, y], N);
	}
	def opIntMul(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		return add(Int.TYPE.opMul(), [x, y], N);
	}
	def opIntLt(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		return add(Int.TYPE.opLt(), [x, y], N);
	}
	def opIntGteq(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		return add(Int.TYPE.opLtEq(), [y, x], N);
	}
	def opIntRangeCheck(scale: int, low: int, high: int, val: SsaInstr) -> SsaInstr {
		if (high == low + scale) {
			var cmp = opNotEqual(Int.TYPE, val, graph.intConst(low));
			opConditionalThrow(V3Exception.TypeCheck, cmp);
		} else {
			var cmp1 = opIntLt(val, graph.intConst(low));
			opConditionalThrow(V3Exception.TypeCheck, cmp1);
			var cmp2 = opIntGteq(val, graph.intConst(high));
			opConditionalThrow(V3Exception.TypeCheck, cmp2);
		}
		return val;
	}
	def unreachable(t: Type) -> SsaInstr {
		return graph.nullConst(t);
	}
	def recordDirectCall(spec: IrSpec) {
		// overridden in VstSsaEnv
	}
}

// A utility to split an SSA block and incrementally build a cascade of {SsaIf}s.
class SsaBlockSplit {
	def context: SsaContext;
	var curBlock: SsaBuilder;
	private var falseBlock: SsaBuilder;
	private var mergeBuilder = context.newBuilder();

	new(context, curBlock) {
		// perform block surgery to split in one of three ways
		var start = curBlock.block, end = start.prev;
		var pt = curBlock.pt;
		if (pt != null) {
			// split after pt:   start ... last={pt} | | (new block) first ... end
			doSplit(start, pt, end);
		} else if (SsaEnd.?(end)) {
			// split before end: start ... last={end.prev} | | (new block) end
			doSplit(start, end.prev, end);
		} else {
			// split after last: start ... last={pt} | | (new block)
			// nothing to do
		}
	}
	private def doSplit(start: SsaBlock, last: SsaLink, end: SsaLink) {
		var first = last.next;
		last.next = start;
		start.prev = last;
		var nb = mergeBuilder.block;
		first.prev = nb;
		nb.next = first;
		mergeBuilder.pt = first;
		curBlock.end = false;
		end.next = nb;
		nb.prev = end;
		curBlock.pt = null;
		curBlock.end = false;
	}
	def addIf(cond: SsaInstr) -> SsaBuilder {
		if (falseBlock != null) System.error("SsaBlockSplitError", "cannot add if to true block");
		var tblock = context.newBuilder(), fblock = context.newBuilder();
		curBlock.addIf(cond, tblock.block, fblock.block);
		curBlock = tblock;
		falseBlock = fblock;
		return curBlock;
	}
	def addIfNot(cond: SsaInstr) -> SsaBuilder {
		if (falseBlock != null) System.error("SsaBlockSplitError", "cannot add if to true block");
		var tblock = context.newBuilder(), fblock = context.newBuilder();
		curBlock.addIf(cond, fblock.block, tblock.block);
		curBlock = tblock;
		falseBlock = fblock;
		return curBlock;
	}
	def addElse() -> SsaBuilder {
		if (falseBlock != null) {
			curBlock.addGoto(mergeBuilder.block);
			curBlock = falseBlock;
			falseBlock = null;
		}
		return curBlock;
	}
	def addPhi(t: Type, vals: Array<SsaInstr>) -> SsaInstr {
		return mergeBuilder.addPhi(t, vals);
	}
	def finish() -> SsaBuilder {
		if (falseBlock != null) System.error("SsaBlockSplitError", "cannot finish in true block");
		curBlock.addGoto(mergeBuilder.block);
		context.block = mergeBuilder.block;
		mergeBuilder.pt = null;
		return mergeBuilder;
	}
}
