// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Information about a basic block, including the containing loop,
// the code range, and its dominator information.
class SsaBlockInfo(block: SsaBlock) {
	def label = Label.new();
	var loop: SsaLoopInfo;  // loop information, if this block is a loop header
	var start: int = -1;    // start position of code belonging to this block
	var end: int = -1;      // end position of code belonging to this block

	// Dominator tree fields
	var dom_depth: int;		// depth in dominator tree
	var dom_parent: SsaBlockInfo;	// immediate dominator (parent in dom tree)
	var dom_child: SsaBlockInfo;	// first child in dominator tree
	var dom_sibling: SsaBlockInfo;	// next sibling in dominator tree
	var dom_max: int;		// dominator interval end in sRPO
	// CFG restructurer fields
	var loop_remainder: bool;

	def clearMark() { block.mark = -1; }
}
// Information about a loop
class SsaLoopInfo(index: int) {
	var start: int;  // start of block interval containing loop blocks
	var end: int;    // end of block interval containing loop blocks
	var depth: int;  // loop depth
	var exits: List<SsaCfEdge>; // edges leaving loop
	def contains(bi: SsaBlockInfo) -> bool {
		return bi.block.mark >= start && bi.block.mark < end;
	}
}
// Computes the "special reverse postorder" (sRPO) of basic blocks for an SSA graph.
// This order is the optimal traversal order for forward and backward dataflow algorithms
// and is used in linear scan register allocation and code generation.
def ON_STACK = -2;
def DONE = -3;
class SsaBlockOrder(graph: SsaGraph) {
	def order = Vector<SsaBlockInfo>.new();
	var loops: Vector<SsaLoopInfo>;
	private var count: int;
	private var list: List<SsaBlock>;
	var loopEdges: List<SsaCfEdge>;

	new() {
		var start = graph.startBlock;
		if (start.succs().length == 0) {
			// trivial case of single block graph
			start.mark = 0;
			Vectors.overwrite(order, [SsaBlockInfo.new(start)]);
		} else {
			// number the blocks in reverse postorder
			number(start);
			if (loopEdges != null) computeOrderWithLoops();
			else finishBlockOrder(list);
		}
		this.list = null;
		this.loopEdges = null;
	}
	// post-number a block recursively
	private def number(s: SsaBlock) {
		s.mark = ON_STACK;
		var succ = s.succs();
		for (i = succ.length - 1; i >= 0; i--) {
			var e = succ[i], d = e.dest;
			// check for loop edge
			if (d.mark == ON_STACK) loopEdges = List.new(e, loopEdges);
			else if (d.mark >= -1) number(d);
		}
		count++;
		s.mark = DONE;
		list = List.new(s, list);
	}
	private def computeOrderWithLoops() {
		var list = this.list;
		for (i < count) {
			list.head.mark = i;
			list = list.tail;
		}
		SsaLoopOrder.new(this, count);
	}
	// clear all marks on all blocks
	def clear() {
		if (order != null) order.apply(SsaBlockInfo.clearMark);
	}
	def isImmediatelyAfter(a: SsaBlock, b: SsaBlock) -> bool {
		return (a.mark + 1) == b.mark;
	}
	def isInLoop(a: SsaBlock, loop: int) -> bool {
		var l = loops[loop], m = a.mark;
		return m >= l.start && m < l.end;
	}
	private def finishBlockOrder(list: List<SsaBlock>) {
		var array = Array<SsaBlockInfo>.new(count);
		var list = this.list;
		for (i < count) {
			list.head.mark = i;
			array[i] = SsaBlockInfo.new(list.head);
			list = list.tail;
		}
		Vectors.overwrite(order, array);
	}
	def print() {
		var buf = TerminalBuffer.new();
		for (i < order.length) {
			var b = order[i].block;
			buf.reset();
			if (loops != null) {
				for (j < loops.length) {
					if (isInLoop(b, j)) buf.puts("| ");
					else buf.puts("  ");
				}
			}
			buf.putc('#').putd(b.uid).putc('.').putd(b.mark);
			var succs = b.succs();
			for (j < succs.length) {
				var d = succs[j].dest;
				if (j == 0) buf.puts(" -> ");
				else buf.csp();
				buf.putc('#').putd(d.uid).putc('.').putd(d.mark);
			}
			buf.outln();
		}
	}
	def computeDominators() {
		for (i < order.length) {
			var b = order[i], preds = b.block.preds;
			if (preds.length == 0) continue;
			var p0 = preds[0].src.block();
			var parent = order[p0.mark];
			for (j = 1; j < preds.length; j++) {
				var pj = preds[j].src.block();
				if (pj.mark >= b.block.mark) continue; // backedge
				parent = commonDominator(parent, order[pj.mark]);
			}
			b.dom_parent = parent;
			b.dom_sibling = parent.dom_child;
			b.dom_depth = parent.dom_depth + 1;
			parent.dom_child = b;
		}
		for (i = order.length - 1; i >= 0; i--) {
			var b = order[i];
			var max = i + 1;
			if (max > b.dom_max) b.dom_max = max;
			max = b.dom_max;
			var p = b.dom_parent;
			if (p == null) continue;
			if (max > p.dom_max) p.dom_max = max;
		}
	}
	def commonDominator(a: SsaBlockInfo, b: SsaBlockInfo) -> SsaBlockInfo {
		while (a.dom_depth < b.dom_depth) b = b.dom_parent;
		while (a.dom_depth > b.dom_depth) a = a.dom_parent;
		while (a != b) {
			a = a.dom_parent;
			b = b.dom_parent;
		}
		return a;
	}
	def printDominators() {
		var buf = TerminalBuffer.new();
		var depth = 0;
		for (i = order[0]; i != null; ()) {
			for (j < depth) buf.sp();
			buf.puts("#").putd(i.block.uid);
			if (i.dom_parent != null) buf.puts(" parent #").putd(i.dom_parent.block.uid);
			buf.puts(" max=").putd(i.dom_max);
			buf.ln();
			if (i.dom_child != null) {
				i = i.dom_child;
				depth++;
				continue;
			}
			while (true) {
				if (i.dom_sibling != null) {
					i = i.dom_sibling;
					break;
				}
				i = i.dom_parent;
				depth--;
				if (i == null) break;
			}
		}
		buf.outln();
	}
}
// Used internally below to recursively output and number the nodes
class SsaLoopNode(loop: SsaLoopInfo, start: List<SsaLoopNode>, end: List<SsaLoopNode>, block: SsaBlock) {
	def output(order: Vector<SsaBlockInfo>, loopDepth: int) {
		if (block != null) {
			// output a single block.
			block.mark = order.length;
			order.put(SsaBlockInfo.new(block));
		} else {
			// recursively output blocks
			loop.start = order.length;
			loop.depth = loopDepth;
			for (l = start; l != end; l = l.tail) l.head.output(order, loopDepth + 1);
			loop.end = order.length;
			order[loop.start].loop = loop;
		}
	}
}
// A more complex algorithm for computing the block order when the graph has loops.
// Note this algorithm will not work for graphs that have irreducible loops.
class SsaLoopOrder(order: SsaBlockOrder, count: int) {
	def loopHeaders = Array<SsaLoopInfo>.new(count);
	def bitmap = BitMatrix.new(1, count);
	var list: List<SsaLoopNode>;

	new() {
		order.loops = Vector.new();
		// first mark all blocks in all loops
		var loopNum = Array<int>.new(count);
		for (l = order.loopEdges; l != null; l = l.tail) {
			var s = l.head.src, d = l.head.dest;
			var loop = newLoop(d);
			setLoop(d, loop);
			markLoopBlocks(s.block(), d, loop);
		}
		// now perform a loop-aware depth-first traversal
		numberBlock(order.graph.startBlock, null);
		order.order.grow(count);
		Lists.apply(list, SsaLoopNode.output(_, order.order, 1));
	}
	def markLoopBlocks(s: SsaBlock, h: SsaBlock, loop: SsaLoopInfo) {
		// iterate backwards, marking all blocks as inside this loop
		if (inLoop(s, loop)) return; // already marked
		if (s == h) return; // stop at loop header
		setLoop(s, loop);
		for (p in s.preds) markLoopBlocks(p.src.block(), h, loop);
	}
	def numberBlock(s: SsaBlock, loop: SsaLoopInfo) {
		if (setMark(s)) return;
		var newLoop = loopHeaders[s.mark];
		if (newLoop != null) numberLoop(s, newLoop, loop);
		else numberSucc(s, loop);
	}
	def numberLoop(s: SsaBlock, newLoop: SsaLoopInfo, loop: SsaLoopInfo) {
		var oldList = list; // keep track of nodes added from this loop
		numberSucc(s, newLoop);
		var newList = list;
		list = oldList; // "pop" loop nodes off stack
		if (loop == null) {
			// process edges leaving this loop to the nonloop part
			for (l = newLoop.exits; l != null; l = l.tail) numberBlock(l.head.dest, null);
		} else {
			// process any edges exiting the inner loop but still in outer loop
			for (l = newLoop.exits; l != null; l = l.tail) {
				var e = l.head;
				if (inLoop(e.dest, loop)) numberBlock(e.dest, loop);
				else loop.exits = List.new(e, loop.exits);
			}
		}
		// push a single node that represents the entire loop
		list = List.new(SsaLoopNode.new(newLoop, newList, oldList, null), list);
	}
	def numberSucc(s: SsaBlock, loop: SsaLoopInfo) {
		var succ = s.succs();
		if (loop == null) {
			// visit each successor
			for (i = succ.length - 1; i >= 0; i--) numberBlock(succ[i].dest, loop);
		} else {
			// visit only successors that are in this loop
			for (i = succ.length - 1; i >= 0; i--) {
				var e = succ[i];
				if (inLoop(e.dest, loop)) numberBlock(e.dest, loop);
				else loop.exits = List.new(e, loop.exits);
			}
		}
		list = List.new(SsaLoopNode.new(null, null, null, s), list);
	}
	def newLoop(h: SsaBlock) -> SsaLoopInfo {
		// get or create the loop information given the header block
		var loop = loopHeaders[h.mark];
		if (loop == null) {
			loop = SsaLoopInfo.new(order.loops.length);
			bitmap.grow(loop.index + 2);
			order.loops.put(loop);
			loopHeaders[h.mark] = loop;
		}
		return loop;
	}
	def setLoop(a: SsaBlock, loop: SsaLoopInfo) {
		// mark a block as inside a given loop
		bitmap[loop.index + 1, a.mark] = true;
	}
	def inLoop(a: SsaBlock, loop: SsaLoopInfo) -> bool {
		// check whether a block is inside a given loop
		return bitmap[loop.index + 1, a.mark];
	}
	def setMark(a: SsaBlock) -> bool {
		// set the mark on a block, return true if it was already marked
		var prev = bitmap[0, a.mark];
		bitmap[0, a.mark] = true;
		return prev;
	}
	def printBitmap() {
		Terminal.put("  marked: ");
		printBits(0);
		Terminal.ln();
		for (j < order.loops.length) {
			Terminal.put1("  loop %d: ", j);
			printBits(j);
			Terminal.ln();
		}
	}
	def printBits(row: int) {
		var base = (row + 1) * bitmap.width, bits = bitmap.bits;
		for (i < count) {
			var index = base + (i >> 5), mask = 1 << u5.!(i);
			var set = (bits[index] & mask) != 0;
			if (set) Terminal.putc('X');
			else Terminal.putc('.');
		}
	}
}
