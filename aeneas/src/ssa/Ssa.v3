// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Ssa items that can be placed into a block's linked list, including the
// basic block itself, instructions in the block, and the end.
class SsaLink {
	def uid: int = UID.next++;	// unique identification number
	var prev: SsaLink;
	var next: SsaLink;
	var mark: int = -1;		// fast mapping of instr->int
	var facts: Fact.set;		// computed dataflow facts

	def clearMark() { this.mark = -1; }
	def checkFact(set: Fact.set) -> bool { return facts >= set; }
	def setFact(set: Fact.set) -> this { facts |= set; }
	def setFactIf(cond: Fact.set, set: Fact.set) -> this {
		if (facts >= cond) facts |= set;
	}
	def insertBefore(t: SsaLink) {
		var p = t.prev;
		if (p != null) {
			p.next = this;
			this.prev = p;
		}
		t.prev = this;
		next = t;
	}
	def remove() {
		if (prev != null) prev.next = next;
		if (next != null) next.prev = prev;
		prev = next = null;
	}
}
// An instruction that produces a value, including dataflow facts and usages
class SsaInstr extends SsaLink {
	var inputs: Array<SsaDfEdge>;	// inputs to this instruction, if any
	var useList: SsaDfEdge;		// list of uses of this instruction
	var instrVal: SsaInstr;		// fast mapping of instr->instr
	var valueNum: int = -1;		// used by SsaInterpreter

	// constructor allocates and initializes dataflow edges
	new(a: Array<SsaInstr>) {
		setInputs(a);
	}
	// transform an array of instructions into dataflow edges
	def setInputs(a: Array<SsaInstr>) {
		if (inputs != null) kill(); // kill previous edges
		if (a != null && a.length > 0) {
			// initialize dataflow edges
			var d = Array<SsaDfEdge>.new(a.length);
			for (i < d.length) {
				d[i] = SsaDfEdge.new(this, a[i]);
			}
			inputs = d;
		} else {
			inputs = Ssa.NO_DF_EDGES;
		}
	}
	// replace this instruction with the specified instruction in all uses
	def replace(replacement: SsaInstr) {
		if (replacement == this) return; // nothing to do
		while (useList != null) {
			// update() has the side-effect of removing the use from this useList
			useList.update(replacement);
		}
	}
	// kill this instruction and remove it from the use lists of each input
	def kill() {
		for (j < inputs.length) inputs[j].update(null);
	}
	def input0() -> SsaInstr { return inputs[0].dest; }
	def input1() -> SsaInstr { return inputs[1].dest; }
	def optag() -> int { return -1; }
	def getType() -> Type;
	def unbox<T>() -> T {
		var d: T, val = SsaConst.!(this).val;
		return if(val == null, d, Box<T>.!(val).val);
	}
}
// Representation of a dataflow edge
class SsaDfEdge extends Edge<SsaInstr> {
	new(src: SsaInstr, dst: SsaInstr) super(src, dst) { }
	def getListHead(dest: SsaInstr) -> SsaDfEdge { return dest.useList; }
	def setListHead(dest: SsaInstr, e: Edge<SsaInstr>) { dest.useList = SsaDfEdge.!(e); }
	def isOnlyEdge() -> bool { return next == null && dest.useList == this; }
	def getDest() -> SsaInstr { return dest; }
}
// Representation of a control flow edge
class SsaCfEdge {
	def src: SsaEnd;
	var dest: SsaBlock;
	var desti: int;
	new(src, dest) {
		if (dest != null) desti = dest.addPred(this);
	}
	// Disconnect this edge from the destination.
	def disconnect() {
		if (dest != null && dest.preds[desti] == this) dest.preds[desti] = null;
		dest = null;
		desti = 0;
	}
	// Connect this edge to a new destination.
	def connect(nd: SsaBlock) {
		disconnect();
		dest = nd;
		desti = nd.addPred(this);
	}
	def connectI(nd: SsaBlock, index: int) {
		disconnect();
		dest = nd;
		desti = index;
		nd.preds[index] = this;
	}
	// Replace the {old} edge {A -> D} with {this -> D}.
	def replace(old: SsaCfEdge) {
		var odest = old.dest, odesti = old.desti;
		old.disconnect();
		disconnect();
		dest = odest;
		desti = odesti;
		dest.preds[desti] = this;
	}
	def render(buf: StringBuilder) -> StringBuilder {
		buf.puts("#");
		if (src == null) {
			buf.puts("null.end=@null");
		} else {
			var b = src.block();
			if (b != null) buf.putd(b.uid);
			else buf.puts("null");
			buf.put1(".end=@%d", src.uid);
		}
		buf.put2(" -> #%d[%d]", dest.uid, desti);
		return buf;
	}
}
// A parameter to this function
class SsaParam(index: int, vtype: Type) extends SsaInstr(null) {
	def getType() -> Type { return vtype; }
}
// An application of an operator
class SsaApplyOp extends SsaInstr {
	def source: Source;
	def op: Operator;
	new(source, op, a: Array<SsaInstr>) super(a) { }
	def optag() -> int { return op.opcode.tag; }
	def getType() -> Type { return op.sig.returnType(); }
}
class SsaCheckpoint extends SsaInstr {
	def source: Source;
	var breakpoint: bool;
	new(source, a: Array<SsaInstr>) super(a) { }
	def getType() -> Type { return Void.TYPE; }
}
// Support for instrumentation
class SsaProbe extends SsaInstr(Ssa.NO_INSTRS) {
	def getType() -> Type { return Void.TYPE; }
	def fire(i: SsaInterpreter) { }
	def dup() -> SsaProbe { return SsaProbe.new(); }
	def render(buf: StringBuilder) -> StringBuilder {
		return buf.puts("probe");
	}
}
// A new local variable
class SsaNewVar extends SsaInstr {
	def name: string;
	def vtype: Type;
	def index: int;
	new(name, vtype, index, a: Array<SsaInstr>) super(a) { }
	def getType() -> Type { return Void.TYPE; }
}
// Delete {n} local variables
class SsaDeleteVar(n: int) extends SsaInstr(null) {
	def getType() -> Type { return Void.TYPE; }
}
// Update a non-ssa vaiable's SsaInstr
class SsaUpdateVar extends SsaInstr {
	def index: int;
	new(index, a: Array<SsaInstr>) super(a) { }
	def getType() -> Type { return Void.TYPE; }
}
// A constant value, such as int #0
class SsaConst(vtype: Type, val: Val) extends SsaInstr(null) {
	def getType() -> Type { return vtype; }
}
// A phi, representing a merge in the dataflow
class SsaPhi extends SsaInstr {
	def vtype: Type;
	def block: SsaBlock;
	new(vtype, block, a: Array<SsaInstr>) super(a) { }
	def getType() -> Type { return vtype; }
}
// A basic block
class SsaBlock extends SsaLink {
	var info: SsaBlockInfo;
	var preds: Array<SsaCfEdge> = Ssa.NO_CF_EDGES;
	new() {
		next = this;
		prev = this;
	}
	def addPred(p: SsaCfEdge) -> int {
		preds = Arrays.append(p, preds);
		return preds.length - 1;
	}
	def hasPred() -> bool {
		for (p in preds) if (p != null) return true;
		return false;
	}
	def prepend(i: SsaInstr) {
		i.insertBefore(next);
	}
	def append(i: SsaLink) {
		i.insertBefore(if(SsaEnd.?(prev), prev, this));
	}
	def appendN(i: SsaLink) {
		if (i == null) return;
		var last = this.prev;
		last.next = i;
		i.prev = last;
		last = i;
		while (last.next != null) last = last.next;
		last.next = this;
		this.prev = last;
	}
	def succ(index: int) -> SsaCfEdge {
		return succs()[index];
	}
	def succs() -> Array<SsaCfEdge> {
		return if(SsaEnd.?(prev), SsaEnd.!(prev).succs, Ssa.NO_CF_EDGES);
	}
	def end() -> SsaEnd {
		return if(SsaEnd.?(prev), SsaEnd.!(prev));
	}
	def empty() -> bool {
		for (i = next; i != this; i = i.next) {
			if (SsaPhi.?(i)) continue;
			if (SsaEnd.?(i)) return true;
			return false;
		}
		return false;
	}
	def hasPhis() -> bool {
		return SsaPhi.?(next);
	}
	def countDown(limit: int) -> int {
		var i = next;
		while (limit-- >= 0) {
			if (i == this) return limit;
			i = i.next;
		}
		return -1;
	}
	def count() -> int {
		var c = 0;
		for (i = next; i != this; i = i.next) c++;
		return c;
	}
}
// The endpoint of a block
class SsaEnd extends SsaInstr {
	var succs: Array<SsaCfEdge>;
	new(inputs: Array<SsaInstr>, dests: Array<SsaBlock>) super(inputs) {
		succs = Array<SsaCfEdge>.new(dests.length);
		for (i < succs.length) {
			succs[i] = SsaCfEdge.new(this, dests[i]);
		}
	}
	def getType() -> Type { return Void.TYPE; }
	def block() -> SsaBlock { return SsaBlock.!(next); }
}
// A throw of an exception
class SsaThrow extends SsaEnd {
	def source: Source;
	def exception: string;
	new(source, exception) super(Ssa.NO_INSTRS, Ssa.NO_BLOCKS) { }
}
// A return of values from a method
class SsaReturn extends SsaEnd {
	new(a: Array<SsaInstr>) super(a, Ssa.NO_BLOCKS) { }
}
// A two-way branch on a boolean.
class SsaIf extends SsaEnd {
	new(cond: SsaInstr, tblock: SsaBlock, fblock: SsaBlock) super([cond], [tblock, fblock]) { }
	def trueBlock() -> SsaBlock { return block().succ(0).dest; }
	def falseBlock() -> SsaBlock { return block().succ(1).dest; }
	def findSucc(v: Val) -> SsaCfEdge { return block().succ(if(Bool.unbox(v), 0, 1)); }
}
// A table-based switch statement.
class SsaSwitch extends SsaEnd {
	def keyType: Type;
	def maxValue: int;
	new(keyType, maxValue, cond: SsaInstr) super([cond], Array<SsaBlock>.new(2 + maxValue)) { }
	def findSucc(v: Val) -> SsaCfEdge {
		var iv = Int.unbox(v);
		if (iv < 0 || iv > maxValue) return succs[succs.length - 1];
		return block().succ(iv);
	}
	def default() -> SsaCfEdge { return succs[succs.length - 1]; }
	def size() -> int { return succs.length; }
}
// A goto
class SsaGoto extends SsaEnd {
	new(target: SsaBlock) super(Ssa.NO_INSTRS, [target]) { }
	def target() -> SsaBlock { return block().succ(0).dest; }
}
// Information about a basic block, including the containing loop,
// the code range, and its dominator information.
class SsaBlockInfo(block: SsaBlock, srpo_num: int) {
	def label = Label.new();
	var loop: SsaLoopInfo;  	// loop information, if this block is a loop header
	var start: int = -1;    	// start position of code belonging to this block
	var end: int = -1;      	// end position of code belonging to this block

	// Dominator tree fields
	var dom_depth: int;		// depth in dominator tree
	var dom_parent: SsaBlockInfo;	// immediate dominator (parent in dom tree)
	var dom_child: SsaBlockInfo;	// first child in dominator tree
	var dom_sibling: SsaBlockInfo;	// next sibling in dominator tree
	var dom_max: int;		// dominator interval end in sRPO
	// CFG restructurer fields
	var loop_remainder: bool;

	def clearMark() { block.mark = -1; }
}
// Information about a loop
class SsaLoopInfo(index: int) {
	var start: int;  // start of block interval containing loop blocks
	var end: int;    // end of block interval containing loop blocks
	var depth: int;  // loop depth
	var exits: List<SsaCfEdge>; // edges leaving loop
	def contains(b: SsaBlock) -> bool {
		return containsInfo(b.info);
	}
	def containsInfo(info: SsaBlockInfo) -> bool {
		var order = info.srpo_num;
		return order >= start && order < end;
	}
}
// Utility methods for dealing with the SSA representation
component Ssa {
	def NO_INSTRS: Array<SsaInstr> = [];
	def NO_DF_EDGES: Array<SsaDfEdge> = [];
	def NO_BLOCKS: Array<SsaBlock> = [];
	def NO_CF_EDGES: Array<SsaCfEdge> = [];

	def newMap<T>() -> PartialMap<SsaInstr, T> {
		return HashMap<SsaInstr, T>.new(SsaInstr.uid, SsaInstr.==);
	}
	def newBlockMap<T>() -> PartialMap<SsaBlock, T> {
		return HashMap<SsaBlock, T>.new(SsaBlock.uid, SsaBlock.==);
	}
	def isTrueConst(i: SsaInstr) -> bool {
		return SsaConst.?(i) && Bool.unbox(SsaConst.!(i).val);
	}
	def isFalseConst(i: SsaInstr) -> bool {
		return SsaConst.?(i) && !Bool.unbox(SsaConst.!(i).val);
	}
	def inputs(x: SsaInstr) -> Array<SsaInstr> {
		var r = Array<SsaInstr>.new(x.inputs.length);
		for (i < r.length) r[i] = x.inputs[i].dest;
		return r;
	}
	// Inserts an intermediate block between any control-flow edges from a
	// predecessor with more than one successor to a successor with more than
	// one predecessor.
	// i.e. {A -> B} becomes {A -> temp -> B} if {|A.succs| > 1 && |B.preds| > 1}
	def splitCriticalEdges(graph: SsaGraph) -> SsaGraph {
		split(graph.startBlock, ++graph.markGen);
		return graph;
	}
	private def split(block: SsaBlock, done: int) {
		if (block.mark >= done) return;
		block.mark = done;
		var succs = block.succs();
		for (edge in succs) split(edge.dest, done);
		if (succs.length <= 1) return;
		for (edge in succs) {
			var d = edge.dest;
			if (d.preds.length <= 1) continue;
			// create {temp}
			var temp = SsaBlock.new();
			// create new edge {temp} -> {d}
			var g = SsaGoto.new(null);
			var nedge = SsaCfEdge.new(g, null);
			nedge.dest = d;
			nedge.desti = edge.desti;
			d.preds[nedge.desti] = nedge;
			g.succs = [nedge];
			temp.append(g);
			// update edge {block} -> {temp}
			edge.dest = temp;
			edge.desti = temp.addPred(edge);
		}
	}
	def computeBlockOrder(graph: SsaGraph, splitCriticalEdges: bool, pruneUnreachable: bool) -> SsaBlockOrder {
		if (splitCriticalEdges) graph = this.splitCriticalEdges(graph); // XXX: combine with the below graph traversal
		return SsaBlockOrder.new(graph);
	}
	def removeUnreachableBlocks(graph: SsaGraph) -> SsaGraph {
		var marker = SsaInternalMarker.new().reset(graph);
		for (b in graph.bfBlocks(marker)) {
			removeUnmarkedPreds(b, false, marker.base);
		}
		return graph;
	}
	def removeUnmarkedPreds(block: SsaBlock, simplify: bool, maxMark: int) {
		var i = 0;
		while (i < block.preds.length) {
			Terminal.put3("#%d.mark = %d ? %d\n", block.uid, block.mark, maxMark);
			var e = block.preds[i], p = e.src.block();
			if (p.mark < maxMark) removeEdge(e, simplify);
			else i++;
		}
	}
	def removeEdge(edge: SsaCfEdge, simplify: bool) {
		Terminal.put1("Ssa.removeEdge %q\n", edge.render);
		var dest = edge.dest;
		if (dest == null) return;
		var next = dest.next, index = edge.desti, preds = dest.preds;
		for (i = index + 1; i < preds.length; i++) {
			var p = preds[i];
			preds[i - 1] = p;
			p.desti = i - 1;
		}
		dest.preds = Arrays.range(dest.preds, 0, dest.preds.length - 1);
		while (true) {
			if (!SsaPhi.?(next)) break;
			var phi = SsaPhi.!(next), inputs = phi.inputs;
			// for each phi, remove the corresponding input
			inputs[index].update(null); // kill the DF edge
			phi.inputs = Arrays.deleteAt(phi.inputs, index);
			next = phi.next;
		}
		if (simplify && dest.preds.length == 1) simplifyPhis(dest);
	}
	def simplifyPhis(block: SsaBlock) {
		var next = block.next;
		while (true) {
			if (!SsaPhi.?(next)) break;
			var phi = SsaPhi.!(next), nn = phi.next;
			phi.replace(phi.input0());
			killInstr(phi);
			next = nn;
		}
	}
	def killInstr(i: SsaInstr) -> SsaInstr {
		i.remove();
		i.kill();
		i.facts |= Fact.O_KILLED;
		return i;
	}
}
