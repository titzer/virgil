// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Inlines a single call into the calling method by replacing the call instruction
// with the method body.
// XXX: reoptimize the control flow after inlining
// XXX: normalize tuple returns
class SsaInliner extends SsaRebuilder {
	def call: SsaApplyOp;
	def inlinee: IrSpec;
	def contInstrs = call.next;
	var callerBlock: SsaBlock;
	var contEnd: SsaEnd;
	var contBlock: SsaBuilder;
	var inlinedInstrs: int;
	var retVal: SsaInstr;
	var returns: List<(SsaCfEdge, SsaInstr)>;

	new(context: SsaContext, call, inlinee) super(context) {
		// Iterate previous instructions to find the {callerBlock}.
		for (p = call.prev; p != call; p = p.prev) {
			match (p) {
				x: SsaBlock => {
					callerBlock = x;
					contEnd = callerBlock.end();
					break;
				}
			}
		}
		if (callerBlock == null) return; // TODO: aborting inlining, graph is probably invalid

		// Split {callerBlock} to include only instructions before the call.
		// ==== Before ===========================================
		// block ... prev <-> call <-> contInstrs ... contEnd
		// ^-----------------------------------------------^
		var prev = call.prev;
		prev.next = callerBlock;
		callerBlock.prev = prev;
		call.next = null;
		call.prev = null;
		contInstrs.prev = null;
		contEnd.next = null;
		// ==== After ===========================================
		// block ... prev     call    contInstrs ... contEnd
		// ^-----------^
	}

	def inline() {
		var target = inlinee.asMethod().ssa;
		if (target == context.graph) return; // cannot inline recursive call
		instrMap.reset(target);
		newGraph = context.graph;
		curBlock = SsaBuilder.new(context, newGraph, callerBlock);

		if (V3.isComponent(inlinee.receiver)) mapComponentParams(target.params);
		else mapParams(target.params);
		// determine whether a simple or a complex inline is necessary
		var targetStart = target.startBlock;
		if (targetStart.succs().length == 0) {
			// inlinee has just one block, inline directly into this block
			inlineSimple(targetStart);
		} else {
			// inline a method with multiple blocks
			inlineComplex(targetStart);
		}
		call.kill();
	}
	def mapComponentParams(params: Array<SsaParam>) {
		// map parameter 0 to the null constant
		map1(params[0], newGraph.nullConst(inlinee.receiver));
		mapNonReceiverParams(Arrays.range(params, 1, params.length), Arrays.range(call.inputs, 1, call.inputs.length));
	}
	def mapParams(params: Array<SsaParam>) {
		// map parameter 0 to argument 0
		var receiver = call.input0();
		if (V3Op.needsNullCheck(call, receiver)) {
			curBlock.opNullCheck(inlinee.receiver, receiver);
		}
		instrMap[params[0]] = receiver; // don't transfer non-null facts
		mapNonReceiverParams(Arrays.range(params, 1, params.length), Arrays.range(call.inputs, 1, call.inputs.length));
	}
	def mapNonReceiverParams(params: Array<SsaParam>, args: Array<SsaDfEdge>) {
		// map non-receiver params, expanding or contracting parameters to deal with tuples.
		if (params.length == 0) return; // nothing to do
		if (params.length == args.length) {
			// params and argument counts match
			for (i < params.length) map1(params[i], args[i].dest);
		} else if (args.length == 0) {
			// pass all BOTTOMs
			for (p in params) map1(p, newGraph.nullConst(inlinee.instantiateType(p.vtype)));
		} else if (params.length == 1) {
			// collapse tuple arguments into one parameter
			var p = params[0];
			var vt = inlinee.instantiateType(p.vtype);
			var tupleArg = curBlock.opTupleCreate(vt, Arrays.map(args, SsaDfEdge.getDest));
			inlinedInstrs++;
			map1(p, tupleArg);
		} else if (args.length == 1) {
			// expand tuple argument into multiple parameters
			var vt = Tuple.TYPECON.create(Lists.fromArray(Arrays.map(params, SsaParam.vtype)));
			vt = inlinee.instantiateType(vt);
			var nargs = Array<SsaInstr>.new(params.length);
			var a = args[0].dest;
			for (i < params.length) {
				map1(params[i], curBlock.opTupleGetElem(vt, i, a));
				inlinedInstrs++;
			}
		} else {
			context.fail("expected 1 tuple argument in inlined call");
		}
	}
	// inline a simple, straight-line method directly into this block
	def inlineSimple(targetStart: SsaBlock) {
		blocks = 1;
		contBlock = curBlock;
		genInstrs(targetStart);
		if (returns == null) return killContinuation();
		// replace call instruction with return value(s)
		var rv = returns.head.1;
		call.replace(rv);
		call.kill();
		// Add the previous instructions at the end of this block.
		callerBlock.appendN(contInstrs);
	}
	// inline a method with more than one block into this method
	def inlineComplex(targetStart: SsaBlock) {
		// build a block for the continuation
		var cb = SsaBlock.new();
		contBlock = SsaBuilder.new(context, newGraph, cb);

		// callerBlock -(goto)-> intoBlock
		var intoBlock = SsaBlock.new();
		SsaBuilder.new(context, newGraph, callerBlock).addGoto(intoBlock);

		// visit all the blocks
		genMultiBlock(targetStart, intoBlock);

		// gather the returns
		var count = Lists.length(returns);
		if (count == 0) {
			// inlined method didn't return; previous block is now a dead end
			return killContinuation();
		} else if (count == 1) {
			// return value is simply the (only) returned value
			retVal = returns.head.1;
		} else {
			// return value is a phi merging all possible returns from method
			var inputs = Array<SsaInstr>.new(count), i = 0;
			for (l = Lists.reverse(returns); l != null; (l = l.tail, i++)) {
				if (contBlock.block.preds[i] != l.head.0) context.fail("mismatched return");
				inputs[i] = l.head.1;
			}
			var phi = SsaPhi.new(inlinee.getReturnType(), cb, inputs);
			contBlock.block.prepend(phi);
			retVal = phi;
		}
		// replace call instruction with return value
		call.replace(retVal);
		call.kill();
		// copy the contInstrs instructions after the inlinee code
		cb.appendN(contInstrs);
	}
	def killContinuation() {
		if (contBlock == null) return;
		for (i = contInstrs; i != null; i = i.next) {
			if (SsaInstr.?(i)) SsaInstr.!(i).kill();
		}
		SsaCfOptimizer.new(context).killSuccs(contEnd.succs);
		contBlock = null;
	}
	def genApplyOp(oi: SsaApplyOp) {
		var op = oi.op.subst(inlinee.instantiateType);
		var ni = curBlock.at(newSource(oi.source)).addApplyF(op, genRefs(oi.inputs), oi.facts);
		if (ni != null) {
			map1(oi, ni);
			inlinedInstrs++;
		} else {
			// block is already ended
			var vtype = inlinee.instantiateType(oi.getType());
			instrMap[oi] = newGraph.nullConst(vtype);
		}
	}
	def genReturn(oi: SsaReturn) {
		var inputs = oi.inputs, rv: SsaInstr;
		if (inputs.length == 0) {
			rv = newGraph.nop();
		} else if (inputs.length == 1) {
			rv = genRef1(inputs[0]);
		} else {
			rv = curBlock.addApply(null, V3Op.newTupleCreate(inlinee.getReturnType()), genRefs(inputs));
			inlinedInstrs++;
		}
		if (curBlock.block != callerBlock) {
			curBlock.addGoto(contBlock.block);
			returns = List.new((curBlock.block.succ(0), rv), returns);
		} else {
			returns = List.new((null, rv), returns);
		}
	}
	def genThrow(oi: SsaThrow) {
		curBlock.addThrow(newSource(oi.source), oi.exception);
		inlinedInstrs++;
	}
	def newSource(source: Source) -> Source {
		return if(source == null, call.source, Source.new(
			source.mdecl, source.line, source.column, newSource(source.tail), source.range
		));
	}
	def normType(t: Type) -> TypeNorm {
		var s = inlinee.instantiateType(t);
		return if(s != t, TypeNorm.new(t, s, null));
	}
}
// Implements the inlining strategy for early inlining, which occurs right
// after initial SSA generation, and thus has tuning parameters appropriately set.
class SsaEarlyInliner(context: SsaContext, compilation: Compilation, gen: VstSsaGen) {
	var maxDepth = 5;
	var maxInlineSize = 20;
	var maxInlineBlocks = 5;
	var inlines = 0;
	def inline(genDepth: int) {
		if (genDepth >= maxDepth) return;
		if (V3.isComponent(context.spec.receiver)) {
			// don't bother inlining into component constructors
			if (context.spec.member.facts.M_NEW) return;
		}
		for (l = gen.directCallTargets; l != null; l = l.tail) {
			// generate the SSA of possible inlining candidates
			compilation.genSsa(l.head, genDepth + 1);
		}
		for (l = gen.directCallBlocks; l != null; l = l.tail) {
			tryInlining(l.head);
		}
		if (inlines > 0) {
			context.printSsa("Inlined");
			var verifier = SsaGraphVerifier.new(context);
			verifier.allowDeadNodes = true; // TODO: dead nodes leftover from Vst -> SSA
			verifier.verify(); // XXX: introduce verification option?
		}
	}
	def tryInlining(block: SsaBlock) {
		var i = block.next;
		while (SsaInstr.?(i)) {
			var instr = SsaInstr.!(i);
			i = i.next;
			if (!SsaApplyOp.?(instr)) continue;
			var apply = SsaApplyOp.!(instr);
			var inlinee: IrSpec;
			match (apply.op.opcode) {
				CallMethod(method) => inlinee = V3Op.extractIrSpec(apply.op, method);
				CallClassMethod(method) => inlinee = V3Op.extractIrSpec(apply.op, method);
				_ => continue;
			}
			if (!shouldInline(inlinee)) {
				if (CLOptions.PRINT_INLINING.get()) {
					var loc = if (apply.source != null, apply.source.render, context.spec.render);
					Terminal.put2("Declined to inline %q into %q\n", inlinee.render, loc);
				}
				continue;
			}
			var inliner = SsaInliner.new(context, apply, inlinee);
			inliner.inline();
			inlines++;
			if (CLOptions.PRINT_INLINING.get()) {
				var loc = if (inliner.call.source != null, inliner.call.source.render, context.spec.render);
				Terminal.put2("Inlined %d blocks, %d instructions ", inliner.blocks, inliner.inlinedInstrs);
				Terminal.put2("from %q into %q\n", inlinee.render, loc);
			}
			if (inliner.contBlock == null) return;
		}
	}
	def shouldInline(inlinee: IrSpec) -> bool {
		var ssa = inlinee.asMethod().ssa;
		if (ssa == null) return false;			// IR not available
		if (ssa == context.graph) return false;		// self-recursion
		var facts = inlinee.member.facts;
		if (facts.M_NEVER_INLINE) return false;		// marked as never inline
		if (facts.M_INLINE) return true;
		return checkGraphSize(ssa, maxInlineBlocks, maxInlineSize);
	}
}
def checkGraphSize(ssa: SsaGraph, maxBlocks: int, maxInstrs: int) -> bool {
	if (maxBlocks == 1) {
		// quick check for one block with {maxInstrs}
		if (ssa.startBlock.succs().length > 0) return false;
		return ssa.startBlock.countDown(maxInstrs) >= 0;
	}
	// explore up to {maxBlocks} blocks of the inlinee
	var queue = Vector<SsaBlock>.new().grow(maxBlocks);
	var mark = ++ssa.markGen;
	queue.put(ssa.startBlock);
	ssa.startBlock.mark = mark;
	// do bread-first search over the CFG (order doesn't matter)
	for (i < queue.length) {
		var b = queue[i];
		var endCost = if(SsaIf.?(b.end()), 1); // branches cost 1, other ends 0
		maxInstrs = b.countDown(maxInstrs) - endCost;
		if (maxInstrs < 0) break;
		ssa.addSuccessors(queue[i], queue, mark);
		if (queue.length > maxBlocks) {
			maxInstrs = -1;
			break;
		}
	}
	for (i < queue.length) queue[i].mark = 0; // clear marks
	// XXX: cache the number of blocks in a graph in the graph itself?
	return maxInstrs >= 0;
}
