// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utility to print SSA code.
class SsaPrinter {
	def buf = TerminalBuffer.new();

	def printGraph(phase: string, render: StringBuilder -> StringBuilder, graph: SsaGraph, sig: Signature) {
		if (phase != null) render(buf.puts(phase).puts(" SSA for: "));
		if (sig != null) {
			buf.sp();
			printTypeArray(sig.paramTypes);
			buf.puts(" -> ");
			printTypeArray(sig.returnTypes);
			buf.ln();
		}
		if (graph == null) {
			buf.puts("\t\t<null>\n");
		} else {
			printValues(graph.values);
			printParams(graph.params);
			printBlocks(graph.bfBlocks(null));
		}
		flush();
	}
	def printTypeArray(a: Array<Type>) {
		buf.putc('[');
		for (i < a.length) {
			if (i > 0) buf.csp();
			a[i].render(buf);
		}
		buf.putc(']');
	}
	def printValues(values: Array<SsaConst>) {
		if (values == null) return;
		indent(1);
		buf.puts("values ");
		for (v in values) {
			if (v == null) continue;
			buf.putref(v);
			buf.puthashv(v.val, v.getType()).end();
			buf.sp();
		}
		ln();
	}
	def printParams(params: Array<SsaParam>) {
		indent(1);
		buf.puts("param ");
		if (params == null) {
			buf.red();
			buf.puts("<null>");
			buf.end();
		} else {
			for (p in params) {
				buf.instrUidColor().put1("$%d", p.index).putref(p).end();
				printColonType(p.getType());
				if (printFacts(p.facts)) buf.sp();
			}
		}
		ln();
	}
	def printStats(phase: string, render: StringBuilder -> StringBuilder, graph: SsaGraph) {
		if (phase != null) render(buf.puts(phase).puts(" SSA stats for: "));
		var blocks = graph.bfBlocks(null);
		buf.put1(" -- %d blocks", blocks.length);
		for (b in blocks) {
			buf.put1(" %d", b.count());
		}
		ln();
		flush();
	}
	def printBlocks(blocks: Array<SsaBlock>) {
		for (b in blocks) printBlock(b);
		for (b in blocks) b.clearMark();
	}
	def printBlockHeader(block: SsaBlock) {
		indent(1);
		buf.puts("block ");
		putdd(block.uid);
		for (e in block.preds) printCfEdge(e);
		ln();
	}
	def printBlock(block: SsaBlock) {
		printBlockHeader(block);
		for (i = block.next; i != null && i != block; i = i.next) {
			if (SsaEnd.?(i)) printEnd(block, SsaEnd.!(i));
			else if (SsaInstr.?(i)) printInstrLn(SsaInstr.!(i));
		}
	}
	def printCfEdge(e: SsaCfEdge) {
		buf.sp();
		if (e == null) {
			buf.red().puts("<null>").end();
		} else {
			putdd(e.src.uid);
			buf.puts("->");
			printDest(e);
//TODO			buf.put1("[desti=%d]", e.desti);
		}
	}
	def printInstr(i: SsaInstr, types: bool, args: bool, facts: bool, uses: bool) {
		if (i == null) return putnull();
		buf.putref(i);
		buf.putc(':');

		match (i) {
			x: SsaPhi => buf.puts("phi    ");
			x: SsaReturn => buf.puts("ret    ");
			x: SsaIf => buf.puts("if     ");
			x: SsaGoto => buf.puts("goto   ");
			x: SsaSwitch => buf.puts("switch ");
			x: SsaCheckpoint => {
				buf.puts("checkpoint  ");
				x.source.render(buf);
				buf.sp().end();
			}
			x: SsaParam => {
				buf.puts("param  ");
				buf.instrUidColor().putd(x.index).end();
				if (types) printColonType(i.getType());
			}
			x: SsaApplyOp => {
				x.op.render(buf);
				if (types) printColonType(i.getType());
			}
			x: SsaConst => {
				buf.puts("value  ").puthashv(x.val, i.getType()).end();
				if (types) printColonType(i.getType());
			}
			x: SsaThrow => {
				buf.puts("throw  ");
				buf.green().puts(x.exception).sp().end();
			}
			x: SsaNewVar => {
				buf.put1("newVar  %s:", x.name);
				if (x.index >= 0) buf.put1("idx=%d", x.index);
				else buf.putref(x.inputs[0].dest);
			}
			x: SsaDeleteVar => {
				buf.put1("deleteVar  %d", x.n);
			}
			x: SsaProbe => {
				x.render(buf);
			}
		}
		if (args) {
			var args = i.inputs;
			if (args.length > 0) buf.putc('(');
			for (j < args.length) {
				if (j > 0) buf.csp();
				printRef(args[j]);
			}
			if (args.length > 0) buf.putc(')');
			buf.sp();
		}
		if (facts) printFacts(i.facts);
		if (uses && i.useList != null) {
			buf.puts(" (uses: ");
			for (u: Edge<SsaInstr> = i.useList; u != null; u = u.next) {
				if (u != i.useList) buf.sp();
				buf.putref(u.src);
			}
			buf.puts(")");
		}
	}
	def printInstrLn(i: SsaInstr) {
		indent(2);
		printInstr(i, true, true, true, true);
		ln();
	}
	def printEnd(block: SsaBlock, end: SsaEnd) {
		printInstrLn(end);
		var succ = end.succs;
		match (end) {
			x: SsaIf => {
				indent(3);
				buf.puts(" true  => ");
				if (succ.length > 0) {
					printDest(succ[0]);
					ln();
				} else {
					buf.red().puts("error").end();
					ln();
					return;
				}
				indent(3);
				buf.puts(" false => ");
				if (succ.length > 1) {
					printDest(succ[1]);
				} else {
					buf.red().puts("error").end();
				}
				ln();
			}
			x: SsaGoto => {
				indent(3);
				buf.puts("=> ");
				printDest(succ[0]);
				ln();
			}
			x: SsaSwitch => {
				var x = SsaSwitch.!(end);
				for (i < succ.length) {
					indent(3);
					var v = i;
					if (v <= x.maxValue) buf.putd(v);
					else buf.puts("_");
					buf.puts(" => ");
					printDest(succ[i]);
					ln();
				}
			}
		}
	}
	def printColonType(t: Type) {
		buf.puts(": ");
		buf.typeColor();
		printType(t);
		buf.end();
	}
	def printType(t: Type) {
		if (t == null) {
			buf.red();
			buf.puts("<null>");
		} else {
			buf.typeColor();
			t.render(buf);
		}
		buf.end().sp();
	}
	def printRef(i: SsaDfEdge) {
		if (i == null || i.dest == null) {
			putnull();
		} else if (SsaConst.?(i.dest)) {
			var const = SsaConst.!(i.dest);
			buf.putref(const);
			buf.puts("=");
			buf.puthashv(const.val, null).end().putc(':');
			buf.typeColor();
			const.vtype.render(buf);
			buf.end();
		} else if (SsaParam.?(i.dest)) {
			var p = SsaParam.!(i.dest);
			cyan("$%d", p.index);
			buf.putref(p);
		} else {
			buf.putref(i.dest);
		}
	}
	def indent(i: int) {
		while (i-- > 0) buf.tab();
	}
	def printFacts(facts: Fact.set) -> bool {
		if (facts != Facts.NONE) {
			buf.putc('[').yellow();
			Facts.renderFacts(buf, facts);
			buf.end().putc(']');
			return true;
		}
		return false;
	}
	def printDest(edge: SsaCfEdge) {
		if (edge.dest == null) putnull();
		else putdd(edge.dest.uid);
	}
	def putdd(id: int) {
		buf.blue().putc('#').putd(id).end();
	}
	def cyan(fmt: string, a: int) {
		buf.cyan().put1(fmt, a).end();
	}
	def putnull() {
		buf.red().puts("null").end();
	}
	def ln() -> this {
		buf.ln();
		if (buf.length > 1000) flush();
	}
	def outln() -> this {
		buf.ln();
		flush();
	}
	def flush() -> this {
		buf.outt();
	}
	def printChain(start: SsaLink) -> this {
		var prev: SsaLink;
		var l = start, first = true;
		if (l.prev != null) {
			var p = l.prev;
			if (p == start) buf.puts("* <- ");
			else buf.putref(p).puts(" <- ");
		}
		buf.puts("*");
		while (true) {
			if (l == null) break;
			if (prev != null) {
				if (l.prev == prev) buf.puts(" <-> ");
				else buf.puts(" -> ");
			}
			buf.green();
			if (SsaBlock.?(l)) buf.putc('B');
			if (SsaEnd.?(l)) buf.putc('E');
			buf.putref(l);
			buf.end();
			prev = l;
			l = l.next;
			if (l == start) { buf.puts(" ->*"); break; }
		}
		buf.ln();
	}
}
