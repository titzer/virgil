// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A reusable context containing the compiler, the program, optimization settings, current
// method, and current block during the processing of SSA code. Also useful for generating
// internal error messages that contain context (e.g. when an SSA invariant is violated)
// which helps in debugging the compiler.
class SsaContext(compiler: Compiler, prog: Program) {
	var spec: IrSpec;
	var method: IrMethod;
	var graph: SsaGraph;
	var block: SsaBlock;

	def enterSpec(s: IrSpec) -> this {
		spec = s;
		enterMethod(s.asMethod());
	}
	def enterMethod(m: IrMethod) -> this {
		method = m;
		graph = if(m != null, m.ssa);
		block = if(graph != null, graph.startBlock);
	}
	def fail(msg: string) {
		// XXX: render SSA of failing method/block by default?
		prog.ERROR.fail(where().puts(msg).toString());
	}
	def fail1<A>(fmt: string, a: A) {
		// XXX: render SSA of failing method/block by default?
		prog.ERROR.fail(where().put1(fmt, a).toString());
	}
	def where() -> StringBuilder {
		var buf = StringBuilder.new();
		if (block != null) buf.put1("near block #%d ", block.uid);
		if (method != null) method.renderLong(buf.puts("in ")).puts(": ");
		return buf;
	}
	def printSsa(phase: string) {
		if (shouldPrintSsa()) {
			var render = if(spec != null, spec.render, method.renderLong);
			SsaPrinter.new().printGraph(phase, render, method.ssa, method.sig);
		}
		if (shouldPrintSsaStats()) {
			var render = if(spec != null, spec.render, method.renderLong);
			SsaPrinter.new().printStats(phase, render, method.ssa);
		}
		verify();
	}
	def verify() {
		if (Debug.PARANOID) SsaGraphVerifier.new(prog, graph).verify();
	}
	def shouldPrintSsa() -> bool {
		return filter(compiler.printSsaMatcher);
	}
	def shouldPrintSsaStats() -> bool {
		return filter(compiler.statsMatcher);
	}
	def shouldPrintMach() -> bool {
		return filter(compiler.printMachMatcher);
	}
	def shouldUseGlobalRegAlloc() -> bool {
		return filter(compiler.useGlobalRegAllocMatcher);
	}
	def filter(f: VstMatcher) -> bool {
		return method != null && f.matches(method.source);
	}
	def newBuilder() -> SsaBuilder {
		return SsaBuilder.new(this, graph, SsaBlock.new());
	}
}
