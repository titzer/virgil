// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Shared functionality for building new SSA code from old SSA code, e.g.
// during normalization or lowering.
class SsaRebuilder(context: SsaContext) {
	def instrMap: SsaMap = SsaMap.new();
	var newGraph: SsaGraph;
	var blockStartMap: PartialMap<SsaBlock, SsaBlock>;
	var blockEndMap: PartialMap<SsaBlock, SsaBlock>;
	var curBlock: SsaBuilder;
	var edgeMapMap: PartialMap<SsaBlock, Array<int>>;
	var blocks: int;
//	var trace: bool = false;

	// Stack for processing phis and blocks. Order doesn't really matter as long as a block's
	// dominators are processed before the block. Using a queue yields breadth-first order.
	var phiQueue: Vector<SsaPhi>;
	var blockQueue: Vector<(SsaBlock, SsaBlock)>;

	def genMultiBlock(oldStart: SsaBlock, newStart: SsaBlock) {
		blocks = 0;
		blockStartMap = Ssa.newBlockMap();
		blockStartMap[oldStart] = newStart;
		blockEndMap = Ssa.newBlockMap();
		blockEndMap[oldStart] = newStart;
		phiQueue = Vector.new();
		blockQueue = Vector.new();
		blockQueue.put(oldStart, newStart);
		for (i < blockQueue.length) genBlock(blockQueue.array[i]);
		for (i < phiQueue.length) finishPhi(phiQueue.array[i]);
	}
	def genBlock(b_old: SsaBlock, b_new: SsaBlock) {
		context.block = b_old;
		// XXX: is it possible to reuse the SSA builder here to save garbage?
		this.curBlock = SsaBuilder.new(context, newGraph, b_new);
		var newBlock = curBlock.block;
		blocks++;
		genInstrs(b_old);
		var newEndBlock = curBlock.block;
		if (newEndBlock != newBlock && blockEndMap != null) blockEndMap[b_old] = newEndBlock;
	}
	def genInstrs(b_old: SsaBlock) {
		for (i = b_old.next; i != b_old && !curBlock.end; i = i.next) {
			// translate each instruction in the block
			match (i) {
				x: SsaApplyOp => genApplyOp(x);
				x: SsaPhi => ;  // XXX: processing of phis necessary?
				x: SsaReturn => genReturn(x);
				x: SsaIf => genIf(b_old, x);
				x: SsaGoto => genGoto(x);
				x: SsaSwitch => genSwitch(b_old, x);
				x: SsaThrow => genThrow(x);
				x: SsaCheckpoint => genCheckpoint(x);
				x: SsaNewVar => genNewVar(x);
				x: SsaDeleteVar => genDeleteVar(x);
				x: SsaUpdateVar => genUpdateVar(x);
				x: SsaProbe => curBlock.append(x.dup());
				_ => context.fail1("unexpected block end @%d", i.uid);
			}
		}
	}
	private def finishPhi(i_old: SsaPhi) {
		// XXX: if only one predecessor, replace phi with its (one) input
		var b_old = i_old.block, b_new = mapBlockStart(b_old);
//		if (trace) Terminal.put3("finishPhi @%d (in block #%d, to block #%d)\n", i_old.uid, b_old.uid, b_new.uid);
		var edgeMap = getEdgeMap(i_old, b_old, b_new);
		if (instrMap.has1(i_old)) {
			var i_new = SsaPhi.!(instrMap[i_old]);
			// phi was mapped one-to-one; map the new inputs
			var ai_new_inputs = Array<SsaInstr>.new(b_new.preds.length);
			var facts = Facts.NONE;
			for (j < ai_new_inputs.length) {
//				if (trace) Terminal.put3("@%d[%d] -> i_new[%d]\n", i_old.uid, edgeMap[j], j);
				var i_input = genRef1(i_old.inputs[edgeMap[j]]);
				ai_new_inputs[j] = i_input;
				if (j == 0) facts = i_input.facts;
				else facts = facts & i_input.facts;
			}
			i_new.setInputs(ai_new_inputs);
			i_new.setFact(facts);
			b_new.prepend(i_new);
			return;
		}
		// phi mapped to multiple phis
		var ai_new = instrMap.getN(i_old);
		for (w < ai_new.length) {
			var i_new_phi = SsaPhi.!(ai_new[w]);
//			if (trace) Terminal.put3("  @%d[%d] -> @%d\n", i_old.uid, w, i_new_phi.uid);
			var ai_new_inputs = Array<SsaInstr>.new(b_new.preds.length);
			for (j < ai_new_inputs.length) {
				// XXX: interchange these loops for better performance
				var e = edgeMap[j];
//				if (trace) Terminal.put2("  edgeMap[%d] = %d\n", j, e);
				var old_input = i_old.inputs[e];
				var new_inputs = genRefs([old_input]);
//				if (trace) Terminal.put2("  old = @%d -> |%d|\n", old_input.dest.uid, new_inputs.length);
				ai_new_inputs[j] = new_inputs[w];
			}
			i_new_phi.setInputs(ai_new_inputs);
			b_new.prepend(i_new_phi);
		}
	}
	private def getEdgeMap(i_old: SsaPhi, b_old: SsaBlock, b_new: SsaBlock) -> Array<int> {
		if (b_new.hasPhis()) return edgeMapMap[b_new];
		// Compute the predecessors to the new block and split critical edges.
		var newPreds = Array<SsaBlock>.new(b_new.preds.length);
		var preds = b_new.preds;
		for (i < preds.length) {
			var inEdge = preds[i], pred = inEdge.src;
			var pred_block = pred.block();
			newPreds[i] = pred_block;
			if (pred_block.succs().length > 1) {
				// split critical edge between src & dest
//				Terminal.put2("split critical edge #%d -> #%d\n", pred_block.uid, b_new.uid);
				var newBlock = SsaBlock.new();
				newBlock.preds = [inEdge];
				inEdge.dest = newBlock;
				inEdge.desti = 0;
				var goto = SsaGoto.new(null);
				goto.succs[0].connectI(b_new, i);
				newBlock.append(goto);
			}
		}
		// map new input edges [e0, e1, e2] to old phi input indexes [i0, i2, iX]
		var oldEdges = b_old.preds;
		var map = Array<int>.new(newPreds.length);
		for (i < oldEdges.length) {
			if (oldEdges[i] == null || oldEdges[i].src == null) context.fail("null input edge");
			if (oldEdges[i] == null) context.fail("is null");
			var oldPred = oldEdges[i].src.block();
			var newPred = mapBlockEnd(oldPred);
//			Terminal.put3("  b_old.preds[%d]=#%d -> #%d\n", i, oldPred.uid, if(newPred != null, newPred.uid, -1));
			for (j < newPreds.length) {
				if (newPred == newPreds[j]) {
					map[j] = i;
//					Terminal.put3(" edgeMap b_old[%d] -> #%d at b_new[%d]\n", i, newPred.uid, j);
				}
			}
		}
		if (edgeMapMap == null) edgeMapMap = Ssa.newBlockMap();
		edgeMapMap[b_new] = map;
		return map;
	}

	def genIf(b_old: SsaBlock, i_old: SsaIf) {
		var key = genRef1(i_old.inputs[0]), succ = b_old.succs();
		if (SsaConst.?(key)) {
			// fold the branch
			var succ = mapEdge(succ[if(key.unbox<bool>(), 0, 1)]);
			return curBlock.addGoto(succ);
		}
		curBlock.addIf(key, mapEdge(succ[0]), mapEdge(succ[1]));
	}
	def genSwitch(b_old: SsaBlock, i_old: SsaSwitch) {
		if (curBlock.end) return;
		var key = genRef1(i_old.inputs[0]);
		if (SsaConst.?(key)) {
			// fold the switch
			var succ = mapEdge(i_old.findSucc(SsaConst.!(key).val));
			return curBlock.addGoto(succ);
		}
		curBlock.end = true;
		var sw = SsaSwitch.new(i_old.keyType, i_old.maxValue, key);
		curBlock.block.append(sw);
		var osuccs = b_old.succs();
		var succ = Array<SsaCfEdge>.new(osuccs.length);
		for (i < succ.length) {
			succ[i] = SsaCfEdge.new(sw, mapEdge(osuccs[i]));
		}
		sw.succs = succ;
	}
	def genReturn(i_old: SsaReturn) {
		curBlock.addReturn(genRefs(i_old.inputs));
	}
	def genThrow(i_old: SsaThrow) {
		curBlock.addThrow(i_old.source, i_old.exception);
	}
	def genGoto(i_old: SsaGoto) {
		curBlock.addGoto(mapBlockStart(i_old.target()));
	}
	def genCheckpoint(i_old: SsaCheckpoint) {
		curBlock.addCheckpoint(i_old.source, genRefs(i_old.inputs));
	}
	def genNewVar(i_old: SsaNewVar) {
		curBlock.addNewVar(i_old.name, i_old.vtype, i_old.index, genRefs(i_old.inputs));
	}
	def genDeleteVar(i_old: SsaDeleteVar) {
		curBlock.addDeleteVar(i_old.n);
	}
	def genUpdateVar(i_old: SsaUpdateVar) {
		curBlock.addUpdateVar(i_old.index, genRefs(i_old.inputs));
	}

	def mapBlockStart(b_old: SsaBlock) -> SsaBlock {
		var b_new = blockStartMap[b_old];
		if (b_new == null) {
			b_new = SsaBlock.new();
			blockStartMap[b_old] = b_new;
			blockEndMap[b_old] = b_new;
			blockQueue.put(b_old, b_new);
		}
		return b_new;
	}
	def mapBlockEnd(b_old: SsaBlock) -> SsaBlock {
		return blockEndMap[b_old];
	}
	def map0(i_old: SsaInstr) {
		instrMap.set0(i_old);
	}
	def map1(i_old: SsaInstr, ni: SsaInstr) {
		if (SsaPhi.?(i_old) && SsaPhi.?(ni)) phiQueue.put(SsaPhi.!(i_old));
		instrMap[i_old] = ni;
		ni.facts = ni.facts | i_old.facts;
	}
	def mapN(i_old: SsaInstr, na: Array<SsaInstr>) {
		if (na.length == 1) return map1(i_old, na[0]);
		if (SsaPhi.?(i_old)) phiQueue.put(SsaPhi.!(i_old));
		instrMap.setN(i_old, na);
	}
	// mapN, but don't transfer facts
	def mapNnf(i_old: SsaInstr, na: Array<SsaInstr>) {
		if (SsaPhi.?(i_old)) phiQueue.put(SsaPhi.!(i_old));
		instrMap.setN(i_old, na);
	}
	def genRefs(a: Array<SsaDfEdge>) -> Array<SsaInstr> {
		var vec = Vector<SsaInstr>.new().grow(a.length);
		for (e in a) {
			var i_old = e.dest;
			if (i_old == null) continue;
			if (instrMap.putInto(i_old, vec)) continue;
			match (i_old) {
				x: SsaConst => {
					// translate and add a use of a value.
					genVal(x, vec);
				}
				x: SsaPhi => {
					// translate and add a use of a phi.
					genPhi(x);
					instrMap.putInto(x, vec);
				}
				_ => unexpectedInstr(i_old);
			}
		}
		return vec.extract();
	}
	def genRef1(e: SsaDfEdge) -> SsaInstr {
		var i_old = e.dest;
		if (instrMap.has1(i_old)) return instrMap[i_old];
		if (SsaConst.?(i_old)) return genVal1(SsaConst.!(i_old));
		if (SsaPhi.?(i_old)) return genPhi1(SsaPhi.!(i_old));
		return unexpectedInstr(i_old);
	}
	def genVal1(i_old: SsaConst) -> SsaInstr {
		var tn = normType(i_old.vtype), val: SsaConst;
		if (tn == null) {
			// No normalization.
			var val = newGraph.valConst(i_old.vtype, genSimpleVal(tn, i_old.val));
			map1(i_old, val);
			return val;
		}
		if (tn.size != 1) context.fail1("expected 1-1 val mapping for: #%d", i_old.uid);
		if (tn.sub == null) {
			// Simple 1-1 normalization.
			var val = newGraph.valConst(tn.newType, genSimpleVal(tn, i_old.val));
			map1(i_old, val);
			return val;
		}
		// Complex normalization with a single output value.
		var vec = Vector<SsaInstr>.new().grow(1);
		genValN(i_old, tn, vec);
		return vec[0];
	}
	def genPhi1(i_old: SsaPhi) -> SsaInstr {
		genPhi(i_old);
		return instrMap[i_old];
	}
	def genVal(i_old: SsaConst, vec: Vector<SsaInstr>) {
		var tn = normType(i_old.vtype);
		if (tn == null) {
			// No normalization.
			var val = newGraph.valConst(i_old.vtype, genSimpleVal(tn, i_old.val));
			map1(i_old, val);
			vec.put(val);
			return;
		}
		if (tn.sub == null) {
			// 1-1 normalization.
			var val = newGraph.valConst(tn.newType, genSimpleVal(tn, i_old.val));
			map1(i_old, val);
			vec.put(val);
			return;
		}
		if (tn.size == 0) {
			// 1-0 normalization.
			map0(i_old);
			return;
		}
		// 1-N normalization.
		genValN(i_old, tn, vec);
	}
	def genSimpleVal(tn: TypeNorm, v: Val) -> Val {
		return v;
	}
	def mapEdge(edge: SsaCfEdge) -> SsaBlock {
		return mapBlockStart(edge.dest);
	}
	def opBoolAnd(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		return curBlock.opBoolAnd(V3Op.opBoolAnd, x, y);
	}
	def unexpectedInstr(i_old: SsaInstr) -> SsaInstr {
		Terminal.put("Unexpected SSA instruction: ");
		var printer = SsaPrinter.new();
		printer.printInstr(i_old, true, true, true, true);
		printer.buf.outt();
		context.fail("unexpected instruction");
		return i_old;
	}
	def genPhi(i_old: SsaPhi) {
		var tn = normType(i_old.vtype);
		var newBlock = mapBlockStart(i_old.block);
		if (tn == null) {    // no normalization
			var i_new = SsaPhi.new(i_old.vtype, newBlock, Ssa.NO_INSTRS);
			map1(i_old, i_new);
			return;
		}
		if (tn.size == 0) {  // degenerate zero-width phi
			map0(i_old);
			return;
		}
		if (tn.size == 1) {  // normal case
			var i_new = SsaPhi.new(tn.newType, newBlock, Ssa.NO_INSTRS);
			map1(i_old, i_new);
			return;
		}
		// complex case.
		var ai_new = Array<SsaInstr>.new(tn.size);
		for (i < ai_new.length) {
			ai_new[i] = SsaPhi.new(tn.sub[i], newBlock, Ssa.NO_INSTRS);
		}
		mapN(i_old, ai_new);
	}
	def mapNorm(i_old: SsaInstr, ni: SsaInstr, tn: TypeNorm) {
		if (tn == null || tn.size == 1) return map1(i_old, ni);
		if (tn.size == 0) return map0(i_old);
		curBlock.at(null);
		var values = Array<SsaInstr>.new(tn.size);
		for (i < tn.size) values[i] = curBlock.opTupleGetElem(tn.newType, i, ni);
		mapN(i_old, values);
	}
	// XXX: reduce duplication with MachLowering
	// Must be implemented by subclass
	def normType(t: Type) -> TypeNorm;
	def genValN(i_old: SsaConst, tn: TypeNorm, vec: Vector<SsaInstr>);
	def genApplyOp(i_old: SsaApplyOp);
}
