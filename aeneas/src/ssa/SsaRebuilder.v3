// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Shared functionality for building new SSA code from old SSA code, e.g.
// during normalization or lowering.
class SsaRebuilder(context: SsaContext) {
	def instrMap: SsaMap = SsaMap.new();
	var newGraph: SsaGraph;
	var blockStartMap: PartialMap<SsaBlock, SsaBlock>;
	var blockEndMap: PartialMap<SsaBlock, SsaBlock>;
	var curBlock: SsaBuilder;
	var edgeMapMap: PartialMap<SsaBlock, Array<int>>;

	// Stack for processing phis and blocks. Order doesn't really matter as long as a block's
	// dominators are processed before the block. Using a queue yields breadth-first order.
	var phiQueue: Vector<SsaPhi>;
	var blockQueue: Vector<(SsaBlock, SsaBlock)>;

	def genMultiBlock(oldStart: SsaBlock, newStart: SsaBlock) {
		blockStartMap = Ssa.newBlockMap();
		blockStartMap[oldStart] = newStart;
		blockEndMap = Ssa.newBlockMap();
		blockEndMap[oldStart] = newStart;
		phiQueue = Vector.new();
		blockQueue = Vector.new();
		blockQueue.put(oldStart, newStart);
		for (i < blockQueue.length) genBlock(blockQueue.array[i]);
		for (i < phiQueue.length) finishPhi(phiQueue.array[i]);
	}
	def genBlock(ob: SsaBlock, nb: SsaBlock) {
		context.block = ob;
		// XXX: is it possible to reuse the SSA builder here to save garbage?
		this.curBlock = SsaBuilder.new(context, newGraph, nb);
		genInstrs(ob);
	}
	def genInstrs(ob: SsaBlock) {
		for (i = ob.next; i != ob && !curBlock.end; i = i.next) {
			// translate each instruction in the block
			match (i) {
				x: SsaApplyOp => genApplyOp(x);
				x: SsaPhi => ;  // XXX: processing of phis necessary?
				x: SsaReturn => genReturn(x);
				x: SsaIf => genIf(ob, x);
				x: SsaGoto => genGoto(x);
				x: SsaSwitch => genSwitch(ob, x);
				x: SsaThrow => genThrow(x);
				x: SsaCheckpoint => genCheckpoint(x);
				x: SsaNewVar => genNewVar(x);
				x: SsaDeleteVar => genDeleteVar(x);
				x: SsaProbe => curBlock.append(x.dup());
				_ => context.fail1("unexpected block end @%d", i.uid);
			}
		}
	}
	private def finishPhi(oi: SsaPhi) {
		// XXX: if only one predecessor, replace phi with its (one) input
		var ob = oi.block, nb = mapBlockStart(ob);
//		Terminal.put3("old #%d -> new #%d |%d|\n", ob.uid, nb.uid, nb.preds.length);
		var edgeMap = getEdgeMap(oi, ob, nb);
		if (instrMap.has1(oi)) {
			var ni = SsaPhi.!(instrMap[oi]);
			// phi was mapped one-to-one; map the new inputs
			var newInputs = Array<SsaInstr>.new(nb.preds.length);
			var facts = Facts.NONE;
			for (j < newInputs.length) {
//				Terminal.put3("@%d[%d] -> ni[%d]\n", oi.uid, edgeMap[j], j);
				var nii = genRef1(oi.inputs[edgeMap[j]]);
				newInputs[j] = nii;
				if (j == 0) facts = nii.facts;
				else facts = facts & nii.facts;
			}
			ni.setInputs(newInputs);
			ni.setFact(facts);
			nb.prepend(ni);
			return;
		}
		// phi mapped to multiple phis
		var mi = instrMap.getN(oi);
		for (w < mi.length) {
			var wi = SsaPhi.!(mi[w]);
			var newInputs = Array<SsaInstr>.new(nb.preds.length);
			for (j < newInputs.length) {
				// XXX: interchange these loops for better performance
				var oii = oi.inputs[edgeMap[j]];
				newInputs[j] = genRefs([oii])[w];
			}
			wi.setInputs(newInputs);
			nb.prepend(wi);
		}
	}
	private def getEdgeMap(oi: SsaPhi, ob: SsaBlock, nb: SsaBlock) -> Array<int> {
		if (nb.hasPhis()) return edgeMapMap[nb];
		// Compute the predecessors to the new block and split critical edges.
		var newPreds = Array<SsaBlock>.new(nb.preds.length);
		var preds = nb.preds;
		for (i < preds.length) {
			var inEdge = preds[i], pred = inEdge.src;
			newPreds[i] = pred.block();
			if (pred.block().succs().length > 1) {
				// split critical edge between src & dest
				var newBlock = SsaBlock.new();
				newBlock.preds = [inEdge];
				inEdge.dest = newBlock;
				inEdge.desti = 0;
				var goto = SsaGoto.new(null);
				goto.succs[0].connectI(nb, i);
				newBlock.append(goto);
			}
		}
		// map new input edges [e0, e1, e2] to old phi input indexes [i0, i2, iX]
		var oldEdges = ob.preds;
		var map = Array<int>.new(newPreds.length);
		for (i < oldEdges.length) {
			if (oldEdges[i] == null || oldEdges[i].src == null) context.fail("null input edge");
			if (oldEdges[i] == null) context.fail("is null");
			var newPred = mapBlockEnd(oldEdges[i].src.block());
			for (j < newPreds.length) {
				if (newPred == newPreds[j]) map[j] = i;
			}
		}
		if (edgeMapMap == null) edgeMapMap = Ssa.newBlockMap();
		edgeMapMap[nb] = map;
		return map;
	}

	def genIf(ob: SsaBlock, oi: SsaIf) {
		var key = genRef1(oi.inputs[0]), succ = ob.succs();
		if (SsaConst.?(key)) {
			// fold the branch
			var succ = mapEdge(succ[if(key.unbox<bool>(), 0, 1)]);
			return curBlock.addGoto(succ);
		}
		curBlock.addIf(key, mapEdge(succ[0]), mapEdge(succ[1]));
	}
	def genSwitch(ob: SsaBlock, oi: SsaSwitch) {
		if (curBlock.end) return;
		var key = genRef1(oi.inputs[0]);
		if (SsaConst.?(key)) {
			// fold the switch
			var succ = mapEdge(oi.findSucc(SsaConst.!(key).val));
			return curBlock.addGoto(succ);
		}
		curBlock.end = true;
		var sw = SsaSwitch.new(oi.keyType, oi.maxValue, key);
		curBlock.block.append(sw);
		var osuccs = ob.succs();
		var succ = Array<SsaCfEdge>.new(osuccs.length);
		for (i < succ.length) {
			succ[i] = SsaCfEdge.new(sw, mapEdge(osuccs[i]));
		}
		sw.succs = succ;
	}
	def genReturn(oi: SsaReturn) {
		curBlock.addReturn(genRefs(oi.inputs));
	}
	def genThrow(oi: SsaThrow) {
		curBlock.addThrow(oi.source, oi.exception);
	}
	def genGoto(oi: SsaGoto) {
		var ot = oi.target(), nt = mapBlockStart(ot);
		curBlock.addGoto(nt);
	}
	def genCheckpoint(oi: SsaCheckpoint) {
		curBlock.addCheckpoint(oi.source, genRefs(oi.inputs));
	}
	def genNewVar(oi: SsaNewVar) {
		curBlock.addNewVar(oi.name, oi.vtype, oi.index, genRefs(oi.inputs));
	}
	def genDeleteVar(oi: SsaDeleteVar) {
		curBlock.addDeleteVar(oi.n);
	}

	def mapBlockStart(ob: SsaBlock) -> SsaBlock {
		var nb = blockStartMap[ob];
		if (nb == null) {
			nb = SsaBlock.new();
			blockStartMap[ob] = nb;
			blockEndMap[ob] = nb;
			blockQueue.put(ob, nb);
		}
		return nb;
	}
	def mapBlockEnd(ob: SsaBlock) -> SsaBlock {
		return blockEndMap[ob];
	}
	def map0(oi: SsaInstr) {
		instrMap.set0(oi);
	}
	def map1(oi: SsaInstr, ni: SsaInstr) {
		if (SsaPhi.?(oi) && SsaPhi.?(ni)) phiQueue.put(SsaPhi.!(oi));
		instrMap[oi] = ni;
		ni.facts = ni.facts | oi.facts;
	}
	def mapN(oi: SsaInstr, na: Array<SsaInstr>) {
		if (na.length == 1) return map1(oi, na[0]);
		if (SsaPhi.?(oi)) phiQueue.put(SsaPhi.!(oi));
		instrMap.setN(oi, na);
	}
	// mapN, but don't transfer facts
	def mapNnf(oi: SsaInstr, na: Array<SsaInstr>) {
		if (SsaPhi.?(oi)) phiQueue.put(SsaPhi.!(oi));
		instrMap.setN(oi, na);
	}
	def genRefs(a: Array<SsaDfEdge>) -> Array<SsaInstr> {
		var vec = Vector<SsaInstr>.new().grow(a.length);
		for (e in a) {
			var oi = e.dest;
			if (oi == null) continue;
			if (instrMap.putInto(oi, vec)) continue;
			match (oi) {
				x: SsaConst => {
					// translate and add a use of a value.
					genVal(x, vec);
				}
				x: SsaPhi => {
					// translate and add a use of a phi.
					genPhi(x);
					instrMap.putInto(x, vec);
				}
				_ => unexpectedInstr(oi);
			}
		}
		return vec.extract();
	}
	def genRef1(e: SsaDfEdge) -> SsaInstr {
		var oi = e.dest;
		if (instrMap.has1(oi)) return instrMap[oi];
		if (SsaConst.?(oi)) return genVal1(SsaConst.!(oi));
		if (SsaPhi.?(oi)) return genPhi1(SsaPhi.!(oi));
		return unexpectedInstr(oi);
	}
	def genVal1(oi: SsaConst) -> SsaInstr {
		var tn = normType(oi.vtype), val: SsaConst;
		if (tn == null) {
			// No normalization.
			var val = newGraph.valConst(oi.vtype, genSimpleVal(tn, oi.val));
			map1(oi, val);
			return val;
		}
		if (tn.size != 1) context.fail1("expected 1-1 val mapping for: #%d", oi.uid);
		if (tn.sub == null) {
			// Simple 1-1 normalization.
			var val = newGraph.valConst(tn.newType, genSimpleVal(tn, oi.val));
			map1(oi, val);
			return val;
		}
		// Complex normalization with a single output value.
		var vec = Vector<SsaInstr>.new().grow(1);
		genValN(oi, tn, vec);
		return vec[0];
	}
	def genPhi1(oi: SsaPhi) -> SsaInstr {
		genPhi(oi);
		return instrMap[oi];
	}
	def genVal(oi: SsaConst, vec: Vector<SsaInstr>) {
		var tn = normType(oi.vtype);
		if (tn == null) {
			// No normalization.
			var val = newGraph.valConst(oi.vtype, genSimpleVal(tn, oi.val));
			map1(oi, val);
			vec.put(val);
			return;
		}
		if (tn.sub == null) {
			// 1-1 normalization.
			var val = newGraph.valConst(tn.newType, genSimpleVal(tn, oi.val));
			map1(oi, val);
			vec.put(val);
			return;
		}
		if (tn.size == 0) {
			// 1-0 normalization.
			map0(oi);
			return;
		}
		// 1-N normalization.
		genValN(oi, tn, vec);
	}
	def genSimpleVal(tn: TypeNorm, v: Val) -> Val {
		return v;
	}
	def mapEdge(edge: SsaCfEdge) -> SsaBlock {
		return mapBlockStart(edge.dest);
	}
	def opBoolAnd(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		return curBlock.opBoolAnd(V3Op.opBoolAnd, x, y);
	}
	def unexpectedInstr(oi: SsaInstr) -> SsaInstr {
		Terminal.put("Unexpected SSA instruction: ");
		var printer = SsaPrinter.new();
		printer.printInstr(oi, true, true, true, true);
		printer.buf.outt();
		context.fail("unexpected instruction");
		return oi;
	}
	def genPhi(oldPhi: SsaPhi) {
		var tn = normType(oldPhi.vtype);
		var newBlock = mapBlockStart(oldPhi.block);
		if (tn == null) {    // no normalization
			var phi = SsaPhi.new(oldPhi.vtype, newBlock, Ssa.NO_INSTRS);
			map1(oldPhi, phi);
			return;
		}
		if (tn.size == 0) {  // degenerate zero-width phi
			map0(oldPhi);
			return;
		}
		if (tn.size == 1) {  // normal case
			var phi = SsaPhi.new(tn.newType, newBlock, Ssa.NO_INSTRS);
			map1(oldPhi, phi);
			return;
		}
		// complex case.
		var phis = Array<SsaInstr>.new(tn.size);
		for (i < phis.length) {
			phis[i] = SsaPhi.new(tn.sub[i], newBlock, Ssa.NO_INSTRS);
		}
		mapN(oldPhi, phis);
	}
	def mapNorm(oi: SsaInstr, ni: SsaInstr, tn: TypeNorm) {
		if (tn == null || tn.size == 1) return map1(oi, ni);
		if (tn.size == 0) return map0(oi);
		curBlock.at(null);
		var values = Array<SsaInstr>.new(tn.size);
		for (i < tn.size) values[i] = curBlock.opTupleGetElem(tn.newType, i, ni);
		mapN(oi, values);
	}
	def genEqualN(oi: SsaApplyOp, tn: TypeNorm) -> SsaInstr {
		var expr: SsaInstr, newArgs = genRefs(oi.inputs);
		var join = opBoolAnd;
		if (tn.size == 0) {
			var ni = newGraph.trueConst();
			map1(oi, ni);
			return ni;
		}
		if (tn.size == 1) {
			var ni = curBlock.opEqual(tn.newType, newArgs[0], newArgs[1]);
			map1(oi, ni);
			return ni;
		}
		for (i < tn.size) {
			var cmp: SsaInstr, a = newArgs[i], b = newArgs[i + tn.size];
			cmp = curBlock.opEqual(tn.sub[i], a, b);
			if (expr == null) expr = cmp;
			else expr = join(expr, cmp);
		}
		map1(oi, expr);
		return expr;
	}
	// XXX: reduce duplication with MachLowering
	// Must be implemented by subclass
	def normType(t: Type) -> TypeNorm;
	def genValN(oi: SsaConst, tn: TypeNorm, vec: Vector<SsaInstr>);
	def genApplyOp(oi: SsaApplyOp);
}
