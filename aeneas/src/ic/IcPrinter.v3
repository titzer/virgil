// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A utility class to print out information about an IcMethod and its code
class IcPrinter(interp: IcInterpreter) {
	var indent: int;
	var successors: bool = true;
	var buf = StringBuffer.new();

	def printConsts(firstConst: int, consts: Array<Val>) {
		for (i < consts.length) {
			buf.reset();
			doIndent(buf);
			buf.put2("value #%1 = %2", i + firstConst, V3.renderVal(consts[i]));
			Terminal.putbln(buf);
		}
	}
	def printCode(iccode: Array<IcInstr>) {
		for (i < iccode.length) {
			print(i, iccode[i]);
		}
	}
	def render(b: StringBuffer, ip: int, i: IcInstr) -> StringBuffer {
		doIndent(b);
		b.puti(ip);
		b.puts(": ");
		if (ip < 100) b.sp();
		if (ip < 10) b.sp();
		match (i) {
			Move(dst, src) => {
				b.put2("move  #%1 = %2", dst, renderReg(src));
			}
			Int32Binop(dst, x, y, opcode, src) => {
				b.put2("int32 #%1 = %2(", dst, opcode.name);
				renderList(b, [x, y]);
				b.putc(')');
			}
			Int32Compare(dst, x, y, opcode, src) => {
				b.put2("int32 #%1 = %2(", dst, opcode.name);
				renderList(b, [x, y]);
				b.putc(')');
			}
			Int32Unop(dst, x, shift, opcode, src) => {
				b.put2("int32 #%1 = %2(", dst, opcode.name);
				renderList(b, [x]);
				b.putc(')');
			}
			Int64Binop(dst, x, y, lsigned, rsigned, opcode, src) => {
				b.put2("int64 #%1 = %2(", dst, opcode.name);
				renderList(b, [x, y]);
				b.putc(')');
			}
			Int64Compare(dst, x, y, lsigned, rsigned, opcode, src) => {
				b.put2("int64 #%1 = %2(", dst, opcode.name);
				renderList(b, [x, y]);
				b.putc(')');
			}
			Int64Unop(dst, x, shift, signed, opcode, src) => {
				b.put2("int64 #%1 = %2(", dst, opcode.name);
				renderList(b, [x]);
				b.putc(')');
			}
			FastOp(dst, x, y, op, opcode, src) => {
				b.put2("fast  #%1 = %2(", dst, op.render);
				renderList(b, [x, y]);
				b.putc(')');
			}
			Apply(dst, op, args, src) => {
				b.put2("apply #%1 = %2(", dst, op.render);
				renderList(b, args);
				b.putc(')');
			}
			Call(dst, func, args, src) => {
				b.put2("call  #%1 = %2(", dst, renderReg(func));
				renderList(b, args);
				b.putc(')');
			}
			Switch(arg, minValue, targets) => {
				b.put1("switch %1", renderReg(arg));
				if (successors) {
					b.ln();
					for (k < targets.length - 1) {
						doIndent(b).put2("        %1 -> @%2\n", k + minValue, targets[k]);
					}
					doIndent(b).put1("        _ -> @%1", targets[targets.length - 1]);
				}
			}
			Branch(always, bval, arg, target) => {
				if (always) b.put1("jump  @%1", target);
				else if (bval) b.put2("bt    %1 @%2", renderReg(arg), target);
				else b.put2("bf    %1 @%2", renderReg(arg), target);
			}
			Ret(arg) => {
				b.put1("ret   %1", renderReg(arg));
			}
			Throw(exception, src) => {
				b.put1("throw %1", exception);
			}
			Probe(orig, probes) => {
				b.puts("[probe] ");
				render(b, ip, orig);
				return b;
			}
		}
		return b.ln();
	}
	def print(ip: int, i: IcInstr) {
		Terminal.putb(render(buf.reset(), ip, i));
	}
	def doIndent(b: StringBuffer) -> StringBuffer {
		return b.pad(' ', b.length + indent * 2);
	}
	def renderList(b: StringBuffer, a: Array<int>) {
		for (i < a.length) {
			if (i > 0) b.csp();
			b.puts(renderReg(a[i]));
		}
	}
	def renderReg(reg: int) -> string {
		var b = StringBuffer.new();
		if (interp != null) {
			var index = interp.rp + reg;
			if (index < 0 || index > interp.regs.length) b.put1("#%1=!!", reg);
			else b.put2("#%1=%2", reg, V3.renderVal(interp.regs[index]));
		}
		else b.putc('#').puti(reg);
		return b.toString();
	}
}

// Tracer. Use as a last resort, usually to debug the IcInterpreter
class IcTracer {
	var p: IcPrinter;
	var lastFrame: IcFrame;
	var depth: int;

	new(i: IcInterpreter) {
		p = IcPrinter.new(i);
		i.addProbeBefore(before);
		i.addProbeAfter(after);
	}
	def before(i: IcInterpreter, probeIp: int) {
		lastFrame = i.topFrame;
		p.indent = depth;
		p.print(i.ip, i.code[i.ip]);
	}
	def after(i: IcInterpreter, probeIp: int) {
		var top = i.topFrame;
		if (top != lastFrame) {
			// a call or return must have occurred
			if (top != null) {
				if (top.next == lastFrame) { depth = depth + 1;}
				else { depth = depth - 1; }
			}
		}
	}
}
// Prints a dynamic call tree as a program executes.
class IcCallTracer(matcher: VstMatcher, traceParent: bool) {
	def buffer = StringBuffer.new();
	var depth: int;
	var frame: IcFrame;
	// instrument the code of a method.
	def onGen(memberRef: IrSpec, icm: IcMethod) {
		if (!matcher.matches(memberRef.asMethod().source)) return;
		for (i < icm.iccode.length) {
			var j = icm.iccode[i];
			if (IcInstr.Ret.?(j)) icm.addProbeBefore(i, pmOnRet);
		}
		icm.addProbeBefore(0, pmOnEntry);
	}
	// Print the method and args on entry.
	def pmOnEntry(i: IcInterpreter, probeIp: int) {
		var topFrame = i.topFrame;
		if (topFrame != frame) {
			// this method has just been entered (i.e. not a loop back to start)
			buffer.reset();
			for (i < depth) buffer.puts("  ");
			if (traceParent && topFrame.next != null) {
				buffer.puts(Terminal.CTRL_GREEN);
				topFrame.next.icm.memberRef.member.renderLong(buffer);
				buffer.puts(Terminal.CTRL_DEFAULT);
				buffer.puts(" -> ");
			}
			buffer.puts(Terminal.CTRL_GREEN);
			topFrame.icm.memberRef.member.renderLong(buffer);
			buffer.puts(Terminal.CTRL_DEFAULT);
			buffer.puts("(");
			for (j < topFrame.icm.numParams) {
				if (j > 0) buffer.csp();
				var v = i.regs[i.rp + j];
				V3.renderResult(v, null, buffer);
			}
			buffer.puts(")\n");
			Terminal.putb(buffer);
			frame = topFrame;
			depth++;
		}
	}
	// Pop the current frame on return.
	def pmOnRet(i: IcInterpreter, probeIp: int) {
		if(frame == null) return;
		frame = frame.next;
		depth--;
	}
}
