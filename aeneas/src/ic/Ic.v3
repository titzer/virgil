// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

type IntBinop {
	case IntAdd;
	case IntSub;
	case IntMul;
	case IntDivS;
	case IntDivU;
	case IntModS;
	case IntModU;
	case IntAnd;
	case IntOr;
	case IntXor;
	case IntShl;
	case IntSar;
	case IntShr;
}
type IntCompare {
	case IntEq;
	case IntLtS;
	case IntLteqS;
	case IntLtU;
	case IntLteqU;
}
type IntUnop {
	case IntWrapS;
	case IntWrapU;
	case IntToLongS;
	case IntToLongU;
	case LongToInt;
}
type IcInstr {
	case Move(dst: int, src: int);
	case Int32Binop(dst: int, x: int, y: int, opcode: IntBinop, src: Source);
	case Int32Compare(dst: int, x: int, y: int, opcode: IntCompare, src: Source);
	case Int32Unop(dst: int, x: int, shift: u5, opcode: IntUnop, src: Source);
	case Int64Binop(dst: int, x: int, y: int, lsigned: bool, rsigned: bool, opcode: IntBinop, src: Source);
	case Int64Compare(dst: int, x: int, y: int, lsigned: bool, rsigned: bool, opcode: IntCompare, src: Source);
	case Int64Unop(dst: int, x: int, shift: u6, signed: bool, opcode: IntUnop, src: Source);
	case FastOp(dst: int, x: int, y: int, op: Operator, opcode: Opcode, src: Source);
	case Apply(dst: int, op: Operator, args: Array<int>, src: Source);
	case Call(dst: int, func: int, args: Array<int>, src: Source);
	case Switch(arg: int, targets: Array<int>);
	case Branch(always: bool, bval: bool, arg: int, target: int);
	case Ret(arg: int);
	case Throw(exception: string, src: Source);
	case Probe(orig: IcInstr, probes: IcProbes);
}
def NOP = IcInstr.Move(0, 0);
def INT_INT = Tuple.newType(List.new(Int.TYPE, List.new(Type.!(Int.TYPE), null)));
class IcAssembler(code: Vector<IcInstr>) {
	var numRegs: int;
	var voidReg: u31;
	var source: Source;
	def newTmp() -> int {
		return numRegs++;
	}
	def allocReg(i: SsaInstr, t: Type) -> u31 {
		return u31.!(numRegs++);
	}
	def at(source: Source) -> this {
		this.source = source;
	}
	def apply(dst: int, op: Operator, args: Array<int>) -> int {
		match (op.opcode) {
			TypeSubsume => {
				if (isNopSubsume(op.typeArgs[0], op.typeArgs[1])) return args[0];  // nop
				// XXX: a full type cast is overkill
				code.put(IcInstr.Apply(dst, V3Op.newTypeCast(op.typeArgs[0], op.typeArgs[1]), args, source));
				return dst;
			}
			OverloadedEq,
			BoolEq,
			RefEq,
			VariantEq => {
				if (args.length == 1) args = normBinopArgs(args);
				code.put(IcInstr.FastOp(dst, args[0], args[1], op, op.opcode, source));
			}
			IntEq =>  {
				if (IntType.?(op.typeArgs[0])) intCompare(op, IntCompare.IntEq, IntCompare.IntEq, dst, args);
				else code.put(IcInstr.Apply(dst, op, args, source));
			}
			IntAdd => intBinop(op, IntBinop.IntAdd, true, dst, args);
			IntSub => intBinop(op, IntBinop.IntSub, true, dst, args);
			IntMul => intBinop(op, IntBinop.IntMul, true, dst, args);
			IntDiv => intBinopS(op, IntBinop.IntDivS, IntBinop.IntDivU, true, dst, args);
			IntMod => intBinopS(op, IntBinop.IntModS, IntBinop.IntModU, true, dst, args);
			IntAnd => intBinop(op, IntBinop.IntAnd, false, dst, args);
			IntOr =>  intBinop(op, IntBinop.IntOr, false, dst, args);
			IntXor => intBinop(op, IntBinop.IntXor, true, dst, args);
			IntShl => intBinop(op, IntBinop.IntShl, true, dst, args);
			IntSar => intBinop(op, IntBinop.IntSar, true, dst, args);
			IntShr => {
				if (args.length == 1) args = normBinopArgs(args);
				var lt = IntType.!(op.sig.paramTypes[0]);
				var arg0 = args[0];
				if (intTrunc(dst, arg0, false, lt.width)) arg0 = dst;
				intBinop(op, IntBinop.IntShr, true, dst, [arg0, args[1]]);
			}
			IntLt => intCompare(op, IntCompare.IntLtS, IntCompare.IntLtU, dst, args);
			IntLteq => intCompare(op, IntCompare.IntLteqS, IntCompare.IntLteqU, dst, args);
			IntViewI => {
				var arg0 = args[0];
				var ft = IntType.!(op.sig.paramTypes[0]), tt = IntType.!(op.sig.returnType());
				var trunc = if(ft.width > 32, intConvert64, intConvert32)(ft, tt, dst, arg0);
				if (!trunc) return arg0;
			}
			CallClosure,
			CallFunction => {
				code.put(IcInstr.Call(dst, args[0], Arrays.range(args, 1, args.length), source));
			}
			_ => code.put(IcInstr.Apply(dst, op, args, source));
		}
		return dst;
	}
	def isNopSubsume(ft: Type, tt: Type) -> bool {
		if (!ft.open() && !tt.open()) return true;
		var fkind = ft.typeCon.kind, tkind = tt.typeCon.kind;
		for (t in [fkind, tkind]) {
			match (t) {
				V3Kind.BOOL, V3Kind.CLOSURE, V3Kind.ARRAY, V3Kind.CLASS, V3Kind.VARIANT, V3Kind.ENUM, V3Kind.ENUM_SET => return true;
				V3Kind.INT, V3Kind.FLOAT => return false;
			}
		}
		return false;
	}
	private def intConvert64(ft: IntType, tt: IntType, dst: int, arg: int) -> bool {
		if (TypeSystem.isIntPromotable(ft, tt)) return false;
		if (tt.width <= 32) {
			code.put(IcInstr.Int64Unop(dst, arg, 0, false, IntUnop.LongToInt, null));
			intTrunc(dst, dst, tt.signed, tt.width);
			return true;
		}
		return intTrunc(dst, arg, tt.signed, tt.width);
	}
	private def intConvert32(ft: IntType, tt: IntType, dst: int, arg: int) -> bool {
		if (tt.width > 32) {
			code.put(IcInstr.Int32Unop(dst, arg, 0, if(ft.signed, IntUnop.IntToLongS, IntUnop.IntToLongU), null));
			intTrunc(dst, dst, tt.signed, tt.width);
			return true;
		}
		if (TypeSystem.isIntPromotable(ft, tt)) return false;
		return intTrunc(dst, arg, tt.signed, tt.width);
	}
	private def intBinop(op: Operator, opcode: IntBinop, trunc: bool, dst: int, args: Array<int>) {
		if (args.length == 1) args = normBinopArgs(args);
		var lt = IntType.!(op.sig.paramTypes[0]), instr: IcInstr;
		if (lt.width <= 32) {
			code.put(IcInstr.Int32Binop(dst, args[0], args[1], opcode, source));
			if (trunc) intTrunc(dst, dst, lt.signed, lt.width);
		} else {
			var rt = IntType.!(op.sig.paramTypes[1]);
			code.put(IcInstr.Int64Binop(dst, args[0], args[1], lt.signed, rt.signed, opcode, source));
			if (trunc) intTrunc(dst, dst, lt.signed, lt.width);
		}
	}
	private def intBinopS(op: Operator, signed_opcode: IntBinop, unsigned_opcode: IntBinop, trunc: bool, dst: int, args: Array<int>) {
		var lt = IntType.!(op.sig.paramTypes[0]), instr: IcInstr;
		var opcode = if(lt.signed, signed_opcode, unsigned_opcode);
		return intBinop(op, opcode, trunc, dst, args);
	}
	private def intCompare(op: Operator, signed_opcode: IntCompare, unsigned_opcode: IntCompare, dst: int, args: Array<int>) {
		if (args.length == 1) args = normBinopArgs(args);
		var lt = op.sig.paramTypes[0];
		var opcode = if(V3.isSigned(lt), signed_opcode, unsigned_opcode);
		if (intWidth(lt) <= 32) {
			code.put(IcInstr.Int32Compare(dst, args[0], args[1], opcode, source));
		} else {
			var rt = op.sig.paramTypes[1];
			code.put(IcInstr.Int64Compare(dst, args[0], args[1], V3.isSigned(lt), V3.isSigned(rt), opcode, source));
		}
	}
	private def intWidth(t: Type) -> int {
		match (t) {
			x: IntType => return x.width;
			x: EnumType => return x.enumDecl.tagType.width;
			x: EnumSetType => return x.repType.width;
		}
		return 32;
	}
	private def intTrunc(dst: int, arg: int, signed: bool, width: int) -> bool {
		if (width < 32) {
			code.put(IcInstr.Int32Unop(dst, arg, u5.view(32 - width), if(signed, IntUnop.IntWrapS, IntUnop.IntWrapU), source));
			return true;
		}
		if (width != 32 && width < 64) {
			code.put(IcInstr.Int64Unop(dst, arg, u6.view(64 - width), signed, if(signed, IntUnop.IntWrapS, IntUnop.IntWrapU), source));
			return true;
		}
		return false;
	}
	private def normBinopArgs(args: Array<int>) -> Array<int> {
		var l = allocReg(null, null), r = allocReg(null, null);
		code.put(IcInstr.Apply(l, V3Op.newTupleGetElem(INT_INT, 0), args, null));
		code.put(IcInstr.Apply(r, V3Op.newTupleGetElem(INT_INT, 1), args, null));
		return [l, r];
	}
}

// global constants for Ic code.
def FAST = 0;
def SLOW = 1;
def EXCEPTION = 2;
def PAUSE = 3;
def DONE = 4;
// representation of a method, with parameters, registers, and code
class IcMethod(memberRef: IrSpec, iccode: Array<IcInstr>, numParams: int, consts: (int, Array<Val>), numRegs: int) {
	def uid: int = UID.next++;

	def addProbeBefore(ip: int, f: (IcInterpreter, int) -> void) {
		var i = iccode[ip];
		var p = IcInstr.Probe.!(if(IcInstr.Probe.?(i), i, iccode[ip] = IcInstr.Probe(i, IcProbes.new())));
		p.probes.addProbeBefore(f);
	}
	def addProbeAfter(ip: int, f: (IcInterpreter, int) -> void) {
		var i = iccode[ip];
		var p = IcInstr.Probe.!(if(IcInstr.Probe.?(i), i, iccode[ip] = IcInstr.Probe(i, IcProbes.new())));
		p.probes.addProbeAfter(f);
	}
	def removeProbeBefore(ip: int, f: (IcInterpreter, int) -> void) {
		var i = iccode[ip];
		if (IcInstr.Probe.?(i)) {
			var p = IcInstr.Probe.!(i).probes;
			p.removeProbeBefore(f);
			if (p.before == null && p.after == null) iccode[ip] = IcInstr.Probe.!(i).orig;
		}
	}
}
// helper class to hold list of probes before and after an instruction
class IcProbes {
	var before: List<(IcInterpreter, int) -> void>;
	var after: List<(IcInterpreter, int) -> void>;
	def addProbeBefore(f: (IcInterpreter, int) -> void) {
		before = List.new(f, before);
	}
	def addProbeAfter(f: (IcInterpreter, int) -> void) {
		after = List.new(f, after);
	}
	def removeProbeBefore(f: (IcInterpreter, int) -> void) {
		before = remove(before, f);
	}
	def removeProbeAfter(f: (IcInterpreter, int) -> void) {
		after = remove(after, f);
	}
	def remove(l: List<(IcInterpreter, int) -> void>, f: (IcInterpreter, int) -> void) -> List<(IcInterpreter, int) -> void> {
		if (l == null) return null;
		if (l.head == f) return remove(l.tail, f);
		return List<(IcInterpreter, int) -> void>.new(l.head, remove(l.tail, f));
	}
	def empty() -> bool {
		return before == null && after == null;
	}
}
// a single activation frame within the interpreter
class IcFrame {
	var memberRef: IrSpec;
	var icm: IcMethod;
	var retIp: int;
	var retReg: int;
	var retRp: int;
	var next: IcFrame;
}
// The interpreter for IC code, including all state such as registers and stack
class IcInterpreter(prog: Program, compile: IrSpec -> IcMethod) extends Arguments {
	def globalProbes  = IcProbes.new(); // container for any global probes

	var topFrame: IcFrame;		// currently executing frame
	var regs: Array<Val>;		// register stack
	var code: Array<IcInstr>;	// current code
	var rp: int;			// register pointer
	var ip: int;			// index of current instruction
	var freeList: IcFrame;		// list for recycling IcFrame objects
	var exception: Exception;	// last exception
	var flow: int;			// flow control state
	var pausedInstr: IcInstr;	// instruction that was last paused

	new() {
		init(null, null);
	}
	def getTopMethod() -> IcMethod {
		if (topFrame != null) return topFrame.icm;
		return null;
	}
	def invoke(del: Closure, args: Array<Val>) -> Result {
		init(del.memberRef, args);
		regs[0] = del.val;
		run();
		if (exception != null) return exception;
		return regs[0];
	}
	def init(m: IrSpec, args: Array<Val>) {
		regs = null;
		code = null;
		ip = 0;
		rp = 0;
		freeList = topFrame = null;
		flow = PAUSE;
		exception = null;
		regs = Array<Val>.new(32); // TUNABLE: initial size of register stack

		if (m != null) {
			// initialize frame
			var mm = m.asMethod();
			if (mm.ic == null) mm.ic = compile(m);
			pushFrame(0, 0, m, mm.ic);
		}
		if (args != null) {
			// initialize register values
			regs[0] = Values.BOTTOM;
			Arrays.copyInto(args, regs, 1);
		}
		if (m != null) initFrame();
	}
	def addProbeBefore(f: (IcInterpreter, int) -> void) {
		globalProbes.addProbeBefore(f);
		if (flow == FAST) flow = SLOW;
	}
	def addProbeAfter(f: (IcInterpreter, int) -> void) {
		globalProbes.addProbeAfter(f);
		if (flow == FAST) flow = SLOW;
	}
	// resume execution from a previously paused state
	def run() {
		if (flow == PAUSE) {
			flow = SLOW;
			if (globalProbes.empty()) flow = FAST;
		}
		while (flow == FAST || flow == SLOW) {
			while (flow == FAST) ip = execute(code[ip]);
			while (flow == SLOW) step();
		}
	}
	// execute a single instruction, firing global probe
	def step() {
		var i = code[ip], probeIp = ip;
		if (fireBefore(i, globalProbes, probeIp)) return;
		ip = execute(i);
		// execute all "after" probes
		pausedInstr = NOP;
		fireProbes(globalProbes, probeIp, true);
	}
	// execute a single instruction, firing only local probes
	def execute(instr: IcInstr) -> int {
		var nextIp = ip + 1;
		match (instr) {
			Move(dst, src) => {
				regs[rp + dst] = regs[rp + src];
			}
			Int32Binop(dst, x, y, opcode, src) => {
				var regs = this.regs, rp = this.rp;  // for speed
				var xv = Int.unbox(regs[rp + x]), yv = Int.unbox(regs[rp + y]), rv: int;
				match (opcode) {
					IntAdd => rv = xv + yv;
					IntSub => rv = xv - yv;
					IntMul => rv = xv * yv;
					IntDivS => {
						if (yv == 0) throw(V3Exception.DivideByZero, null);
						else rv = xv / yv;
					}
					IntDivU => {
						if (yv == 0) throw(V3Exception.DivideByZero, null);
						else rv = int.view(u32.view(xv) / u32.view(yv));
					}
					IntModS => {
						if (yv == 0) throw(V3Exception.DivideByZero, null);
						else rv = xv % yv;
					}
					IntModU => {
						if (yv == 0) throw(V3Exception.DivideByZero, null);
						else rv = int.view(u32.view(xv) % u32.view(yv));
					}
					IntAnd => rv = xv & yv;
					IntOr =>  rv = xv | yv;
					IntXor => rv = xv ^ yv;
					IntShl => {
						var shift = u5.view(yv);
						rv = if(shift == yv, xv << shift, 0);
					}
					IntSar => {
						var shift = u5.view(yv);
						rv = if(shift == yv, xv >> shift, xv >> 63);
					}
					IntShr => {
						var shift = u5.view(yv);
						rv = if(shift == yv, xv >>> shift, 0);
					}
				}
				regs[rp + dst] = Int.box(rv);
			}
			Int32Compare(dst, x, y, opcode, src) => {
				var regs = this.regs, rp = this.rp;  // for speed
				var xv = Int.unbox(regs[rp + x]), yv = Int.unbox(regs[rp + y]), rv: bool;
				match (opcode) {
					IntEq => rv = xv == yv;
					IntLtS => rv = xv < yv;
					IntLteqS => rv = xv <= yv;
					IntLtU => rv = u32.view(xv) < u32.view(yv);
					IntLteqU => rv = u32.view(xv) <= u32.view(yv);
				}
				regs[rp + dst] = Bool.box(rv);
			}
			Int32Unop(dst, x, shift, opcode, src) => {
				var regs = this.regs, rp = this.rp;  // for speed
				var xv = Int.unbox(regs[rp + x]), rv: Val;
				match (opcode) {
					// Unops
					IntWrapS => rv = Int.box((xv << shift) >> shift);
					IntWrapU => rv = Int.box((xv << shift) >>> shift);
					IntToLongS => rv = Long.box(xv);
					IntToLongU => rv = Long.box(long.view(u32.view(xv)));
					_ => ;
				}
				regs[rp + dst] = rv;
			}
			Int64Binop(dst, x, y, lsigned, rsigned, opcode, src) => {
				var regs = this.regs, rp = this.rp;  // for speed
				var xv = Long.unboxSU(regs[rp + x], lsigned), yv = Long.unboxSU(regs[rp + y], rsigned), rv: long;
				match (opcode) {
					IntAdd => rv = xv + yv;
					IntSub => rv = xv - yv;
					IntMul => rv = xv * yv;
					IntDivS => {
						if (yv == 0) throw(V3Exception.DivideByZero, null);
						else rv = xv / yv;
					}
					IntDivU => {
						if (yv == 0) throw(V3Exception.DivideByZero, null);
						else rv = long.view(u64.view(xv) / u64.view(yv));
					}
					IntModS => {
						if (yv == 0) throw(V3Exception.DivideByZero, null);
						else rv = xv % yv;
					}
					IntModU => {
						if (yv == 0) throw(V3Exception.DivideByZero, null);
						else rv = long.view(u64.view(xv) % u64.view(yv));
					}
					IntAnd => rv = xv & yv;
					IntOr => rv = xv | yv;
					IntXor => rv = xv ^ yv;
					IntShl => {
						var shift = u6.view(yv);
						rv = if(shift == yv, xv << shift, 0);
					}
					IntSar => {
						var shift = u6.view(yv);
						rv = if(shift == yv, xv >> shift, xv >> 63);
					}
					IntShr => {
						var shift = u6.view(yv);
						rv = if(shift == yv, xv >>> shift, 0);
					}
				}
				regs[rp + dst] = Long.box(rv);
			}
			Int64Compare(dst, x, y, lsigned, rsigned, opcode, src) => {
				var regs = this.regs, rp = this.rp;  // for speed
				var xv = Long.unboxSU(regs[rp + x], lsigned), yv = Long.unboxSU(regs[rp + y], rsigned), rv: bool;
				match (opcode) {
					IntEq => rv = (xv == yv);
					IntLtS => rv = (xv < yv);
					IntLteqS => rv = (xv <= yv);
					IntLtU => rv = (u64.view(xv) < u64.view(yv));
					IntLteqU => rv = (u64.view(xv) <= u64.view(yv));
				}
				regs[rp + dst] = Bool.box(rv);
			}
			Int64Unop(dst, x, shift, signed, opcode, src) => {
				var regs = this.regs, rp = this.rp;  // for speed
				var xv = Long.unboxSU(regs[rp + x], signed), rv: Val;
				match (opcode) {
					IntWrapS => rv = Long.box((xv << shift) >> shift);
					IntWrapU => rv = Long.box((xv << shift) >>> shift);
					LongToInt => rv = Int.box(int.view(xv));
					_ => throw(V3Exception.InternalError, "not a supported int unop");
				}
				regs[rp + dst] = rv;
			}
			FastOp(dst, x, y, op, opcode, src) => {
				var regs = this.regs, rp = this.rp;  // for speed
				var xv = regs[rp + x], rv: Val;
				match (opcode) {
					OverloadedEq,
					BoolEq,
					RefEq,
					VariantEq =>    rv = Bool.box(Values.equal(xv, regs[rp + y]));
					TypeSubsume =>  rv = xv;
					NullCheck => {
						rv = xv;
						if (rv == null) throw(V3Exception.NullCheck, null);
					}
					_ => ;
				}
				regs[rp + dst] = rv;
			}
			Apply(dst, op, args, src) => {
				var d = rp + dst, r = evalOp(op, dst, args);
				if (opTailCall) {
					// operator performed a tail call
					opTailCall = false;
					return 0;
				} else if (!Exception.?(r)) {
					// operator returned a non-exception result
					regs[d] = Val.!(r);
				}
				return ip + 1;
			}
			Call(dst, func, args, src) => {
				var oldRp = rp, fval = regs[oldRp + func];
				if (Closure.?(fval)) {
					// apply a closure
					var del = Closure.!(fval), icm = getIcMethod(del.memberRef);
					pushFrame(ip, dst, del.memberRef, icm);
					// copy the arguments into the new frame
					var regs = this.regs, rp = this.rp;  // for speed
					regs[rp] = del.val;
					var argRp = rp + 1, jmax = args.length;
					for (j < jmax) regs[argRp + j] = regs[oldRp + args[j]];
					if (jmax != icm.numParams - 1) adjustArgs(argRp, icm.numParams - 1, jmax);
					initFrame();
					nextIp = 0;
				} else if (FuncVal.?(fval)) {
					var meth = FuncVal.!(fval).memberRef, icm = getIcMethod(meth);
					pushFrame(ip, dst, meth, icm);
					// copy the arguments into the frame
					var regs = this.regs, rp = this.rp;  // for speed
					var argRp = rp, jmax = args.length;
					for (j < jmax) regs[argRp + j] = regs[oldRp + args[j]];
					if (jmax != icm.numParams) adjustArgs(argRp, icm.numParams, jmax);
					initFrame();
					nextIp = 0;
				} else if (fval == null) {
					throw(V3Exception.NullCheck, null);
				} else {
					throw(V3Exception.InternalError, "expected closure or operator");
				}
			}
			Switch(arg, targets) => {
				var index = Int.unbox(regs[rp + arg]);
				if (u32.view(index) >= u32.view(targets.length)) index = targets.length - 1;
				nextIp = targets[index];
			}
			Branch(always, bval, arg, target) => {
				if (always || bval == Bool.unbox(regs[rp + arg])) nextIp = target; // branch taken
			}
			Ret(arg) => {
				var retVal = regs[rp + arg];
				var top = topFrame;
				var prev = popFrame();
				regs[rp + top.retReg] = retVal;
				if (prev == null) flow = DONE;
				nextIp = top.retIp + 1;
			}
			Throw(exception, src) => {
				throw(exception, null);
			}
			Probe(orig, probes) => {
				var probeIp = ip;
				if (fireBefore(instr, probes, probeIp)) return probeIp;
				ip = nextIp = execute(orig);
				pausedInstr = NOP;
				fireProbes(probes, probeIp, true);
			}
		}
		return nextIp;
	}
	// fire probes before this instruction, return true if paused
	def fireBefore(i: IcInstr, probes: IcProbes, probeIp: int) -> bool {
		if (pausedInstr == i) return false;
		// execute all "before" probes
		fireProbes(probes, probeIp, false);
		if (flow == PAUSE) {
			// probe paused execution
			pausedInstr = i;
			return true;
		}
		return false;
	}
	// fire all of the probes in the list
	def fireProbes(probes: IcProbes, probeIp: int, after: bool) {
		var q = probes.before;
		if (after) q = probes.after;
		while (q != null) {
			q.head(this, probeIp);
			q = q.tail;
		}
	}
	def pushFrame(retIp: int, retReg: int, memberRef: IrSpec, icm: IcMethod) {
		// adjust register pointer first
		var retRp = rp;
		if (topFrame != null) rp = rp + topFrame.icm.numRegs;
		var end = rp + icm.numRegs;
		if (end > regs.length) regs = Arrays.grow(regs, end * 3);

		// get frame from free list, or allocate a new one
		var nf = freeList;
		if (nf != null) freeList = nf.next;
		else nf = IcFrame.new();

		// link new frame
		nf.next = topFrame;
		nf.retIp = retIp;
		nf.retReg = retReg;
		nf.retRp = retRp;
		nf.icm = icm;
		nf.memberRef = memberRef;

		// set code and current frame
		topFrame = nf;
		code = icm.iccode;
	}
	def initFrame() {
		var t = topFrame.icm.consts;
		var b = rp + t.0, c = t.1;
		for (i < c.length) regs[b + i] = c[i];
	}
	def popFrame() -> IcFrame {
		// get top frame
		var nf = topFrame;

		// pop frame and add to free list
		topFrame = nf.next;
		nf.next = freeList;
		freeList = nf;

		// adjust register pointer
		rp = nf.retRp;

		// if not the last frame, set code
		if (topFrame != null) code = topFrame.icm.iccode;
		else code = null;
		return topFrame;
	}
	// create a stack trace from the current activation frames
	private def getStackTrace() -> List<Source> {
		var list: List<Source>, fip = ip;
		for (f = topFrame; f != null; f = f.next) {
			list = List.new(getSource(f.icm, fip), list);
			fip = f.retIp;
		}
		return Lists.reverse(list);
	}
	private def getSource(icm: IcMethod, ip: int) -> Source {
		return getSourceI(icm, ip, if(ip < 0, NOP, icm.iccode[ip]));
	}
	private def getSourceI(icm: IcMethod, ip: int, i: IcInstr) -> Source {
		match (i) {
			Int32Binop(dst, x, y, opcode, src) => return src;
			Int32Compare(dst, x, y, opcode, src) => return src;
			Int32Unop(dst, x, shift, opcode, src) => return src;
			Int64Binop(dst, x, y, lsigned, rsigned, opcode, src) => return src;
			Int64Compare(dst, x, y, lsigned, rsigned, opcode, src) => return src;
			Int64Unop(dst, x, shift, signed, opcode, src) => return src;
			FastOp(dst, x, y, op, opcode, src) => return src;
			Apply(dst, op, args, src) => return src;
			Call(dst, func, args, src) => return src;
			Throw(exception, src) => return src;
			Probe(orig, probes) => return getSourceI(icm, ip, orig);
			_ => return Source.new(icm.memberRef.asMethod().source, 0, ip - 1, null, null);
		}
	}
	// == implementation of Argument interface for operators =================
	private var typeArgs: Array<Type>;
	private var opDstReg: int;
	var opTailCall: bool;

	def getTypeArg(i: int) -> Type {
		var t = typeArgs[i];
		if (t.open()) t = topFrame.memberRef.instantiateType(t);
		return t;
	}
	def getTypeArgs() -> Array<Type> {
		return topFrame.memberRef.instantiateTypes(typeArgs);
	}
	def getProgram() -> Program {
		return prog;
	}
	def tailCall(memberRef: IrSpec, rcvr: Val, startArg: int, endArg: int) -> Result {
		opTailCall = true;
		var oldRp = rp, icm = getIcMethod(memberRef);
		pushFrame(ip, opDstReg, memberRef, icm);
		// copy the arguments into the frame
		var argRp = rp + 1, numArgs = endArg - startArg;
		for (i < numArgs) {
			regs[argRp + i] = vals[startArg + i];
		}
		regs[rp] = rcvr;
		// adjust size of parameters if necessary
		if (numArgs != icm.numParams - 1) adjustArgs(argRp, icm.numParams - 1, numArgs);
		initFrame();
		return Values.BOTTOM;
	}
	def evalOp(op: Operator, dst: int, args: Array<int>) -> Result {
		if (args.length != op.sig.paramTypes.length) args = adjustOpArgs(op.sig.paramTypes.length, args);
		typeArgs = op.typeArgs;
		opDstReg = dst;
		var v = growVals(args.length);
		for (i < args.length) v[i] = regs[rp + args[i]];
		return op.evaluate(this);
	}
	def throw(ex: string, msg: string) -> Exception {
		exception = Exception.new(ex, msg, getStackTrace());
		flow = EXCEPTION;
		return exception;
	}
	def getIcMethod(memberRef: IrSpec) -> IcMethod {
		var m = memberRef.asMethod();
		var icm = m.ic;
		if (icm == null) return m.ic = compile(memberRef);
		return icm;
	}
	// adjust arguments to expected parameters, either by expanding or collapsing tuples
	def adjustArgs(argRp: int, numParams: int, numArgs: int) {
		if (numParams == 0 || numParams == numArgs) return;
		var max = argRp + numParams;
		if (max >= regs.length) {
			// allocate space for the expanded arguments if necessary
			regs = Arrays.grow(regs, max);
		}
		if (numArgs == 0) {
			// pass all BOTTOMs
			while (argRp < max) {
				regs[argRp++] = Values.BOTTOM;
			}
		} else if (numParams == 1) {
			// collapse into tuple
			regs[argRp] = TupleVal.new(Arrays.range(regs, argRp, argRp + numArgs));
		} else {
			// expand tuple
			var last = argRp + numArgs - 1, v = regs[last];
			if (TupleVal.?(v)) {
				// expand tuple
				var tv = TupleVal.!(v);
				for (i = 0; last < max; i++) {
					regs[last++] = tv.values[i];
				}
			} else {
				// pass all BOTTOMS
				while (last < max) {
					regs[last++] = Values.BOTTOM;
				}
			}
		}
	}
	// adjust arguments to parameters for operator invocation
	def adjustOpArgs(numParams: int, args: Array<int>) -> Array<int> {
		var tempRp = allocSlack(numParams + 1);
		// use temp space at the end of registers for adjustment
		for (i < args.length) {
			regs[tempRp + i] = regs[rp + args[i]];
		}
		// now perform the adjustment using in-register routine
		adjustArgs(tempRp, numParams, args.length);
		return newArgs(tempRp, numParams);
	}
	def newArgs(tempRp: int, numParams: int) -> Array<int> {
		var result = Array<int>.new(numParams);
		// return the new offsets of the (expanded or contracted) values
		var pos = tempRp - rp;
		for (i < result.length) {
			result[i] = pos + i;
		}
		return result;
	}
	// allocate temporary slack space beyond the end of the current frame
	def allocSlack(num: int) -> int {
		var tempRp = rp + topFrame.icm.numRegs * 2;
		var end = tempRp + num;
		if (end > regs.length) regs = Arrays.grow(regs, end * 3);
		return tempRp;
	}
}
