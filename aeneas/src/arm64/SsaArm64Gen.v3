// Copyright 2024 Virgil Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def Regs: Arm64RegSet;
def Conds: Arm64Conds; // TODO

// Code generation for the Arm64 backend
class SsaArm64Gen extends SsaMachGen {
	def asm: Arm64Assembler;
	def m = SsaInstrMatcher.new();
	def dwarf: Dwarf;

	new(context: SsaContext, mach: MachProgram, asm, w: MachDataWriter, dwarf)
	super(context, mach, Arm64RegSet.SET, w) {}

	// Overidden Architecture Specific Routines
	def visitApply(block: SsaBlock, i: SsaApplyOp) {
		match (i.op.opcode) {
			_ => context.unimplemented(); // TODO
		}
	}

	def visitThrow(block: SsaBlock, i: SsaThrow) { context.unimplemented(); }
	def visitIf(block: SsaBlock, i: SsaIf) { context.unimplemented(); }
	def visitSwitch(block: SsaBlock, i: SsaSwitch) { context.unimplemented(); }
	def visitGoto(block: SsaBlock, target: SsaGoto) { context.unimplemented(); }

	// Override Code Generation
	def assemble(opcode: int, x: Array<Operand>) {
		context.unimplemented();
	}

	// Regalloc callbacks to add moves
	def genSaveLocal(reg: int, v: VReg) { context.unimplemented(); }
	def genRestoreLocal(v: VReg, reg: int) { context.unimplemented(); }
	def genMoveLocLoc(src: (VReg, int), dst: (VReg, int), regClass: RegClass) { context.unimplemented(); }

	// Register allocation callback to prepend a move
	def genMoveValLoc(src: VReg, dst: (VReg, int), regClass: RegClass) { context.unimplemented(); }
}
