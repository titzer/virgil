// Copyright 2024 Virgil Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def SPACE = AddressSpace.new("mem", false, 64, 8,
	Alignment.new(4096), Alignment.new(8));
def KERNEL_CALL_RETURN = Tuple.newType(Lists.cons2(Long.TYPE, Long.TYPE));
def Arm64_LINUX_TARGET = Aeneas.registerTarget(
		LinuxTarget.new("arm64-linux", SPACE, IntNormalizers.I64LE, Arm64Common.LOWERING,
			Arm64LinuxBackend.new(_, _, _, _, _, false), ElfConst.EM_AARCH64,
			KERNEL_CALL_RETURN));

def Regs: Arm64Regs;
def MRegs: Arm64RegSet;

// Provides the arm64 specific logic for generating a Linux binary.
class Arm64LinuxBackend extends Arm64Backend {
	def SYSNUM = Regs.R8;
	def PARAM0 = Regs.R0;
	def PARAM1 = Regs.R1;
	def PARAM2 = Regs.R2;
	def PARAM3 = Regs.R3;
	def PARAM4 = Regs.R4;
	def PARAM5 = Regs.R5;

	new(compiler: Compiler, prog: Program, mach: MachProgram, w: MachDataWriter, dwarf: Dwarf,
		test: bool) super(compiler, prog, mach, w, dwarf, test) { }

	// Override Arm64Backend	

    def genSigHandlerInstall(signo: int, handler: Addr) { mach.fail("not implemented"); }
	def asm_exit_r(r: Arm64Gpr) { mach.fail("not implemented"); }
	def asm_exit_code(code: int) { mach.fail("not implemented"); }
	def genTestOutput(main: IrMethod, frame: MachFrame) { mach.fail("not implemented"); }
}
