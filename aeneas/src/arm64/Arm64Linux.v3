// Copyright 2024 Virgil Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def SPACE = AddressSpace.new("mem", false, 64, 8,
	Alignment.new(4096), Alignment.new(8));
def KERNEL_CALL_RETURN = Tuple.newType(Lists.cons2(Long.TYPE, Long.TYPE));
def Arm64_LINUX_TARGET = Aeneas.registerTarget(
		LinuxTarget.new("arm64-linux", SPACE, IntNormalizers.I64LE, Arm64Common.LOWERING,
			Arm64LinuxBackend.new(_, _, _, _, _, false), ElfConst.EM_AARCH64,
			KERNEL_CALL_RETURN));

def Regs: Arm64Regs;
def MRegs: Arm64RegSet;

// Provides the arm64 specific logic for generating a Linux binary.
class Arm64LinuxBackend extends Arm64Backend {
	def SYSNUM = Regs.R8;
	def PARAM0 = Regs.R0;
	def PARAM1 = Regs.R1;
	def PARAM2 = Regs.R2;
	def PARAM3 = Regs.R3;
	def PARAM4 = Regs.R4;
	def PARAM5 = Regs.R5;

	new(compiler: Compiler, prog: Program, mach: MachProgram, w: MachDataWriter, dwarf: Dwarf,
		test: bool) super(compiler, prog, mach, w, dwarf, test) { }
	
	def unimplemented() {
		mach.fail("unimplemented");
	}

	// Override Arm64Backend	

    def genSigHandlerInstall(signo: int, handler: Addr) { unimplemented(); }
	def asm_exit_r(r: Arm64Gpr) { unimplemented(); }
	def asm_exit_code(code: int) { 
		asm.movd_r_i(SYSNUM, 94);
		asm.movd_r_i(PARAM0, u16.view(code));
		asm.svc();
	}
	def genTestOutput(main: IrMethod, frame: MachFrame) {
		// output the return register as a 4-byte integer to stdout
		var rt = main.sig.returnType();
		var gpr = loc_gpr(frame, frame.conv.callerRet(0));

		asm.strd_r_r_i(gpr, Regs.SP, 0);
		asm.movd_r_i(SYSNUM, 64);		// sys_write() = 1
		asm.movd_r_i(PARAM0, 1);		// stdout
		asm.movd_r_i(PARAM1, 0);
		asm.addq_r_r_i_i(PARAM1, Regs.SP, 0, 0); // integer is on stack
		asm.movd_r_i(PARAM2, 4);		// size to write
		asm.svc();
	}
}
