// Copyright 2024 Virgil Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def Regs: Arm64Regs;
def MRegs: Arm64RegSet;

component Arm64Common {
	def LOWERING = makeMachLoweringConfig();
	def makeMachLoweringConfig() -> MachLoweringConfig {
		var config = MachLoweringConfig.new();
		config.Int32Arith = true;
		config.Int64Arith = true;
		config.ExplicitDivChecks = true;
		config.ExplicitModChecks = true;
		config.IntConvertFUnsigned = false;
		config.IntConvertFMapsNanToZero = false;
		config.IntConvertFPosSaturates = false;
		config.FloatConvertIUnsigned = false;
		return config;
  	}

	def KERNEL_PARAM_REGS: Array<Arm64Reg> = [];
	def KERNEL_RETURN_REGS: Array<Arm64Reg> = [];
}

// TODO: negative object headers
class Arm64Backend extends MachBackend {
	def test: bool;
	var patcher: Arm64AddrPatcher;
	var asm: Arm64Assembler;
	var codegen: SsaArm64Gen;
	var allocateRegs: void -> void;
	var allocateRegsGlobal: void -> void;

	// memory allocator configuration
	var objReg: Arm64Gpr;
	var sizeReg: Arm64Gpr;
	var ipReg: Arm64Gpr;
	var spReg: Arm64Gpr;

	new(compiler: Compiler, prog: Program, mach: MachProgram, w: MachDataWriter, dwarf: Dwarf, test)
		super(compiler, prog, mach, w) {

		if (ri_gc != null) {
			// call the RiRuntime.gc() method
			unimplemented();
		} else {
			// there is no appropriate RiRuntime.gc() method
			objReg = Arm64Regs.R0;
			sizeReg = Arm64Regs.R0;
		}
		asm = Arm64Assembler.new(w);
		patcher = Arm64AddrPatcher.new(w, mach, asm);
		codegen = SsaArm64Gen.new(context, mach, asm, w, dwarf);

		if (compiler.useGlobalRegAllocMatcher != VstMatcher.None) allocateRegsGlobal = GlobalRegAlloc.new(MRegs.SET, codegen).allocate;
		if (compiler.LocalRegAlloc) allocateRegs = LocalRegAlloc.new(MRegs.SET, codegen).allocate;
		else allocateRegs = SimpleRegAlloc.new(MRegs.SET, codegen).allocate;
	}

	// Override MachBackend
	def genEntryStub() {
		def main = prog.getMain().asMethod();
		def frame = computeFrameSize(getFrame(main.ssa));
		genTestInputs(main, frame);

		def mainAddr = mach.addrOfMethod(main);
		asm.bl_i26(patcher.REL_IMM26_MARKER);
		patcher.record(mainAddr);

		// write return value to stdout if this is a test
		genTestOutput(main, frame);

		// Exit successfully
		asm_exit_code(0);
	}
	def genCodeFromSsa() {
		var frame = getFrame(context.method.ssa);
		var rtsrc = mach.runtime.src;
		if (rtsrc != null) rtsrc.curFrame = frame;
		codegen.generate(context.method, frame);
		if (context.shouldUseGlobalRegAlloc()) allocateRegsGlobal();
		else allocateRegs();
		computeFrameSize(frame);
		if (rtsrc != null) rtsrc.recordMethodStart(w.endOffset(), context.method.source, frame);
		codegen.assembleInstrs();
		if (rtsrc != null) rtsrc.recordFrameEnd(w.endOffset());
	}
	def patchCodeAddrArm64(w: DataWriter, a: Addr, kind: Arm64PatchKind, posAddr: int) {
		def abs = mach.absolute(a);
		if (CLOptions.PRINT_PATCH.val) {
			TerminalBuffer.new()
				.puts("patch-code @0x")
				.putx(posAddr)
				.puts(" <- ")
				.putcv(a, null)
				.puts(" = 0x")
				.putx(abs)
				.outln();
		}
		patcher.patch(kind, posAddr, abs);
	}
	def genSignalHandlerStub() {
		unimplemented();
	}
	def genFatalStub(ex: string, addr: Addr) {
		unimplemented();
	}
	// Returns call frame for an SsaGraph
	def getFrame(ssa: SsaGraph) -> MachFrame {
		return MachFrame.new(Arm64VirgilCallConv.getForGraph(mach, ssa), mach.data.addrAlign, mach.refSize);
	}

	// Adds Arm64 specific frame size to MachFrame
	def computeFrameSize(frame: MachFrame) -> MachFrame {
		frame.frameSize = mach.alignTo((frame.slots() + 1) * mach.refSize + mach.code.addressSize, mach.stackAlign);
		return frame;
	}
	def genMainInit(frame: MachFrame) {
		unimplemented();
	}
	def unimplemented() {
		mach.fail("unimplemented");
	}
	def genTestInputs(main: IrMethod, frame: MachFrame) {
		// "argc" is on the top of the stack on arm64-linux
		asm.ldrd_r_r_i9(Regs.R8, Regs.SP, 0); // load "argc"
		def params = main.ssa.params, conv = frame.conv;
		if (conv.overflow > 0) {
			// allocate space for overflow arguments
			// TODO: will this always fit?
			def overflowSpace = i12.view(conv.overflow * mach.data.addressSize);
			asm.subq_r_r_i12_u1(Regs.SP, Regs.SP, overflowSpace, 0);
		}

		def vals = mach.runtime.parseTestInputs(prog, prog.ERROR, params.length - 1);

		// load the component "this" pointer with NULL
		asm.movq_r_i16(MRegs.toGpr(conv.callerParam(0)), 0);

		for (i = 1; i < conv.paramLocs.length; i++) {
			def loc = conv.callerParam(i), dest = MRegs.toGpr(loc);

			// load the register value from the table to follow
			def tableLow16 = Addr.new(mach.codeRegion, null, 0);
			def tableHigh16 = Addr.new(mach.codeRegion, null, 0);

			// Move low 16 bits of table addr
			asm.movd_r_i16(Regs.R9, patcher.ABS_IMM16_MARKER);
			patcher.record(tableLow16);
			// Move high 16 bits of table addr
			asm.movkd_r_i16_u1(Regs.R9, patcher.ABS_IMM16_MARKER, 1);
			patcher.record(tableHigh16);

			if (dest == null) {
				// destination is a stack location
				def scratchReg = MRegs.toGpr(MRegs.SCRATCH_GPR);
				// TODO: will this always fit?
				def offset = i9.view(mach.data.addressSize * (loc - frame.conv.regSet.callerStart));
				// table value is at tableAddr + argc * 4
				asm.ldrd_r_r_r_ex_u1(scratchReg, Regs.R9, Regs.R8, MemRegExtend.LSL, 1);
				// Store table value on stack
				asm.strd_r_r_i9(scratchReg, Regs.SP, offset);
			} else {
				asm.ldrd_r_r_r_ex_u1(dest, Regs.R9, Regs.R8, MemRegExtend.LSL, 1);
			}

			// Jump over the table
			def endAddr = Addr.new(mach.codeRegion, null, 0);
			asm.b_i26(patcher.REL_IMM26_MARKER);
			patcher.record(endAddr);
			// Now we know the start address of the table
			def tableAddr = w.addr() - 4; // argc = 1 adjustment
			tableLow16.absolute = u16.view(tableAddr);
			tableHigh16.absolute = u16.view(tableAddr >> 16);
			// emit table of argument values
			for (v in vals) w.put_b32(V3.unboxI32(v[i - 1]));
			// Now we know the end address of the table
			w.bind(endAddr);
		}
	}
	def loc_gpr(frame: MachFrame, loc: int) -> Arm64Gpr {
		var r = MRegs.toGpr(loc);
		if (r == null) return V3.fail(Strings.format1("expected GPR, but got %s", frame.conv.regSet.identify(loc)));
		return r;
	}
	//=={ OS-specific routines }==============================================================
	def genSigHandlerInstall(signo: int, handler: Addr);
	def asm_exit_r(r: Arm64Gpr);
	def asm_exit_code(code: int);
	def genTestOutput(main: IrMethod, frame: MachFrame);
}