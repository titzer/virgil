// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def SPACE = AddressSpace.new("mem", false, 32, 4,
	Alignment.new(4096), Alignment.new(4));
// XXX: enable div and mod checks on x86, remove from OldX86CodeGen
def KERNEL_CALL_RETURN = Tuple.newType(Lists.cons2(Int.TYPE, Int.TYPE));
def LOWERING = MachLoweringConfig.new();
def X86_LINUX_TARGET = Aeneas.registerTarget(
		LinuxTarget.new("x86-linux", SPACE, IntNormalizers.I32LE, LOWERING,
			X86LinuxBackend.new(_, _, _, _, _, false), ElfConst.EM_386,
			KERNEL_CALL_RETURN));
def X86_LINUX_TEST_TARGET = Aeneas.registerTarget(
		LinuxTarget.new("x86-linux-test", SPACE, IntNormalizers.I32LE, LOWERING,
			X86LinuxBackend.new(_, _, _, _, _, true), ElfConst.EM_386,
			KERNEL_CALL_RETURN));

// Provides the x86-specific logic for generating a Linux binary.
class X86LinuxBackend extends X86Backend {
	new(compiler: Compiler, prog: Program, mach: MachProgram, w: MachDataWriter,
		d: Dwarf, test: bool) super(compiler, prog, mach, w, test) {
	}
	def asm_exit_code(code: int) {
		asm.movd_rm_i(X86Regs.EAX, 1); // sys_exit() = 1
		asm.movd_rm_i(X86Regs.EBX, code);
		asm.intK(0x80);
	}
	def asm_exit_rm(rm: X86Rm) {
		asm.movd_r_rm(X86Regs.EBX, rm);
		asm.movd_rm_i(X86Regs.EAX, 1); // sys_exit() = 1
		asm.intK(0x80);
	}
	def genTestOutput(frame: MachFrame) {
		// output the return register as a 4-byte integer to stdout
		asm.push(asm.loc_rm(frame, frame.conv.callerRet(0)));
		asm.movd_rm_i(X86Regs.EAX, 4);			// sys_write() = 4
		asm.movd_rm_i(X86Regs.EBX, 1);			// stdout
		asm.movd_rm_r(X86Regs.ECX, X86Regs.ESP);	// integer is on stack
		asm.movd_rm_i(X86Regs.EDX, 4);			// size to write
		asm.intK(0x80);
	}
	def genSignalHandlerStub() {
		var frame = getFrame(ri_signal.ssa);
		mach.runtime.bindAddr(CiRuntimeModule.SIGNAL_STUB, asm.machBuffer);
		// "this" = null
		asm.movd_rm_i(asm.loc_rm(frame, frame.conv.calleeParam(0)), 0); // "this" = null
		var scratch = X86RegSet.SCRATCH;
		// param 1 = signum @ [esp + 4]
		asm.movd_rm_rm(asm.loc_rm(frame, frame.conv.calleeParam(1)), X86Regs.ESP.plus(1 * mach.data.addressSize), scratch);
		// param 2 = siginfo (null for now)
		asm.movd_rm_i(asm.loc_rm(frame, frame.conv.calleeParam(2)), 0);
		// param 3 = ucontext @ [esp + 12]
		asm.lea(asm.loc_r(frame, frame.conv.calleeParam(3)), X86Regs.ESP.plus(3 * mach.data.addressSize));
		// call RiRuntime.signal(signum: int, siginfo: Pointer, ucontext: Pointer)
		asm.call_addr(mach.addrOfMethod(ri_signal));
		// should not return
	}
	def genFatalStub(ex: string, addr: Addr) {
		var asm = X86Assembler.new(w);
		// 1. encode a call to write() on stderr
		asm.movd_rm_i(X86Regs.EAX, 4);			// sys_write() = 4
		asm.movd_rm_i(X86Regs.EBX, 2);			// stderr
		asm.movd_rm_i(X86Regs.ECX, X86Addrs.ABS_CONST);	// buffer
		var msgAddrPos = asm.pos() - 4;
		asm.movd_rm_i(X86Regs.EDX, ex.length + 1);	// write size
		asm.intK(0x80);
		// 2. encode a call to exit()
		asm_exit_code(-1);
		// 3. output message at end of code
		var msgAddr = w.addr();
		w.putb('!');
		w.puta(ex);
		w.at(msgAddrPos).put_b32(msgAddr);
		w.atEnd();
	}
	// generate code that installs a signal handler
	def genSigHandlerInstall(signo: int, handler: Addr) {
		asm.movd_rm_i(X86Regs.EAX, 48); // sys_signal() = 48
		asm.movd_rm_i(X86Regs.EBX, signo);
		asm.movd_rm_i(X86Regs.ECX, X86Addrs.ABS_CONST);
		recordPatch(handler);
		asm.intK(0x80);
	}
}
