// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class X86Backend extends MachBackend {
	def test: bool;
	def debugMach = CLOptions.PRINT_MACH.val != VstMatcher.None;
	var asm: X86MacroAssembler;
	var objLoc: int;
	var sizeLoc: int;
	var frame: MachFrame;

	new(compiler: Compiler, prog: Program, mach: MachProgram, w: MachDataWriter, test)
		super(compiler, prog, mach, w) {

		asm = X86MacroAssembler.new(mach, w, w.end());
		if (ri_gc != null) {
			// call the RiRuntime.gc() method
			frame = getFrame(ri_gc.ssa);
			objLoc = frame.conv.calleeRet(0);
			sizeLoc = frame.conv.calleeParam(1); // param 0 = "this"
		} else {
			// there is no appropriate RiRuntime.gc() method
			objLoc = X86RegSet.EAX;
			sizeLoc = X86RegSet.EAX;
		}
	}
	def genEntryStub() {
		var main = prog.getMain().asMethod();
		var frame = getFrame(main.ssa);
		// initialize runtime if necessary
		genMainInit(frame);
		if (test) genTestInputs(main, frame);
		// switch to compiler-provided stack before initializing the runtime
		if (CLOptions.STACK_SIZE.get() > 0) {
			var pos = asm.pos();
			asm.movd_rm_i(X86Regs.ESP, X86Addrs.ABS_PATCH.disp);
			asm.recordPatch(pos, CiRuntimeModule.STACK_END);
		}
		// call main
		asm.call_addr(mach.addrOfMethod(main));
		// write return value to stdout if this is a test
		if (test) genTestOutput(frame);
		// exit with the return value of main
		if (main.sig.returnTypes.length == 0) return asm_exit_code(0);
		asm_exit_rm(asm.loc_rm(frame, frame.conv.callerRet(0)));
	}
	def genCodeFromSsa() {
		if (context.graph == null) return;
		var gen = X86CodeGen.new(mach, context);
		gen.genCode(asm);
	}
	def genTestInputs(main: IrMethod, frame: MachFrame) {
		// "argc" is on the top of the stack on x86-darwin and x86-linux
		asm.movd_r_rm(X86Regs.EBX, X86Regs.ESP.indirect()); // load "argc"
		var params = main.ssa.params, conv = frame.conv;
		var vals = mach.runtime.parseTestInputs(prog, prog.ERROR, params.length - 1);
		var w = MachDataWriter.!(asm.w);
		if (conv.overflow > 0) {
			// allocate space for overflow arguments
			asm.sub.rm_i(X86Regs.ESP, conv.overflow * mach.data.addressSize);
		}
		for (i < conv.paramLocs.length) {
			var dest = asm.loc_rm(frame, conv.calleeParam(i));
			if (i == 0) {
				// load the component "this" pointer with NULL
				asm.movd_rm_i(dest, 0);
				continue;
			}
			var loadOffset = 0;
			if (X86Addr.?(dest)) {
				// TODO: don't use scratch register
				var scratch = X86RegSet.SCRATCH;
				asm.movd_r_rm(scratch, X86Addr.new(null, X86Regs.EBX, 4, X86Addrs.ABS_CONST));
				loadOffset = asm.pos() - 4;
				asm.movd_rm_r(dest, scratch);
			} else {
				// load the register value from the table to follow
				asm.movd_r_rm(X86Reg.!(dest), X86Addr.new(null, X86Regs.EBX, 4, X86Addrs.ABS_CONST));
				loadOffset = asm.pos() - 4;
			}
			asm.jmp(vals.length * 4); // jump over the table
			var tableAddr = w.posAddr();
			// emit table of argument values
			for (v in vals) w.put_b32(V3.unboxI32(v[i - 1]));
			w.at(loadOffset).put_b32(tableAddr - 4);
			w.atEnd();
		}
	}
	def genSigInstalls() {
		genSigHandlerInstall(8, mach.runtime.getFatalAddress(V3Exception.DivideByZero));
		genSigHandlerInstall(10, mach.runtime.getFatalAddress(V3Exception.NullCheck));
		genSigHandlerInstall(11, mach.runtime.getFatalAddress(V3Exception.NullCheck));
	}
	def genMainInit(frame: MachFrame) {
		// call RiRuntime.init() if it exists
		if (mach.runtime.ri_init >= 0) return genRiInit(frame);
		// if this is a test, install custom signal handlers
		if (test) return genSigInstalls();
		// TODO: remove compiler-generated initialization of args
		if (frame.conv.paramTypes.length <= 1) return; // don't bother, main doesn't use it
		// initialize arg array from OS-supplied argv and envp
		var argc = X86Regs.EBX, argp = X86Regs.EBX, argArray = X86Regs.EDX;
		var arrayType = V3Array.newType(mach.machType(V3.stringType));

		asm.movd_r_rm(argc, X86Regs.ESP.indirect());
		asm.sub.rm_i(argc, 1); // adjust for first arg
		asmArrayAlloc(arrayType, argArray, argc);
		asm.push(argArray); // save array on stack

		asm.lea(argArray, argArray.plus(mach.getArrayElemOffset(arrayType, 0)));
		asm.lea(argp, X86Regs.ESP.plus(3 * mach.data.addressSize));

		// loop over individual arguments
		var loopStart = asm.pos();
		var str = X86Regs.EDI, strlen = X86Regs.ECX;

		// load the argument and test against null
		asm.movd_r_rm(str, argp.indirect());
		asm.cmp.rm_i(str, 0);
		asm.jz(0);
		var cmpPatch = asm.pos() - 1;

		// compute length of string by finding null byte
		asm.movd_rm_i(strlen, -1);
		asm.repne().scasb(); // updates EDI and ECX, kills EAX
		asm.not(strlen);
		asm.dec(strlen);

		// allocate a byte array of length strlen
		var argString = X86Regs.EDI;
		asmArrayAlloc(V3.stringType, argString, strlen);
		asm.movd_rm_r(argArray.indirect(), argString); // write into arg array

		// copy data into array
		asm.lea(X86Regs.EDI, argString.plus(mach.getArrayElemOffset(V3.stringType, 0)));
		asm.movd_r_rm(X86Regs.ESI, argp.indirect());
		asm.repne().movsb();

		// increment argp and argarray position
		asm.add.rm_i(argArray, 4);
		asm.add.rm_i(argp, 4);
		var offset = loopStart - (asm.pos() + 2);
		asm.jmp(offset); // loop back to start

		var offset2 = asm.pos() - cmpPatch - 1;
		asm.w.at(cmpPatch).putb(offset2); // patch the branch that skips the loop
		asm.w.atEnd();
		asm.pop(asm.loc_rm(frame, frame.conv.callerParam(1)));
	}
	def genRiInit(frame: MachFrame) {
		// generate a call to the RiRuntime.init() method
		var init_meth = mach.runtime.getRiInit();
		var addr = mach.addrOfMethod(init_meth);
		var frame = getFrame(init_meth.ssa), conv = frame.conv;
		// "this" = null
		asm.movd_rm_i(asm.loc_rm(frame, conv.calleeParam(0)), 0); // "this" = null
		var scratch = X86RegSet.SCRATCH;
		// param 1 = argc @ [esp]
		asm.movd_rm_rm(asm.loc_rm(frame, conv.calleeParam(1)), X86Regs.ESP.indirect(), scratch);
		var param2 = asm.loc_rm(frame, conv.calleeParam(2));
		if (test) {
			// if testing, param 2 = argv = NULL
			asm.movd_rm_i(param2, 0);
		} else {
			// otherwise param 2 = argv @ [esp + 4]
			var argp = X86Regs.ESP.plus(mach.data.addressSize);
			if (X86Reg.?(param2)) {
				asm.lea(X86Reg.!(param2), argp);
			} else {
				asm.lea(scratch, argp);
				asm.movd_rm_r(param2, scratch);
			}
		}
		// param 3 = envp @ [esp + 8] = null
		asm.movd_rm_i(asm.loc_rm(frame, conv.calleeParam(3)), 0);
		// call RiRuntime.init(argc: int, argv: Pointer, envp: Pointer) -> Array<string>
		asm.call_addr(addr);
		// ret -> dest
		if (!test) {
			var retReg = asm.loc_r(frame, conv.calleeRet(0));
			var dest = asm.loc_rm(frame, frame.conv.callerParam(1));
			asm.movd_rm_rm(dest, retReg, scratch);
		}
	}
	def asmArrayAlloc(arrayType: Type, dest: X86Reg, len: X86Reg) {
		var scale = mach.getArrayElemScale(arrayType), align = (scale % mach.data.addressSize) != 0;
		var adjust = if(align, mach.data.addressSize - 1, 0);
		asm.lea(dest, X86Addr.new(null, len, byte.!(scale), mach.getArrayElemOffset(arrayType, 0) + adjust));
		if (align) asm.and.rm_i(dest, -1 ^ adjust);
		asmAlloc(dest);
		asm.movd_rm_i(dest.indirect(), Int.unbox(mach.objectTag(arrayType)));
		asm.movd_rm_r(dest.plus(mach.getArrayLengthOffset(arrayType)), len);
	}
	def asmAlloc(reg: X86Reg) {
		// exchange-add with heap current pointer
		asm.xadd(X86Addrs.ABS_PATCH, reg);
		recordPatch(CiRuntimeModule.HEAP_CUR_LOC);
	}
	def recordPatch(addr: Addr) {
		MachDataWriter.!(asm.w).recordPatch(addr, asm.pos() - 4);
	}
	def getFrame(ssa: SsaGraph) -> MachFrame {
		var frame = MachFrame.new(X86VirgilCallConv.getForGraph(mach, ssa), mach.data.addrAlign, mach.refSize);
		frame.frameSize = mach.data.addressSize;
		return frame;
	}
	def patchCodeAddr(w: DataWriter, a: Addr, posAddr: int) {
		var abs = mach.absolute(a);
		if (CLOptions.PRINT_PATCH.val) {
			TerminalBuffer.new()
				.puts("patch-code @+")
				.putd(posAddr)
				.puts(" <- ")
				.putcv(a, null)
				.puts(" = ")
				.putx(abs)
				.outln();
		}
		if (w.data[w.pos] == 0x05) {
			// encode a RIP-relative address
			abs = abs - (posAddr + 4);
		}
		w.put_b32(abs);
	}
	def jumpRiGc(asm: X86MacroAssembler) {
		// callerParam(2) = ip
		var ipRm = asm.loc_rm(frame, frame.conv.calleeParam(2));
		asm.movd_rm_rm(ipRm, X86Regs.ESP.indirect(), X86RegSet.SCRATCH);
		// callerParam(3) = sp
		var spReg = asm.loc_r(frame, frame.conv.calleeParam(3));
		asm.lea(spReg, X86Addr.new(null, X86Regs.ESP, 1, mach.data.addressSize));
		asm.jmpx_addr(null, mach.addrOfMethod(ri_gc));
		// no need to return, this is a tail call
	}
	// Methods overridden for each OS target
	def genSigHandlerInstall(signo: int, handler: Addr);
	def asm_exit_code(code: int);
	def asm_exit_rm(loc: X86Rm);
	def genTestOutput(frame: MachFrame);
}
