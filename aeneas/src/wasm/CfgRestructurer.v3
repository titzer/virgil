// Copyright 2018 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

type CfgInstr {
	case Unreachable;
	case Block(t: Type, bi: SsaBlockInfo);
	case Loop(bi: SsaBlockInfo);
	case Body(bi: SsaBlockInfo);
	case If(split: SsaBlock, val: SsaInstr, t: Type, join: SsaBlockInfo);
	case Else;
	case End;
	case Br(bi: SsaBlockInfo, depth: int);
	case BrIf(split: SsaBlock, val: SsaInstr, bi: SsaBlockInfo, depth: int);
	case BrTable(split: SsaBlock, val: SsaInstr, depths: Array<int>);
	case Fallthrough(bi: SsaBlockInfo, vals: Array<SsaInstr>);
	case Ret(r: SsaReturn);
}
type CfgContext {
	case None;
	case Return(t: Type);
	case Val(t: Type);
	def getType() -> Type {
		match (this) {
			None => return null;
			Return(t) => return t;
			Val(t) => return t;
		}
	}
}

def XXX: Terminal;
def VERBOSE = false;
// Restructures a reducible control flow graph using the dominator tree.
class CfgRestructurer {
	def code = Vector<CfgInstr>.new();
	def stack = Vector<SsaBlockInfo>.new();
	var context: SsaContext;

	def gen(order: SsaBlockOrder) -> Vector<CfgInstr> {
		code.length = 0;
		stack.length = 0;
		order.computeDominators();
		if (VERBOSE) order.printDominators();
		hoistLoopRemaindersInDomTree(order.order[0].info);
		if (VERBOSE) order.printDominators();
		var rt = order.graph.returnType;
		var context = if(rt != Void.TYPE, CfgContext.Return(rt), CfgContext.None);
		visit(order.order[0].info, context);
		optimize();
		return code;
	}
	// The main (recursive) algorithm. For a given a block, determine if it is an
	// if, a switch, or a loop. In each case, (recursively) emit blocks dominated
	// by this block, including inside (the body in case of a loop, the conditions
	// in the case of an if or switch, as well as the block which is an exit point
	// of the construct.
	def visit(bi: SsaBlockInfo, context: CfgContext) {
		if (VERBOSE) {
			for (i < stack.length) {
				var bi = stack[i];
				if (bi != null) XXX.put1("#%d ", bi.block.uid);
				else XXX.put("null ");
			}
			XXX.put1("| #%d\n", bi.block.uid);
		}
		var loopRemainder: List<SsaBlockInfo>;
		var inner = context;
		if (bi.loop != null) {
			loopRemainder = findLoopRemainder(bi);
			emitJoinBlocks(loopRemainder);
			emit(CfgInstr.Loop(bi));
			inner = CfgContext.None;
		}
		var end = bi.block.end();

		match (end) {
			x: SsaReturn => visitReturn(bi, x, inner);
			x: SsaGoto => visitGoto(bi, x, inner);
			x: SsaIf => visitIf(bi, x, inner);
			x: SsaSwitch => visitSwitch(bi, x, inner);
			x: SsaThrow => visitThrow(bi, x, inner);
		}

		if (bi.loop != null) {
			emit(CfgInstr.End);
			// Non-terminating loops
			if (loopRemainder == null && context.getType() != null) emit(CfgInstr.Unreachable);
			else emitJoinEnds(loopRemainder, context);
		}
	}
	def visitReturn(bi: SsaBlockInfo, end: SsaReturn, context: CfgContext) {
		emitBody(bi);
		match (context) {
			Return(t) => emit(CfgInstr.Fallthrough(bi, Ssa.inputs(end)));
			_ => emit(CfgInstr.Ret(end));
		}
	}
	def visitIf(bi: SsaBlockInfo, end: SsaIf, context: CfgContext) {
		var tt = end.trueBlock().info, ft = end.falseBlock().info;
		if (!inlineGoto(bi, tt)) {
			emitBody(bi);
			emit(CfgInstr.BrIf(end.block(), end.input0(), tt, getRelDepth(tt)));
			inlineOrBranchTo(bi, ft, CfgContext.None);
			return;
		}
		var joins = findJoins(bi);
		if (joins == null) {
			emitBody(bi);
			emit(CfgInstr.If(end.block(), end.input0(), context.getType(), null));
			inlineOrBranchTo(bi, tt, context);
			emit(CfgInstr.Else);
			inlineOrBranchTo(bi, ft, context);
			emit(CfgInstr.End);
			return;
		}
		if (VERBOSE) {
			XXX.put("  joins ");
			for (j = joins; j != null; j = j.tail) {
				XXX.put1("#%d ", j.head.block.uid);
			}
			XXX.ln();
		}
		emitJoinBlocks(joins.tail);
		emitBody(bi);
		emit(CfgInstr.If(end.block(), end.input0(), null, joins.head));
		inlineOrBranchTo(bi, tt, CfgContext.None);
		emit(CfgInstr.Else);
		inlineOrBranchTo(bi, ft, CfgContext.None);
		emitJoinEnds(joins, context);
	}
	def visitGoto(bi: SsaBlockInfo, end: SsaGoto, context: CfgContext) {
		emitBody(bi);
		var target = end.succs[0].dest.info;
		if (inlineGoto(bi, target)) {
			visit(target, context);  // emit the block in place
		} else {
			emit(CfgInstr.Br(target, getRelDepth(target)));
		}
	}
	def visitSwitch(bi: SsaBlockInfo, end: SsaSwitch, context: CfgContext) {
		// Emit a series of nested blocks and a br_table
		var list: List<SsaBlockInfo>;
		for (ci = bi.dom_child; ci != null; ci = ci.dom_sibling) {
			if (!ci.loop_remainder) list = List.new(ci, list);
		}
		emitJoinBlocks(list);
		emitBody(bi);
		var succs = bi.block.succs();
		var depths = Array<int>.new(succs.length);
		for (i < depths.length) {
			depths[i] = getRelDepth(succs[i].dest.info);
		}
		emit(CfgInstr.BrTable(end.block(), end.input0(), depths));
		emitJoinEnds(list, context);
	}
	def visitThrow(bi: SsaBlockInfo, end: SsaThrow, context: CfgContext) {
		emitBody(bi);
	}
	def inlineGoto(from: SsaBlockInfo, target: SsaBlockInfo) -> bool {
		return target.dom_parent == from && !target.loop_remainder;
	}
	def inlineOrBranchTo(from: SsaBlockInfo, target: SsaBlockInfo, context: CfgContext) {
		if (inlineGoto(from, target) && target.block.preds.length == 1) {
			visit(target, context);
		} else {
			emit(CfgInstr.Br(target, getRelDepth(target)));
		}
	}
	def emit(i: CfgInstr) {
		if (VERBOSE) {
			match (i) {
				Loop(bi) => XXX.put1("  emit Loop(@%d)\n", bi.block.uid);
				Block(t, bi) => XXX.put1("  emit Block(@%d)\n", bi.block.uid);
				Body(bi) => XXX.put1("  emit Body(@%d)\n", bi.block.uid);
				If(split, val, t, join) => XXX.put2("  emit If(split=@%d, join=@%d)\n", split.uid, if(join != null, join.block.uid, -1));
				End => XXX.put1("  emit %s\n", i.name);
				_ => XXX.put1("  emit %s\n", i.name);
			}
		}
		match (i) {
			Loop(bi) => stack.put(bi);
			Block(t, bi) => stack.put(bi);
			If(split, val, t, join) => stack.put(join);
			End => stack.length--;
			_ => ;
		}
		code.put(i);
	}
	def emitBody(bi: SsaBlockInfo) {
		var block = bi.block;
		if (false && block.empty()) { // XXX: eliminate dead blocks in post-pass?
			var succs = block.succs();
			if (succs.length == 1 && !succs[0].dest.hasPhis()) return;
		}
		emit(CfgInstr.Body(bi));
	}
	def emitJoinBlocks(list: List<SsaBlockInfo>) {
		for (j = Lists.reverse(list); j != null; j = j.tail) {
			emit(CfgInstr.Block(null, j.head));
		}
	}
	def emitJoinEnds(list: List<SsaBlockInfo>, context: CfgContext) {
		while (list != null) {
			emit(CfgInstr.End);
			var next = list.tail;
			visit(list.head, if(next == null, context, CfgContext.None));
			list = next;
		}
	}
	def getRelDepth(bi: SsaBlockInfo) -> int {
		for (depth = 0; depth < stack.length; depth++) {
			if (stack[stack.length - depth - 1] == bi) return depth;
		}
		context.fail1("block @%d not found on stack", bi.block.uid);
		return 0;
	}
	// Joins of {bi} are blocks that represent merges in control flow between
	// multiple successors of {bi}. They are easy to find because they are immediately
	// dominated by {bi} but have more than one predecessor.
	// Note that joins are returned in reverse topological order (a guarantee made by
	// the dominator tree construction algorithm); i.e. the first join in the
	// list is the last in the special RPO order and represents the last join.
	def findJoins(bi: SsaBlockInfo) -> List<SsaBlockInfo> {
		var list: List<SsaBlockInfo>;
		for (c = bi.dom_child; c != null; c = c.dom_sibling) {
			if (c.loop_remainder) continue;
			if (c.block.preds.length > 1) list = List.new(c, list);
		}
		return list;
	}
	def findLoopRemainder(bi: SsaBlockInfo) -> List<SsaBlockInfo> {
		var list: List<SsaBlockInfo>;
		for (c = bi.dom_child; c != null; c = c.dom_sibling) {
			if (c.loop_remainder) list = List.new(c, list);
		}
		return list;
	}

	// Adjust the dominator tree so that loop bodies no longer dominate any loop
	// exit blocks, but instead the loop header dominates them. Such blocks are
	// called the "loop remainder".
	def loopStack = Vector<SsaLoopInfo>.new();
	def loopRemainder = Vector<List<SsaBlockInfo>>.new();
	def hoistLoopRemaindersInDomTree(bi: SsaBlockInfo) {
		if (bi.loop != null) {  // encountered a new loop
			loopStack.put(bi.loop);
			loopRemainder.put(null);
		}
		var top = loopStack.length - 1;
		for (ci = bi.dom_child; ci != null; ci = ci.dom_sibling) {
			// Recurse on immediately dominated children.
			if (top < 0 || loopStack[top].containsInfo(ci) || isEndBlock(ci)) {
				// If not in a loop, or the child is in the loop, or the block
				// is a trivial end block, simply recurse.
				hoistLoopRemaindersInDomTree(ci);
				continue;
			}
			// Find the outermost loop of which the child is not a member
			// and add this child to that loop's remainder.
			for (i = top; i >= 0; i--) {
				if (!loopStack[i].containsInfo(ci)) {
					loopRemainder[i] = List.new(ci, loopRemainder[i]);
					break;
				}
			}
		}
		if (bi.loop != null) {
			// Pop a loop off the loop stack and process the loop remainder.
			loopStack.length--;
			var remainder = loopRemainder[--loopRemainder.length];
			// Hoist the remainder nodes to be children of the loop header.
			for (l = remainder; l != null; l = l.tail) {
				moveToDomList(bi, l.head);
			}
			// Loop remainder nodes may still dominate other nodes that are
			// in the loop remainder of outer loops.
			for (l = remainder; l != null; l = l.tail) {
				hoistLoopRemaindersInDomTree(l.head);
			}
		}
	}
	def moveToDomList(bi: SsaBlockInfo, ci: SsaBlockInfo) {
		if (VERBOSE) {
			XXX.put2("move @%d to loop remainder of @%d\n", ci.block.uid, bi.block.uid);
		}
		// Remove {ci} from current parent->child->sibling->sibling... chain
		var prev: SsaBlockInfo;
		for (pl = ci.dom_parent.dom_child; pl != null; (prev = pl, pl = pl.dom_sibling)) {
			if (ci == pl) {
				if (prev != null) prev.dom_sibling = ci.dom_sibling;
				else ci.dom_parent.dom_child = ci.dom_sibling;
				break;
			}
		}
		// Insert {ci} as a child of {bi}.
		ci.dom_sibling = bi.dom_child;
		bi.dom_child = ci;
		ci.loop_remainder = true;
	}
	def isEndBlock(bi: SsaBlockInfo) -> bool {
		return bi.block.preds.length == 1 && bi.block.succs().length == 0;
	}
	// Simple optimizer removes redundant constructs.
	def optimize() {
		var i = 0;
		for (p < code.length) {
			var c = code[p];
			code[i++] = c;
			if (c == CfgInstr.End) i = optimizeEnd(i);
			else if (c == CfgInstr.Else) i = optimizeElse(i);
		}
		code.length = i;
	}
	def optimizeEnd(i: int) -> int {
		match (code[i - 2]) {
			If,			// if end =>
			Loop,			// loop end =>
			Block => return i - 2;	// block end =>
			Else => return optimizeEnd(removeSecondToLast(i));	// else end => end
			Br(bi, depth) => {
// TODO				if (redundantBranch(bi, depth)) return optimizeEnd(removeSecondToLast(i));
			}
			_ => ;
		}
		return i;
	}
	def optimizeElse(i: int) -> int {
		match (code[i - 2]) {
			Br(bi, depth) => {
				if (redundantBranch(bi, depth)) return optimizeElse(removeSecondToLast(i));
			}
			_ => ;
		}
		return i;
	}
	def redundantBranch(bi: SsaBlockInfo, depth: int) -> bool {
		return (depth == 0 && bi.loop == null);
	}
	def removeSecondToLast(i: int) -> int {
		code[i - 2] = code[i - 1];
		return i - 1;
	}
	def verify(order: SsaBlockOrder) {
		// Verify block references are still topologically sorted
		var pos = Array<int>.new(order.order.length);
		for (i < pos.length) pos[i] = int.max;
		for (i < code.length) {
			var c = code[i];
			if (!CfgInstr.Body.?(c)) continue;
			var block = CfgInstr.Body.!(c).bi.block;
			if (pos[block.info.srpo_num] < int.max) {
				Terminal.put1("duplicate block @%d", block.uid);
				return V3.fail("");
			}
			pos[block.info.srpo_num] = i;
			for (s in block.succs()) {
				if (s.dest.info.srpo_num <= block.info.srpo_num) continue;  // backedge
				if (pos[s.dest.info.srpo_num] < i) {
					Terminal.put2("not topologicaly sorted: @%d -> @%d", block.uid, s.dest.uid);
					return V3.fail("");
				}
			}
		}
	}
	// Renders an instruction into a buffer and returns the control stack delta.
	def render(buf: StringBuilder, c: CfgInstr) -> int {
		match (c) {
			Unreachable => {
				buf.puts("unreachable");
				return 0;
			}
			Ret(r) => {
				buf.put1("ret[@%d]", r.uid);
				return 0;
			}
			Fallthrough(bi, vals) => {
				buf.put1("fallthrough[#%d][", bi.block.uid);
				for (i < vals.length) {
					if (i > 0) buf.csp();
					buf.put1("@%d", vals[i].uid);
				}
				buf.puts("]");
				return 0;
			}
			Block(t, bi) => {
				if (t == null || VoidType.?(t)) buf.put1("block[#%d]", bi.block.uid);
				else buf.put2("block[#%d]: %q", bi.block.uid, t.render);
				return 1;
			}
			Loop(bi) => {
				buf.put1("loop[head=#%d]: void", bi.block.uid);
				return 1;
			}
			Body(bi) => {
				buf.put1("body[#%d]", bi.block.uid);
			}
			If(split, val, t, join) => {
				var jid = if(join != null, join.block.uid, -1);
				if (t == null || VoidType.?(t)) buf.put2("if(cond=@%d)[join=#%d]", val.uid, jid);
				else buf.put3("if(cond=@%d)[join=#%d]: %q", val.uid, jid, t.render);
				return 1;
			}
			Else => {
				buf.puts("else");
			}
			End => {
				buf.puts("end");
				return -1;
			}
			Br(bi, reldepth) => {
				buf.put2("br[target=#%d] depth-%d", bi.block.uid, reldepth);
			}
			BrIf(split, val, bi, reldepth) => {
				buf.put3("br_if(cond=@%d)[target=#%d] depth-%d", val.uid, bi.block.uid, reldepth);
			}
			BrTable(split, val, reldepths) => {
				buf.put1("br_table(cond=@%d) ", val.uid);
				for (i < reldepths.length) {
					if (i > 0) buf.putc(',');
					buf.putc('-');
					buf.putd(reldepths[i]);
				}
			}
		}
		return 0;
	}
	def print(out: ArchInstrBuffer, context: SsaContext, regSet: MachRegSet, code: Vector<CfgInstr>) {
		out.puts("Wasm CFG instructions for: ");
		var render: StringBuilder -> StringBuilder;
		if (context.spec != null) render = context.spec.render;
		else if (context.method != null) render = context.method.renderLong;
		else render = StringBuilder.!;
		render(out);
		out.outln();

		var depth = 0;
		for (i < code.length) {
			var c = code[i];
			out.putIndent(depth);
			depth += this.render(out, c);
			out.outln();
		}
	}
}
