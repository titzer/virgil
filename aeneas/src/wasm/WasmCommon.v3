// Copyright 2016-2025 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Definitions used by both the Wasm and WasmGc back-ends

component WasmCommon {
	def WASM_MAGIC = 0x6d736100;
	def WASM_VERSION = 0x1;

	// See WasmSectionBuffer, below
	def patchSize(w: MachDataWriter, offset: int, size: int) {
		w.at(offset).overwrite_uleb32(size).atEnd();
	}

	def MINIMUM_DATA_START_ADDR = 8u32;
	def MAXIMUM_DATA_START_ADDR = 0x8000_0000u32;

	def SPACE = AddressSpace.new("mem", false, 32, 4, Alignment.new(65536), Alignment.new(4));
}
// Constants for the binary encoding of sections
enum WasmSection(code: byte) {
	UNKNOWN(0),	// code for unknown sections
	TYPE(1),	// Function signature declarations
	IMPORT(2),	// Import declarations
	FUNCTION(3),	// Function declarations
	TABLE(4),	// Indirect function table and other tables
	MEMORY(5),	// Memory attributes
	GLOBAL(6),	// Global declarations
	EXPORT(7),	// Exports
	START(8),	// Start function declaration
	ELEMENT(9),	// Elements section
	CODE(10),	// Function code
	DATA(11),	// Data segments
	NAME(12)	// Name section (encoded as a string)
}

// Constants for the binary encodings of import/export kinds
component WasmExternal {
	def FUNCTION: byte = 0;
	def TABLE: byte = 1;
	def MEMORY: byte = 2;
	def GLOBAL: byte = 3;
}
// A helper to emit properly-sized sections
class WasmSectionBuffer extends MachDataWriter {
	var sizepos = -1;
	var start = -1;
	new(pageAlign: Alignment, initialSize: int) super(pageAlign, 0, initialSize) {
	}
	def startSection(code: byte) {
		if (sizepos >= 0) return V3.fail("unterminated section");
		atEnd();
		putb(code);
		sizepos = skip_leb32();
		start = pos;
	}
	def endSection() {
		atEnd();
		if (sizepos < 0) return V3.fail("unstarted section");
		WasmCommon.patchSize(this, sizepos, pos - start);
		sizepos = -1;
		start = -1;
	}
	def str(str: string) -> this {
		// TODO: properly utf-8 encode Wasm strings (import/export,debug)
		put_sleb32(str.length);
		puta(str);
	}
	def importName(s: string) -> this {
		if (s.length > 0 && s[0] == '\"') s = Strings.parseLiteral(s, 0).1; // XXX: reparsing literal
		str(s);
	}
}

/*
// This helper emits properly-sized items, possibly with counts, while keeping
// the leb constants short.  It does this by using multiple *fragments*, each
// its own DataWriter, in order.  The current fragment is just the superclass
// DataWriter, and is implicitly the last fragment (so far).  The previous
// ones are stored in a Vector, and can be obtained by index (negative indices
// indicating how far back from the present) so that data can be added to
// previous fragments.  Some new xxxAll functions operate across all the
// fragments, while the superclass functions operate on the current fragment.
class WasmBuffer extends DataWriter {
	var count = 0;
	private var fragments = Vector<DataWriter>.new();
	private var countStack = ArrayStack<int>.new();	// for counted items
	private var sizedStack = ArrayStack<DataWriter>.new();
	private var countedStack = ArrayStack<DataWriter>.new();
	private var inSection: bool;
	// new(pageAlign: Alignment, initialSize: int) super(pageAlign, 0, initialSize) { } // EBM fix

	// starts a new fragment, saving the current one in the fragments Vector
	def newFragment() {
		var curr = DataWriter.new().resetr(data, pos, end());
		fragments.put(curr);
		reset(null, 0, 0);
	}
	def getFragment(which: int) -> DataWriter {
		if (which < 0) which = fragments.length + which;
		if (which < 0 || which >= fragments.length) return null;
		return fragments[which];
	}
	def startSizedItem() {
		newFragment();
		sizedStack.push(getFragment(-1));
	}
	def endSizedItem() {
		var outer = sizedStack.pop();
		var amount = end();
		for (i = fragments.length - 1; i >= 0; --i) {
			var frag = getFragment(i);
			if (frag == outer) break;
			amount += frag.end();
		}
		outer.put_sleb32(amount);
	}
	def startCountedItem() {
		newFragment();
		countedStack.push(getFragment(-1));
		countStack.push(count);
		count = 0;
	}
	def endCountedItem() {
		var outer = countedStack.pop();
		outer.put_sleb32(count);
		count = countStack.pop();
	}
	def incrCount() {
		++count;
	}
	def startSection(code: byte, counted: bool) {
		if (inSection) return V3.fail("unterminated section");
		inSection = true;
		putb(code);
		if (counted) startSizedItem();
		startCountedItem();
	}
	def endSection(counted: bool) {
		if (!inSection) return V3.fail("unstarted section");
		inSection = false;
		if (counted) endCountedItem();
		endSizedItem();
	}
	def str(str: string) -> this {
		// TODO: properly utf-8 encode Wasm strings (import/export,debug)
		put_sleb32(str.length);
		puta(str);
	}
	def importName(s: string) -> this {
		if (s.length > 0 && s[0] == '\"') s = Strings.parseLiteral(s, 0).1; // XXX: reparsing literal
		str(s);
	}
	// DataWriter functions use positions within the current fragment.
	// The functions below operate on the whole collction of fragments.

	// Copy this data into a new, appropriately-sized array.
	def copyAll() -> Array<byte> {
		var amount = end();
		for (i < fragments.length) amount += fragments[i].end();
		var result = Array<byte>.new(amount);
		var pos = 0;
		for (i < fragments.length) {
			var src = fragments[i];
			for (j < src.end()) result[pos++] = src.data[j];
		}
		return result;
	}
	// Extract all data from this writer, leaving it empty.
	def extractAll() -> Array<byte> {
		var result = copyAll();
		fragments.clear();
		while (!sizedStack.empty()) sizedStack.pop();
		while (!countStack.empty()) countStack.pop();
		while (!countedStack.empty()) countedStack.pop();
		count = 0;
		inSection = false;
		reset(null, 0, 0);
		return result;
	}
	// Send the data of this writer to the given function, avoiding an intermediate copy.
	// Note that it is implementation dependent if {f} is called multiple times, e.g. if
	// the internal storage is fragmented.
	def sendAll<R>(f: Range<byte> -> R) -> R {
		for (i < fragments.length) {
			var frag = fragments[i];
			var r = frag.alias();
			if (r.length > 0) f(r);
		}
		var r = alias();
		return if(r.length > 0, f(r));
	}
	// Render the data into the given {buf}.
	def renderAll(baseAddr: int, startPos: int, size: int, buf: StringBuilder) {
		var line = 16;
		var bufPos = 0;		// conceptual position in concatenated data
		var fragNum = 0;	// current fragment
		var fragPos = 0;	// position within that fragment
		var frag = if(fragments.length > 0, fragments[fragNum], this);
		while (bufPos < startPos) {
			var diff = startPos - bufPos;
			var amt = frag.end();
			if (diff < amt) {
				fragPos = diff;
				bufPos = startPos;
				break;
			}
			bufPos += amt;
			if (fragNum >= fragments.length) return;
			frag = if(++fragNum < fragments.length, fragments[fragNum], this);
		}
		for (i = 0; i < size; i = i + line) {
			buf.puts("  ").putx(baseAddr + i);
			buf.puts(": ");
			var remaining = line;
			var limit = frag.end();
			while (--remaining >= 0) {
				buf.putx_8(frag.data[fragPos++]);
				buf.sp();
				if (fragPos > limit) {
					if (fragNum >= fragments.length) break;
					frag = if(++fragNum < fragments.length, fragments[fragNum], this);
					fragPos = 0;
					limit = frag.end();
				}
			}
			buf.ln();
		}
	}
}
*/
