// Copyright 2016-2025 Virgil authors.  All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Constants for (1-byte) wasm opcodes.
enum WasmOp(opcode: byte, text_name: string) {
	UNREACHABLE(0x00, "unreachable"),
	NOP(0x01, "nop"),
	BLOCK(0x02, "block"),
	LOOP(0x03, "loop"),
	IF(0x04, "if"),
	ELSE(0x05, "else"),
	END(0x0b, "end"),
	BR(0x0c, "br"),
	BR_IF(0x0d, "br_if"),
	BR_TABLE(0x0e, "br_table"),
	RETURN(0x0f, "return"),
	CALL(0x10, "call"),
	CALL_INDIRECT(0x11, "call_indirect"),
	DROP(0x1a, "drop"),
	SELECT(0x1b, "select"),
	GET_LOCAL(0x20, "local.get"),
	SET_LOCAL(0x21, "local.set"),
	TEE_LOCAL(0x22, "local.tee"),
	GET_GLOBAL(0x23, "global.get"),
	SET_GLOBAL(0x24, "global.set"),
	TABLE_GET(0x25, "table.get"),
	I32_LOAD(0x28, "i32.load"),
	I64_LOAD(0x29, "i64.load"),
	F32_LOAD(0x2a, "f32.load"),
	F64_LOAD(0x2b, "f64.load"),
	I32_LOAD8_S(0x2c, "i32.load8_s"),
	I32_LOAD8_U(0x2d, "i32.load8_u"),
	I32_LOAD16_S(0x2e, "i32.load16_s"),
	I32_LOAD16_U(0x2f, "i32.load16_u"),
	I64_LOAD8_S(0x30, "i64.load8_s"),
	I64_LOAD8_U(0x31, "i64.load8_u"),
	I64_LOAD16_S(0x32, "i64.load16_s"),
	I64_LOAD16_U(0x33, "i64.load16_u"),
	I64_LOAD32_S(0x34, "i64.load32_s"),
	I64_LOAD32_U(0x35, "i64.load32_u"),
	I32_STORE(0x36, "i32.store"),
	I64_STORE(0x37, "i64.store"),
	F32_STORE(0x38, "f32.store"),
	F64_STORE(0x39, "f64.store"),
	I32_STORE8(0x3a, "i32.store8"),
	I32_STORE16(0x3b, "i32.store16"),
	I64_STORE8(0x3c, "i64.store8"),
	I64_STORE16(0x3d, "i64.store16"),
	I64_STORE32(0x3e, "i64.store32"),
	CURRENT_MEMORY(0x3f, "current_memory"),
	GROW_MEMORY(0x40, "grow_memory"),
	I32_CONST(0x41, "i32.const"),
	I64_CONST(0x42, "i64.const"),
	F32_CONST(0x43, "f32.const"),
	F64_CONST(0x44, "f64.const"),
	I32_EQZ(0x45, "i32.eqz"),
	I32_EQ(0x46, "i32.eq"),
	I32_NE(0x47, "i32.ne"),
	I32_LT_S(0x48, "i32.lt_s"),
	I32_LT_U(0x49, "i32.lt_u"),
	I32_GT_S(0x4a, "i32.gt_s"),
	I32_GT_U(0x4b, "i32.gt_u"),
	I32_LE_S(0x4c, "i32.le_s"),
	I32_LE_U(0x4d, "i32.le_u"),
	I32_GE_S(0x4e, "i32.ge_s"),
	I32_GE_U(0x4f, "i32.ge_u"),
	I64_EQZ(0x50, "i64.eqz"),
	I64_EQ(0x51, "i64.eq"),
	I64_NE(0x52, "i64.ne"),
	I64_LT_S(0x53, "i64.lt_s"),
	I64_LT_U(0x54, "i64.lt_u"),
	I64_GT_S(0x55, "i64.gt_s"),
	I64_GT_U(0x56, "i64.gt_u"),
	I64_LE_S(0x57, "i64.le_s"),
	I64_LE_U(0x58, "i64.le_u"),
	I64_GE_S(0x59, "i64.ge_s"),
	I64_GE_U(0x5a, "i64.ge_u"),
	F32_EQ(0x5b, "f32.eq"),
	F32_NE(0x5c, "f32.ne"),
	F32_LT(0x5d, "f32.lt"),
	F32_GT(0x5e, "f32.gt"),
	F32_LE(0x5f, "f32.le"),
	F32_GE(0x60, "f32.ge"),
	F64_EQ(0x61, "f64.eq"),
	F64_NE(0x62, "f64.ne"),
	F64_LT(0x63, "f64.lt"),
	F64_GT(0x64, "f64.gt"),
	F64_LE(0x65, "f64.le"),
	F64_GE(0x66, "f64.ge"),
	I32_CLZ(0x67, "i32.clz"),
	I32_CTZ(0x68, "i32.ctz"),
	I32_POPCNT(0x69, "i32.popcnt"),
	I32_ADD(0x6a, "i32.add"),
	I32_SUB(0x6b, "i32.sub"),
	I32_MUL(0x6c, "i32.mul"),
	I32_DIV_S(0x6d, "i32.div_s"),
	I32_DIV_U(0x6e, "i32.div_u"),
	I32_REM_S(0x6f, "i32.rem_s"),
	I32_REM_U(0x70, "i32.rem_u"),
	I32_AND(0x71, "i32.and"),
	I32_OR(0x72, "i32.or"),
	I32_XOR(0x73, "i32.xor"),
	I32_SHL(0x74, "i32.shl"),
	I32_SHR_S(0x75, "i32.shr_s"),
	I32_SHR_U(0x76, "i32.shr_u"),
	I32_ROTL(0x77, "i32.rotl"),
	I32_ROTR(0x78, "i32.rotr"),
	I64_CLZ(0x79, "i64.clz"),
	I64_CTZ(0x7a, "i64.ctz"),
	I64_POPCNT(0x7b, "i64.popcnt"),
	I64_ADD(0x7c, "i64.add"),
	I64_SUB(0x7d, "i64.sub"),
	I64_MUL(0x7e, "i64.mul"),
	I64_DIV_S(0x7f, "i64.div_s"),
	I64_DIV_U(0x80, "i64.div_u"),
	I64_REM_S(0x81, "i64.rem_s"),
	I64_REM_U(0x82, "i64.rem_u"),
	I64_AND(0x83, "i64.and"),
	I64_OR(0x84, "i64.or"),
	I64_XOR(0x85, "i64.xor"),
	I64_SHL(0x86, "i64.shl"),
	I64_SHR_S(0x87, "i64.shr_s"),
	I64_SHR_U(0x88, "i64.shr_u"),
	I64_ROTL(0x89, "i64.rotl"),
	I64_ROTR(0x8a, "i64.rotr"),
	F32_ABS(0x8b, "f32.abs"),
	F32_NEG(0x8c, "f32.neg"),
	F32_CEIL(0x8d, "f32.ceil"),
	F32_FLOOR(0x8e, "f32.floor"),
	F32_TRUNC(0x8f, "f32.trunc"),
	F32_NEAREST(0x90, "f32.nearest"),
	F32_SQRT(0x91, "f32.sqrt"),
	F32_ADD(0x92, "f32.add"),
	F32_SUB(0x93, "f32.sub"),
	F32_MUL(0x94, "f32.mul"),
	F32_DIV(0x95, "f32.div"),
	F32_MIN(0x96, "f32.min"),
	F32_MAX(0x97, "f32.max"),
	F32_COPYSIGN(0x98, "f32.copysign"),
	F64_ABS(0x99, "f64.abs"),
	F64_NEG(0x9a, "f64.neg"),
	F64_CEIL(0x9b, "f64.ceil"),
	F64_FLOOR(0x9c, "f64.floor"),
	F64_TRUNC(0x9d, "f64.trunc"),
	F64_NEAREST(0x9e, "f64.nearest"),
	F64_SQRT(0x9f, "f64.sqrt"),
	F64_ADD(0xa0, "f64.add"),
	F64_SUB(0xa1, "f64.sub"),
	F64_MUL(0xa2, "f64.mul"),
	F64_DIV(0xa3, "f64.div"),
	F64_MIN(0xa4, "f64.min"),
	F64_MAX(0xa5, "f64.max"),
	F64_COPYSIGN(0xa6, "f64.copysign"),
	I32_WRAP_I64(0xa7, "i32.wrap_i64"),
	I32_TRUNC_S_F32(0xa8, "i32.trunc_s_f32"),
	I32_TRUNC_U_F32(0xa9, "i32.trunc_u_f32"),
	I32_TRUNC_S_F64(0xaa, "i32.trunc_s_f64"),
	I32_TRUNC_U_F64(0xab, "i32.trunc_u_f64"),
	I64_EXTEND_S_I32(0xac, "i64.extend_s_i32"),
	I64_EXTEND_U_I32(0xad, "i64.extend_u_i32"),
	I64_TRUNC_S_F32(0xae, "i64.trunc_s_f32"),
	I64_TRUNC_U_F32(0xaf, "i64.trunc_u_f32"),
	I64_TRUNC_S_F64(0xb0, "i64.trunc_s_f64"),
	I64_TRUNC_U_F64(0xb1, "i64.trunc_u_f64"),
	F32_CONVERT_S_I32(0xb2, "f32.convert_s_i32"),
	F32_CONVERT_U_I32(0xb3, "f32.convert_u_i32"),
	F32_CONVERT_S_I64(0xb4, "f32.convert_s_i64"),
	F32_CONVERT_U_I64(0xb5, "f32.convert_u_i64"),
	F32_DEMOTE_F64(0xb6, "f32.demote_f64"),
	F64_CONVERT_S_I32(0xb7, "f64.convert_s_i32"),
	F64_CONVERT_U_I32(0xb8, "f64.convert_u_i32"),
	F64_CONVERT_S_I64(0xb9, "f64.convert_s_i64"),
	F64_CONVERT_U_I64(0xba, "f64.convert_u_i64"),
	F64_PROMOTE_F32(0xbb, "f64.promote_f32"),
	I32_REINTERPRET_F32(0xbc, "i32.reinterpret_f32"),
	I64_REINTERPRET_F64(0xbd, "i64.reinterpret_f64"),
	F32_REINTERPRET_I32(0xbe, "f32.reinterpret_i32"),
	F64_REINTERPRET_I64(0xbf, "f64.reinterpret_i64"),
	REF_NULL(0xd0, "ref.null"),
	REF_IS_NULL(0xd1, "ref.is_null"),
	REF_FUNC(0xd2, "ref.func"),
	REF_EQ(0xd3, "ref.eq"),
}
// Constants for (2-byte) wasm opcodes.
enum WasmExtOp(extopcode: u16, text_name: string) {
	STRUCT_NEW(0xFB00, "struct.new"),
	STRUCT_NEW_DEFAULT(0xFB01, "struct.new_default"),
	STRUCT_GET(0xFB02, "struct.get"),
	STRUCT_GET_S(0xFB03, "struct.get_s"),
	STRUCT_GET_U(0xFB04, "struct.get_u"),
	STRUCT_SET(0xFB05, "struct.set"),
	ARRAY_NEW_FIXED(0xFB08, "array.new_fixed"),
	ARRAY_NEW_DEFAULT(0xFB07, "array.new_default"),
	ARRAY_GET(0xFB0B, "array.get"),
	ARRAY_GET_S(0xFB0C, "array.get_s"),
	ARRAY_GET_U(0xFB0D, "array.get_u"),
	ARRAY_SET(0xFB0E, "array.set"),
	ARRAY_LEN(0xFB0F, "array.len"),
	REF_TEST(0xFB14, "ref.test"),
	REF_TEST_NULL(0xFB15, "ref.test_null"),
	REF_CAST(0xFB16, "ref.cast"),
	REF_CAST_NULL(0xFB17, "ref.cast_null"),
	I32_TRUNC_SAT_F32_S(0xFC00, "i32.trunc_sat_f32_s"),
	I32_TRUNC_SAT_F32_U(0xFC01, "i32.trunc_sat_f32_u"),
	I32_TRUNC_SAT_F64_S(0xFC02, "i32.trunc_sat_f64_s"),
	I32_TRUNC_SAT_F64_U(0xFC03, "i32.trunc_sat_f64_u"),
	I64_TRUNC_SAT_F32_S(0xFC04, "i64.trunc_sat_f32_s"),
	I64_TRUNC_SAT_F32_U(0xFC05, "i64.trunc_sat_f32_u"),
	I64_TRUNC_SAT_F64_S(0xFC06, "i64.trunc_sat_f64_s"),
	I64_TRUNC_SAT_F64_U(0xFC07, "i64.trunc_sat_f64_u"),
}
// Contains an index from opcode number to name.
component WasmOpNames {
	def array = Array<string>.new(256);
	def extarrays = Array<Array<string>>.new(16);
	new() {
		extarrays[0xB] = Array<string>.new(256);
		extarrays[0xC] = Array<string>.new(256);
                for (op in WasmOp) array[op.opcode] = op.text_name;
                for (op in WasmExtOp) extarrays[(op.extopcode & 0x0F00) >> 8][op.extopcode & 0xFF] = op.text_name;
	}
	def getName(opcode: int) -> string {
		return if(opcode > 255, extarrays[(opcode & 0x0F00) >> 8][opcode & 0xFF], array[opcode]);
	}
}
