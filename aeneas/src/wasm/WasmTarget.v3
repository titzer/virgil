// Copyright 2016 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// TODO(wasm): codegen system ops
// TODO(wasm): stacktrace reconstruction
// XXX(wasm): improve cfg optimizer
// XXX(wasm): default init of locals

// Install targets into registry for the compiler
component WasmComponent {
	new() {
		Aeneas.registerTarget(WasmTarget.new("wasm-js-test", true, false));
		Aeneas.registerTarget(WasmTarget.new("wasm-spec-test", true, false));
		Aeneas.registerTarget(WasmTarget.new("wasm", false, false));
		Aeneas.registerTarget(WasmTarget.new("wave", false, true)); // TODO: remove this target
	}
}
def WASM_PAGE_SIZE = 65536;
def WASM_MAGIC = 0x6d736100;
def WASM_VERSION = 0x1;
def XXX: Terminal;

// Constants for the binary encoding of sections
component WasmSection {
	def UNKNOWN: byte = 0;	 // code for unknown sections
	def TYPE: byte = 1;	 // Function signature declarations
	def IMPORT: byte = 2;	 // Import declarations
	def FUNCTION: byte = 3;	 // Function declarations
	def TABLE: byte = 4;	 // Indirect function table and other tables
	def MEMORY: byte = 5;	 // Memory attributes
	def GLOBAL: byte = 6;	 // Global declarations
	def EXPORT: byte = 7;	 // Exports
	def START: byte = 8;	 // Start function declaration
	def ELEMENT: byte = 9;	 // Elements section
	def CODE: byte = 10;	 // Function code
	def DATA: byte = 11;	 // Data segments
	def NAME: byte = 12;	 // Name section (encoded as a string)
}
// Constants for the binary encodings of import/export kinds
component WasmExternal {
	def FUNCTION: byte = 0;
	def TABLE: byte = 1;
	def MEMORY: byte = 2;
	def GLOBAL: byte = 3;
}
// A helper to emit properly-sized sections
class WasmSectionBuffer extends MachDataWriter {
	var sizepos = -1;
	var start = -1;
	new(pageAlign: Alignment, initialSize: int) super(pageAlign, 0, initialSize) {
	}
	def startSection(code: byte) {
		if (sizepos >= 0) return V3.fail("unterminated section");
		atEnd();
		putb(code);
		sizepos = skip_leb32();
		start = pos;
	}
	def endSection() {
		atEnd();
		if (sizepos < 0) return V3.fail("unstarted section");
		patchSize(this, sizepos, pos - start);
		sizepos = -1;
		start = -1;
	}
	def str(str: string) -> this {
		// TODO: properly utf-8 encode Wasm strings (import/export,debug)
		put_sleb32(str.length);
		puta(str);
	}
	def importName(s: string) -> this {
		if (s.length > 0 && s[0] == '\"') s = Strings.parseLiteral(s, 0).1; // XXX: reparsing literal
		str(s);
	}
}
def patchSize(w: MachDataWriter, offset: int, size: int) {
	w.at(offset).overwrite_uleb32(size).atEnd();
}
def SPACE = AddressSpace.new("mem", false, 32, 4, Alignment.new(65536), Alignment.new(4));
// Common code for all WASM targets
class WasmTarget extends Target {
	def test: bool;
        def script: bool;

	new(name: string, test, script) super(name) {
		typedMain = !test;
	}

	def configureCompiler(compiler: Compiler) {
		compiler.Reachability = true;
		compiler.NormConfig.setSignatureLimits(10000, if(CLOptions.WASM_MULTI_VALUE.val, 1000, 1));
		compiler.NormConfig.GetScalar = getScalar;
	}
	private def getScalar(compiler: Compiler, prog: Program, t: Type) -> Scalar.set {
		var none: Scalar.set;
		match (t) {
			x: BoolType => return Scalar.B32 | Scalar.B64;
			x: IntType => return if(x.width <= 32, Scalar.B32 | Scalar.B64, Scalar.B64); // XXX: Scalar.R64, once packed refs
			x: FloatType => return if(x.is64, Scalar.F64 | Scalar.B64, Scalar.F32 | Scalar.B32);
			_ => return Scalar.R64;
		}
	}
	def configureProgram(prog: Program) {
		def intNorm = IntNormalizers.I64LE;
		var mach = MachProgram.new(prog, SPACE, SPACE, intNorm);
		prog.tprog = mach;
		MachModule.install(prog, mach);
		mach.runtime = MachRuntime.new(mach);
		var cirt = CiRuntime_TypeCon.new(MachModule.PTR_32.create0(), prog.typeCache);
		prog.typeEnv.add(cirt);
	}
	def emit(compiler: Compiler, prog: Program) {
		var context = SsaContext.new(compiler, prog);
		var rt = getRuntime(prog);
		var e: ExecuteTestCase;
		prog.ir.classes.apply(processIrClass);
		if (test) {
			e = SpecParser.parseFile(prog.ERROR, prog.files[0], prog.inputs[0]);
			rt.heapSize = e.heapSize;
		}
		var w = emitWasmModule(context, rt);
		if (test) emitTestWrappers(context, rt, w, e);
		if (CLOptions.WASM_RUN_COMMAND.val != null) emitEngineScript(CLOptions.WASM_RUN_COMMAND.val, compiler, prog);
		else if (script) emitEngineScript("wizeng", compiler, prog);
	}
	def processIrClass(ic: IrClass) {
	}
	def emitWasmModule(context: SsaContext, rt: MachRuntime) -> DataWriter {
		def prog = context.prog;
		// Lower to machine level from V3 level
		def config = MachLoweringConfig.new();
		config.ImplicitNullChecks = false;
		config.ExplicitDivChecks = true;
		config.Int32Arith = true;
		config.Int64Arith = true;
		config.IntCastFTraps = true;
		config.ObjectSystem = CLOptions.WASM_GC.val;
		config.NativeCmpSwp = false;

		rt.mach.build(context.compiler, config);

		def initialSize = 300;
		def out = WasmSectionBuffer.new(rt.codeRegion.space.pageAlign, initialSize);

		// (1) Encode the WASM header
		//--------------------------------------------------------------------------------
		out.put_b32(WASM_MAGIC);
		out.put_b32(WASM_VERSION);

		var sizepos: int, start: int;

		// Add the allocation stub if the program might dynamically allocate memory.
		def wasm = WasmProgram.new(rt.mach, CLOptions.WASM_GC.val, context), m = rt.mach;
		// Add all the method signatures to the signatures vector
		def methods = wasm.addIrMethods();
		// Add all the indirect adapter methods and their signatures
		// (also assigns addresses for indirectly-referenced functions).
		m.layoutAllRecordsAndFuncs();
		m.methodMap.apply(wasm.addIrMethodAddr);
		m.mtableMap.apply(wasm.addMtable);

		// Generate WASM code into the code buffer. Generating code populates
		// the signatures and indirect table, which must happen before they can
		// be emitted.
		def codebuf = MachDataWriter.new(rt.codeRegion.space.pageAlign, 0, initialSize);
		var codegen = WasmCodeGen.new(context, wasm, rt, codebuf);
                rt.recordCodeStart(codebuf.endAddr());
		var funcNum = 0;
		if (m.allocates) { // add allocation stub body
			codegen.emitAllocationStub();
			funcNum++;
		}
		if (wasm.entryStubFuncIndex >= 0) {
			codegen.emitEntryStub();
			funcNum++;
		}
		for (i = wasm.numImports; i < methods.length; i++) {
			var m = methods[i];
			codegen.emitWasm(m, funcNum + i);
		}
		for (i < wasm.indirectAdapters.length) {
			codegen.emitIndirectAdapter(wasm.indirectAdapters[i]);
		}
                rt.recordCodeEnd(codebuf.endAddr());

		// (2) Emit signatures (types)
		//--------------------------------------------------------------------------------
		out.startSection(WasmSection.TYPE);
		out.put_sleb32(wasm.typeTable.count);
		wasm.typeTable.emit(out);
		out.endSection();

		// (3) Emit imports
		//--------------------------------------------------------------------------------
		if (wasm.numImports > 0) {
			out.startSection(WasmSection.IMPORT);
			out.put_sleb32(wasm.numImports);
			for (i = 0; i < wasm.numImports; i++) {
				var m = methods[i];
				out.importName(VstComponent.!(m.source.receiver).importName.image);
				out.importName(m.source.importName.image);
				out.putb(/*Function import*/0);
				out.put_uleb32(wasm.getSigIndex(m));
			}
			out.endSection();
		}

		// (4) Emit function signature declarations
		//--------------------------------------------------------------------------------
		out.startSection(WasmSection.FUNCTION);
		out.put_sleb32(wasm.numFunctions - wasm.numImports);
		if (m.allocates) {  // add allocation stub
			out.put_sleb32(wasm.sigIndex_i_i);
		}
		if (wasm.entryStubFuncIndex >= 0) {
			out.put_sleb32(wasm.sigIndex_entryStub);
		}
		for (i = wasm.numImports; i < methods.length; i++) {
			var m = methods[i];
			context.method = m;
			out.put_uleb32(wasm.getSigIndex(m));
		}
		for (i < wasm.indirectAdapters.length) {
			var e = wasm.indirectAdapters[i];
			out.put_uleb32(e.1);
		}
		out.endSection();

		// (5) Emit indirect function table
		//--------------------------------------------------------------------------------
		var table_length = u32.!(wasm.functionTable.length + 1);
		if (table_length > 1 || wasm.containsCallIndirect) {
			out.startSection(WasmSection.TABLE);
			out.putb(1);  // 1 table
			out.putb(WasmTypeConCode.FUNCREF.code);  // type of table
			out.putb(1);	// flags = contains maximum
			out.put_uleb32(table_length);  // initial table length
			out.put_uleb32(table_length);  // maximum table length
			out.endSection();
		}

		// (6) Emit memory section
		//--------------------------------------------------------------------------------
		out.startSection(WasmSection.MEMORY);
		out.putb(1);	// 1 memory
		// add the size of initialized memory and runtime to the heap size
		var initSize = u32.view(m.metaRegion.mark + m.dataRegion.mark);
		var pages = 2u + u32.!((rt.heapSize + rt.shadowStackSize
			+ initSize + u32.view(WASM_PAGE_SIZE - 1)) /
				u32.view(WASM_PAGE_SIZE));
		out.putb(1);	// flags = contains maximum
		out.put_uleb32(pages); // initial memory size
		out.put_uleb32(pages); // maximum memory size
		out.endSection();

		// (7) Emit the export section
		//--------------------------------------------------------------------------------
		var mainIndex = prog.getMain().asMethod().machIndex;
		var mainName = CLOptions.MAIN_EXPORT.get();

		if (wasm.entryStubFuncIndex >= 0) {
			mainIndex = wasm.entryStubFuncIndex;
			mainName = CLOptions.ENTRY_EXPORT.get();
		}
		var numExports = 1;		  // default exports: main and maybe memory
		if (CLOptions.WASM_EXPORT_MEM.val) numExports++;
		for (i < prog.ir.roots.length) {
			var r = prog.ir.roots[i];
			if (r.name != null) numExports++;
		}

		out.startSection(WasmSection.EXPORT);
		out.putb(numExports);
		// export main
		out.str(mainName);
		out.putb(WasmExternal.FUNCTION);
		out.put_sleb32(mainIndex);
		// export memory
		if (CLOptions.WASM_EXPORT_MEM.val) {
			out.str("memory");
			out.putb(WasmExternal.MEMORY);
			out.put_uleb32(0);
		}
		// export the rest of exported functions
		for (i < prog.ir.roots.length) {
			var r = prog.ir.roots[i];
			if (r.name == null) continue;
			out.importName(r.name);
			out.putb(WasmExternal.FUNCTION);
			out.put_sleb32(r.spec.asMethod().machIndex);
		}

		out.endSection();

		// (8) Emit the function table entries
		//--------------------------------------------------------------------------------
		if (table_length > 1) {
			out.startSection(WasmSection.ELEMENT);
			out.put_uleb32(1);  // 1 table init entry
			out.putb(0);  // table index = 0
			// start init expr for base index of elements
			out.putb(WasmOp.I32_CONST.opcode);
			out.putb(1);  // start index of elements; 0 is reserved for null function
			out.putb(WasmOp.END.opcode);
			// end init expr
			out.put_uleb32(table_length-1);
			for (i < wasm.functionTable.length) {
				var entry = wasm.functionTable[i];
				out.put_uleb32(entry.1);
			}
			out.endSection();
		}

		// (9) Emit the function bodies
		//--------------------------------------------------------------------------------
		out.startSection(WasmSection.CODE);
		out.put_sleb32(wasm.numFunctions - wasm.numImports);
		out.putmd(codebuf);
		out.endSection();

		// (9) Emit the data section
		//--------------------------------------------------------------------------------
		out.startSection(WasmSection.DATA);
		out.putb(1); // 1 data entry
		out.putb(0); // linear memory #0
		out.putb(WasmOp.I32_CONST.opcode);
		out.put_sleb32(WASM_PAGE_SIZE);  // linear memory offset
		out.putb(WasmOp.END.opcode);
		var data_sizepos = out.skip_leb32(); // data size
		var data_start = out.pos;
		out.startAddr = WASM_PAGE_SIZE - out.end();
		// Encode meta region
                m.layoutMeta(out);
                // Encode runtime region
                m.layoutRuntime(out);
		// Encode data region
                rt.recordDataStart(out.endAddr());
                m.layoutData(out);
                rt.recordDataEnd(out.endAddr());
		// Add the heap pointers after the initialized data. XXX: use WASM globals.
		if (m.allocates || rt.shadowStackSize > 0) rt.addHeapPointers(out);

		patchSize(out, data_sizepos, out.atEnd().pos - data_start);
		out.endSection();

		out.patch(patchAddress(wasm.mach, _, _, _));

		// (10) Emit the name section
		//--------------------------------------------------------------------------------
		if (CLOptions.SYMBOLS.val) {
			out.startSection(WasmSection.UNKNOWN);
			out.str("name");
			// output function name subsection
			out.putb(1); // names of functions
			var funcname_sizepos = out.skip_leb32();
			var funcname_start = out.pos;
			var count = u32.!(methods.length);
			if (m.allocates) count++;
			if (wasm.entryStubFuncIndex >= 0) count++;
			out.put_uleb32(count);
			if (m.allocates) {
				out.put_uleb32(u32.!(wasm.allocateStubFuncIndex));
				out.str(".alloc");
			}
			if (wasm.entryStubFuncIndex >= 0) {
				out.put_uleb32(u32.!(wasm.entryStubFuncIndex));
				out.str(".entry");
			}

			var namebuf = StringBuilder.new();
			for (i < methods.length) {
				var m = methods[i];
				out.put_uleb32(u32.!(m.machIndex));
				emitMethodName(out, m, namebuf);
			}
			patchSize(out, funcname_sizepos, out.atEnd().pos - funcname_start);
			out.endSection();
		}

		// Dump the bytes to the file
		var fileName = context.compiler.getOutputFileName(prog.name(), "wasm");
		var fd = System.fileOpen(fileName, false);
		if (fd < 0) {
			prog.ERROR.OutputError(fileName);
			return null;
		}
		System.fileWriteK(fd, out.data, 0, out.end());
		System.fileClose(fd);
		return out;
	}
	def patchAddress(mach: MachProgram, w: MachDataWriter, a: Addr, posAddr: int) {
		var abs = mach.absolute(a);
		if (CLOptions.PRINT_BIN.get()) {
			TerminalBuffer.new()
				.puts("patch-address @+")
				.putd(w.pos)
				.puts(" <- ")
				.putcv(a, null)
				.puts(" = ")
				.putx(abs)
				.outln();
		}
		w.overwrite_uleb32(abs);
	}
	def emitTestWrappers(context: SsaContext, rt: MachRuntime, w: DataWriter, e: ExecuteTestCase) {
		var prog = context.prog;
		var fileName = context.compiler.getOutputFileName(prog.name(), "expect.js");
		var fd = System.fileOpen(fileName, false);
		if (fd < 0) return prog.ERROR.OutputError(fileName);
		var buf = StringBuilder.new();
		buf.put1("// %s\n", prog.name());

		buf.puts("var globalTestRuns = [\n");

		for (r = e.runs; r != null; r = r.tail) {
			var run = r.head;
			buf.puts("\t[");
			putJsValue(buf, run.expected);
			buf.puts(", [");
			for (i = run.input; i != null; i = i.tail) {
				putJsValue(buf, i.head);
				if (i.tail != null) buf.csp();
			}
			buf.puts("]],\n");
		}

		buf.puts("];\n");

		System.fileWriteK(fd, buf.buf, 0, buf.length);
		System.fileClose(fd);

		// emit Wasm spec test wrapper
		fileName = context.compiler.getOutputFileName(prog.name(), "bin.wast");
		fd = System.fileOpen(fileName, false);
		if (fd < 0) return prog.ERROR.OutputError(fileName);
		buf.reset();
		buf.puts("(module binary\n");
		for (i < w.end()) {
			if ((i & 31) == 0) buf.puts(" \"");
			buf.puts("\\");
			buf.putx_8(w.data[i]);
			if ((i & 31) == 31 || (i == w.end() - 1)) buf.puts("\"").ln();
		}
		buf.puts("\n)\n");
		for (r = e.runs; r != null; r = r.tail) {
			var run = r.head;
			if (Exception.?(run.expected)) buf.puts("(assert_trap ");
			else buf.puts("(assert_return ");
			buf.puts("(invoke \"main\" ");
			for (i = run.input; i != null; i = i.tail) {
				putWasmValue(buf, i.head);
			}
			buf.puts(")\n");
			if (Exception.?(run.expected)) {
				var ex = Exception.!(run.expected);
				if (Strings.equal(V3Exception.DivideByZero, ex.error)) buf.puts("\"integer divide by zero\"");
				else buf.puts("\"unreachable\"");
			}
			else putWasmValue(buf, run.expected);
			buf.puts(")\n");
		}

		System.fileWriteK(fd, buf.buf, 0, buf.length);
		System.fileClose(fd);
	}
	def putWasmValue(buf: StringBuilder, r: Result) -> StringBuilder {
		match (r) {
			x: Box<int> => return buf.puts("(i32.const 0x").putx(x.val).putc(')');
			x: Box<bool> => return buf.puts("(i32.const 0x").putx(if(x.val, 1, 0)).putc(')');
			null => return buf.puts("(i32.const 0x0)");
		}
		return buf;
	}
	def putJsValue(buf: StringBuilder, r: Result) -> StringBuilder {
		match (r) {
			x: Box<int> => return buf.putd(x.val);
			x: Box<bool> => return buf.putd(if(x.val, 1, 0));
			x: Exception => return buf.puts("WebAssembly.RuntimeError");
			null => return buf.puts("0");
		}
		return buf;
	}
	def addRoots(compiler: Compiler, prog: Program) {
		getRuntime(prog).addRoots();
	}
	def getRuntime(prog: Program) -> MachRuntime {
		return MachProgram.!(prog.tprog).runtime;
	}
	def emitMethodName(w: MachDataWriter, m: IrMethod, namebuf: StringBuilder) {
		namebuf.reset();
		m.renderLong(namebuf);
		w.put_uleb32(u32.!(namebuf.length));
		w.putk(namebuf.buf, 0, namebuf.length);
	}
        def emitEngineScript(cmd: string, compiler: Compiler, prog: Program) {
		var programName = prog.name();
		var fileName = compiler.getOutputFileName(programName, null);
		var fd = System.fileOpen(fileName, false);
		if (fd < 0) return prog.ERROR.OutputError(fileName);
		compiler.emitBashScriptHeader(fd);
		System.write(fd, cmd);
                System.write(fd, " $DIR/");
		System.write(fd, programName);
		System.write(fd, ".wasm");
		System.write(fd, " \"$@\"\n");
		System.fileClose(fd);
		compiler.makeExecutable(fileName);
        }
}
class WasmProgram(mach: MachProgram, gcTypes: bool, context: SsaContext) {
	var typeTable: WasmTypeTable;
	def functionTable = Vector<(IrMethod, u32)>.new();
	def indirectAdapters = Vector<(Signature, u32, IrMethod)>.new();
	var sigIndex_i_i = -1;
	var sigIndex_entryStub = -1;

	// known function indices
	var entryStubFuncIndex = -1;
	var allocateStubFuncIndex = -1;

	var numImports = 0;
	var numFunctions = 0;
	var containsCallIndirect = false;

	new() {
		typeTable = WasmTypeTable.new(wasmType);
	}

	def wasmType(t: Type) -> WasmType {
		match (t) {
			null => return WasmType.Void;
			x: IntType => return if(x.width > 32, WasmType.I64, WasmType.I32);
			x: FloatType => return if(x.is64, WasmType.F64, WasmType.F32);
			_ => match (t.typeCon.kind) {
				ENUM => return wasmType(V3.getVariantTagType(t));
				ENUM_SET => return wasmType(V3.getEnumSetType(t));
				ARRAY, CLASS, ANYFUNC, VARIANT, FUNCREF =>
			 	      return if(gcTypes, WasmType.I32, WasmType.I32); // TODO
				_ => return WasmType.I32;
			}
		}
	}
	def addSig(receiver: Type, sig: Signature) -> u32 {
		if (receiver != Void.TYPE) sig = Signature.new(null, Arrays.prepend(receiver, sig.paramTypes), sig.returnTypes);
		return typeTable.add(sig);
	}
	def getSigIndex(m: IrMethod) -> u32 {
		var sig = m.sig;
		if (!V3.isComponent(m.receiver)) {
			sig = Signature.new(null, Arrays.prepend(m.ssa.params[0].vtype, sig.paramTypes), sig.returnTypes);
		}
		var index = typeTable.typeMap[sig];
		if (index <= 0) context.fail1("method signature not found: %q", sig.funcType().render);
		return u32.!(index - 1);
	}
	def addIrMethodAddr(m: IrItem, addr: Address<IrMethod>) {
		var m = addr.val;
		// allocate indirect call wrapper for component methods (first param void)
		if (m.machIndex < 0) context.fail1("method not assigned an index: %q", m.renderLong);
		var tableEntry = u32.!(m.machIndex);
		if (V3.isComponent(m.receiver)) {
			// component method; allocate a signature with the object type prepended
			var index = addSig(AnyRef.TYPE, m.sig);
			indirectAdapters.put((m.sig, index, m));
			tableEntry = u32.!(numFunctions++);  // the indirect adapter goes in the table
		}
		// an IrMethod's "address" is its index into the function table
		addr.absolute = functionTable.length + 1;
		functionTable.put((m, tableEntry));
	}
	def addIrMethods() -> Vector<IrMethod> {
		var methods = mach.prog.ir.methods;
		var sorted = Array<IrMethod>.new(methods.length);
		var j = 0;

		// Add all imported functions to the array.
		for (i < methods.length) {
			var m = methods[i];
			if (m.source == null || m.source.importName == null) continue;
			addMethod(m);
			sorted[j++] = m;
		}
		numImports = j;

		// Add the allocation stub if necessary.
		if (mach.allocates) {
			var sig = FuncType.!(Function.newType(Int.TYPE, Int.TYPE)).sig();
			sigIndex_i_i = int.!(addSig(Void.TYPE, sig));
			allocateStubFuncIndex = numFunctions++;
		}
		// Add the entry stub if {RiRuntime.init} or {RiRuntime.exit} exists.
		var ri_init = mach.runtime.getRiInit();
		var ri_exit = mach.runtime.getRiExit();
		if (ri_init != null || ri_exit != null) {
			var params: Array<Type> = if(ri_init != null, ri_init.sig.paramTypes, TypeUtil.NO_TYPES);
			var results: Array<Type> = if(ri_exit != null, ri_exit.sig.returnTypes, [Int.TYPE]);
			var sig = Signature.new(null, params, results);
			sigIndex_entryStub = int.!(addSig(Void.TYPE, sig));
			entryStubFuncIndex = numFunctions++;
		}

		// Add all non-imported functions to the array.
		for (i < methods.length) {
			var m = methods[i];
			if (m.source != null && m.source.importName != null) continue;
			addMethod(m);
			sorted[j++] = m;
		}

		Arrays.copyInto(sorted, methods.array, 0);  // update the IrModule's method vector.
		return methods;
	}
	def addMethod(m: IrMethod) {
		addSig(m.ssa.params[0].vtype, m.sig);
		m.machIndex = numFunctions++;
	}
	def addMtable(m: IrItem, addr: Addr) {
		var mtable = IrMtable.!(m);
		for (m in mtable.table) {
			if (m != null) addIrMethodAddr(m, mach.addrOfMethod(m));
		}
	}
}
