// Copyright 2016 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// TODO(wasm): codegen system ops
// TODO(wasm): stacktrace reconstruction
// XXX(wasm): improve cfg optimizer
// XXX(wasm): default init of locals

// Install targets into registry for the compiler
component WasmComponent {
	new() {
		Aeneas.registerTarget(WasmTarget.new("wasm-test", true));
		Aeneas.registerTarget(WasmTarget.new("wasm", false));
	}
}
def WASM_MAGIC = 0x6d736100;
def MINIMUM_DATA_START_ADDR = 8u;
def MAXIMUM_DATA_START_ADDR = 0x8000_0000u;
def WASM_VERSION = 0x1;
def XXX: Terminal;

// Constants for the binary encoding of sections
component WasmSection {
	def UNKNOWN: byte = 0;	 // code for unknown sections
	def TYPE: byte = 1;	 // Function signature declarations
	def IMPORT: byte = 2;	 // Import declarations
	def FUNCTION: byte = 3;	 // Function declarations
	def TABLE: byte = 4;	 // Indirect function table and other tables
	def MEMORY: byte = 5;	 // Memory attributes
	def GLOBAL: byte = 6;	 // Global declarations
	def EXPORT: byte = 7;	 // Exports
	def START: byte = 8;	 // Start function declaration
	def ELEMENT: byte = 9;	 // Elements section
	def CODE: byte = 10;	 // Function code
	def DATA: byte = 11;	 // Data segments
	def NAME: byte = 12;	 // Name section (encoded as a string)
}
// Constants for the binary encodings of import/export kinds
component WasmExternal {
	def FUNCTION: byte = 0;
	def TABLE: byte = 1;
	def MEMORY: byte = 2;
	def GLOBAL: byte = 3;
}
// A helper to emit properly-sized sections
class WasmSectionBuffer extends MachDataWriter {
	var sizepos = -1;
	var start = -1;
	new(pageAlign: Alignment, initialSize: int) super(pageAlign, 0, initialSize) {
	}
	def startSection(code: byte) {
		if (sizepos >= 0) return V3.fail("unterminated section");
		atEnd();
		putb(code);
		sizepos = skip_leb32();
		start = pos;
	}
	def endSection() {
		atEnd();
		if (sizepos < 0) return V3.fail("unstarted section");
		patchSize(this, sizepos, pos - start);
		sizepos = -1;
		start = -1;
	}
	def str(str: string) -> this {
		// TODO: properly utf-8 encode Wasm strings (import/export,debug)
		put_sleb32(str.length);
		puta(str);
	}
	def importName(s: string) -> this {
		if (s.length > 0 && s[0] == '\"') s = Strings.parseLiteral(s, 0).1; // XXX: reparsing literal
		str(s);
	}
}
def patchSize(w: MachDataWriter, offset: int, size: int) {
	w.at(offset).overwrite_uleb32(size).atEnd();
}
def SPACE = AddressSpace.new("mem", false, 32, 4, Alignment.new(65536), Alignment.new(4));
// Common code for all WASM targets
class WasmTarget extends Target {
	def test: bool;

	new(name: string, test) super(name) {
		typedMain = !test;
		requireMain = false;
	}

	def configureCompiler(compiler: Compiler) {
		compiler.Reachability = true;
		compiler.NormConfig.setSignatureLimits(10000, if(CLOptions.WASM_MULTI_VALUE.val, 1000, 1));
		compiler.NormConfig.GetScalar = getScalar;
	}
	private def getScalar(compiler: Compiler, prog: Program, t: Type) -> Scalar.set {
		var none: Scalar.set;
		match (t) {
			x: EnumType => return if(x.enumDecl.tagType.width <= 32, Scalar.B32 | Scalar.B64, Scalar.B64); // XXX: Scalar.R32, once packed refs
			x: EnumSetType => return if(x.repType.width <= 32, Scalar.B32 | Scalar.B64, Scalar.B64); // XXX: Scalar.R32, once packed refs
			x: BoolType => return Scalar.B32 | Scalar.B64;
			x: IntType => return if(x.width <= 32, Scalar.B32 | Scalar.B64, Scalar.B64); // XXX: Scalar.R64, once packed refs
			x: FloatType => return if(x.is64, Scalar.F64 | Scalar.B64, Scalar.F32 | Scalar.B32);
			_ => return Scalar.R64;
		}
	}
	def configureProgram(prog: Program) {
		def intNorm = IntNormalizers.I64LE;
		var mach = MachProgram.new(prog, SPACE, SPACE, intNorm);
		prog.tprog = mach;
		MachModule.install(prog, mach);
		mach.runtime = MachRuntime.new(mach);
		var cirt = CiRuntime_TypeCon.new(MachModule.PTR_32.create0(), prog.typeCache);
		prog.typeEnv.add(cirt);
		var ciwt = CiWasmTarget_TypeCon.new(prog.typeCache);
		prog.typeEnv.add(ciwt);
	}
	def emit(compiler: Compiler, prog: Program) {
		var context = SsaContext.new(compiler, prog);
		var rt = getRuntime(prog);
		var e: ExecuteTestCase;
		prog.ir.classes.apply(processIrClass);
		if (test) {
			e = SpecParser.parseFile(prog.ERROR, prog.files[0], prog.inputs[0]);
			rt.heapSize = e.heapSize;
		}
		var w = emitWasmModule(context, rt);
		if (test) emitTestWrappers(context, rt, w, e);
		if (CLOptions.WASM_RUN_COMMAND.val != null) emitEngineScript(CLOptions.WASM_RUN_COMMAND.val, compiler, prog);
	}
	def processIrClass(ic: IrClass) {
	}
	def emitWasmModule(context: SsaContext, rt: MachRuntime) -> DataWriter {
		def pageSize = CLOptions.WASM_PAGE_SIZE.get();
		if (!Ints.isPowerOf2(pageSize)) context.fail1("expected -wasm.page-size option to be a power of 2, got %d", pageSize);

		var dataStartAddrOption = CLOptions.DATA_START_ADDR.get();
		if (dataStartAddrOption > MAXIMUM_DATA_START_ADDR) context.fail1("-data-start-addr too large for Wasm target, got 0x%x", dataStartAddrOption);
		def dataStartAddr = if(dataStartAddrOption < MINIMUM_DATA_START_ADDR, MINIMUM_DATA_START_ADDR, u32.view(dataStartAddrOption));

		def prog = context.prog;
		// Lower to machine level from V3 level
		def config = MachLoweringConfig.new();
		config.ImplicitNullChecks = false;
		config.ExplicitDivChecks = true;
		config.Int32Arith = true;
		config.Int64Arith = true;
		config.IntCastFTraps = true;
		config.ObjectSystem = CLOptions.WASM_GC.val;
		config.NativeCmpSwp = false;

		def m = rt.mach;
		m.build(context.compiler, config);

		def initialSize = 300;
		def out = WasmSectionBuffer.new(m.code.pageAlign, initialSize);

		// (1) Encode the WASM header
		//--------------------------------------------------------------------------------
		out.put_b32(WASM_MAGIC);
		out.put_b32(WASM_VERSION);

		var sizepos: int, start: int;

		// Add the allocation stub if the program might dynamically allocate memory.
		def wasm = WasmProgram.new(m, CLOptions.WASM_GC.val, context, test);
		// Organize all the methods in the program.
		wasm.addIrMethods();
		// Add all the indirect adapter methods and their signatures
		// (also assigns addresses for indirectly-referenced functions).
		m.layoutAllRecordsAndFuncs();
		m.methodMap.apply(wasm.addIrMethodAddr);
		m.mtableMap.apply(wasm.addMtable);

		// Generate WASM code into the code buffer. Generating code populates
		// the signatures and indirect table, which must happen before they can
		// be emitted.
		def codebuf = MachDataWriter.new(m.code.pageAlign, 0, initialSize);
		var codegen = WasmCodeGen.new(context, wasm, rt, codebuf);
                rt.recordCodeStart(codebuf.addr_end());
		for (i = wasm.numImports; i < wasm.functions.length; i++) {
			var t = wasm.functions[i];
			match (t.1) {
				Unassigned => codegen.emitUnassignedFunction();
				Import => ; // skip; should not occur
				AllocStub => codegen.emitAllocationStub();
				EntryStub => codegen.emitEntryStub(test);
				IrMethod => codegen.emitWasm(t.0, i);
				IndirectAdapter(sig_index) => codegen.emitIndirectAdapter(t.0.sig, sig_index, t.0);
			}
		}
                rt.recordCodeEnd(codebuf.addr_end());

		// (2) Emit signatures (types)
		//--------------------------------------------------------------------------------
		out.startSection(WasmSection.TYPE);
		out.put_sleb32(wasm.typeTable.count);
		wasm.typeTable.emit(out);
		out.endSection();

		// (3) Emit imports
		//--------------------------------------------------------------------------------
		if (wasm.numImports > 0) {
			out.startSection(WasmSection.IMPORT);
			out.put_sleb32(wasm.numImports);
			for (i = 0; i < wasm.numImports; i++) {
				var t = wasm.functions[i], m = t.0;
				out.importName(VstComponent.!(m.source.receiver).importName.image);
				out.importName(m.source.importName.image);
				out.putb(/*Function import*/0);
				out.put_uleb32(wasm.getSigIndex(m));
			}
			out.endSection();
		}

		// (4) Emit function signature declarations
		//--------------------------------------------------------------------------------
		out.startSection(WasmSection.FUNCTION);
		out.put_sleb32(wasm.functions.length - wasm.numImports);
		for (i = wasm.numImports; i < wasm.functions.length; i++) {
			var t = wasm.functions[i];
			match (t.1) {
				Unassigned => {
					out.put_uleb32(u32.!(wasm.sigIndex_v_v));
				}
				Import => ; // should not occur
				AllocStub => {
					out.put_uleb32(u32.!(wasm.sigIndex_i_i));
				}
				EntryStub => {
					out.put_uleb32(u32.!(wasm.sigIndex_entryStub));
				}
				IrMethod => {
					context.method = t.0;
					out.put_uleb32(wasm.getSigIndex(t.0));
				}
				IndirectAdapter(sig_index) => {
					out.put_uleb32(sig_index);
				}
			}
		}
		out.endSection();

		// (5) Emit indirect function table
		//--------------------------------------------------------------------------------
		var table_length = u32.!(wasm.functionTable.length + 1);
		if (table_length > 1 || wasm.containsCallIndirect) {
			out.startSection(WasmSection.TABLE);
			out.putb(1);  // 1 table
			out.putb(WasmTypeConCode.FUNCREF.code);  // type of table
			out.putb(1);	// flags = contains maximum
			out.put_uleb32(table_length);  // initial table length
			out.put_uleb32(table_length);  // maximum table length
			out.endSection();
		}

		// (6) Emit memory section
		//--------------------------------------------------------------------------------
		out.startSection(WasmSection.MEMORY);
		out.putb(1);	// 1 memory
		// Compute the maximum accessible data address
		var maxDataAddr = dataStartAddr
			+ u32.!(m.metaRegion.mark)
			+ u32.!(m.dataRegion.mark)
			+ u32.!(rt.heapSize + rt.shadowStackSize);

		var pages = (maxDataAddr + pageSize - 1u) / pageSize; // TODO: pageAlign
		var flags = 1;
		if (pageSize != 65536) flags |= 1 << 3;		// custom page size
		out.putb(flags);				// flags = contains maximum
		out.put_uleb32(pages);				// initial memory size
		var reserved_data_size = CLOptions.RESERVED_DATA_SIZE.get();
		out.put_uleb32(pages + reserved_data_size);	// maximum memory size
		if (pageSize != 65536) {
			out.put_uleb32(u32.!(Ints.log(pageSize))); // page size log
		}
		out.endSection();

		// (7) Emit the export section
		//--------------------------------------------------------------------------------
		var mainMeth = prog.getMain();
		var numExports = 0;		  // default exports: main and maybe memory or table
		var mainIndex: int;
		var mainName: string;
		if (mainMeth != null) {
			mainIndex = mainMeth.asMethod().machIndex;
			mainName = CLOptions.MAIN_EXPORT.get();

			if (wasm.entryStubFuncIndex >= 0) {
				mainIndex = wasm.entryStubFuncIndex;
				mainName = if(test, mainName, CLOptions.ENTRY_EXPORT.get());
			}
			numExports = 1;
		}
		if (CLOptions.WASM_EXPORT_MEM.val) numExports++;
		if (CLOptions.WASM_EXPORT_TABLE.val && table_length > 1) numExports++;
		for (i < prog.ir.roots.length) {
			var r = prog.ir.roots[i];
			if (r.name != null) numExports++;
		}

		out.startSection(WasmSection.EXPORT);
		out.putb(numExports);
		if (mainMeth != null) {
			// export main
			out.str(mainName);
			out.putb(WasmExternal.FUNCTION);
			out.put_sleb32(mainIndex);
		}
		// export memory
		if (CLOptions.WASM_EXPORT_MEM.val) {
			out.str("memory");
			out.putb(WasmExternal.MEMORY);
			out.put_uleb32(0);
		}
		// export table if it exists
		if (CLOptions.WASM_EXPORT_TABLE.val && table_length > 1) {
			out.str("table");
			out.putb(WasmExternal.TABLE);
			out.put_uleb32(0);
		}
		// export the rest of exported functions
		for (i < prog.ir.roots.length) {
			var r = prog.ir.roots[i];
			if (r.name == null) continue;
			out.importName(r.name);
			out.putb(WasmExternal.FUNCTION);
			out.put_sleb32(r.spec.asMethod().machIndex);
		}

		out.endSection();

		// (8) Emit the function table entries
		//--------------------------------------------------------------------------------
		if (table_length > 1) {
			out.startSection(WasmSection.ELEMENT);
			out.put_uleb32(1);  // 1 table init entry
			out.putb(0);  // table index = 0
			// start init expr for base index of elements
			out.putb(WasmOp.I32_CONST.opcode);
			out.putb(1);  // start index of elements; 0 is reserved for null function
			out.putb(WasmOp.END.opcode);
			// end init expr
			out.put_uleb32(table_length-1);
			for (i < wasm.functionTable.length) {
				var entry = wasm.functionTable[i];
				out.put_uleb32(entry.1);
			}
			out.endSection();
		}

		// (9) Emit the function bodies
		//--------------------------------------------------------------------------------
		out.startSection(WasmSection.CODE);
		out.put_sleb32(wasm.functions.length - wasm.numImports);
		out.putmd(codebuf);
		out.endSection();

		// (9) Emit the data section
		//--------------------------------------------------------------------------------
		var data_pos = out.pos;
		out.startSection(WasmSection.DATA);
		out.putb(1); // 1 data entry
		out.putb(0); // linear memory #0
		out.putb(WasmOp.I32_CONST.opcode);
		out.put_sleb32(int.view(dataStartAddr));  // linear memory offset
		out.putb(WasmOp.END.opcode);
		var data_sizepos = out.skip_leb32(); // data size
		var data_start = out.pos;
		out.startAddr = dataStartAddr - u64.!(out.end());
		// Encode meta region
                m.layoutMeta(out);
                // Encode runtime region
                m.layoutRuntime(out);
		// Encode data region
                m.layoutData(out);
		// Add the heap pointers after the initialized data. XXX: use WASM globals.
		if (m.allocates || rt.shadowStackSize > 0) rt.addHeapPointers(out);

		var data_size = out.atEnd().pos - data_start;

		if (data_size == 0) {
			// No data, no need for data section.
			out.endSection();
			out.trim(data_pos);
		} else {
			patchSize(out, data_sizepos, data_size);
			out.endSection();
		}

		out.patch(wasm.mach);

		// (10) Emit the name section
		//--------------------------------------------------------------------------------
		if (CLOptions.SYMBOLS.val) {
			out.startSection(WasmSection.UNKNOWN);
			out.str("name");
			// output function name subsection
			out.putb(1); // names of functions
			var funcname_sizepos = out.skip_leb32();
			var funcname_start = out.pos;
			var count = u32.!(wasm.functions.length);
			var namebuf = StringBuilder.new();
			out.put_uleb32(count);
			for (i < wasm.functions.length) {
				var t = wasm.functions[i];
				match (t.1) {
					Unassigned => ; // skip
					Import => {
						out.put_uleb32(u32.!(i));
						emitMethodName(out, t.0, namebuf);
					}
					AllocStub => {
						out.put_uleb32(u32.!(i));
						out.str(".alloc");
					}
					EntryStub => {
						out.put_uleb32(u32.!(i));
						out.str(".entry");
					}
					IrMethod => {
						out.put_uleb32(u32.!(i));
						emitMethodName(out, t.0, namebuf);
					}
					IndirectAdapter(sig_index) => ; // skip
				}
			}
			patchSize(out, funcname_sizepos, out.atEnd().pos - funcname_start);
			out.endSection();
		}

		// Dump the bytes to the file
		var fileName = context.compiler.getOutputFileName(prog.name(), "wasm");
		var fd = System.fileOpen(fileName, false);
		if (fd < 0) {
			prog.ERROR.OutputError(fileName);
			return null;
		}
		System.write(fd, out.alias());
		System.fileClose(fd);
		return out;
	}
	def patchAddress(mach: MachProgram, w: MachDataWriter, kind: PatchKind, a: Addr, posAddr: int) {
		var abs = mach.absolute(a);
		if (CLOptions.PRINT_BIN.get()) {
			TerminalBuffer.new()
				.puts("patch-address @+")
				.putd(w.pos)
				.puts(" <- ")
				.putcv(a, null)
				.puts(" = ")
				.putx(abs)
				.outln();
		}
		// TODO,XXX: address immediates are in i32.const, which is a signed LEB.
		w.overwrite_sleb32(abs);
	}
	def emitTestWrappers(context: SsaContext, rt: MachRuntime, w: DataWriter, e: ExecuteTestCase) {
		var prog = context.prog;
		var fileName = context.compiler.getOutputFileName(prog.name(), "expect.js");
		var fd = System.fileOpen(fileName, false);
		if (fd < 0) return prog.ERROR.OutputError(fileName);
		var buf = StringBuilder.new();
		buf.put1("// %s\n", prog.name());

		buf.puts("var globalTestRuns = [\n");

		for (r = e.runs; r != null; r = r.tail) {
			var run = r.head;
			buf.puts("\t[");
			putJsValue(buf, run.expected);
			buf.puts(", [");
			for (i = run.input; i != null; i = i.tail) {
				putJsValue(buf, i.head);
				if (i.tail != null) buf.csp();
			}
			buf.puts("]],\n");
		}

		buf.puts("];\n");

		System.fileWriteK(fd, buf.buf, 0, buf.length);
		System.fileClose(fd);

		// emit Wasm spec test wrapper
		fileName = context.compiler.getOutputFileName(prog.name(), "bin.wast");
		fd = System.fileOpen(fileName, false);
		if (fd < 0) return prog.ERROR.OutputError(fileName);
		buf.reset();
		buf.puts("(module binary\n");
		for (i < w.end()) {
			if ((i & 31) == 0) buf.puts(" \"");
			buf.puts("\\");
			buf.putx_8(w.data[i]);
			if ((i & 31) == 31 || (i == w.end() - 1)) buf.puts("\"").ln();
		}
		buf.puts("\n)\n");
		for (r = e.runs; r != null; r = r.tail) {
			var run = r.head;
			if (Exception.?(run.expected)) buf.puts("(assert_trap ");
			else buf.puts("(assert_return ");
			buf.puts("(invoke \"main\" ");
			for (i = run.input; i != null; i = i.tail) {
				putWasmValue(buf, i.head);
			}
			buf.puts(")\n");
			if (Exception.?(run.expected)) {
				var ex = Exception.!(run.expected);
				if (Strings.equal(V3Exception.DivideByZero, ex.error)) buf.puts("\"integer divide by zero\"");
				else buf.puts("\"unreachable\"");
			}
			else putWasmValue(buf, run.expected);
			buf.puts(")\n");
		}

		System.fileWriteK(fd, buf.buf, 0, buf.length);
		System.fileClose(fd);
	}
	def putWasmValue(buf: StringBuilder, r: Result) -> StringBuilder {
		match (r) {
			x: Box<int> => return buf.puts("(i32.const 0x").putx(x.val).putc(')');
			x: Box<bool> => return buf.puts("(i32.const 0x").putx(if(x.val, 1, 0)).putc(')');
			null => return buf.puts("(i32.const 0x0)");
		}
		return buf;
	}
	def putJsValue(buf: StringBuilder, r: Result) -> StringBuilder {
		match (r) {
			x: Box<int> => return buf.putd(x.val);
			x: Box<bool> => return buf.putd(if(x.val, 1, 0));
			x: Exception => return buf.puts("WebAssembly.RuntimeError");
			null => return buf.puts("0");
		}
		return buf;
	}
	def addRoots(compiler: Compiler, prog: Program) {
		getRuntime(prog).addRoots();
	}
	def getRuntime(prog: Program) -> MachRuntime {
		return MachProgram.!(prog.tprog).runtime;
	}
	def emitMethodName(w: MachDataWriter, m: IrMethod, namebuf: StringBuilder) {
		namebuf.reset();
		m.renderLong(namebuf);
		w.put_uleb32(u32.!(namebuf.length));
		w.putr(namebuf.buf[0 ... namebuf.length]);
	}
        def emitEngineScript(cmd: string, compiler: Compiler, prog: Program) {
		var programName = prog.name();
		var fileName = compiler.getOutputFileName(programName, null);
		var fd = System.fileOpen(fileName, false);
		if (fd < 0) return prog.ERROR.OutputError(fileName);
		compiler.emitBashScriptHeader(fd);
		System.write(fd, cmd);
                System.write(fd, " $DIR/");
		System.write(fd, programName);
		System.write(fd, ".wasm");
		System.write(fd, " \"$@\"\n");
		System.fileClose(fd);
		compiler.makeExecutable(fileName);
        }
}
class WasmProgram(mach: MachProgram, gcTypes: bool, context: SsaContext, test: bool) {
	var typeTable: WasmTypeTable;
	def functionTable = Vector<(IrMethod, u32)>.new();
	def functions = Vector<(IrMethod, WasmFuncKind)>.new();
	var functionCursor = 0;
	var sigIndex_i_i = -1;
	var sigIndex_v_v = -1;
	var sigIndex_entryStub = -1;

	// known function indices
	var allocateStubFuncIndex = -1;
	var entryStubFuncIndex = -1;

	var numImports = 0;
	var containsCallIndirect = false;

	new() {
		typeTable = WasmTypeTable.new(wasmType);
	}

	def wasmType(t: Type) -> WasmType {
		match (t) {
			null => return WasmType.Void;
			x: IntType => return if(x.width > 32, WasmType.I64, WasmType.I32);
			x: FloatType => return if(x.is64, WasmType.F64, WasmType.F32);
			_ => match (t.typeCon.kind) {
				ENUM => return wasmType(V3.getVariantTagType(t));
				ENUM_SET => return wasmType(V3.getEnumSetType(t));
				ARRAY, CLASS, ANYFUNC, VARIANT, FUNCREF =>
			 	      return if(gcTypes, WasmType.I32, WasmType.I32); // TODO
				_ => return WasmType.I32;
			}
		}
	}
	def addSig(receiver: Type, sig: Signature) -> u32 {
		if (receiver != Void.TYPE) sig = Signature.new(null, Arrays.prepend(receiver, sig.paramTypes), sig.returnTypes);
		return typeTable.add(sig);
	}
	def getSigIndex(m: IrMethod) -> u32 {
		var sig = m.sig;
		if (!V3.isComponent(m.receiver)) {
			sig = Signature.new(null, Arrays.prepend(m.ssa.params[0].vtype, sig.paramTypes), sig.returnTypes);
		}
		return typeTable.add(sig);
	}
	def addIrMethodAddr(m: IrItem, addr: Address<IrMethod>) {
		var m = addr.val;
		// allocate indirect call wrapper for component methods (first param void)
		if (m.machIndex < 0) context.fail1("method not assigned an index: %q", m.renderLong);
		var tableEntry = u32.!(m.machIndex);
		if (V3.isComponent(m.receiver)) {
			// component method; allocate a signature with the object type prepended
			var sig_index = addSig(AnyRef.TYPE, m.sig);
			tableEntry = u32.!(functions.length);  // the indirect adapter goes in the table
			functions.put(m, WasmFuncKind.IndirectAdapter(sig_index));
		}
		// an IrMethod's "address" is its index into the function table
		addr.absolute = functionTable.length + 1;
		functionTable.put((m, tableEntry));
	}
	def addIrMethods() {
		var ir = mach.prog.ir;
		var methods = ir.methods;
		// Put all root methods that already have function ids into their slots in the result.
		for (i < ir.roots.length) {
			var r = ir.roots[i];
			if (r.functionId >= 0) {
				var m = r.spec.asMethod();
				m.machIndex = r.functionId;
				var kind = if(m.isImported(), WasmFuncKind.Import, WasmFuncKind.IrMethod);
				setMethod(r.functionId, m, kind);
			}
		}
		var cursor = 0;
		// Add all imports to the beginning of the functions.
		for (i < methods.length) {
			var m = methods[i];
			if (!m.isImported()) continue;
			setMethod(numImports++, m, WasmFuncKind.Import);
		}
		// Add [] -> [] signature
		var sig = FuncType.!(Function.newType(Void.TYPE, Void.TYPE)).sig();
		sigIndex_v_v = int.!(addSig(Void.TYPE, sig));
		// Add allocation stub if necessary.
		if (mach.allocates) {
			var sig = FuncType.!(Function.newType(Int.TYPE, Int.TYPE)).sig();
			sigIndex_i_i = int.!(addSig(Void.TYPE, sig));
			allocateStubFuncIndex = addMethod(null, WasmFuncKind.AllocStub);
		}
		// Add the entry stub if {RiRuntime.init} or {RiRuntime.exit} exists.
		var ri_init = mach.runtime.getRiInit();
		var ri_exit = mach.runtime.getRiExit();
		if (ri_init != null || ri_exit != null) {
			var main = mach.prog.getMain();
			var mainMeth = if(main != null, main.asMethod());
			var mainSig = if(mainMeth != null, mainMeth.sig);

			if (test) {
				sigIndex_entryStub = int.!(addSig(Void.TYPE, mainSig));
			} else {
				var params: Array<Type> = if(ri_init != null, ri_init.sig.paramTypes, TypeUtil.NO_TYPES);
				var results: Array<Type> = if(ri_exit != null, ri_exit.sig.returnTypes, [Int.TYPE]);
				var sig = Signature.new(null, params, results);
				sigIndex_entryStub = int.!(addSig(Void.TYPE, sig));
			}
			entryStubFuncIndex = addMethod(null, WasmFuncKind.EntryStub);
		}
		// Add the rest of IrMethods if they have not been added yet.
		for (i < methods.length) {
			var m = methods[i];
			if (m.isImported()) continue;
			addMethod(m, WasmFuncKind.IrMethod);
		}
	}
	def addMethod(m: IrMethod, kind: WasmFuncKind) -> int {
		if (m != null && m.machIndex >= 0) return m.machIndex;
		for (i = functionCursor; i < functions.length; i++) {
			var t = functions[i];
			if (t.1 == WasmFuncKind.Unassigned) return setMethod(i, m, kind);
		}
		return setMethod(functions.length, m, kind);
	}
	def setMethod(index: int, m: IrMethod, kind: WasmFuncKind) -> int {
		if (m != null) {
			m.machIndex = index;
			addSig(m.ssa.params[0].vtype, m.sig);
		}
		functions.set(index, (m, kind));
		functionCursor = functions.length;
		return index;
	}
	def addMtable(m: IrItem, addr: Addr) {
		var mtable = IrMtable.!(m);
		for (m in mtable.table) {
			if (m != null) addIrMethodAddr(m, mach.addrOfMethod(m));
		}
	}
}

type WasmFuncKind {
	case Unassigned;
	case Import;
	case AllocStub;
	case EntryStub;
	case IrMethod;
	case IndirectAdapter(sig_index: u32);
}

def B = TypeUtil.BUILTIN_TOKEN.fileName;
def P = TypeUtil.newTypeParam(Token.new(B, "P", 0, 0), TypeUtil.globalCache);
def R = TypeUtil.newTypeParam(Token.new(B, "R", 0, 0), TypeUtil.globalCache);
def TYPE_PARAMS = Lists.cons2(P, R);

class CiWasmTarget_TypeCon extends Member_TypeCon {
	new(typeCache: TypeCache) super("CiWasmTarget", Kind.VOID, 0, typeCache) { }

	def lookupMember(caller: VstFunc, t: Type, name: string) -> LookupResult {
		if (Strings.equal(name, "functionTypeId")) {
			return LookupResult.Inst(V3Op.newWasmFunctionTypeId(P, R), TYPE_PARAMS);
		} else if (Strings.equal(name, "functionId")) {
			return LookupResult.Inst(V3Op.newWasmFunctionId(P, R), TYPE_PARAMS);
		}
		return LookupResult.None;
	}
}
