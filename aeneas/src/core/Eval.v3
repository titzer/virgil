// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Interface to all evaluation functionality.
component Eval {
	def doOp = evalOp; // expose top-level function from below
	def doCast0(ft: Type, tt: Type, val: Val) -> (bool, Val) {
		var ncast = TypeSystem.newTypeCast(ft, tt);
		if (ncast == TypeCast.UNKNOWN_CAST) return (false, null);
		return doCast(ncast, ft, tt, val);
	}
	def doCast(cast: TypeCast, ft: Type, tt: Type, val: Val) -> (bool, Val) {
		var ok: (bool, Val) = (true, val);
		var throw: (bool, Val) = (false, null);
		match (cast) {
			TRUE, SUBSUME => return ok;
			THROW => return throw;
			UNKNOWN_CAST => return doCast0(ft, tt, val);
			THROW_IF_NOT_NULL => return (val == null, null);
			TUPLE_CAST => {
				// recursively check nested types of tuples
				var values: Array<Val>;
				if (val == null) values = Array<Val>.new(Lists.length(ft.nested));
				else if (!TupleVal.?(val)) return throw;
				else values = TupleVal.!(val).values;

				var a = ft.nested, b = tt.nested, i = 0, rv = Array<Val>.new(values.length);
				while (a != null) {
					if (b == null) return throw;
					var v = values[i];
					var r = doCast0(a.head, b.head, v);
					if (!r.0) return throw;
					rv[i] = r.1;
					a = a.tail; b = b.tail; i++;
				}
				if (b == null) return (true, TupleVal.new(rv));
				return throw;
			}
			CLASS_CAST, VARIANT_CAST => {
				if (val == null) return ok;
				if (tt.open()) return throw;
				if (!Record.?(val) || !TypeSystem.isSubtype(Record.!(val).rtype, tt))
					return throw;
				return ok;
			}
			INT_VIEW_I => {
				return (true, doIntView(IntType.!(ft), IntType.!(tt), val));
			}
			INT_CAST_I => {
				var ift = IntType.!(ft), itt = IntType.!(tt);
				if (!doIntQuery(ift, itt, val)) return throw;
				return (true, doIntView(ift, itt, val));
			}
			FLOAT_CAST_I => {
				if (val == null) return ok;
				var t = fround_i(V3.isDouble(tt), IntType.!(ft), val);
				if (t.1) return throw;
				return (true, t.0);
			}
			INT_CAST_F => {
				if (val == null) return ok;
				var d: double = if(V3.isDouble(ft),
					double.view(Float64Val.!(val).bits),
					float.view(Float32Val.!(val).bits));
				var t = convert_d(IntType.!(tt), d);
				if (t.1 || t.2) return throw;
				return (true, t.0);
			}
			FLOAT_PROMOTE_I => {
				if (val == null) return ok;
				var l = Long.unboxSU(val, V3.isSigned(ft));
				if (V3.isDouble(tt)) return (true, boxd((double.!(l))));
				else return (true, boxf((float.!(l))));
			}
			FLOAT_PROMOTE_F => {
				if (val == null) return ok;
				var d = double.!(float.view(Float32Val.!(val).bits));
				return (true, boxd((d)));
			}
			FLOAT_CAST_D => {
				if (val == null) return ok;
				var d = double.view(Float64Val.!(val).bits);
				if (float.?(d)) return (true, boxf((float.!(d))));
				return throw;
			}
			ENUM_TO_SET => {
				var it = EnumSetType.!(tt).repType;
				var tag = Int.unbox(val);
				var val: Val = if (it.width > 32, Long.box(1L << u6.view(tag)), Int.box(1 << u5.view(tag)));
				return (true, val);
			}
			RANGE_PROMOTE_ARRAY => {
				if (val == null) return (true, val);
				var r = Record.!(val);
				return (true, ArrayRangeVal.new(r, 0, r.values.length));
			}
		}
	}
	def doQuery0(ft: Type, tt: Type, val: Val) -> bool {
		var nquery = TypeSystem.newTypeQuery(ft, tt);
		if (nquery == TypeQuery.UNKNOWN_QUERY) return false;
		return doQuery(nquery, ft, tt, val);
	}
	def doQuery(query: TypeQuery, ft: Type, tt: Type, val: Val) -> bool {
		match (query) {
			TRUE => return true;
			FALSE => return false;
			UNKNOWN_QUERY => return doQuery0(ft, tt, val);
			TRUE_IF_NOT_NULL => return val != null;
			TUPLE_QUERY => {
				var values: Array<Val>;
				if (val == null) values = Array<Val>.new(Lists.length(ft.nested));
				else if (!TupleVal.?(val)) return false;
				else values = TupleVal.!(val).values;

				var a = ft.nested, b = tt.nested, i = 0;
				while (a != null) {
					if (b == null) return false;
					if (!doQuery0(a.head, b.head, values[i])) return false;
					a = a.tail; b = b.tail; i++;
				}
				return b == null;
			}
			CLASS_QUERY, VARIANT_QUERY => {
				if (val == null) return false;
				if (tt.open()) return false;
				return Record.?(val) && TypeSystem.isSubtype(Record.!(val).rtype, tt);
			}
			FLOAT_QUERY_I => {
				var t = fround_i(V3.isDouble(tt), IntType.!(ft), val);
				return !t.1;
			}
			FLOAT_QUERY_D => {
				if (val == null) return true;
				return float.?(double.view(Float64Val.!(val).bits));
			}
			INT_QUERY_F => {
				var d: double = if(V3.isDouble(ft),
					double.view(Float64Val.!(val).bits),
					float.view(Float32Val.!(val).bits));
				var t = convert_d(IntType.!(tt), d);
				return !(t.1 | t.2);
			}
			INT_QUERY_I => {
				return doIntQuery(IntType.!(ft), IntType.!(tt), val);
			}
		}
	}
	def doIntPromote(t1: Type, t2: Type, val: Val) -> Val {
		if (val == null) return val;
		if (t1 == t2) return val;
		var i1 = IntType.!(t1), i2 = IntType.!(t2);
		if (TypeSystem.isIntToLong(i1, i2)) {
			var v = Box<int>.!(val).val;
			return Box<long>.new(if(i1.signed, v, u32.view(v)));
		}
		return val;
	}
	def doIntView(t1: IntType, t2: IntType, val: Val) -> Val {
		if (val == null) return val;
		if (t1 == t2) return val;
		var i1 = IntType.!(t1), i2 = IntType.!(t2);
		if (!TypeSystem.isIntToLong(i1, i2) && TypeSystem.isIntPromotable(i1, i2)) return val;
		if (t2.width <= 32) {
			if (Box<int>.?(val)) {
				var v = Box<int>.!(val).val, r = doIntTrunc32(t2, v);
				return if(r == v, val, Box.new(r));
			} else {
				var v = int.view(Box<long>.!(val).val), r = doIntTrunc32(t2, v);
				return Box.new(r);
			}
		}
		return Box.new(doIntTrunc64(t2, Long.unboxSU(val, t1.signed)));
	}
	def doIntTrunc32(t: IntType, v: int) -> int {
		return if(t.signed, (v << t.ishift) >> t.ishift, (v << t.ishift) >>> t.ishift);
	}
	def doIntTrunc64(t: IntType, v: long) -> long {
		return if(t.signed, (v << t.lshift) >> t.lshift, (v << t.lshift) >>> t.lshift);
	}
	def doIntTruncU32(t: IntType, v: int) -> int {
		return (v << t.ishift) >>> t.ishift;
	}
	def doIntTruncU64(t: IntType, v: long) -> long {
		return (v << t.lshift) >>> t.lshift;
	}
	def doIntQuery(ift: IntType, itt: IntType, v: Val) -> bool {
		var l = Long.unboxSU(v, ift.signed);
		if (ift.signed) {
			if (itt.signed) {
				return doIntTrunc64(itt, l) == l; // sign match
			}
			if (l < 0) return false;
			return doIntTruncU64(itt, l) == l;
		} else {
			if (itt.signed) {
				var tl = doIntTrunc64(itt, l);
				return tl == l && tl >= 0;
			}
			return doIntTruncU64(itt, l) == l; // sign match
		}
	}
}

// Accessor to the dynamic environment for operator evaluation, including value arguments
// type arguments, as well as the ability to perform tail calls and throw exceptions.
class Arguments {
	var vals_storage = Array<Val>.new(16);
	var vals: Range<Val>;

	def growVals(size: int) -> Array<Val> {
		var v = vals_storage;
		if (v.length < size) vals_storage = v = Array.new(v.length + size + 16);
		vals = v[0 ... size];
		return v;
	}
	def getTypeArg(i: int) -> Type;
	def getTypeArgs() -> Array<Type>;
	def getProgram() -> Program;
	def tailCall(spec: IrSpec, recvr: Val, startArg: int, endArg: int) -> Result;
	def throw(ex: string, msg: string) -> Exception;

	// Convenience accessors that perform casts on arguments
	def it(i: int) -> IntType { return IntType.!(getTypeArg(i)); }
	def z(i: int) -> bool { return Bool.unbox(vals[i]); }
	def r(i: int) -> Record { return Record.!(vals[i]); }
	def ra(i: int) -> ArrayRangeVal { return ArrayRangeVal.!(vals[i]); }
	def ref(i: int) -> ByteArrayOffset { return ByteArrayOffset.!(vals[i]); }
	def range(i: int) -> (Record, int, int) {
		match (vals[i]) {
			null => {
				throw(V3Exception.NullCheck, null);
				return (null, 0, 0);
			}
			x: ArrayRangeVal => {
				return (x.array, x.start, x.length);
			}
			x: Record => {
				return (x, this.i(i + 1), this.i(i + 2));
			}
		}
		return (null, 0, 0);
	}
	def i(i: int) -> int { return V3.unboxI32(vals[i]); }
	def u(i: int) -> u32 { return u32.view(V3.unboxI32(vals[i])); }
	def l(i: int) -> long { return Long.unboxSU(vals[i], true); }
	def q(i: int) -> u64 { return u64.view(Long.unboxSU(vals[i], false)); }
	def b(i: int) -> byte { return Byte.unbox(vals[i]); }
	def s(i: int) -> string { return Byte.unboxString(vals[i]); }
	def f(i: int) -> float {
		var x = vals[i];
		return if(Float32Val.?(x), float.view(Float32Val.!(x).bits));
	}
	def d(i: int) -> double {
		var x = vals[i];
		return if(Float64Val.?(x), double.view(Float64Val.!(x).bits));
	}
	def addr(i: int) -> Addr {
		var p = vals[i];
		if (p == null) return NULL_PTR;
		return Addr.!(p);
	}
	def do_dd_d(func: (double, double) -> double) -> Val {
		return boxd((func(d(0), d(1))));
	}
	def do_ff_f(func: (float, float) -> float) -> Val {
		return boxf((func(f(0), f(1))));
	}
	def do_dd_z(func: (double, double) -> bool) -> Val {
		return Bool.box(func(d(0), d(1)));
	}
	def do_ff_z(func: (float, float) -> bool) -> Val {
		return Bool.box(func(f(0), f(1)));
	}
	def do_d_d(func: double -> double) -> Val {
		return boxd((func(d(0))));
	}
	def do_f_f(func: float -> float) -> Val {
		return boxf((func(f(0))));
	}
}

def NULL_PTR = Addr.new(null, null, 0).setAbsolute(0);

def evalIntBinop(args: Arguments, op32: (int, int) -> int, op64: (long, long) -> long) -> Result  {
	if (PackedRef.?(args.vals[0])) {
		var pr = PackedRef.!(args.vals[0]);
		if (Box<long>.?(args.vals[1])) return PackedRef.new(pr.r, Long.box(op64(Long.unboxSU(pr.m, false), args.l(1))));
		else return PackedRef.new(pr.r, Int.box(op32(Int.unbox(pr.m), args.i(1))));
	} else if (PackedRef.?(args.vals[1])) {
		var pr = PackedRef.!(args.vals[1]);
		if (Box<long>.?(args.vals[0])) return PackedRef.new(pr.r, Long.box(op64(Long.unboxSU(pr.m, false), args.l(0))));
		else return PackedRef.new(pr.r, Int.box(op32(Int.unbox(pr.m), args.i(0))));
	}

	var it = IntType.!(args.getTypeArg(0));
	match (it.rank) {
		SUBI32, SUBU32 => return Int.box(it.viewi(op32(args.i(0), args.i(1))));
		I32, U32 => return Int.box(op32(args.i(0), args.i(1)));
		SUBI64, SUBU64 => return Long.box(it.viewl(op64(args.l(0), args.l(1))));
		I64, U64 => return Long.box(op64(args.l(0), args.l(1)));
	}
}

def evalIntShift(args: Arguments, op32: (int, byte) -> int, op64: (long, byte) -> long) -> Result  {
	var it = IntType.!(args.getTypeArg(0));
	var shiftor = byte.view(args.i(1));
	match (it.rank) {
		SUBI32, SUBU32 => return Int.box(it.viewi(op32(args.i(0), shiftor)));
		I32, U32 => return Int.box(op32(args.i(0), shiftor));
		SUBI64, SUBU64 => return Long.box(it.viewl(op64(args.l(0), shiftor)));
		I64, U64 => return Long.box(op64(args.l(0), shiftor));
	}
}

def evalOp(op: Operator, args: Arguments) -> Result {
	match (op.opcode) {
//----------------------------------------------------------------------------
		BoolEq => return Bool.box(args.z(0) == args.z(1));
		BoolAnd => return Bool.box(args.z(0) && args.z(1));
		BoolOr => return Bool.box(args.z(0) || args.z(1));
		BoolNot => return Bool.box(!args.z(0));
//----------------------------------------------------------------------------
		OverloadedEq, IntEq, VariantEq, RefEq => return Bool.box(Values.equal(args.vals[0], args.vals[1]));
//----------------------------------------------------------------------------
		IntAdd => return evalIntBinop(args, int.+, long.+);
		IntSub => return evalIntBinop(args, int.-, long.-);
		IntMul => return evalIntBinop(args, int.*, long.*);
		IntDiv => {
			var it = IntType.!(args.getTypeArg(0));
			var d = args.vals[1];
			match (d) {
				null => return args.throw(V3Exception.DivideByZero, null);
				x: Box<int> => if (x.val == 0) return args.throw(V3Exception.DivideByZero, null);
				x: Box<long> => if (x.val == 0) return args.throw(V3Exception.DivideByZero, null);
			}
			match (it.rank) {
				SUBI32		=> return Int.box(it.viewi(args.i(0) / args.i(1)));
				I32		=> return Int.box(args.i(0) / args.i(1));
				SUBU32, U32	=> return Int.box(int.view(args.u(0) / args.u(1)));
				SUBI64		=> return Long.box(it.viewl(args.l(0) / args.l(1)));
				I64		=> return Long.box(args.l(0) / args.l(1));
				SUBU64, U64	=> return Long.box(long.view(args.q(0) / args.q(1)));
			}
		}
		IntMod => {
			var it = IntType.!(args.getTypeArg(0));
			var d = args.vals[1];
			match (d) {
				null => return args.throw(V3Exception.DivideByZero, null);
				x: Box<int> => if (x.val == 0) return args.throw(V3Exception.DivideByZero, null);
				x: Box<long> => if (x.val == 0) return args.throw(V3Exception.DivideByZero, null);
			}
			match (it.rank) {
				SUBI32, I32 => return Int.box(args.i(0) % args.i(1));
				SUBU32, U32 => return Int.box(int.view(args.u(0) % args.u(1)));
				SUBI64, I64 => return Long.box(args.l(0) % args.l(1));
				SUBU64, U64 => return Long.box(long.view(args.q(0) % args.q(1)));
			}
		}
		IntAnd => return evalIntBinop(args, int.&, long.&);
		IntOr => return evalIntBinop(args,  int.|, long.|);
		IntXor => return evalIntBinop(args, int.^, long.^);
		IntShl => return evalIntShift(args, int.<<, long.<<);
		IntSar => return evalIntShift(args, int.>>, long.>>);
		IntShr => {
			var it = IntType.!(args.getTypeArg(0));
			var shiftor = byte.view(args.i(1));
			match (it.rank) {
				SUBI32 => {
					var x = (args.i(0) << it.ishift) >>> it.ishift; // view as unsigned
					return Int.box(it.viewi(x >>> shiftor));
				}
				SUBU32, I32, U32 => return Int.box(args.i(0) >>> shiftor);
				SUBI64 => {
					var x = (args.l(0) << it.lshift) >>> it.lshift; // view as unsigned
					return Long.box(it.viewl(x >>> shiftor));
				}
				SUBU64, I64, U64 => return Long.box(args.l(0) >>> shiftor);
			}
		}
		IntLt => {
			var it = IntType.!(args.getTypeArg(0));
			match (it.rank) {
				SUBI32, I32 => return Bool.box(args.i(0) < args.i(1));
				SUBU32, U32 => return Bool.box(args.u(0) < args.u(1));
				SUBI64, I64 => return Bool.box(args.l(0) < args.l(1));
				SUBU64, U64 => return Bool.box(args.q(0) < args.q(1));
			}
		}
		IntLteq => {
			var it = IntType.!(args.getTypeArg(0));
			match (it.rank) {
				SUBI32, I32 => return Bool.box(args.i(0) <= args.i(1));
				SUBU32, U32 => return Bool.box(args.u(0) <= args.u(1));
				SUBI64, I64 => return Bool.box(args.l(0) <= args.l(1));
				SUBU64, U64 => return Bool.box(args.q(0) <= args.q(1));
			}
		}
//----------------------------------------------------------------------------
		FloatAdd(isDouble) => return if(isDouble, args.do_dd_d(double.+), args.do_ff_f(float.+));
		FloatSub(isDouble) => return if(isDouble, args.do_dd_d(double.-), args.do_ff_f(float.-));
		FloatMul(isDouble) => return if(isDouble, args.do_dd_d(double.*), args.do_ff_f(float.*));
		FloatDiv(isDouble) => return if(isDouble, args.do_dd_d(double./), args.do_ff_f(float./));
		FloatBitEq(isDouble) => {
			var x = args.vals[0], y = args.vals[1];
			if (isDouble) return Bool.box(Float64Val.!(x).bits == Float64Val.!(y).bits);
			else return Bool.box(Float32Val.!(x).bits == Float32Val.!(y).bits);
		}
		FloatEq(isDouble) => return if(isDouble, args.do_dd_z(double.==), args.do_ff_z(float.==));
		FloatNe(isDouble) => return if(isDouble, args.do_dd_z(double.!=), args.do_ff_z(float.!=));
		FloatLt(isDouble) => return if(isDouble, args.do_dd_z(double.<), args.do_ff_z(float.<));
		FloatLteq(isDouble) => return if(isDouble, args.do_dd_z(double.<=), args.do_ff_z(float.<=));
		FloatAbs(isDouble) => return if(isDouble, args.do_d_d(double.abs), args.do_f_f(float.abs));
		FloatCeil(isDouble) => return if(isDouble, args.do_d_d(double.ceil), args.do_f_f(float.ceil));
		FloatFloor(isDouble) => return if(isDouble, args.do_d_d(double.floor), args.do_f_f(float.floor));
		FloatSqrt(isDouble) => return if(isDouble, args.do_d_d(double.sqrt), args.do_f_f(float.sqrt));
//----------------------------------------------------------------------------
		IntCastF(isDouble) => {
			var d: double = if(isDouble, args.d(0), args.f(0));
			var t = convert_d(args.it(1), d);
			if (t.1 || t.2) return args.throw(V3Exception.TypeCheck, null);
			return t.0;
		}
		IntQueryF(isDouble) => {
			var d: double = if(isDouble, args.d(0), args.f(0));
			var t = convert_d(args.it(1), d);
			return Bool.box(!(t.1 | t.2));
		}
		IntViewI => {
			var val = args.vals[0], ift = args.it(0), itt = args.it(1);
			return Eval.doIntView(ift, itt, val);
		}
		IntViewF(isDouble) => {
			var v = args.vals[0];
			if (v == null) return Values.BOTTOM;
			if (isDouble) return Long.box(long.view(Float64Val.!(v).bits));
			else return Int.box(int.view(Float32Val.!(v).bits));
		}
		IntTruncF(isDouble) => {
			var d: double = if(isDouble, args.d(0), args.f(0));
			var t = convert_d(args.it(1), d);
			return t.0;
		}
		FloatCastI(isDouble) => {
			var itt = args.it(0);
			var t = fround_i(isDouble, itt, args.vals[0]);
			if (t.1) return args.throw(V3Exception.TypeCheck, null);
			return t.0;
		}
		FloatCastD => {
			var d = args.d(0);
			if (float.?(d)) return boxf((float.!(d)));
			return args.throw(V3Exception.TypeCheck, null);
		}
		FloatQueryI(isDouble) => {
			var itt = args.it(0);
			var t = fround_i(isDouble, itt, args.vals[0]);
			return Bool.box(!t.1);
		}
		FloatQueryD => {
			return Bool.box(float.?(args.d(0)));
		}
		FloatPromoteI(isDouble) => {
			var a = args.vals[0];
			if (a == null) return Values.BOTTOM;
			var l = Long.unboxSU(args.vals[0], V3.isSigned(args.getTypeArg(0)));
			return if(isDouble, boxd((double.!(l))), boxf((float.!(l))));
		}
		FloatPromoteF => {
			return boxd((double.!(args.f(0))));
		}
		FloatViewI(isDouble) => {
			var v = args.vals[0];
			if (v == null) return Values.BOTTOM;
			if (isDouble) {
				return Float64Val.new(u64.view(Long.unboxSU(v, false)));
			} else {
				return Float32Val.new(u32.view(V3.unboxI32(v)));
			}
		}
		FloatRoundI(isDouble) => {
			var itt = args.it(0);
			var t = fround_i(isDouble, itt, args.vals[0]);
			return t.0;
		}
		FloatRound(isDouble) => {
			return if(isDouble, args.do_d_d(double.round), args.do_f_f(float.round));
		}
		FloatRoundD => {
			return boxf((float.roundd(args.d(0))));
		}
//----------------------------------------------------------------------------
		TupleCreate(length) => {
			var vals = Array<Val>.new(length);
			for (i < vals.length) vals[i] = args.vals[i];
			return TupleVal.new(vals);
		}
		TupleGetElem(index) => {
			var tuple = args.vals[0];
			if (tuple == Values.BOTTOM) return Values.BOTTOM;
			return (TupleVal.!(tuple)).values[index];
		}
//----------------------------------------------------------------------------
		RefViewIntRep => {
			var ref = args.vals[0];
			match (args.getTypeArg(1)) {
				x: IntRepType => {
					if (x.scalar.size == 64) return PackedRef.new(ref, Long.box(0l));
					else return PackedRef.new(ref, Int.box(0));
				}
				_ => ;
			}
		}
		IntRepViewRef => {
			var pr = PackedRef.!(args.vals[0]);
			return pr.r;
		}
//----------------------------------------------------------------------------
		ArrayAlloc => {
			var length = args.i(0);
			if (length < 0) return args.throw(V3Exception.LengthCheck, null);
			var arrayType = args.getTypeArg(0);
			return args.getProgram().newRecord(arrayType, length);
		}
		ArrayInit(length) => {
			var array = args.getProgram().newRecord(args.getTypeArg(0), length);
			for (i < length) array.values[i] = args.vals[i];
			return array;
		}
		ArrayTupleInit(elems, length) => {
			var array = args.getProgram().newRecord(args.getTypeArg(0), length);
			var p = 0;
			for (i < length) {
				var vals = Array<Val>.new(elems);
				for (j < elems) vals[j] = args.vals[p++];
				array.values[i] = TupleVal.new(vals);
			}
			return array;
		}
		ArrayGetElem => {
			var array = args.r(0), index = args.i(1);
			if (array == null) return args.throw(V3Exception.NullCheck, null);
			if (u32.view(index) >= u32.view(array.values.length)) return args.throw(V3Exception.BoundsCheck, null);
			return array.values[index];
		}
		ArraySetElem => {
			var array = args.r(0), index = args.i(1);
			if (array == null) return args.throw(V3Exception.NullCheck, null);
			if (u32.view(index) >= u32.view(array.values.length)) return args.throw(V3Exception.BoundsCheck, null);
			var val = args.vals[2];
			array.values[index] = val;
			return val;
		}
		ArrayGetElemElem(elem) => {
			var array = args.r(0), index = args.i(1);
			if (array == null) return args.throw(V3Exception.NullCheck, null);
			if (u32.view(index) >= u32.view(array.values.length)) return args.throw(V3Exception.BoundsCheck, null);
			var val = array.values[index];
			if (val == null) return null;
			return TupleVal.!(val).values[elem];
		}
		ArraySetElemElem(elem) => {
			var array = args.r(0), index = args.i(1);
			if (array == null) return args.throw(V3Exception.NullCheck, null);
			if (u32.view(index) >= u32.view(array.values.length)) return args.throw(V3Exception.BoundsCheck, null);
			var tval = TupleVal.!(array.values[index]);
			var val = args.vals[2];
			if (tval == null) {
				var len = Tuple.length(V3Array.elementType(args.getTypeArg(0)));
				array.values[index] = tval = TupleVal.new(Array<Val>.new(len));
			}
			tval.values[elem] = val;
			return val;
		}
		ArrayGetLength => {
			var array = args.r(0);
			if (array == null) return args.throw(V3Exception.NullCheck, null);
			return Int.box(array.values.length);
		}
//----------------------------------------------------------------------------
		RangeFromTo => {
			// TODO: handle long integers in SSA generation
			var range = args.ra(0), start = args.l(1), end = args.l(2);
			if (range == null) {
				var rlength = 0uL;
				if (u64.view(start) > rlength) return args.throw(V3Exception.BoundsCheck, null);
				if (u64.view(end) < start) return args.throw(V3Exception.LengthCheck, null);
				if (u64.view(end) > rlength) return args.throw(V3Exception.BoundsCheck, null);
				return null;
			} else {
				var rlength = u64.view(range.length);
				if (u64.view(start) > rlength) return args.throw(V3Exception.BoundsCheck, null);
				if (u64.view(end) < start) return args.throw(V3Exception.LengthCheck, null);
				if (u64.view(end) > rlength) return args.throw(V3Exception.BoundsCheck, null);
				return ArrayRangeVal.new(range.array, int.!(range.start + start), int.!(end - start)); // TODO: dangerous
			}
		}
		RangeFromPlus => {
			// TODO: handle long integers in SSA generation
			var range = args.ra(0), start = args.l(1), length = args.l(2);
			if (range == null) {
				var rlength = 0uL;
				if (u64.view(start) > rlength) return args.throw(V3Exception.BoundsCheck, null);
				if (u64.view(length) > rlength) return args.throw(V3Exception.LengthCheck, null);
				var end = start + length;
				if (u64.view(end) > rlength) return args.throw(V3Exception.BoundsCheck, null);
				return null;
			} else {
				var rlength = u64.view(range.length);
				if (u64.view(start) > rlength) return args.throw(V3Exception.BoundsCheck, null);
				if (u64.view(length) > rlength) return args.throw(V3Exception.LengthCheck, null);
				var end = start + length;
				if (u64.view(end) > rlength) return args.throw(V3Exception.BoundsCheck, null);
				return ArrayRangeVal.new(range.array, int.!(range.start + start), int.!(length)); // TODO: dangerous
			}
		}
		RangeGetElem => {
			var range = args.ra(0), index = args.i(1);
			if (range == null || range.array == null) return args.throw(V3Exception.BoundsCheck, null); // implies length == 0
			if (u32.view(index) >= u32.view(range.length)) return args.throw(V3Exception.BoundsCheck, null);
			return range.array.values[range.start + index];
		}
		RangeSetElem => {
			var range = args.ra(0), index = args.i(1);
			if (range == null || range.array == null) return args.throw(V3Exception.BoundsCheck, null); // implies length == 0
			if (u32.view(index) >= u32.view(range.length)) return args.throw(V3Exception.BoundsCheck, null);
			var val = args.vals[2];
			range.array.values[range.start + index] = val;
			return val;
		}
		RangeGetLength => {
			var val = args.vals[0];
			if (val == null) return Int.ZERO;
			return Int.box(ArrayRangeVal.!(val).length);
		}
		RangeStartPlusIndex => {
			var index = args.i(1);
			match (args.vals[0]) {
				null => return PointerRangeStart.new(NULL_PTR.add(index));
				x: ArrayRangeStart => return ArrayRangeStart.new(index + x.start, x.arrayType);
				x: PointerRangeStart => return PointerRangeStart.new(x.start.add(index));
			}
		}
		NormRangeGetElem => {
			var array = args.r(0), start = args.vals[1], index = args.i(2);
			if (array == null) return args.throw(V3Exception.NullCheck, null); // TODO: should not happen because prior bounds check
			if (start != null) index += ArrayRangeStart.!(start).start;
			return array.values[index];
		}
		NormRangeGetElemElem(elem) => {
			var array = args.r(0), start = args.vals[1], index = args.i(2);
			if (array == null) return args.throw(V3Exception.NullCheck, null); // TODO: should not happen because prior bounds check
			if (start != null) index += ArrayRangeStart.!(start).start;
			var tval = TupleVal.!(array.values[index]);
			if (tval == null) return null;
			return tval.values[elem];
		}
		NormRangeSetElem => {
			var array = args.r(0), start = args.vals[1], index = args.i(2);
			if (array == null) return args.throw(V3Exception.NullCheck, null); // TODO: should not happen because prior bounds check
			if (start != null) index += ArrayRangeStart.!(start).start;
			return array.values[index] = args.vals[3];
		}
		NormRangeSetElemElem(elem) => {
			var array = args.r(0), start = args.vals[1], index = args.i(2);
			if (array == null) return args.throw(V3Exception.NullCheck, null); // TODO: should not happen because prior bounds check
			if (start != null) index += ArrayRangeStart.!(start).start;
			var tval = TupleVal.!(array.values[index]);
			if (tval == null) {
				var len = Tuple.length(V3Array.elementType(args.getTypeArg(0)));
				array.values[index] = tval = TupleVal.new(Array<Val>.new(len));
			}
			return tval.values[elem] = args.vals[3]; // TODO: in-place mutation of tuple element
		}
//----------------------------------------------------------------------------
		Init(method) => {
			var index = VstNew.!(method.source).initIndex;
			var prog = args.getProgram();
			if (prog.initState[index] == InitState.Uninit) {
				var ctype = method.receiver;
				var receiver = Values.BOTTOM;
				if (ctype.typeCon.kind == Kind.COMPONENT) {
					receiver = prog.getComponentRecord(V3.componentDecl(ctype));
				}
				prog.initState[index] = InitState.Running;
				var spec = IrSpec.new(ctype, [ctype], method);
				return args.tailCall(spec, receiver, 0, 0);
			}
			return Values.BOTTOM;
		}
		ComponentGetField(field) => {
			var decl = V3.componentDecl(args.getTypeArg(0));
			var object = args.getProgram().getComponentRecord(decl);
			return object.values[field.index];
		}
		ComponentSetField(field) => {
			var decl = V3.componentDecl(args.getTypeArg(0));
			var object = args.getProgram().getComponentRecord(decl);
			object.values[field.index] = args.vals[1];
			return Values.BOTTOM;
		}
//----------------------------------------------------------------------------
		ClassAlloc(method) => {
			if (method != null) {
				var spec = getIrSpec(method, args), prog = args.getProgram();
				var record = prog.newRecord(spec.receiver, prog.ir.numFields(spec.receiver));
				return args.tailCall(spec, record, 0, args.vals.length);
			} else {
				var classType = args.getTypeArg(0), prog = args.getProgram();
				var record = prog.newRecord(classType, prog.ir.numFields(classType));
				return record;
			}
		}
		ClassGetField(field) => {
			var object = args.r(0);
			if (object == null) return args.throw(V3Exception.NullCheck, null);
			return object.values[field.index];
		}
		ClassInitField(field) => {
			var object = args.r(0);
			if (object == null) return args.throw(V3Exception.NullCheck, null);
			var val = args.vals[1];
			object.values[field.index] = val;
			return Values.BOTTOM;
		}
		ClassSetField(field) => {
			var object = args.r(0);
			if (object == null) return args.throw(V3Exception.NullCheck, null);
			var val = args.vals[1];
			object.values[field.index] = val;
			return Values.BOTTOM;
		}
//----------------------------------------------------------------------------
		ClassGetMethod(method) => {
			var object = args.r(0);
			if (object == null) return args.throw(V3Exception.NullCheck, null);
			var spec = getIrSpec(method, args);
			return Closure.new(object, spec);
		}
		ClassGetVirtual(method) => {
			var object = getRecordReceiver(args);
			var spec = lookupClassVirtual(args, object, method);
			if (spec == null) return Values.BOTTOM;
			return Closure.new(object, spec);
		}
		ClassGetSelector(selector) => {
			var object = getRecordReceiver(args);
			var spec = lookupClassVirtual(args, object, selector);
			if (spec == null) return Values.BOTTOM;
			return FuncVal.new(spec);
		}
//----------------------------------------------------------------------------
		VariantGetTag => {
			var val = args.vals[0];
			return if(Record.?(val), Int.box(V3.getVariantTag(Record.!(val).rtype)));
		}
		VariantGetField(field) => {
			var object = args.r(0);
			return if(object != null, object.values[field.index]);
		}
		VariantReplaceNull => {
			return args.vals[0];
		}
		VariantGetMethod(method) => {
			var object = args.r(0);
			var spec = getIrSpec(method, args);
			return Closure.new(object, spec);
		}
		VariantGetVirtual(method) => {
			var object = getRecordReceiver(args);
			var spec = lookupVariantVirtual(args, object, method);
			return Closure.new(object, spec);
		}
		VariantGetSelector(selector) => {
			var object = getRecordReceiver(args);
			var spec = lookupVariantVirtual(args, object, selector);
			return FuncVal.new(spec);
		}
//----------------------------------------------------------------------------
		NullCheck => {
			var object = args.r(0);
			if (object == null) return args.throw(V3Exception.NullCheck, null);
			return Values.BOTTOM;
		}
		BoundsCheck => {
			var array = args.r(0), index = args.i(1);
			if (array == null) return args.throw(V3Exception.NullCheck, null);
			if (u32.view(index) >= u32.view(array.values.length)) return args.throw(V3Exception.BoundsCheck, null);
			return Values.BOTTOM;
		}
		ConditionalThrow(exception) => {
			if (Bool.unbox(args.vals[0])) return args.throw(exception, null);
			return Values.BOTTOM;
		}
//----------------------------------------------------------------------------
		TypeCast(cast) => {
			var val = args.vals[0], r = Eval.doCast(cast, args.getTypeArg(0), args.getTypeArg(1), val);
			if (r.0) return r.1;
			return args.throw(V3Exception.TypeCheck, null);
		}
		TypeQuery(query) => {
			var val = args.vals[0], r = Eval.doQuery(query, args.getTypeArg(0), args.getTypeArg(1), val);
			return Bool.box(r);
		}
		TypeSubsume => {
			// XXX: factor out nop subsumes from non-throwing conversions
			var val = args.vals[0], r = Eval.doCast0(args.getTypeArg(0), args.getTypeArg(1), val);
			if (r.0) return r.1;
			return args.throw(V3Exception.InternalError, "subsume should never fail");
		}
//----------------------------------------------------------------------------
		CallMethod(method) => {
			var object = getReceiver(args);
			var spec = getIrSpec(method, args);
			return args.tailCall(spec, object, 1, args.vals.length);
		}
		CallClosure => {
			var del = Closure.!(args.vals[0]);
			if (del == null) return args.throw(V3Exception.NullCheck, null);
			return args.tailCall(del.memberRef, del.val, 1, args.vals.length);
		}
		CallFunction => {
			var func = FuncVal.!(args.vals[0]);
			var recvr = args.vals[1];
			if (func == null) return args.throw(V3Exception.NullCheck, null);
			return args.tailCall(func.memberRef, recvr, 2, args.vals.length);
		}
		CallClassMethod(method) => {
			var object = getRecordReceiver(args);
			if (object == null) return args.throw(V3Exception.NullCheck, null);
			var spec = getIrSpec(method, args);
			return args.tailCall(spec, object, 1, args.vals.length);
		}
		CallClassVirtual(method) => {
			var object = getRecordReceiver(args);
			var spec = lookupClassVirtual(args, object, method);
			if (spec == null) return Values.BOTTOM;
			return args.tailCall(spec, object, 1, args.vals.length);
		}
		CallClassSelector(selector) => {
			var object = getRecordReceiver(args);
			var spec = lookupClassVirtual(args, object, selector);
			if (spec == null) return Values.BOTTOM;
			return args.tailCall(spec, object, 1, args.vals.length);
		}
		CallVariantVirtual(method) => {
			var object = getRecordReceiver(args);
			var spec = lookupVariantVirtual(args, object, method);
			return args.tailCall(spec, object, 1, args.vals.length);
		}
		CallVariantSelector(selector) => {
			var object = getRecordReceiver(args);
			var spec = lookupVariantVirtual(args, object, selector);
			return args.tailCall(spec, object, 1, args.vals.length);
		}
		CreateClosure(method) => {
			return Closure.new(args.vals[0], getIrSpec(method, args));
		}
//----------------------------------------------------------------------------
		RefLayoutAt => {
			var object = args.r(0);
			if (object == null) return args.throw(V3Exception.NullCheck, null);
			var val = args.i(1);
			var offset = u64.view(val), length = u64.view(object.values.length);
			if (u64.view(offset) > length) return args.throw(V3Exception.BoundsCheck, null);
			var t = RefType.!(args.getTypeArg(0));
			var size = u64.view(t.layoutDecl.byteSize);
			if ((offset + size) > length) return args.throw(V3Exception.BoundsCheck, null);
			return ByteArrayOffset.new(object, val);
		}
		RefLayoutOf => {
			var range = ArrayRangeVal.!(args.vals[0]);
			if (range == null || range.array == null) return args.throw(V3Exception.NullCheck, null);
			var t = RefType.!(args.getTypeArg(0));
			var size = u64.view(t.layoutDecl.byteSize);
			if (size > range.length) return args.throw(V3Exception.BoundsCheck, null);
			return ByteArrayOffset.new(range.array, range.start);
		}
		RefLayoutIn(offset) => {
			var ref = args.ref(0);
			if (ref == null) return ByteArrayOffset.new(null, offset);
			return ByteArrayOffset.new(ref.array, ref.offset + offset);
		}
		RefLayoutGetField(offset) => {
			var ref = args.ref(0);
			return doRefLayoutGetField(args, args.getTypeArg(1), ref, offset);
		}
		RefLayoutSetField(offset) => {
			var ref = args.ref(0);
			return doRefLayoutSetField(args, args.getTypeArg(1), ref, offset, args.vals[1]);
		}
		RefLayoutAtRepeatedField(offset, scale, max) => {
			var ref = args.ref(0);
			var index = args.i(1);
			if (u32.view(index) >= u32.view(max)) return args.throw(V3Exception.BoundsCheck, null);
			var noffset = offset + scale * index;
			if (ref == null) return ByteArrayOffset.new(null, noffset);
			return ByteArrayOffset.new(ref.array, ref.offset + noffset);
		}
		RefLayoutGetRepeatedField(offset, scale, max) => {
			var ref = args.ref(0);
			var index = args.i(1);
			if (u32.view(index) >= u32.view(max)) return args.throw(V3Exception.BoundsCheck, null);
			return doRefLayoutGetField(args, args.getTypeArg(1), ref, offset + scale * index);
		}
		RefLayoutSetRepeatedField(offset, scale, max) => {
			var ref = args.ref(0);
			var index = args.i(1);
			if (u32.view(index) >= u32.view(max)) return args.throw(V3Exception.BoundsCheck, null);
			return doRefLayoutSetField(args, args.getTypeArg(1), ref, offset + scale * index, args.vals[2]);
		}
		ByteArrayGetField(offset) => {
			var array = args.r(0);
			var i_offset = if(ArrayRangeStart.?(args.vals[1]), ArrayRangeStart.!(args.vals[1]).start, args.i(1));
			// XXX: Refactor so no intermediate ByteArrayOffset object needed
			return doRefLayoutGetField(args, args.getTypeArg(0), ByteArrayOffset.new(array, offset), i_offset);
		}
		ByteArraySetField(offset) => {
			var array = args.r(0);
			var i_offset = if(ArrayRangeStart.?(args.vals[1]), ArrayRangeStart.!(args.vals[1]).start, args.i(1));
			// XXX: Refactor so no intermediate ByteArrayOffset object needed
			return doRefLayoutSetField(args, args.getTypeArg(0), ByteArrayOffset.new(array, offset), i_offset, args.vals[2]);
		}

//----------------------------------------------------------------------------
		PtrAdd => {
			var p = args.addr(0), off = args.i(1);
			if (Addr.?(p)) return Addr.!(p).add(off);
			return args.throw(V3Exception.InternalError, "not a pointer");
		}
		PtrSub => {
			var p = args.addr(0), q = args.addr(1);
			if (p.base == q.base) return Int.box(p.offset - q.offset);
			if (p.base == q) return Int.box(p.offset);
			return args.throw(V3Exception.InternalError, "unfoldable pointer subtraction");
		}
//----------------------------------------------------------------------------
		SystemCall(syscall) => {
			var prog = args.getProgram();
			var sys = prog.system;
			if (sys == null) prog.system = sys = SystemCallState.new();
			return syscall.eval(sys, args);
		}
		_ => ;
	}
	return args.throw("EvalUnimplemented", op.opcode.name);
}

def doRefLayoutGetField(args: Arguments, fieldType: Type, ref: ByteArrayOffset, offset: int) -> Result {
	if (ref == null || ref.array == null) return args.throw(V3Exception.NullCheck, null);
	match (fieldType) {
		x: BoolType => {
			var v = ref.read(false, offset, 1);
			return Bool.box((v & 1) != 0);
		}
		x: IntType => {
			var v = ref.read(/*TODO:bigEndian=*/false, offset, x.size);
			match (x.rank) {
				SUBI32 =>	return Int.box(int.view(v) << x.ishift >> x.ishift);
				SUBU32 =>	return Int.box(int.view(v) << x.ishift >>> x.ishift);
				I32, U32 =>	return Int.box(int.view(v));
				SUBI64 =>	return Long.box(long.view(v) << x.lshift >> x.lshift);
				SUBU64 =>	return Long.box(long.view(v) << x.lshift >>> x.lshift);
				I64, U64 =>	return Long.box(long.view(v));
			}
		}
		x: EnumType => {
			var v = ref.read(false, offset, x.packedByteSize());
			if (v >= x.enumDecl.cases.length) v = 0; // out-of-bounds tag => 0
			return Int.box(int.view(v)); // TODO: long enum vals?
		}
		x: FloatType => {
			var v = ref.read(false, offset, x.byteSize());
			if (x.is64) return Float64Val.new(v);
			else return Float32Val.new(u32.view(v));
		}
		_ => return args.throw("EvalException", Strings.format1("invalid RefLayoutField type %q", fieldType.render));
	}
}
def doRefLayoutSetField(args: Arguments, fieldType: Type, ref: ByteArrayOffset, offset: int, val: Val) -> Result {
	if (ref == null || ref.array == null) return args.throw(V3Exception.NullCheck, null);
	var size = 0, bits: u64 = 0, signed = false;
	match (fieldType) {
		x: BoolType => {
			size = 1;
		}
		x: IntType => {
			size = x.packedByteSize();
			signed = x.signed;
		}
		x: EnumType => {
			size = x.packedByteSize();
		}
		x: FloatType => {
			size = x.byteSize();
		}
		_ => return args.throw("EvalException", Strings.format1("invalid RefLayoutField type %q", fieldType.render));
	}
	match (val) {
		v: Box<bool> =>		bits = if(v.val, 1, 0);
		v: Box<int> =>		bits = u32.view(v.val);
		v: Box<long> =>		bits = u64.view(v.val);
		v: Float32Val =>	bits = v.bits;
		v: Float64Val =>	bits = v.bits;
	}
	ref.write(false, offset, size, bits);
	return Values.BOTTOM;
}

def convert_d(itt: IntType, d: double) -> (Val, /*saturated*/bool, /*rounded*/bool) {
	if (d >= Float.FLOAT64.maxplus1d(itt)) return (itt.max, true, false);
	if (d < Float.FLOAT64.mind(itt)) return (itt.min, true, false);
	match (itt.rank) {
		SUBI32, I32 => {
			var iv = int.truncd(d), v = Int.box(iv);
			if (u64.view(double.roundi(iv)) == u64.view(d)) return (v, false, false);
			return (v, false, true);
		}
		SUBU32, U32 => {
			var iv = u32.truncd(d), v = Int.box(int.view(iv));
			if (u64.view(double.roundi(iv)) == u64.view(d)) return (v, false, false);
			return (v, false, true);
		}
		SUBI64, I64 => {
			var iv = long.truncd(d), v = Long.box(iv);
			if (u64.view(double.roundi(iv)) == u64.view(d)) return (v, false, false);
			return (v, false, true);
		}
		SUBU64, U64 => {
			var iv = u64.truncd(d), v = Long.box(long.view(iv));
			if (u64.view(double.roundi(iv)) == u64.view(d)) return (v, false, false);
			return (v, false, true);
		}
	}
}

def boxf(f: float) -> Val { return Float32Val.new(u32.view(f)); }
def boxd(d: double) -> Val { return Float64Val.new(u64.view(d)); }
def fround_i(isDouble: bool, itt: IntType, v: Val) -> (Val, /*rounded*/bool) {
	match (itt.rank) {
		SUBI32, I32 => {
			var iv = Int.unbox(v);
			if (isDouble) { var d = double.roundi(iv); return (boxd(d), false); }
			else { var f = float.roundi(iv); return (boxf(f), iv == int.max || iv != int.truncf(f)); }
		}
		SUBU32, U32 => {
			var iv = u32.view(Int.unbox(v));
			if (isDouble) { var d = double.roundi(iv); return (boxd(d), false); }
			else { var f = float.roundi(iv); return (boxf(f), iv == u32.max || iv != u32.truncf(f)); }
		}
		SUBI64, I64 => {
			var iv = Long.unboxSU(v, true), ismax = iv == long.max;
			if (isDouble) { var d = double.roundi(iv); return (boxd(d), ismax || iv != long.truncd(d)); }
			else { var f = float.roundi(iv); return (boxf(f), ismax || iv != long.truncf(f)); }
		}
		SUBU64, U64 => {
			var iv = u64.view(Long.unboxSU(v, false)), ismax = iv == u64.max;
			if (isDouble) { var d = double.roundi(iv); return (boxd(d), ismax || iv != u64.truncd(d)); }
			else { var f = float.roundi(iv); return (boxf(f), ismax || iv != u64.truncf(f)); }
		}
	}
}

def lookupClassVirtual(args: Arguments, object: Record, member: IrMember) -> IrSpec {
	if (object != null) return args.getProgram().ir.resolveMethodImpl(object.rtype, getIrSpec(member, args));
	args.throw(V3Exception.NullCheck, null);
	return null;
}
def lookupVariantVirtual(args: Arguments, object: Record, member: IrMember) -> IrSpec {
	if (object != null) return args.getProgram().ir.resolveMethodImpl(object.rtype, getIrSpec(member, args));
	return args.getProgram().ir.resolveVariantDefaultMethodImpl(getIrSpec(member, args));
}
def getIrSpec(member: IrMember, args: Arguments) -> IrSpec {
	var ta = args.getTypeArgs();
	return IrSpec.new(ta[0], ta, member);
}
def getRecordReceiver(args: Arguments) -> Record {
	// TODO: this a giant hack for adapting arguments to void calls
	var r = args.vals[0];
	if (Record.?(r)) return Record.!(r);
	if (TupleVal.?(r)) return Record.!(TupleVal.!(r).values[0]);
	if (r != null) args.throw(V3Exception.InternalError, "expected record receiver for call");
	return null;
}
def getReceiver(args: Arguments) -> Val {
	// TODO: this a giant hack for adapting arguments to void calls
	var r = args.vals[0];
	if (TupleVal.?(r)) return TupleVal.!(r).values[0];
	return r;
}
