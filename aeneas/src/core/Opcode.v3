// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Represents the statically-known part of an operation, not including the types.
type Opcode {
	// Boolean operators
	case BoolEq;
	case BoolAnd;
	case BoolOr;
	case BoolNot;
	// Integer arithmetic and conversions
	case IntEq;
	case IntAdd;
	case IntSub;
	case IntMul;
	case IntDiv;
	case IntMod;
	case IntAnd;
	case IntOr;
	case IntXor;
	case IntShl;
	case IntSar;
	case IntShr;
	case IntLt;
	case IntLteq;
	case IntWide(op: Operator);
	// Floating point arithmetic
	case FloatAdd(isDouble: bool);
	case FloatSub(isDouble: bool);
	case FloatMul(isDouble: bool);
	case FloatDiv(isDouble: bool);
	case FloatBitEq(isDouble: bool);
	case FloatEq(isDouble: bool);
	case FloatNe(isDouble: bool);
	case FloatLt(isDouble: bool);
	case FloatLteq(isDouble: bool);
	case FloatAbs(isDouble: bool);
	case FloatCeil(isDouble: bool);
	case FloatFloor(isDouble: bool);
	case FloatSqrt(isDouble: bool);
	// Integer casts and conversions
	case IntCastF(isDouble: bool);
	case IntQueryF(isDouble: bool);
	case IntViewI;
	case IntViewF(isDouble: bool);
	case IntTruncF(isDouble: bool);
	// Floating point casts and conversions
	case FloatCastI(isDouble: bool);
	case FloatCastD;
	case FloatQueryI(isDouble: bool);
	case FloatQueryD;
	case FloatPromoteI(isDouble: bool);
	case FloatPromoteF;
	case FloatViewI(isDouble: bool);
	case FloatRoundI(isDouble: bool);
	case FloatRound(isDouble: bool);
	case FloatRoundD;
	// Reference equality
	case RefEq;
	// IntRep operations
	case IntRepCreate;
	case IntRepView;
	case RefViewIntRep;
	case IntRepViewRef;
	// Tuple operations
	case TupleCreate(length: int);
	case TupleGetElem(index: int);
	// Array operations
	case ArrayAlloc;
	case ArrayInit(length: int);
	case ArrayTupleInit(elems: int, length: int);
	case ArrayGetElem;
	case ArraySetElem;
	case ArrayGetElemElem(index: int);
	case ArraySetElemElem(index: int);
	case ArrayGetLength;
	// Range operations
	case RangeFromTo;
	case RangeFromPlus;
	case RangeGetElem;
	case RangeSetElem;
	case RangeGetLength;
	case RangeStartPlusIndex;
	case RangeStartFromPointer;
	// Normalized Range operations
	case NormRangeGetElem;
	case NormRangeGetElemElem(index: int);
	case NormRangeSetElem;
	case NormRangeSetElemElem(index: int);
	// Component operations
	case Init(method: IrMethod);
	case ComponentGetField(field: IrField);
	case ComponentSetField(field: IrField);
	// Class operations
	case ClassAlloc(method: IrMethod);
	case ClassGetField(field: IrField);
	case ClassInitField(field: IrField);
	case ClassSetField(field: IrField);
	case ClassGetMethod(method: IrMethod);
	case ClassGetVirtual(method: IrMethod);
	case ClassGetSelector(selector: IrSelector);
	// Variant operations
	case VariantEq;
	case VariantGetTag;
	case VariantGetField(field: IrField);
	case VariantReplaceNull;
	case VariantGetMethod(method: IrMethod);
	case VariantGetVirtual(method: IrMethod);
	case VariantGetSelector(selector: IrSelector);
	// Safety checks
	case NullCheck;
	case BoundsCheck;
	case ConditionalThrow(exception: string);
	// Overloaded, polymorphic casts
	case OverloadedEq;
	case TypeCast(cast: TypeCast);
	case TypeQuery(query: TypeQuery);
	case TypeSubsume;
	// Closure and call operations
	case CallMethod(method: IrMethod);
	case CallClassMethod(method: IrMethod);
	case CallClassVirtual(method: IrMethod);
	case CallClassSelector(selector: IrSelector);
	case CallVariantVirtual(method: IrMethod);
	case CallVariantSelector(selector: IrSelector);
	case CallClosure;
	case CallFunction;
	case CreateClosure(method: IrMethod);
	case ForgeClosure;
	case UnpackClosure;
	// RefLayout operations
	case RefLayoutAt;
	case RefLayoutOf;
	case RefLayoutIn(offset: int);
	case RefLayoutGetField(offset: int);
	case RefLayoutSetField(offset: int);
	case RefLayoutAtRepeatedField(offset: int, scale: int, max: int);
	case RefLayoutGetRepeatedField(offset: int, scale: int, max: int);
	case RefLayoutSetRepeatedField(offset: int, scale: int, max: int);
	case ByteArrayGetField(offset: int);
	case ByteArraySetField(offset: int);
	case ForgeRange;
	// System operations
	case SystemCall(syscall: SystemCall);
	// Container for VST operations
	case VstSugar(op: VstOperator);

// ------- Machine-level operations ---------------------------------------------
	// Pointer operations
	case PtrAdd;
	case PtrSub;
	case PtrLt;
	case PtrLteq;
	case PtrAtContents;
	case PtrAtLength;
	case PtrAtObject;
	case PtrAtRangeElem;
	case PtrAtArrayElem;
	case PtrAtEnd;
	case PtrAtRef;
	case PtrAtComponentField(field: IrField);
	case PtrAtObjectField(field: IrField);
	case PtrAtRefLayoutField(offset: int);
	case PtrCmpSwp;
	case PtrLoad;
	case PtrStore;
	case PtrAddRangeStart;
	// Get caller instruction pointer or stack pointer
	case CallerIp;
	case CallerSp;
	// Allocate raw memory
	case Alloc;
	// Call
	case CallAddress(p: Mach_FuncRep);
	case CallKernel(kernel: Kernel);
}

component Opcodes {
	def table = Array<Fact.set>.new(Opcode.CallKernel.tag + 1);
	new() {
		// shorthand for SSA optimization facts
		var F = Fact.O_FOLDABLE;
		var P = Fact.O_PURE | Fact.O_FOLDABLE; // pure => foldable
		var C = Fact.O_COMMUTATIVE;
		var A = Fact.O_ASSOCIATIVE;
		var NZ   = Fact.V_NON_ZERO;
		var NNEG = Fact.V_NON_NEGATIVE;
		var NNC = Fact.O_NO_NULL_CHECK;
                var NONE = Facts.NONE;

		def t = table; // for code shortitude
		
		// register all operators and their optimization facts
		t[Opcode.BoolEq.tag] =			P  |C;
		t[Opcode.BoolAnd.tag] = 		P|A|C;
		t[Opcode.BoolOr.tag] = 			P|A|C;
		t[Opcode.BoolNot.tag] = 		P;

		t[Opcode.IntEq.tag] =			P  |C;
		t[Opcode.IntAdd.tag] = 			P|A|C;
		t[Opcode.IntSub.tag] = 			P;
		t[Opcode.IntMul.tag] = 			P|A|C;
		t[Opcode.IntDiv.tag] = 			F;
		t[Opcode.IntMod.tag] = 			F;
		t[Opcode.IntAnd.tag] = 			P|A|C;
		t[Opcode.IntOr.tag] = 			P|A|C;
		t[Opcode.IntXor.tag] = 			P|A|C;
		t[Opcode.IntShl.tag] = 			P;
		t[Opcode.IntSar.tag] = 			P;
		t[Opcode.IntShr.tag] = 			P;
		t[Opcode.IntLt.tag] = 			P;
		t[Opcode.IntLteq.tag] = 		P;
		t[Opcode.IntWide.tag] = 		P;

		t[Opcode.FloatAdd.tag] =		P|A|C;
		t[Opcode.FloatSub.tag] =		P;
		t[Opcode.FloatMul.tag] =		P|A|C;
		t[Opcode.FloatDiv.tag] =		P;
		t[Opcode.FloatBitEq.tag] =		P  |C;
		t[Opcode.FloatEq.tag] =			P  |C;
		t[Opcode.FloatNe.tag] =			P  |C;
		t[Opcode.FloatLt.tag] =			P;
		t[Opcode.FloatLteq.tag] =		P;
		t[Opcode.FloatAbs.tag] =		P;
		t[Opcode.FloatCeil.tag] =		P;
		t[Opcode.FloatFloor.tag] =		P;
		t[Opcode.FloatSqrt.tag] =		P;

		t[Opcode.IntCastF.tag] =		F;
		t[Opcode.IntQueryF.tag] =		P;
		t[Opcode.IntViewI.tag] = 		P;
		t[Opcode.IntViewI.tag] =		P;
		t[Opcode.IntViewF.tag] =		P;
		t[Opcode.IntTruncF.tag] =		P;

		t[Opcode.FloatCastI.tag] =		F;
		t[Opcode.FloatCastD.tag] =		F;
		t[Opcode.FloatQueryI.tag] =		P;
		t[Opcode.FloatQueryD.tag] =		P;
		t[Opcode.FloatPromoteI.tag] =		P;
		t[Opcode.FloatPromoteF.tag] =		P;
		t[Opcode.FloatViewI.tag] =		P;
		t[Opcode.FloatRoundI.tag] =		P;
		t[Opcode.FloatRound.tag] =		P;
		t[Opcode.FloatRoundD.tag] =		P;

		t[Opcode.RefEq.tag] =			P  |C;

		t[Opcode.IntRepCreate.tag] =		P;
		t[Opcode.IntRepView.tag] =		P;
		t[Opcode.RefViewIntRep.tag] =		P;
		t[Opcode.IntRepViewRef.tag] =		P;

		t[Opcode.TupleCreate.tag] = 		P;
		t[Opcode.TupleGetElem.tag] = 		P;

		t[Opcode.ArrayAlloc.tag] = 		NZ;
		t[Opcode.ArrayInit.tag] = 		NZ;
		t[Opcode.ArrayGetElem.tag] = 		NONE;
		t[Opcode.ArraySetElem.tag] = 		NONE;
		t[Opcode.ArrayGetLength.tag] = 		F|NNEG;

		t[Opcode.RangeFromTo.tag] = 		F;
		t[Opcode.RangeFromPlus.tag] = 		F;
		t[Opcode.RangeGetLength.tag] = 		P;

		t[Opcode.RangeStartPlusIndex.tag] =	P;
		t[Opcode.RangeStartFromPointer.tag] =	P;
		t[Opcode.NormRangeGetElem.tag] = 	F;
		t[Opcode.NormRangeGetElemElem.tag] = 	F;
		t[Opcode.NormRangeSetElem.tag] = 	NONE;
		t[Opcode.NormRangeSetElemElem.tag] = 	NONE;
		t[Opcode.PtrAddRangeStart.tag] =	P;
		t[Opcode.ForgeRange.tag] =		P;

		t[Opcode.Init.tag] = 			NONE;
		t[Opcode.ComponentGetField.tag] = 	NNC;
		t[Opcode.ComponentSetField.tag] = 	NNC;

		t[Opcode.ClassAlloc.tag] = 		NZ;
		t[Opcode.ClassGetField.tag] = 		NONE;
		t[Opcode.ClassSetField.tag] = 		NONE;
		t[Opcode.ClassInitField.tag] = 		Fact.O_NO_NULL_CHECK;
		t[Opcode.ClassGetMethod.tag] = 		NZ|F;
		t[Opcode.ClassGetVirtual.tag] = 	NZ|F;
		t[Opcode.ClassGetSelector.tag] = 	NZ|F;

		t[Opcode.VariantEq.tag] =		P  |C;
		t[Opcode.VariantGetTag.tag] =		P|NNEG;
		t[Opcode.VariantGetField.tag] = 	P;
		t[Opcode.VariantReplaceNull.tag] = 	P|NZ;
		t[Opcode.VariantGetMethod.tag] = 	NZ|P;
		t[Opcode.VariantGetVirtual.tag] = 	NZ|P;
		t[Opcode.VariantGetSelector.tag] = 	NZ|P;

		t[Opcode.NullCheck.tag] = 		F|NZ;
		t[Opcode.BoundsCheck.tag] = 		F;
		t[Opcode.ConditionalThrow.tag] = 	F;

		t[Opcode.OverloadedEq.tag] =		P  |C;
		t[Opcode.TypeCast.tag] = 		F;
		t[Opcode.TypeQuery.tag] = 		P;
		t[Opcode.TypeSubsume.tag] = 		P;

		t[Opcode.CallMethod.tag] = 		NONE;
		t[Opcode.CallClassVirtual.tag] = 	NONE;
		t[Opcode.CallClassSelector.tag] = 	NONE;
		t[Opcode.CallClosure.tag] = 		NONE;
		t[Opcode.CallFunction.tag] = 		NONE;
		t[Opcode.CreateClosure.tag] = 		NZ|P|NNC;
		t[Opcode.ForgeClosure.tag] = 		P|NNC;
		t[Opcode.UnpackClosure.tag] = 		P|NNC;

		t[Opcode.SystemCall.tag] = 		NONE;

		t[Opcode.PtrAdd.tag] =			P; // XXX: could be foldable with offset
		t[Opcode.PtrSub.tag] =			P;
		t[Opcode.PtrLt.tag] =			P;
		t[Opcode.PtrLteq.tag] =			P;
		t[Opcode.PtrAtContents.tag] =		P;
		t[Opcode.PtrAtLength.tag] =		P;
		t[Opcode.PtrAtObject.tag] =		P;
		t[Opcode.PtrAtRangeElem.tag] =		F;
		t[Opcode.PtrAtArrayElem.tag] =		F;
		t[Opcode.PtrAtComponentField.tag] =	P;
		t[Opcode.PtrAtObjectField.tag] =	F;
		t[Opcode.PtrLoad.tag] =			NONE;
		t[Opcode.PtrStore.tag] =		NONE;

		t[Opcode.CallerIp.tag] =		P;
		t[Opcode.CallerSp.tag] =		P;

		t[Opcode.Alloc.tag] =			NONE;

		t[Opcode.RefLayoutAt.tag] = 		NZ|F;
		t[Opcode.RefLayoutIn.tag] = 		P|F;
		t[Opcode.RefLayoutGetField.tag] =	NONE;
		t[Opcode.RefLayoutAtRepeatedField.tag] = P;
	}

	def facts(opcode: Opcode) -> Fact.set { return table[opcode.tag]; }
}
