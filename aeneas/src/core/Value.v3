// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A Result represents the result of evaluating an expression, which can either
// be a Val or an Exception.
class Result { }
// A Val represents a runtime value, such as integer, object reference, tuple, etc.
class Val extends Result {
	def equals(val: Val) -> bool { return this == val; }
	def hash() -> int { return 0; }
}
// An Exception represents an exceptional result (i.e. not a value), for example a
// safety violation such as !NullCheckException or !DivideByZeroException.
class Exception(error: string, msg: string, trace: List<Source>) extends Result { }
// The Box class provides a utility to simplify using first-order values
// (e.g. the integer 0) as meta-level values (e.g. the Constant #0).
class Box<T>(val: T) extends Val {
	def equals(other: Val) -> bool {
		if (other == this) return true;
		if (other == Values.BOTTOM) {
			var none: T;
			return this.val == none;
		}
		return Box<T>.?(other) && this.val == Box<T>.!(other).val;
	}
	def hash() -> int {
		if (Box<int>.?(this)) return Box<int>.!(this).val;
		if (Box<bool>.?(this)) return if(Box<bool>.!(this).val, 111111);
		if (Box<long>.?(this)) {
			var v = Box<long>.!(this).val;
			return int.view(v ^ v >> 32);
		}
		return 0;
	}
}
// The source position in a method, such as for an exception stacktrace.
class Source(mdecl: VstMethod, line: int, column: int, tail: Source, range: FileRange) {
	def render(buffer: StringBuilder) -> StringBuilder {
		mdecl.renderLong(buffer.puts("in ")).puts("()");
		if (line >= 0) buffer.put3(" [%s @ %d:%d]", mdecl.token.fileName, line, column);
		return buffer;
	}
}
// Utility methods for values.
component Values {
	var BOTTOM: Val = null;
	def equal(val1: Val, val2: Val) -> bool {
//		if (val1 == val2) return true;
		if (val1 == null) return val2 == null || val2.equals(val1);
		return val1.equals(val2);
	}
	def deepEqual(vals1: Array<Val>, vals2: Array<Val>) -> bool {
		if (vals1.length != vals2.length) return false;
		for (i < vals1.length) {
			var v1 = vals1[i], v2 = vals2[i];
			if (v1 == v2) continue;
			if (v1 == null) {
				if (!v2.equals(v1)) return false;
			} else if (!v1.equals(v2)) {
				return false;
			}
		}
		return true;
	}
	def deepEqualBottom(vals: Array<Val>) -> bool {
		for (v in vals) {
			if (v == null) continue;
			if (!v.equals(null)) return false;
		}
		return true;
	}
	def hash(v: Val) -> int {
		return if(v != null, v.hash());
	}
}

def RECURSIVE_HASH = -2;
class BoxVal(t: Type, values: Array<Val>) extends Val {
	private var id = UID.next++;
	private var h0: int = 0;

	def equals(other: Val) -> bool {
		if (this == other) return true;
		match (other) {
			that: BoxVal => {
				if (this.id == that.id) return true;
				if (this.t != that.t) return false;
				if (this.hash() != that.hash()) return false;
				for (i < values.length) if(!Values.equal(this.values[i], that.values[i])) return false;
				if (this.id < that.id) that.id = this.id;
				else this.id = that.id;
				return true;
			}
			null => return t == null && Values.deepEqualBottom(values);
			_ => return false;
		}
	}
	def hash() -> int {
		if (h0 >= 0) return h0;
		var nhash = if(t == null, values.length, t.hash);	// initial new hash
		if (h0 == RECURSIVE_HASH) return h0 = int.max & nhash;	// cycle check
		h0 = RECURSIVE_HASH;
		for (v in values) {
			nhash = nhash * 33 + Values.hash(v);		// recursive hash
			if (h0 >= 0) return h0;				// recursive cycle detected
		}
		return h0 = int.max & nhash;
	}
}
