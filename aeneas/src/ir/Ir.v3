// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Base class for all IR classes, methods, and fields.
class IrItem {
	def uid: int = UID.next++;
	var facts: Fact.set;
	def setFact(set: Fact.set) { facts = facts | set; }
}
// boxing modes for variants
enum Boxing {
	AUTO,		// compiler chooses
	UNBOXED,	// program specified unboxed
	BOXED		// program specified boxed
}
// intermediate representation of classes and variants
class IrClass extends IrItem {
	def ctype: Type;			// type corresponding to this class
	def typeArgs: TypeArgs;			// type arguments
	def parent: IrClass;			// parent class if any
	def fields: Array<IrField>;		// fields, including super fields
	def methods: Array<IrMethod>;		// method dispatch table, #0 = constructor
	var minClassId: int;
	var maxClassId: int;
	var machSize: int = -1;
	var boxing: Boxing;
	var packed: bool;

	new(ctype, typeArgs, parent, fields, methods) { }
	def inherits(m: IrMember) -> bool {
		var p = parent;
		if (p == null) return false;
		if (m.index < 0) return false;
		if (IrMethod.?(m)) return p.methods.length > m.index && m == p.methods[m.index];
		else return p.fields.length > m.index; // assume it's a field
	}
	def root(m: IrMethod) -> IrMethod {
		for (c = parent; c != null && c.methods.length > m.index; c = c.parent) {
			m = c.methods[m.index];
		}
		return m;
	}
}
// represents a member of a class, component, or variant
class IrMember(receiver: Type) extends IrItem {
	var index = -1;		// index into the appropriate members list

	def render(buffer: StringBuilder) -> StringBuilder;
	def renderLong(buffer: StringBuilder) -> StringBuilder {
		if (receiver != null) receiver.render(buffer).putc('.');
		return render(buffer);
	}
	def isConst() -> bool      { return facts.F_VALUE; }
}
// represents a field of a class, component, or variant
class IrField extends IrMember {
	def fieldType: Type;	// the type of the field
	var source: VstMember;	// declaration that produced the field, if any
	var machOffset: int;	// machine-level offset
	var raField: RaField;   // information for reachability analysis

	new(receiver: Type, fieldType) super(receiver) { }
	def render(buffer: StringBuilder) -> StringBuilder {
		if (source == null) return buffer.putc('f').putd(index);
		else source.render(buffer);
		if (CLOptions.PRINT_ID.val) buffer.putc('#').putd(uid);
		if (facts.F_NORM) buffer.putc('.').putd(index);
		return buffer;
	}
}
// represents a method of a class or component
class IrMethod extends IrMember {
	def typeArgs: TypeArgs;		// type arguments to this method (bound or unbound)
	def sig: Signature;		// parameter and return type of method
	var source: VstMethod;		// declaration that produced the method, if any
	var ic: IcMethod;		// interpreter code of method
	var ssa: SsaGraph;		// SSA code for method
	var raMethod: RaMethod;		// information for reachability analysis
	var subprogram: DwarfSubprogram;		// dwarf subprogram of method
	var machIndex = -1;		// machine-level index

	new(receiver: Type, typeArgs, sig: Signature) super(receiver) { }
	def render(buffer: StringBuilder) -> StringBuilder {
		if (source == null) {
			buffer.putc('m').putd(uid);
		} else {
			source.render(buffer);
			if (CLOptions.PRINT_ID.val) buffer.putc('#').putd(uid);
		}
		if (typeArgs != null) typeArgs.render(buffer);
		return buffer;
	}
	def getMethodType() -> Type {
		return sig.funcType();
	}
}
// a virtual method selector consisting of a method and a vtable index
// (the vtable index may differ from the method's in the case of partial specialization)
class IrSelector extends IrMember {
	def method: IrMethod;
	def mtable: IrMtable;
	new(receiver: Type, method, mtable, index: int) super(receiver) {
		this.index = index;
		this.facts = Fact.M_OVERRIDDEN;
	}
	def render(buffer: StringBuilder) -> StringBuilder {
		return method.render(buffer);
	}
}
// A method table is essentially a transposed virtual table. It is a table of methods
// indexed by class ID, where class IDs are assigned during Reachability analysis.
class IrMtable(root: IrMethod, rootId: int, table: Array<IrMethod>) extends IrItem {
	var record: Record;

	def render(buf: StringBuilder) -> StringBuilder {
		buf.puts("[");
		var id = rootId;
		for (m in table) {
			if (id > rootId) buf.csp();
			buf.putd(id++).puts("=");
			if (m != null) m.renderLong(buf);
			else buf.puts("null");
		}
		return buf.puts("]");
	}
}
// Lazily-allocated internal class used to store the types associated with an IrSpec
class IrSpecTypes(typeArgsList: List<TypeArgs>, methodTypeArgs: TypeArgs) {
	var boundType: Type;
	var unboundType: Type;

	def instantiateType(t: Type) -> Type {
		if (t.open()) for (l = typeArgsList; l != null; l = l.tail) t = t.substitute(l.head);
		return t;
	}
}
// Represents the specialization of an IrMember, including the receiver type and
// any type arguments
class IrSpec(receiver: Type, typeArgs: Array<Type>, member: IrMember) {
	var types: IrSpecTypes;
	var hashval: int;

	def render(buffer: StringBuilder) -> StringBuilder {
		receiver.render(buffer);
		buffer.putc('.');
		member.render(buffer);
		var tp = getTypes();
		if (tp.methodTypeArgs != null) tp.methodTypeArgs.render(buffer);
		return buffer;
	}
	def hash() -> int {
		if (hashval != 0) return hashval;
		var h = member.uid;
		for (t in typeArgs) h = h * 33 + t.hash;
		return hashval = h;
	}
	def equals(other: IrSpec) -> bool {
		if (this == other) return true;
		if (other == null || this.member != other.member) return false;
		for (i < typeArgs.length) {
			if (typeArgs[i] != other.typeArgs[i]) return false;
		}
		return true;
	}
	def instantiateType(t: Type) -> Type {
		if (t.open()) return getTypes().instantiateType(t);
		return t;
	}
	def instantiateTypes(t: Array<Type>) -> Array<Type> {
		if (t.length == 0) return t;
		var tp = getTypes();
		if (tp.typeArgsList == null) return t;
		if (t.length == 1 && !t[0].open()) return t;
		var nt = Array<Type>.new(t.length);
		for (i < t.length) {
			nt[i] = tp.instantiateType(t[i]);
		}
		return nt;
	}
	def instantiateIrSpec(spec: IrSpec) -> IrSpec {
		return IrSpec.new(instantiateType(spec.receiver), instantiateTypes(spec.typeArgs), spec.member);
	}
	def getBoundType() -> Type {
		var tp = getTypes();
		if (tp.boundType != null) return tp.boundType;
		match (member) {
			x: IrField => return tp.boundType = tp.instantiateType(x.fieldType);
			x: IrMethod => return tp.boundType = tp.instantiateType(x.sig.funcType());
			x: IrSelector => return tp.boundType = tp.instantiateType(x.method.sig.funcType());
			_ => return V3.fail("unknown IrSpec kind");
		}
	}
	def getUnboundType() -> Type {
		var tp = getTypes();
		if (tp.unboundType != null) return tp.unboundType;
		match (member) {
			x: IrField => return tp.unboundType = tp.instantiateType(Function.newType(receiver, x.fieldType));
			_ => return tp.unboundType = Function.prependParamType(getClosureReceiver(), getBoundType());
		}
	}

	def isNew() -> bool { return IrMethod.?(member) && member.facts.M_NEW; }
	def isMethod() -> bool { return IrMethod.?(member); }
	def asMethod() -> IrMethod {
		match (member) {
			x: IrMethod => return x;
			x: IrSelector => return x.method;
			_ => return V3.fail1("not a method: %q", member.render);
		}
	}
	def asField() -> IrField { return IrField.!(member); }
	def getFieldType() -> Type { return instantiateType(IrField.!(member).fieldType); }
	def getReturnType() -> Type { return instantiateType(asMethod().sig.returnType()); }
	def getParamTypes() -> Array<Type> { return instantiateTypes(asMethod().sig.paramTypes); }
	def getMethodType() -> Type { return getBoundType(); }
	def getFuncType() -> Type { return Function.funcRefType(getBoundType()); }
	def getTypes() -> IrSpecTypes {
		if (types != null) return types;
		var typeArgsList: List<TypeArgs>, methodTypeArgs: TypeArgs;
		var recvTypeArgs = V3.getTypeArgs(receiver);
		if (recvTypeArgs != null) typeArgsList = List.new(recvTypeArgs, null);
		if (typeArgs.length > 1) {
			methodTypeArgs = asMethod().typeArgs.copy(Arrays.range(typeArgs, 1, typeArgs.length));
			typeArgsList = List.new(methodTypeArgs, typeArgsList);
		}
		return types = IrSpecTypes.new(typeArgsList, methodTypeArgs);
	}
	def getClosureReceiver() -> Type {
		return if(V3.isComponent(receiver), AnyRef.TYPE, instantiateType(receiver));
	}
	def isPolymorphic() -> bool {
		return getTypes().typeArgsList != null;
	}
	def source() -> VstMember {
		match (member) {
			x: IrMethod => return x.source;
			x: IrField => return x.source;
			x: IrSelector => return x.method.source;
		}
		return null;
	}
}
class IrRoot(name: string, spec: IrSpec) { }
// Utility methods for dealing with Ir classes, methods, and fields
component IrUtil {
	def EQUALS_METHOD_INDEX = 1;

	def newIrSpecMap<T>() -> HashMap<IrSpec, T> {
		return HashMap.new(IrSpec.hash, IrSpec.equals);
	}
	def newIrItemMap<T>() -> HashMap<IrItem, T> {
		return HashMap<IrItem, T>.new(IrItem.uid, IrItem.==);
	}
}
// representation of a module, including classes, components, methods, etc.
class IrModule {
	def classMap = TypeUtil.newTypeMap<IrClass>();
	def classes = Vector<IrClass>.new();
	def methods = Vector<IrMethod>.new();
	def init = Vector<IrMethod>.new();
	def roots = Vector<IrRoot>.new();

	def addRoot(name: string, meth: IrSpec) -> int {
		var index = roots.length;
		roots.put(IrRoot.new(name, meth));
		return index;
	}
	def fromIrMemberAndTypes(typeArgs: Array<Type>, member: IrMember) -> IrSpec {
		return IrSpec.new(typeArgs[0], typeArgs, member);
	}
	def fromVstMemberAndType(receiver: Type, member: VstMember) -> IrSpec {
		return fromIrMemberAndTypes([receiver], makeIrMember(member));
	}
	def fromVstMember(member: VstMember) -> IrSpec {
		var m = makeIrMember(member), c = member.receiver.getDeclaredType();
		return fromIrMemberAndTypes([c], m);
	}
	private def makeIrMember(m: VstMember) -> IrMember {
		var ic = makeIrClass(m.receiver.getDeclaredType());
		if (VstMethod.?(m)) return ic.methods[m.index];
		else return ic.fields[m.index];
	}
	def resolveMethodImpl(classType: Type, irSpec: IrSpec) -> IrSpec {
		var ic = makeIrClass(classType);
		var m = ic.methods[irSpec.member.index];
		if (m == irSpec.member) return irSpec;
		while (ic.inherits(m)) {
			classType = V3.getSuperType(classType);
			ic = ic.parent;
		}
		return IrSpec.new(classType, Arrays.replace(irSpec.typeArgs, 0, classType), m);
	}
	def resolveVariantDefaultMethodImpl(irSpec: IrSpec) -> IrSpec {
		var receiver = irSpec.receiver;
		var superType = V3.getSuperType(receiver);
		while (superType != null) {
			receiver = superType;
			superType = V3.getSuperType(receiver);
		}
		var variantDecl = V3.classDecl(receiver);
		if (variantDecl.cases.length == 0) return irSpec;
		var first = variantDecl.cases[0];
		if (first == null) return irSpec;
		return resolveMethodImpl(V3.getSyntheticVariantType(receiver, first), irSpec);
	}
	def setIrClass(ctype: Type, ic: IrClass) {
		classMap[ctype] = ic;
		classes.put(ic);
	}
	def getIrClass(ctype: Type) -> IrClass {
		return classMap[ctype];
	}
	def numFields(ctype: Type) -> int {
		return makeIrClass(ctype).fields.length;
	}
	def makeIrClass(ctype: Type) -> IrClass {
		if (ctype == null) return null;
		var ic = classMap[ctype];
		if (ic == null) {
			if (V3.isClass(ctype)) {
				ic = newIrClassWithSuper(ctype, V3.classDecl(ctype));
			} else if (V3.isComponent(ctype)) {
				ic = newIrClass(ctype, null, V3.componentDecl(ctype));
				classMap[ctype] = ic;
			} else if (EnumType.?(ctype)) {
				ic = newIrClass(ctype, null, EnumType.!(ctype).enumDecl);
				classMap[ctype] = ic;
			}
		}
		return ic;
	}
	def newIrClassWithSuper(ctype: Type, decl: VstCompound) -> IrClass {
		var ptype = decl.getDeclaredType();
		var ic: IrClass;
		if (ptype == ctype) {
			// create a new IR class
			var sc = makeIrClass(V3.getSuperType(ctype));
			ic = newIrClass(ctype, sc, decl);
		} else {
			// get the IR class of the polymorphic type
			ic = makeIrClass(ptype);
		}
		classMap[ctype] = ic;
		return ic;
	}
	def newIrClass(ctype: Type, superClass: IrClass, decl: VstCompound) -> IrClass {
		var ic = IrBuilder.new(ctype, superClass).buildClass(decl);
		classes.put(ic);
		return ic;
	}
	def isEnum(t: Type) -> bool {
		return makeIrClass(t).facts.C_ENUM;
	}
}
