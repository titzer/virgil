// Copyright 2013 Google Inc. All rights reserved.
// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Normalizes integers by scattering/gathering the bits to/from multiple integers.
class IntNormalizer(width: byte) {
	def intMask = (1 << width) - 1;
	def cache = TypeUtil.newTypeMap<IntNorm>();
	def word = Int.getType(false, width);
	def shrOp = word.opShr();
	// Normalize an integer value into an array of values.
	def normIntIntoArray(tt: IntType, v: int, array: Array<Val>, index: int) {
		if (width >= 32) {  // degenerate case.
			array[index] = Int.box(v);
			return;
		}
		var words = (tt.width - 1) / width;
		var negative = tt.signed && v < 0;
		for (i < words) {
			var bits = Int.box(v & intMask);
			array[index + i] = bits;
			v = v >>> width;
		}
		if (negative) v = v | -1 << width;
		array[index + words] = Int.box(v);
	}
	// Normalize a long value into an array of values.
	def normLongIntoArray(tt: IntType, v: long, array: Array<Val>, index: int) {
		if (width >= 64) {
			array[index] = Box.new(v);
			return;
		}
		if (width == 32) {
			var t = Long.split(v), high = Int.box(t.0), low = Int.box(t.1);
			array[index] = low;
			array[index + 1] = high;
			return;
		}
		// XXX: general case of normalizing a long is ugly and slow!
		var mask = (1L << width) - 1L;
		var words = (tt.width - 1) / width;
		var negative = tt.signed && v < 0;
		for (i < words) {
			var bits = box(v & mask);
			array[index + i] = bits;
			v = v >>> width;
		}
		if (negative) v = v | (-1L << width);
		array[index + words] = box(v);
	}
	def normType(t: Type) -> IntNorm {
		if (!IntType.?(t)) return null;
		var tt = IntType.!(t);
		return if (tt.width > width, makeType(tt));
	}
	// Make the normalized type for a given integer type.
	def makeType(oldType: IntType) -> IntNorm {
		var nt = cache[oldType];
		if (nt == null) {
			var words = (oldType.width - 1) / width;
			var sub = Array<Type>.new(words + 1);
			for (i < sub.length) sub[i] = word;
			var bigEnd = Int.getType(oldType.signed, oldType.width - words * width);
			sub[if(false, 0, sub.length - 1)] = bigEnd;
			var newType = Tuple.newType(Lists.fromArray(sub));
			nt = IntNorm.new(oldType, newType, sub);
			cache[oldType] = nt;
		}
		return nt;
	}
	def box(v: long) -> Val {
		if (width > 32) return Box<long>.new(v);
		return Box<int>.new(int.view(v));
	}
}
