// Copyright 2013 Google Inc. All rights reserved.
// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Normalizes SSA code by performing polymorphic specialization and expanding all
// tuples. Note that SSA form supports returns with multiple values.
class SsaRaNormalizer extends SsaRebuilder {
	def norm: ReachabilityNormalizer;
	var specSet: SpecSet;

	new(context: SsaContext, norm) super(context) {}

	def build(newMethod: IrMethod) {
		newMethod.ssa = genGraph();
		context.method = newMethod;
		context.printSsa("Normalized");
		if (context.compiler.NormOptimize) {
			context.graph = newMethod.ssa;
			var opt = SsaOptimizer.new(context);
			opt.optGraph();
			context.printSsa("Norm Optimized");
		}
	}
	def genGraph() -> SsaGraph {
		if (newGraph != null) return newGraph;

		// Normalize old parameters into new parameters
		instrMap.reset(context.graph);
		var oldParams = context.graph.params;
		var newParams = Vector<SsaParam>.new().grow(oldParams.length);
		var newRanges = Vector<(int,  int)>.new().grow(oldParams.length);
		var funcType = normFuncType(context.method.sig.funcType());
		for (i < oldParams.length) {
			var oldParam = oldParams[i];
			var tn = normType(oldParam.vtype);
			var start = newParams.length;
			if (tn == null) {
				// common case; type already normalized
				newParams.put(SsaParam.new(newParams.length, oldParam.vtype));
				newRanges.put(start, newParams.length);
				continue;
			}
			if (i == 0) {
				if (tn.size == 0) {
					// receiver became void
					newParams.put(SsaParam.new(newParams.length, tn.newType));
					start++; // skip synthesized receiver
				} else if (DataNorm.?(tn)) {
					// receiver became flattened data
					var newIrType = norm.ra.getClass(tn.oldType).newIrType;
					newParams.put(SsaParam.new(newParams.length, newIrType));
					start++; // skip synthesized receiver
				}
			}
			if (tn.size == 1) {
				// common case; simple normalization
				newParams.put(SsaParam.new(newParams.length, tn.newType));
			} else {
				// general case of 0...many parameters
				for (j < tn.sub.length) {
					newParams.put(SsaParam.new(newParams.length, tn.sub[j]));
				}
			}
			newRanges.put(start, newParams.length);
		}
		// Allocate new values for mapping the old params
		var newValues = Array<SsaInstr>.new(newParams.length);
		for (i < newParams.length) newValues[i] = newParams[i];

		// Create a new graph, respecting overflow params and returns
		var ovfP = funcType.ovfParamTypes.length;
		var maxP = newParams.length - ovfP;
		newParams.length = maxP;
		var rt = context.graph.returnType;
		var tn = normType(rt);
		if (tn != null) {
			var maxR = context.compiler.MaxReturnValues;
			if (tn.size > maxR) {
				rt = Tuple.fromTypeArray(Arrays.range(tn.sub, 0, maxR));
			} else {
				rt = tn.newType;
			}
		}
		newGraph = SsaGraph.new(newParams.extract(), rt);

		if (ovfP > 0) {
			// Handle overflow parameters by inserting loads+casts in the first block
			var b = SsaBuilder.new(context, newGraph, newGraph.startBlock);
			var nullConst = newGraph.nullConst(funcType.ovfParamFields[0].receiver);
			for (i < ovfP) {
				var load = b.opGetField(funcType.ovfParamFields[i], nullConst);
				var cast = b.opTypeSubsume(funcType.ovfParamFields[i].getFieldType(), funcType.ovfParamTypes[i], load);
				newValues[i + maxP] = cast;
			}
		}

		// Map old parameters to new parameters
		for (i < newRanges.length) {
			var t = newRanges[i], size = t.1 - t.0;
			var oldParam = oldParams[i];
			if (size == 0) map0(oldParam);
			else if (size == 1) map1(oldParam, newValues[t.0]);
			else mapN(oldParam, Arrays.range(newValues, t.0, t.1));
		}

		// Visit and generate new normalized code
		var oldStart = context.graph.startBlock;
		if (oldStart.succs().length == 0) {
			// common case of a single block that ends in return or throw
			// no need for blockmaps, queueing, or phi handling
			genBlock(oldStart, newGraph.startBlock);
		} else {
			// a method with multiple blocks
			genMultiBlock(oldStart, newGraph.startBlock);
		}
//		if (true) SsaGraphVerifier.new(context.prog, newGraph).verify();
		return newGraph;
	}
	def mapParam1(params: Vector<SsaParam>, oldParam: SsaParam, t: Type) {
		var np = SsaParam.new(params.length, t);
		params.put(np);
		map1(oldParam, np);
	}
	def genSimpleVal(tn: TypeNorm, v: Val) -> Val {
		return norm.normSimpleVal(tn, v);
	}
	def genValN(oi: SsaConst, tn: TypeNorm, vec: Vector<SsaInstr>) {
		vec.puta(mapValueN(oi, oi.val, tn));
	}
	def mapValue(oi: SsaInstr, v: Val, tn: TypeNorm) -> SsaConst {
		var val: SsaConst;
		if (tn.sub == null) {
			// simple normalization
			if (tn.size == 0) map0(oi); // void
			else map1(oi, val = newGraph.valConst(tn.newType, norm.normSimpleVal(tn, v)));
		} else {
			// complex normalization
			mapValueN(oi, v, tn);
		}
		return val;
	}
	def mapValueN(oi: SsaInstr, v: Val, tn: TypeNorm) -> Array<SsaInstr> {
		// complex normalization
		var nv = Array<Val>.new(tn.size);
		norm.normValIntoArray(v, tn, nv, 0);
		var vals = Array<SsaInstr>.new(nv.length);
		for (j < vals.length) vals[j] = newGraph.valConst(tn.sub[j], nv[j]);
		mapNnf(oi, vals);
		return vals;
	}
	def genApplyOp(app: SsaApplyOp) {
		if (app.useList == null && app.facts.O_PURE) return; // remove dead code
		curBlock.at(app.source);
		var orig = app.op, op = app.op, args = app.inputs;
		if (context.spec != null) op = app.op.subst(context.spec.instantiateType);
		match (op.opcode) {
			IntQueryI => {
				var ft = op.typeArgs[0], tt = op.typeArgs[1], x = genRef1(args[0]);
				var ni: SsaInstr;
				if (!IntType.?(ft)) {
					ni = newGraph.falseConst();
				} else {
					ni = curBlock.opIntQueryI(IntType.!(ft), IntType.!(tt), x);
				}
				map1(app, ni);
			}
			IntCastI => {
				var ft = op.typeArgs[0], tt = op.typeArgs[1], x = genRef1(args[0]);
				var ni: SsaInstr;
				if (!IntType.?(ft)) {
					curBlock.addThrow(app.source, V3Exception.TypeCheck);
					ni = newGraph.nullConst(tt);
				} else {
					ni = curBlock.opIntCastI(IntType.!(ft), IntType.!(tt), x);
				}
				map1(app, ni);
			}
			BoolEq,
			RefEq,
			IntEq =>		normSimpleEqualOp(app, op);
			OverloadedEq,
			VariantEq =>		normEqualOp(app, op);
			IntViewI =>		normIntViewI(app, op);
			TypeCast =>		normTypeCast(app, op);
			TypeQuery =>		normTypeQuery(app, op);
			TypeSubsume =>		normTypeSubsume(app, op);
			ArrayAlloc =>		normArrayAlloc(app, op);
			ArrayInit(length) =>	normArrayInit(app, op, length);
			ArrayGetElem =>		normArrayGetElem(app, op);
			ArraySetElem =>		normArraySetElem(app, op);
			ArrayGetLength =>	normArrayGetLength(app, op);
			RangeFromTo =>		normRangeFromTo(app, op);
			RangeFromPlus =>	normRangeFromPlus(app, op);
			RangeGetElem =>		normRangeGetElem(app, op);
			RangeSetElem =>		normRangeSetElem(app, op);
			RangeGetLength =>	{
				var r = genRefs(args);
				var tn = normType(op.typeArgs[0]);
				return map1(app, r[tn.size - 1]);
			}
			ClassAlloc(method) =>	normClassAlloc(app, method, op);
			ClassGetField(field) =>	normGetField(false, app, field, op);
			ClassInitField(field) =>normClassSetField(app, field, op, true);
			ClassSetField(field) =>	normClassSetField(app, field, op, false);
			ClassGetMethod(method) => {
				var obj = genRef1(args[0]);
				addNullCheck(app, obj);
				mapN(app, [funcRef(extractMethodRef(orig, method).1), obj]);
			}
			ClassGetVirtual(method) => {
				var t = extractVirtualRef(orig, method), obj = genRef1(args[0]);
				if (t.2) { // still a virtual dispatch
					mapN(app, [curBlock.opGetSelector(t.1, obj), obj]);
				} else {
					addNullCheck(app, obj);
					mapN(app, [funcRef(t.1), obj]);
				}
			}
			VariantGetTag => {
				var rc = norm.ra.makeClass(op.typeArgs[0]);
				if (rc.dataNorm != null) {
					if (rc.dataNorm.tagType != null) return map1(app, genRef1(args[0]));
					return map1(app, newGraph.zeroConst());
				}
				else normDefault(app, op);
			}
			VariantGetField(field) =>	normGetField(true, app, field, op);
			VariantGetMethod(method) => {
				var obj = genRef1(args[0]);
				mapN(app, [funcRef(extractMethodRef(orig, method).1), obj]);
			}
			VariantGetVirtual(method) => {
				var t = extractVirtualRef(orig, method), obj = genRef1(args[0]);
				if (t.2) { // still a virtual dispatch
					mapN(app, [curBlock.opGetSelector(t.1, obj), obj]);
				} else {
					mapN(app, [funcRef(t.1), obj]);
				}
			}
			Init =>			map0(app);
			ComponentGetField(field) =>	normComponentGetField(app, field, op);
			ComponentSetField(field) =>	normComponentSetField(app, field, op);
			TupleCreate => {
				mapNnf(app, genRefs(args));
			}
			TupleGetElem(index) => {
				normTupleGetElem(app, args, op, index);
			}
			NullCheck =>		normNullCheck(app, op);
			BoundsCheck =>		normBoundsCheck(app, op);
			// XXX: use SsaBuilder.opCallXXX() methods
			CallMethod(method) => {
				var rc = norm.ra.getClass(op.typeArgs[0]);
				var t = extractMethodRef(orig, method), funcNorm = t.0, m = t.1;
				var newOp = V3Op.newCallMethod(m);
				var newArgs = normArgs(funcNorm, genRefs(app.inputs));
				if (V3.isVariant(rc.oldType)) {
					if (rc.dataNorm != null) {
						// flattened data type becomes component call and needs new receiver
						newArgs = Arrays.prepend(newGraph.nullReceiver(), newArgs);
					} else {
						var obj = newArgs[0];
						if (V3Op.needsNullCheck(app, obj)) {
							// XXX: make CallVariantMethod operator for null replacement?
							newArgs[0] = curBlock.add(V3Op.newVariantReplaceNull(m.receiver), [obj], Facts.NONE);
							norm.newIr.getIrClass(m.receiver).facts |= Fact.C_HEAP;
						}
					}
				}
				normCall(app, funcNorm, newOp, newArgs);
			}
			CallClassMethod(method) => {
				var t = extractMethodRef(orig, method), funcNorm = t.0, m = t.1;
				var newOp = V3Op.newCallClassMethod(m);
				var newArgs = normArgs(funcNorm, genRefs(app.inputs));
				var i = normCall(app, funcNorm, newOp, newArgs);
				if (newArgs[0].facts.V_NON_ZERO) i.setFact(Fact.O_NO_NULL_CHECK);
			}
			CallClassVirtual(method) => {
				// devirtualize methods that are not overridden
				var t = extractVirtualRef(orig, method), funcNorm = t.0, m = t.1;
				var newArgs = normArgs(funcNorm, genRefs(app.inputs));
				var ni: SsaInstr;
				if (t.2) { // still a virtual dispatch
					ni = normCall(app, funcNorm, V3Op.newCallClassSelector(m), newArgs);
				} else {
					// devirtualized to call abstract method => no objects instantiated of that type
					if (m.member.facts.M_ABSTRACT) return map1(app, newGraph.nullConst(m.getReturnType()));
					var newOp = V3Op.newCallClassMethod(m);
					ni = normCall(app, funcNorm, newOp, newArgs);
				}
				if (newArgs[0].facts.V_NON_ZERO) ni.setFact(Fact.O_NO_NULL_CHECK);
			}
			CallVariantVirtual(method) => {
				// devirtualize methods that are not overridden
				var rc = norm.ra.getClass(op.typeArgs[0]);
				var t = extractVirtualRef(orig, method), funcNorm = t.0, m = t.1;
				var newArgs = normArgs(funcNorm, genRefs(app.inputs));
				if (t.2) { // still a virtual dispatch
					if (rc.dataNorm != null) {
						// use the variant tag as an index into a table of functions
						var tag = newArgs[0];
						var record = IrSelector.!(m.member).mtable.record;
						var table = newGraph.valConst(record.rtype, record);
						var func = curBlock.opArrayGetElem(record.rtype, rc.dataNorm.tagType, Facts.O_SAFE_BOUNDS, table, tag);
						newArgs = Arrays.concat([func, newGraph.nullReceiver()], newArgs);
						normCall(app, funcNorm, V3Op.newCallFunction(funcNorm.sub[0]), newArgs);
					} else {
						normCall(app, funcNorm, V3Op.newCallVariantSelector(m), newArgs);
					}
				} else {
					if (rc.dataNorm != null) {
						// flattened data type becomes component call and needs new receiver
						newArgs = Arrays.prepend(newGraph.nullReceiver(), newArgs);
					} else {
						// for variant calls, replace null receiver with record
						var obj = newArgs[0];
						if (!obj.facts.V_NON_ZERO) {
							newArgs[0] = curBlock.add(V3Op.newVariantReplaceNull(m.receiver), [obj], Facts.NONE);
							norm.newIr.makeIrClass(m.receiver).facts |= Fact.C_HEAP;
						}
					}
					normCall(app, funcNorm, V3Op.newCallMethod(m), newArgs);
				}
			}
			CallClosure => {
				var funcNorm = normFuncType(op.typeArgs[0]);
				// normalize CallClosure into CallFunction
				// XXX: use SsaBuilder.opCallFunction
				var newArgs = normArgs(funcNorm, genRefs(app.inputs));
				normCall(app, funcNorm, V3Op.newCallFunction(funcNorm.sub[0]), newArgs);
			}
			CreateClosure(method) => {
				var spec = extractMethodRef(orig, method).1;
				var receiver = if(V3.isComponent(spec.receiver), newGraph.nullReceiver(), genRef1(args[0]));
				return mapN(app, [funcRef(spec), receiver]);
			}
			ForgeClosure => {
				var nargs = genRefs(args), nfunc = nargs[0];
				var nobj = if(nargs.length == 1, newGraph.nullConst(normType(op.typeArgs[0]).newType), nargs[1]);
				return mapN(app, [nfunc, nobj]);
			}
			UnpackClosure => {
				var ptrType = op.sig.returnTypes[0];
				var nargs = genRefs(args), nfunc = nargs[0];
				var nobj = if(nargs.length == 1, newGraph.nullConst(ptrType), nargs[1]);
				return mapN(app, [nfunc, nobj]);
			}
			PtrAtObjectField(field) => {
				var receiver = genRef1(app.inputs[0]);
				var raField = extractFieldRef(app, field);
				var newInstr = curBlock.addApply(curBlock.source,
					V3Op.newPtrAtObjectField(raField.norm[0], app.op.sig.returnType()), [receiver]);
				map1(app, newInstr);
			}
			PtrAtComponentField(field) => {
				var raField = extractFieldRef(app, field);
				var newInstr = curBlock.addApply(curBlock.source,
					V3Op.newPtrAtComponentField(raField.norm[0], app.op.sig.returnType()), Ssa.NO_INSTRS);
				map1(app, newInstr);
			}
			_ => {
				normDefault(app, op);
			}
		}
	}
	def normDefault(app: SsaApplyOp, op: Operator) {
		// normalize a general operator
		var oldInstr = app, newOp = op;
		var newArgs = genRefs(oldInstr.inputs);
		var newInstr = curBlock.addApply(oldInstr.source, newOp, newArgs);
		newInstr.facts = newInstr.facts | oldInstr.facts;
		mapNorm(oldInstr, newInstr, normReturnType(op));
	}
	def genReturn(oldRet: SsaReturn) {
		// map a return (may return multiple values)
		var vals = genRefs(oldRet.inputs), maxR = context.compiler.MaxReturnValues;
		if (vals.length > maxR) {
			var ovfRets = Arrays.range(vals, maxR, vals.length);
			vals = Arrays.range(vals, 0, maxR);
			var funcNorm = normFuncType(context.method.sig.funcType());
			var nullConst = newGraph.nullConst(funcNorm.ovfReturnFields[0].receiver);
			for (i < ovfRets.length) {
				curBlock.opComponentSetField(funcNorm.ovfReturnFields[i], nullConst, ovfRets[i]);
			}
		}
		return curBlock.addReturn(vals);
	}
	def normCall(oldInstr: SsaApplyOp, funcNorm: FuncNorm, newOp: Operator, newArgs: Array<SsaInstr>) -> SsaInstr {
		// Create the new call instruction
		var call = curBlock.addApply(oldInstr.source, newOp, newArgs);
		call.facts = call.facts | oldInstr.facts;

		if (funcNorm.ovfReturnTypes.length > 0) {
			// load overflow return values from globals
			var fsig = funcNorm.sig();
			var rvals = Vector<SsaInstr>.new();
			if (fsig.returnTypes.length == 1) {
				rvals.put(call);
			} else {
				for (i < fsig.returnTypes.length) rvals.put(curBlock.opTupleGetElem(fsig.returnType(), i, call));
			}
			var nullConst = newGraph.nullConst(funcNorm.ovfReturnFields[0].receiver);
			for (i < funcNorm.ovfReturnTypes.length) {
				var load = curBlock.opGetField(funcNorm.ovfReturnFields[i], nullConst);
				var cast = curBlock.opTypeSubsume(funcNorm.ovfReturnFields[i].getFieldType(), funcNorm.ovfReturnTypes[i], load);
				rvals.put(cast);
			}
			mapN(oldInstr, rvals.extract());
		} else {
			mapNorm(oldInstr, call, normType(oldInstr.op.sig.returnType()));
		}
		return call;
	}
	def normArgs(funcNorm: FuncNorm, args: Array<SsaInstr>) -> Array<SsaInstr> {
		if (funcNorm.ovfParamTypes.length > 0) {
			// write overflow arguments into globals and truncate args array
			var maxP = args.length - funcNorm.ovfParamTypes.length;
			var ovfArgs = Arrays.range(args, maxP, args.length);
			args = Arrays.range(args, 0, maxP);
			var nullConst = newGraph.nullConst(funcNorm.ovfParamFields[0].receiver);
			for (i < ovfArgs.length) {
				curBlock.opComponentSetField(funcNorm.ovfParamFields[i], nullConst, ovfArgs[i]);
			}
		}
		return args;
	}
	def normTypeSubsume(oldInstr: SsaApplyOp, op: Operator) {
		var atn = normTypeArg(op, 0), rtn = normTypeArg(op, 1);
		if (rtn.sub == null) {
			// common case 1-1 mapping
			return map1(oldInstr, curBlock.opTypeSubsume(atn.newType, rtn.newType, genRef1(oldInstr.inputs[0])));
		}
		var width = rtn.size;
		if (width > 0) {
			// complex operator
			var newArgs = genRefs(oldInstr.inputs);
			var vals = Array<SsaInstr>.new(width);
			for (i < width) {
				var ft = if(atn.sub == null, atn.newType, atn.sub[i]);
				vals[i] = curBlock.opTypeSubsume(ft, rtn.sub[i], newArgs[i]);
			}
			mapNnf(oldInstr, vals);
		}
	}
	// normalize an equality operator
	def normEqualOp(oldApp: SsaApplyOp, op: Operator) {
		var tn = normTypeArg(op, 0);
		if (!DataNorm.?(tn) && V3.isVariant(tn.newType)) return normVariantEqual(oldApp, tn.newType);
		genEqualN(oldApp, tn);
	}
	def normSimpleEqualOp(oldApp: SsaApplyOp, op: Operator) {
		var tn = normTypeArg(op, 0);
		var refs = genRefs(oldApp.inputs);
		return map1(oldApp, curBlock.opEqualOf(op, refs[0], refs[1]));
	}
	def normVariantEqual(oldApp: SsaApplyOp, t: Type) {
		var rc = norm.ra.getClass(t);
		var list = rc.methods[IrUtil.EQUALS_METHOD_INDEX];
		if (list == null) {
			return normVariantEqual(oldApp, rc.parent.oldType);
		}
		var rm = list.head;
		// devirtualize methods that are not overridden
		var tn = normType(t);
		var t = tryDevirtualize(rm, [tn.newType]), m = t.0, newOp: Operator; // XXX: inline
		var facts = Fact.O_PURE | Fact.O_COMMUTATIVE;
		var newArgs = genRefs(oldApp.inputs), x = newArgs[0], y = newArgs[1];
		if (t.1) {
			newOp = V3Op.newCallVariantSelector(m);
		} else {
			var obj = newArgs[0];
			if (!obj.facts.V_NON_ZERO) {
				// XXX: make CallVariantMethod operator for null replacement?
				newArgs[0] = curBlock.add(V3Op.newVariantReplaceNull(m.receiver), [obj], Facts.NONE);
				norm.newIr.getIrClass(m.receiver).facts |= Fact.C_HEAP;
			}
			newOp = V3Op.newCallMethod(m);
			facts |= Fact.O_NO_NULL_CHECK;
		}
		var call = curBlock.addApply(oldApp.source, newOp, newArgs);
		call.setFact(facts);
		map1(oldApp, call);
	}
	def normTupleGetElem(oldInstr: SsaInstr, args: Array<SsaDfEdge>, op: Operator, index: int) {
		var tn = TupleNorm.!(normTypeArg(op, 0));
		return mapNnf(oldInstr, tn.getElem(genRefs(args), index));
	}
	def throwTypeCheckException() {
		curBlock.addThrow(curBlock.source, V3Exception.TypeCheck);
	}
	def normTypeCastRec(oi: Array<SsaInstr>, offset: int, atn: TypeNorm, rtn: TypeNorm, result: Vector<SsaInstr>) {
		match (TypeSystem.newTypeCast(atn.oldType, rtn.oldType)) {
			TRUE => {
				for (i < rtn.size) result.put(oi[offset + i]);
				return;
			}
			SUBSUME => {
				if (atn.sub == null) result.put(curBlock.opTypeSubsume(atn.newType, rtn.newType, oi[offset]));
				else for (i < rtn.size) result.put(curBlock.opTypeSubsume(atn.sub[i], rtn.sub[i], oi[offset + i]));
				return;
			}
			TUPLE_CAST => {
				var tatn = TupleNorm.!(atn), trtn = TupleNorm.!(rtn);
				if (tatn.nested.length != trtn.nested.length) return throwTypeCheckException();
				for (i < tatn.nested.length) {
					normTypeCastRec(oi, offset + tatn.offsets[i], tatn.nested[i], trtn.nested[i], result);
				}
				return;
			}
			VOID_CAST => {
				if (!CLOptions.LEGACY_CAST.val) throwTypeCheckException();
				return;
			}
			// XXX: CLASS_CAST special-case non-allocated classes
			VARIANT_CAST => {
				if (DataNorm.?(atn) && DataNorm.?(rtn)) {
					var dn = DataNorm.!(rtn);
					var tag = V3.getVariantTag(rtn.oldType);
					curBlock.opIntRangeCheck(1, tag, tag + 1, oi[offset]);
					for (i < dn.size) result.put(oi[offset + i]);
					return;
				}
				// break
			}
			UNKNOWN_CAST, THROW => {
				throwTypeCheckException();
				return;
			}
			RANGE_PROMOTE_ARRAY => {
				var an = ArrayNorm.!(atn), arrayType = an.first();
				var s = an.size;
				for (i < s) result.put(oi[offset + i]);
				var array = oi[offset], len: SsaInstr;
				result.put(newGraph.zeroConst());
				if (array.facts.V_NON_ZERO) {
					len = curBlock.opArrayGetLength(arrayType, array);
				} else {
					var cmp = curBlock.pure(V3Op.newRefEq(arrayType), [array, newGraph.nullConst(arrayType)]);
					var split = SsaBlockSplit.new(context, curBlock);
					curBlock = split.addIf(cmp);
					curBlock = split.addElse();
					var get = curBlock.opArrayGetLength(arrayType, array);
					curBlock = split.finish();
					len = split.addPhi(Int.TYPE, [newGraph.zeroConst(), get]);
				}
				result.put(len);
				return;
			}
			_ => ; // break
		}
		if (atn.size > 1) {
			for (i < atn.size) result.put(curBlock.opTypeCast(atn.sub[i], rtn.sub[i], oi[offset + i]));
		} else {
			result.put(curBlock.opTypeCast(atn.newType, rtn.newType, oi[offset]));
		}
	}
	def normTypeCast(oldApp: SsaApplyOp, op: Operator) {
		curBlock.source = oldApp.source;
		var atn = normTypeArg(op, 0), rtn = normTypeArg(op, 1);
		var result = Vector<SsaInstr>.new().grow(rtn.size);  // XXX: reuse temp vector here?
		normTypeCastRec(genRefs(oldApp.inputs), 0, atn, rtn, result);
		return mapNnf(oldApp, result.extract());
	}
	def normIntViewI(oldApp: SsaApplyOp, op: Operator) {
		map1(oldApp, curBlock.opIntViewI(op, genRef1(oldApp.inputs[0])));
	}
	def normTypeQueryRec(oi: Array<SsaInstr>, offset: int, atn: TypeNorm, rtn: TypeNorm, left: SsaInstr) -> SsaInstr {
		match (TypeSystem.newTypeQuery(atn.oldType, rtn.oldType)) {
			TRUE => return left;
			UNKNOWN_QUERY, FALSE => return newGraph.falseConst();
			TUPLE_QUERY => {
				var tatn = TupleNorm.!(atn), trtn = TupleNorm.!(rtn);
				if (tatn.nested.length != trtn.nested.length) return newGraph.falseConst();
				for (i < tatn.nested.length) {
					left = normTypeQueryRec(oi, offset + tatn.offsets[i], tatn.nested[i], trtn.nested[i], left);
				}
				return left;
			}
			// XXX: CLASS_QUERY special-case non-allocated classes
			VARIANT_QUERY => {
				if (DataNorm.?(atn) && DataNorm.?(rtn)) {
					var dn = DataNorm.!(rtn);
					var tag = newGraph.intConst(V3.getVariantTag(rtn.oldType));
					var check = curBlock.pure(V3Op.newIntEq(dn.tagType), [oi[offset], tag]);
					return opAnd(left, check);
				}
				// break
			}
			_ => ; // break
		}
		if (atn.size > 1) {
			for (i < atn.size) left = opAnd(left, curBlock.opTypeQuery(atn.sub[i], rtn.sub[i], oi[offset + i]));
		} else {
			left = opAnd(left, curBlock.opTypeQuery(atn.newType, rtn.newType, oi[offset]));
		}
		return left;
	}
	def opAnd(left: SsaInstr, right: SsaInstr) -> SsaInstr {
		return if(left == null, right, curBlock.opBoolAnd0(left, right));
	}
	def normTypeQuery(oldApp: SsaApplyOp, op: Operator) {
		var atn = normTypeArg(op, 0), rtn = normTypeArg(op, 1);
		var ni = normTypeQueryRec(genRefs(oldApp.inputs), 0, atn, rtn, null);
		if (ni == null) ni = newGraph.trueConst();
		map1(oldApp, ni);
	}
	def normArrayAlloc(oldApp: SsaApplyOp, op: Operator) {
		var rtn = nonzero(normReturnType(op));
		var length = genRef1(oldApp.inputs[0]);
		if (rtn.size == 1) return map1(oldApp, curBlock.opArrayAlloc(rtn.newType, length));
		// complex array allocation
		return mapN(oldApp, Arrays.map(rtn.sub, newArrayAlloc(_, oldApp.source, length)));
	}
	def newArrayAlloc(arrayType: Type, source: Source, length: SsaInstr) -> SsaInstr {
		return curBlock.opArrayAlloc(arrayType, length);
	}
	def normArrayInit(oldApp: SsaApplyOp, op: Operator, len: int) {
		var rtn = nonzero(normTypeArg(op, 0));
		var etn = normType(V3Array.elementType(op.typeArgs[0]));
		var width = etn.size;
		if (width == 0) {
			// this is a void array
			var length: SsaInstr = newGraph.intConst(len);
			return map1(oldApp, curBlock.opArrayAlloc(rtn.newType, length));
		}
		var newArgs = genRefs(oldApp.inputs);
		var arrayNorm = ArrayNorm.!(rtn);
		if (arrayNorm.isMixed()) {
			// mixed array initialization
			var array = curBlock.add(V3Op.newArrayTupleInit(arrayNorm.newType, arrayNorm.enorm.size, len), newArgs, oldApp.facts);
			map1(oldApp, array);
		} else {
			if (rtn.size == 1) return map1(oldApp, curBlock.opArrayInit(rtn.newType, newArgs));
			// complex array initialization
			var arrays = Array<SsaInstr>.new(width);
			for (i < width) {
				var vals = Array<SsaInstr>.new(len);
				for (j < len) {
					vals[j] = newArgs[i + j * width];
				}
				arrays[i] = curBlock.opArrayInit(rtn.sub[i], vals);
			}
			mapN(oldApp, arrays);
		}
	}
	def normArrayGetElem(oldApp: SsaApplyOp, op: Operator) {
		var arrayNorm = ArrayNorm.!(normTypeArg(op, 0)), rtn = normReturnType(op);
		var newArgs = genRefs(oldApp.inputs), width = rtn.size;
		if (width == 1) {
			// common case 1-1 mapping
			return map1(oldApp, curBlock.opArrayGetElem(arrayNorm.newType, Int.TYPE, oldApp.facts, newArgs[0], newArgs[1]));
		} else if (width == 0) {
			// void array access
			curBlock.opBoundsCheck(arrayNorm.newType, newArgs[0], newArgs[1]);
			return map0(oldApp);
		}
		normArrayOrRangeGetElem(oldApp, arrayNorm, width, newArgs, newArgs[arrayNorm.size], Facts.NONE);
	}
	def normRangeFromTo(oldApp: SsaApplyOp, op: Operator) {
		var rangeNorm = RangeNorm.!(normTypeArg(op, 0));
		var startNorm = normTypeArg(op, 1), endNorm = normTypeArg(op, 2);
		var newArgs = genRefs(oldApp.inputs);
		var range_length = newArgs[rangeNorm.lengthIndex()];
		var start = newArgs[rangeNorm.size], end = newArgs[rangeNorm.size + startNorm.size];
		var rangeLengthType = Int.TYPE;
		var startType = IntType.!(startNorm.oldType), endType = IntType.!(endNorm.oldType);
		if (!oldApp.facts.O_NO_BOUNDS_CHECK) {
			// XXX: manually CSE the promotions here?
			var c1 = curBlock.opIntULt(rangeLengthType, startType, range_length, start);
			curBlock.opConditionalThrow(V3Exception.BoundsCheck, c1);
			var c2 = curBlock.opIntULt(endType, startType, end, start);
			curBlock.opConditionalThrow(V3Exception.LengthCheck, c2);
			var c3 = curBlock.opIntULt(rangeLengthType, endType, range_length, end);
			curBlock.opConditionalThrow(V3Exception.BoundsCheck, c3);
		}
		var range_start = newArgs[rangeNorm.startIndex()];
		var result = Array<SsaInstr>.new(rangeNorm.size);
		for (i < rangeNorm.startIndex()) result[i] = newArgs[i];
		if (startType.width > 32) start = curBlock.opIntViewI0(startType, rangeLengthType, start);
		result[rangeNorm.startIndex()] = curBlock.opIntAdd(start, range_start);
		if (endType.width > 32) end = curBlock.opIntViewI0(endType, rangeLengthType, end);
		result[rangeNorm.lengthIndex()] = curBlock.opIntSub(end, start);
		mapN(oldApp, result);
	}
	def normRangeFromPlus(oldApp: SsaApplyOp, op: Operator) {
		var rangeNorm = RangeNorm.!(normTypeArg(op, 0));
		var startNorm = normTypeArg(op, 1), lengthNorm = normTypeArg(op, 2);
		var newArgs = genRefs(oldApp.inputs);
		var range_length = newArgs[rangeNorm.lengthIndex()];
		var start = newArgs[rangeNorm.size], length = newArgs[rangeNorm.size + startNorm.size];
		var rangeLengthType = Int.TYPE;
		var startType = IntType.!(startNorm.oldType), lengthType = IntType.!(lengthNorm.oldType);
		if (!oldApp.facts.O_NO_BOUNDS_CHECK) {
			// XXX: manually CSE the promotions here?
			var c1 = curBlock.opIntULt(rangeLengthType, startType, range_length, start);
			curBlock.opConditionalThrow(V3Exception.BoundsCheck, c1);
			var c2 = curBlock.opIntULt(rangeLengthType, lengthType, range_length, length);
			curBlock.opConditionalThrow(V3Exception.LengthCheck, c2);
			if (startType.width > 32) start = curBlock.opIntViewI0(startType, rangeLengthType, start);
			if (lengthType.width > 32) length = curBlock.opIntViewI0(lengthType, rangeLengthType, length);
			var end = curBlock.opIntAdd(start, length);
			var c3 = curBlock.opU32Lt(range_length, end);
			curBlock.opConditionalThrow(V3Exception.BoundsCheck, c3);
		}
		var range_start = newArgs[rangeNorm.startIndex()];
		var result = Array<SsaInstr>.new(rangeNorm.size);
		for (i < rangeNorm.startIndex()) result[i] = newArgs[i];
		result[rangeNorm.startIndex()] = curBlock.opIntAdd(start, range_start);
		result[rangeNorm.lengthIndex()] = length;
		mapN(oldApp, result);
	}
	def normRangeGetElem(oldApp: SsaApplyOp, op: Operator) {
		var rangeNorm = RangeNorm.!(normTypeArg(op, 0)), rtn = normReturnType(op);
		var newArgs = genRefs(oldApp.inputs), width = rtn.size;
		var w = rangeNorm.size;
		var start = newArgs[rangeNorm.startIndex()], length = newArgs[rangeNorm.lengthIndex()], index = newArgs[rangeNorm.size];
		if (!oldApp.facts.O_NO_BOUNDS_CHECK) {
			// explicit bounds check
			var oob = curBlock.pure(Int.getType(false, 32).opLtEq(), [length, index]);
			curBlock.opConditionalThrow(V3Exception.BoundsCheck, oob);
		}
		index = curBlock.opIntAdd(index, start);
		if (width == 1) {
			// common case 1-1 mapping
			var ni = curBlock.opArrayGetElem(rangeNorm.arrayNorm.newType, Int.TYPE, oldApp.facts, newArgs[0], index);
			ni.setFact(Facts.O_SAFE_BOUNDS); // explicit bounds check, cannot be null
			return map1(oldApp, ni);
		} else if (width == 0) {
			// void range access; bounds check was sufficient
			return map0(oldApp);
		}
		normArrayOrRangeGetElem(oldApp, rangeNorm.arrayNorm, width, newArgs, index, Facts.O_SAFE_BOUNDS);
	}
	def normArrayOrRangeGetElem(oldApp: SsaApplyOp, arrayNorm: ArrayNorm, width: int, newArgs: Array<SsaInstr>, index: SsaInstr, facts: Fact.set) {
		var vals = Array<SsaInstr>.new(width);
		facts |= oldApp.facts;
		if (arrayNorm.isMixed()) {
			// mixed array access
			var array = newArgs[0];
			for (i < width) {
				vals[i] = curBlock.add(V3Op.newArrayGetElemElem(arrayNorm.newType, i), [array, index], facts);
				facts = facts | Facts.O_SAFE_BOUNDS;
			}
		} else {
			// complex array access
			for (i < width) {
				vals[i] = curBlock.opArrayGetElem(arrayNorm.sub[i], Int.TYPE, facts, newArgs[i], index);
				facts = facts | Facts.O_SAFE_BOUNDS;
			}
		}
		mapN(oldApp, vals);
	}
	def normArraySetElem(oldApp: SsaApplyOp, op: Operator) {
		var atn = normTypeArg(op, 0), rtn = normType(op.sig.paramTypes[2]);
		var width = rtn.size;
		var newArgs = genRefs(oldApp.inputs);
		if (width == 1) {
			curBlock.opArraySetElem(atn.newType, Int.TYPE, oldApp.facts, newArgs[0], newArgs[1], newArgs[2]);
			return;
		} else if (width == 0) {
			curBlock.opBoundsCheck(atn.newType, newArgs[0], newArgs[1]);
			return;
		}
		var arrayNorm = ArrayNorm.!(atn);
		if (arrayNorm.isMixed()) {
			// mixed array set
			var array = newArgs[0], index = newArgs[1], facts = oldApp.facts;
			for (i < width) {
				curBlock.add(V3Op.newArraySetElemElem(atn.newType, i), [array, index, newArgs[i + 2]], facts);
				facts = facts | Facts.O_SAFE_BOUNDS;
			}
		} else {
			// complex array set
			var index = newArgs[width], facts = oldApp.facts;
			for (i < width) {
				var i = curBlock.opArraySetElem(atn.sub[i], Int.TYPE, facts, newArgs[i], index, newArgs[i + 1 + width]);
				i.setFact(facts);
				facts = facts | Facts.O_SAFE_BOUNDS;
			}
		}
	}
	def normRangeSetElem(oldApp: SsaApplyOp, op: Operator) {
		var rangeNorm = RangeNorm.!(normTypeArg(op, 0)), rtn = normType(op.sig.paramTypes[2]);
		var newArgs = genRefs(oldApp.inputs), width = rtn.size;
		var start = newArgs[rangeNorm.startIndex()], length = newArgs[rangeNorm.lengthIndex()], index = newArgs[rangeNorm.size];
		if (!oldApp.facts.O_NO_BOUNDS_CHECK) {
			// explicit bounds check
			var oob = curBlock.pure(Int.getType(false, 32).opLtEq(), [length, index]);
			curBlock.opConditionalThrow(V3Exception.BoundsCheck, oob);
		}
		index = curBlock.opIntAdd(index, start);
		var arrayNorm = rangeNorm.arrayNorm;
		if (width == 1) {
			var val = newArgs[rangeNorm.size + 1];
			var i = curBlock.opArraySetElem(arrayNorm.newType, Int.TYPE, oldApp.facts, newArgs[0], index, val);
			i.setFact(Facts.O_SAFE_BOUNDS);
			return;
		} else if (width == 0) {
			// prior bounds check was sufficient
			return;
		}
		if (arrayNorm.isMixed()) {
			// mixed range set
			var array = newArgs[0];
			for (i < width) {
				var val = newArgs[rangeNorm.size + i + 1];
				curBlock.add(V3Op.newArraySetElemElem(arrayNorm.newType, i), [array, index, val], Facts.O_SAFE_BOUNDS);
			}
		} else {
			// complex range set
			for (i < width) {
				var val = newArgs[rangeNorm.size + i + 1];
				curBlock.opArraySetElem(arrayNorm.sub[i], Int.TYPE, Facts.O_SAFE_BOUNDS, newArgs[i], index, val);
			}
		}
	}
	def normArrayGetLength(oldApp: SsaApplyOp, op: Operator) {
		var atn = nonzero(normTypeArg(op, 0));
		var array = genRefs(oldApp.inputs);
		// get the length from the first component array
		var arrayType = if(atn.sub == null, atn.newType, atn.sub[0]);
		return map1(oldApp, curBlock.opArrayGetLength(arrayType, array[0]));
	}
	def normComponentGetField(oldApp: SsaApplyOp, field: IrField, op: Operator) {
		if (oldApp.useList == null) return; // remove unused reads of fields
		var raField = extractFieldRef(oldApp, field);
		var nf = raField.norm;
		if (raField.isConst()) {
			// OPT: inline the field as a constant
			mapValue(oldApp, raField.val, normReturnType(oldApp.op));
			return;
		} else if (nf.length == 1) {
			// common case 1-1 mapping
			var read = curBlock.opGetField(nf[0], newGraph.nop());
			read.facts = read.facts | raField.facts();
			return map1(oldApp, read);
		}
		var reads = Array<SsaInstr>.new(nf.length);
		for (i < reads.length) {
			reads[i] = curBlock.opGetField(nf[i], newGraph.nop());
		}
		return mapN(oldApp, reads);
	}
	def normComponentSetField(oldApp: SsaApplyOp, field: IrField, op: Operator) {
		var raField = extractFieldRef(oldApp, field), fieldVals = genRefs(oldApp.inputs);
		var nf = raField.norm;
		if (nf == null) return; // field has been eliminated
		if (nf.length == 1) {
			// common case 1-1 mapping
			curBlock.opComponentSetField(nf[0], newGraph.nop(), fieldVals[0]);
			return;
		}
		for (i < nf.length) {
			curBlock.opComponentSetField(nf[i], newGraph.nop(), fieldVals[i]);
		}
	}
	def normClassAlloc(oldApp: SsaApplyOp, m: IrMethod, op: Operator) {
		var rc = norm.ra.getClass(op.typeArgs[0]);
		var dn = rc.dataNorm;
		if (dn != null) {
			var inputs = genRefs(oldApp.inputs);
			var result = Vector<SsaInstr>.new().grow(dn.size);
			if (dn.tagType != null) result.put(newGraph.intConst(V3.getVariantTag(rc.oldType)));
			for (i < dn.normRanges.length) {
				var nr = dn.normRanges[i], or = dn.origRanges[i];
				for (j < (nr.1 - nr.0)) result.put(inputs[or.0 + j]);
			}
			return mapNnf(oldApp, result.extract());
		}
		if (m == null) {
			// trivial constructor
			var spec = IrSpec.new(op.typeArgs[0], op.typeArgs, null);
			return map1(oldApp, curBlock.opClassAlloc(spec, Ssa.NO_INSTRS));
		}
		var t = extractMethodRef(oldApp.op, m), funcNorm = t.0, m = t.1;
		var ninputs = genRefs(oldApp.inputs);
		var newArgs = normArgs(funcNorm, ninputs);
		return map1(oldApp, curBlock.opClassAlloc(m, newArgs));
	}
	def normGetField(isVariant: bool, oldApp: SsaApplyOp, field: IrField, op: Operator) {
		// XXX: propagate O_NO_NULL_CHECK and O_PURE
		var ninputs = genRefs(oldApp.inputs);
		if (oldApp.useList == null) {
			// OPT: remove unused read of field
			if (!isVariant) addNullCheck(oldApp, ninputs[0]);
			return;
		}
		var raField = extractFieldRef(oldApp, field);
		if (raField.isConst()) {
			// OPT: inline the field as a constant
			if (!isVariant) addNullCheck(oldApp, ninputs[0]);
			mapValue(oldApp, raField.val, normReturnType(oldApp.op));
			return;
		}
		var nf = raField.norm;
		if (nf.length == 0) {
			// OPT: remove read of useless field
			// OPT: remove read of zero-width field
			if (!isVariant) addNullCheck(oldApp, ninputs[0]);
			return map0(oldApp);
		}
		if (raField.raFacts.RC_UNBOXED) {
			// field of flattened data type
			normType(raField.receiver); // XXX: normType() side-effect of flattening
			var rc = norm.ra.getClass(raField.receiver);
			var vals = Array<SsaInstr>.new(nf.length);
			var start = rc.dataNorm.normRanges[raField.orig.index].0;
			for (i < vals.length) {
				vals[i] = ninputs[start + i];
			}
			return mapNnf(oldApp, vals);
		}
		var receiver = ninputs[0];
		if (nf.length == 1) {
			// common case 1-1 mapping
			var read = curBlock.opGetField(raField.norm[0], receiver);
			read.facts = read.facts | raField.facts(); // OPT: propagate field facts
			return map1(oldApp, read);
		}
		// 1-many mapping
		var vals = Array<SsaInstr>.new(nf.length);
		for (i < vals.length) {
			vals[i] = curBlock.opGetField(nf[i], receiver);
		}
		return mapN(oldApp, vals);
	}
	def normClassSetField(oldApp: SsaApplyOp, field: IrField, op: Operator, init: bool) {
		// XXX: propagate O_NO_NULL_CHECK
		var raField = extractFieldRef(oldApp, field);
		var newArgs = genRefs(oldApp.inputs), receiver = newArgs[0];
		var nf = raField.norm;
		if (nf == null || nf.length == 0 || !raField.raFacts.RF_READ) {
			// OPT: remove write to useless field
			// OPT: remove write of zero-width field
			// OPT: remove write of write-only field
			return addNullCheck(oldApp, receiver);
		} else if (raField.raFacts.RC_UNBOXED) {
			// init/set of field of flattened data type
			return map0(oldApp);
		} else if (nf.length == 1) {
			// common case; 1-1 field mapping
			curBlock.opClassSetField(nf[0], receiver, newArgs[1], init);
			return;
		}
		// 1-many mapping
		var vals = Array<SsaInstr>.new(nf.length);
		for (i < vals.length) {
			curBlock.opClassSetField(nf[i], receiver, newArgs[i + 1], init);
		}
	}
	def normNullCheck(oldApp: SsaApplyOp, op: Operator) {
		var newArgs = genRefs(oldApp.inputs);
		if (newArgs.length >= 1) addNullCheck(oldApp, newArgs[0]);
	}
	def normBoundsCheck(oldInstr: SsaApplyOp, op: Operator) {
		var newArgs = genRefs(oldInstr.inputs);
		var newCheck = curBlock.opBoundsCheck(op.typeArgs[0], newArgs[0], newArgs[1]);
		if (newCheck != null) newCheck.facts = newCheck.facts | oldInstr.facts;
	}
	private def normType(t: Type) -> TypeNorm {
		if (context.spec != null) t = context.spec.instantiateType(t);
		return norm.norm(t);
	}
	private def normFuncType(t: Type) -> FuncNorm {
		def funcNorm = FuncNorm.!(normType(t));
		norm.allocOverflowFields(funcNorm);
		return funcNorm;
	}
	private def extractFieldRef(oldApp: SsaApplyOp, field: IrField) -> RaField {
		var spec = if (specSet != null, specSet.first(), context.spec);
		return norm.ra.makeField(oldApp, field, spec);
	}
	private def extractMethodRef(op: Operator, method: IrMethod) -> (FuncNorm, IrSpec) {
		if (specSet != null) op = op.subst(specSet.first().instantiateType);
		else if (context.spec != null) op = op.subst(context.spec.instantiateType);
		var ta = op.typeArgs;
		var t = norm.normalizeMethodRef(IrSpec.new(ta[0], ta, method));
		return (norm.allocOverflowFields(t.0.funcNorm), t.1);
	}
	private def extractVirtualRef(op: Operator, method: IrMethod) -> (FuncNorm, IrSpec, bool) {
		if (specSet != null) op = op.subst(specSet.first().instantiateType);
		else if (context.spec != null) op = op.subst(context.spec.instantiateType);
		var ta = op.typeArgs;
		var t = norm.normalizeMethodRef(IrSpec.new(ta[0], ta, method)), rm = t.0, spec = t.1;
		ta = spec.typeArgs;
		if (rm.virtual == null) {
			return (norm.allocOverflowFields(rm.funcNorm), spec, false);
		}
		if (context.compiler.ChaDevirtualize && !rm.norm.facts.M_OVERRIDDEN) {
			// devirtualize this call because the method is not overridden
			return (norm.allocOverflowFields(rm.funcNorm), spec, false);
		}
		if (context.compiler.RaDevirtualize && rm.virtual.devirtual != null) {
			// devirtualize this call because only one live version exists
			rm = rm.virtual.devirtual;
			ta = Arrays.replace(ta, 0, rm.norm.receiver);
			spec = IrSpec.new(ta[0], ta, rm.norm);
			return (norm.allocOverflowFields(rm.funcNorm), spec, false);
		}
		var receiver = ta[0];
		var selector = IrSelector.new(receiver, rm.norm, rm.virtual.mtable, rm.normIndex);
		return (norm.allocOverflowFields(rm.funcNorm), IrSpec.new(receiver, ta, selector), true);
	}
	def tryDevirtualize(rm: RaMethod, ta: Array<Type>) -> (IrSpec, bool) {
		if (rm.virtual == null) {
			return (IrSpec.new(ta[0], ta, rm.norm), false);
		}
		if (context.compiler.ChaDevirtualize && !rm.norm.facts.M_OVERRIDDEN) {
			// devirtualize this call because the method is not overridden
			return (IrSpec.new(ta[0], ta, rm.norm), false);
		}
		if (context.compiler.RaDevirtualize && rm.virtual.devirtual != null) {
			// devirtualize this call because only one live version exists
			var m = rm.virtual.devirtual.norm;
			return (IrSpec.new(m.receiver, Arrays.replace(ta, 0, m.receiver), m), false);
		}
		// the call remains a virtual dispatch
		var receiver = ta[0];
		var selector = IrSelector.new(receiver, rm.norm, rm.virtual.mtable, rm.normIndex);
		return (IrSpec.new(receiver, ta, selector), true);
	}
	private def normTypeArg(op: Operator, index: int) -> TypeNorm {
		return normType(op.typeArgs[index]);
	}
	private def normReturnType(op: Operator) -> TypeNorm {
		return normType(op.sig.returnType());
	}
	private def funcRef(m: IrSpec) -> SsaInstr {
		return newGraph.valConst(Function.funcRefType(m.getFuncType()), FuncVal.new(m));
	}
	private def nonzero(tn: TypeNorm) -> TypeNorm {
		if (tn.size == 0) context.fail("expected at least one type");
		return tn;
	}
	private def addNullCheck(oldApp: SsaInstr, obj: SsaInstr) {
		if (!oldApp.facts.O_NO_NULL_CHECK) curBlock.opNullCheck(obj.getType(), obj);
	}
}
