// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// tokens used to distinguish the ends of one polymorphic part from another
def TUPLE_MARK = '\xFF';
def RETURN = '\xFE';
def EQUAL = '\xFD';

// Analyzes polymorphic methods and specializes them according to the polymorphic
// operations they perform.
class Specializer(ra: ReachabilityAnalyzer, rn: ReachabilityNormalizer) {
	var uid = 1;
	var env: IrSpec;
	def specMap = IrUtil.newIrSpecMap<SpecMethod>();
	def virtMap = IrUtil.newIrSpecMap<SpecMethod>();
	def specSet = IrUtil.newIrItemMap<SpecSet>();
	var virtList: List<(RaClass, List<RaMethod>)>;
	def valMap = LazyMap.new(Values.hash, Values.equal, UID.uniquify<Val>);
	def typeMap = LazyMap.new(Type.hash, Type.==, UID.uniquify<Type>);
	def queue = WorkQueue.new();

	def specialize() {
		// create SpecMethod and SpecSet for each method of each class
		rn.allClasses.apply(createSpecs);
		// create the virtual specs
		Lists.apply(virtList, createVirtualSpec);
		virtList = null;
		// compute initial specialization sets based on operators
		specSet.apply(initialSplitBasedOnOperators);
		// iteratively specialize methods based on call graph
		queue.drain();
		// create the normalized/specialized versions of the method
		ra.liveMethods.apply(createNewIrMethod);
	}
	def createSpecs(rc: RaClass) {
		for (ml in rc.methods) {
			var vlist: List<RaMethod>;
			for (l = ml; l != null; l = l.tail) {
				var rm = l.head;
				if (rm.spec == null) continue;
				if (rm.isLive()) createInitialSpec(rm);
				if (rm.isVirtual()) vlist = List.new(rm, vlist);
			}
			if (vlist != null) virtList = List.new((rc, vlist), virtList);
		}
	}
	def createInitialSpec(rm: RaMethod) {
		var specMethod = SpecMethod.new(uid++, rm);
		specMap[rm.spec] = specMethod;
		// create initial SpecSet and add method
		var set = specSet[rm.orig];
		if (set == null) {
			set = SpecSet.new(uid++, rm.orig);
			specSet[rm.orig] = set;
		}
		set.put(specMethod);
	}
	def createVirtualSpec(rc: RaClass, list: List<RaMethod>) {
		// make the spec methods for all instantiations of this virtual method
		// in the same class instantiation
		if (list.tail == null) return; // only one instantiation; doesn't matter
		var m = list.head.orig, set = SpecSet.new(uid++, m), length = 0;
		// create a "virtual" node that calls all the implementations directly
		for (l = list; l != null; l = l.tail) {
			var sm = SpecMethod.new(uid++, l.head);
			virtMap[l.head.spec] = sm;
			sm.set = set;
			set.instantiations = List.new(sm, set.instantiations);
			// set up direct calls to all live implementations
			var calls = Vector<SpecEdge>.new();
			for (k = l.head.virtual.impls; k != null; k = k.tail) {
				calls.put(SpecEdge.new(calls.length, sm, specMap[k.head.spec]));
			}
			length = calls.length;
			sm.calls = calls.extract();
		}
		// treat the set of virtual nodes like other sets
		set.setDirty(length);
		queueMethod(set);
		set.dirtyAll();
	}
	def createNewIrMethod(rm: RaMethod) {
		if (rm.spec == null) return;
		var specMethod = specMap[rm.spec];
		if (specMethod.set == null) return;
		if (specMethod.set.newMethod != null) return;
		specMethod.set.getNewIrSpec(ra);
		rm.norm = specMethod.set.newMethod;
	}
	def normCode(context: SsaContext, rm: RaMethod) -> bool {
		var spec = specMap[rm.spec];
		if (spec.set == null) return false;
		if (spec.set.newMethod.ssa != null) return true; // already done
		// normalize the code for the entire method set
		context.spec = spec.set.newIrSpec;
		var n = SsaRaNormalizer.new(context, rn);
		n.specSet = spec.set;
		n.build(spec.set.newMethod);
		rn.newIr.methods.put(spec.set.newMethod);
		return true;
	}
	def polySignature(apply: SsaApplyOp, sig: SpecSignature) {
		// add any polymorphic keys to the current key array
		var exp = apply.op, t0: TypeNorm;
		if (exp.typeArgs.length > 0) t0 = normType(exp.typeArgs[0]);
		match (exp.opcode) {
			OverloadedEq,
			VariantEq => {
				sig.addParam(t0.newType);
				sig.put(EQUAL);
			}
			TypeCast,
			TypeQuery,
			TypeSubsume => {
				// TODO: use the outcome of the cast/query, not the (normalized) types involved
				sig.addType(this, t0);
				sig.addType(this, normType(exp.typeArgs[1]));
			}
			ArrayAlloc,
			ArrayInit,
			ArrayGetElem,
			ArraySetElem => {
				sig.addMemory(normType(V3Array.elementType(exp.typeArgs[0])).newType);
			}
			NullCheck,
			BoundsCheck,
			ArrayGetLength => {
				sig.addInt(t0.size);
			}
			ClassAlloc(method) => {
				// XXX: could be improved if the class representation is known
				sig.addType(this, t0);
				if (sig.first) {
					var spec = V3Op.extractIrSpec(exp, method);
					if (spec.member != null) sig.addDirectCall(spec);
				}
			}
			ClassGetField(field) => addField(apply, field, sig);
			ClassInitField(field) => addField(apply, field, sig);
			ClassSetField(field) => addField(apply, field, sig);
			ClassGetVirtual(method) => {
				sig.addType(this, t0);
				if (sig.first) sig.addVirtualCall(V3Op.extractIrSpec(exp, method));
			}
			ClassGetMethod(method) => {
				if (sig.first) sig.addDirectCall(V3Op.extractIrSpec(exp, method));
			}
			CreateClosure(method) => {
				if (sig.first) sig.addDirectCall(V3Op.extractIrSpec(exp, method));
			}
			TupleCreate => {
				sig.addInt(t0.size);
			}
			TupleGetElem(index) => {
				var tn = RaTuple.!(t0);
				sig.addInt(tn.offsets[index]); // add offset
				sig.addInt(tn.nested[index].size); // add length
			}
			CallClassVirtual(method) => {
				sig.addType(this, t0);
				if (sig.first) sig.addVirtualCall(V3Op.extractIrSpec(exp, method));
				addCallConv(sig, exp.sig);
			}
			CallMethod(method) => {
				if (sig.first) sig.addDirectCall(V3Op.extractIrSpec(exp, method));
				addCallConv(sig, exp.sig);
			}
			CallClosure => {
				addCallConv(sig, exp.sig);  // TODO XXX: can ignore closure?
			}
			SystemCall => {
				sig.addType(this, t0); // full specialization
			}
			_ => ;
		}
	}
	def addField(apply: SsaApplyOp, field: IrField, sig: SpecSignature) {
		var rf = ra.makeField(apply, field, env);
		if (rf.norm == null || rf.norm.length == 0) {
			sig.addInt(-1);
			sig.addVal(this, rf.val);
		} else {
			sig.addInt(rf.norm[0].asField().machOffset);
			sig.addMemory(rf.fieldType.newType);
		}
	}
	def addCallConv(spec: SpecSignature, sig: Signature) {
		// TODO: should use actual calling convention from backend
		for (p in sig.paramTypes) {
			if (p.open()) spec.addParam(normType(p).newType);
		}
		spec.put(RETURN);
		for (p in sig.returnTypes) {
			if (p.open()) spec.addParam(normType(p).newType);
		}
	}
	def normType(t: Type) -> TypeNorm {
		return ra.makeType(env.instantiateType(t));
	}
	def splitBasedOnCalls(poly: SpecSet) {
//		Terminal.put1("checkCalls %1\n", poly.uid);
		poly.queued = false;
		if (poly.split) return;
		var sig = SpecSignature.new();
		for (lm = poly.instantiations; lm != null; lm = lm.tail) {
			processCalls(sig, poly, lm.head);
		}
		poly.clean();
		if (sig.root.splits != null) {
			sig.root.apply(splitSpecSet(poly, false, _));
		}
	}
	def initialSplitBasedOnOperators(m: IrItem, poly: SpecSet) {
		var list = poly.instantiations;
		if (list.tail == null) return; // only a single instantiation

		// add all the polymorphic properties to the splitter
		var sig = SpecSignature.new();
		for (l = list; l != null; l = l.tail) {
			// for each instantiation
			this.env = l.head.raMethod.spec;
			// add calling convention of specialized method
			addCallConv(sig, poly.method.sig);
			for (op = ra.polyMap[env.asMethod()]; op != null; op = op.tail) {
				// visit each polymorphic operator
				if (op.head != null) polySignature(op.head, sig);
			}
			sig.finish(l.head);
		}
		poly.allocCalls(sig);
		if (sig.root.splits != null) {
			// not all polymorphic signatures match; split into subsets
			sig.root.apply(splitSpecSet(poly, true, _));
		} else {
			// all polymorphic signatures match; don't need to split
			poly.attachToSpecMethods();
			queueMethod(poly);
			poly.dirtyAll();
		}
		if (poly.dirty.length == 0) return; // no direct or indirect calls
		for (l = list; l != null; l = l.tail) {
			var meth = l.head;
			if (meth.set == null) continue; // method is already fully specialized
			var calls = Vector<SpecEdge>.new().grow(poly.dirty.length);
			addDirectCallEdges(sig, calls, meth);
			addVirtualCallEdges(sig, calls, meth);
			meth.calls = calls.extract();
		}
	}
	def addDirectCallEdges(sig: SpecSignature, calls: Vector<SpecEdge>, meth: SpecMethod) {
		for (c in sig.directCalls.copy()) { // XXX: no need to make a copy
			var dest = specMap[meth.raMethod.spec.instantiateIrSpec(c)];
			calls.put(SpecEdge.new(calls.length, meth, dest));
//			Terminal.put2("direct edge %1 -> %2\n", meth.raMethod.orig.render, dest.raMethod.orig.render);
		}
	}
	def addVirtualCallEdges(sig: SpecSignature, calls: Vector<SpecEdge>, meth: SpecMethod) {
		for (c in sig.virtualCalls.copy()) { // XXX: no need to make a copy
			var dest = virtMap[meth.raMethod.spec.instantiateIrSpec(c)];
			calls.put(SpecEdge.new(calls.length, meth, dest));
//			Terminal.put2("virtual edge %1 -> %2\n", meth.raMethod.orig.render, dest.raMethod.orig.render);
		}
	}
	// split a SpecSet into a new subset that only includes the given list
	def splitSpecSet(orig: SpecSet, dirty: bool, list: List<SpecMethod>) {
		orig.split = true;
		Lists.apply(list, dirtyIncomingEdges);
		if (list.tail == null) {
			list.head.set = null; // only a single instantiation
			return;
		}
		var poly = SpecSet.new(uid++, orig.method);
		poly.instantiations = list;
		poly.setDirty(orig.dirty.length);
		poly.attachToSpecMethods();
		if (dirty) {
			queueMethod(poly);
			poly.dirtyAll();
		}
	}
	def dirtyIncomingEdges(dst: SpecMethod) {
		for (edge = dst.useList; edge != null; edge = SpecEdge.!(edge.next)) {
			var src = edge.src.set;
			if (src != null) {
				src.dirty[edge.index] = true;
				queueMethod(src);
			}
		}
	}
	def processCalls(sig: SpecSignature, poly: SpecSet, src: SpecMethod) {
		var dirty = poly.dirty;
		for (i < dirty.length) {
			if (!dirty[i]) continue;
			var meth = src.calls[i].dest;
			if (meth == null) sig.addInt(0);
			else sig.addInt(if(meth.set == null, meth.uid, meth.set.uid));
		}
		sig.finish(src);
	}
	def queueMethod(poly: SpecSet) {
		if (!poly.queued && poly.dirty.length > 0) {
			poly.queued = true;
			queue.add(splitBasedOnCalls, poly);
		}
	}
}
// Represents a potentially specialized method, which may or may not be in a set.
class SpecMethod(uid: int, raMethod: RaMethod) {
	var calls: Array<SpecEdge>;
	var set: SpecSet;
	var useList: SpecEdge;
	def getNormIndex() -> int {
		return if(set != null, set.normIndex, raMethod.normIndex);
	}
	def setNormIndex(i: int) {
//		Terminal.put2("  setNormIndex %1 = %2\n", raMethod.getSpec().render, i);
		if (set != null && set.normIndex == -1) {
			set.normIndex = i;
			if (set.newMethod != null) set.newMethod.index = i; // TODO
		}
		if (raMethod.normIndex < 0) raMethod.normIndex = i;
		if (raMethod.norm.index < 0) raMethod.norm.index = i;
	}
}
// A set of polymorphic instantiations of a method.
class SpecSet(uid: int, method: IrMethod) {
	var newMethod: IrMethod;		// new IrMethod
	var newIrSpec: IrSpec;			// IrSpec with sets substituted in
	var instantiations: List<SpecMethod>;	// instantiations of the method
	var dirty: Array<bool>;			// which outgoing call edges are dirty
	var queued: bool;			// currently on the queue
	var split: bool;			// this set has been split
	var normIndex = -1;			// new method index

	def put(meth: SpecMethod) {
		instantiations = List.new(meth, instantiations);
	}
	def allocCalls(sig: SpecSignature) {
		setDirty(sig.directCalls.length + sig.virtualCalls.length);
	}
	def setDirty(length: int) {
		dirty = Array<bool>.new(length);
	}
	def attachToSpecMethods() {
		for (l = instantiations; l != null; l = l.tail) l.head.set = this;
	}
	def dirtyAll() {
		if (dirty == null) return;
		for (i < dirty.length) dirty[i] = true;
	}
	def clean() {
		if (dirty == null) return;
		for (i < dirty.length) dirty[i] = false;
	}
	def first() -> IrSpec {
		return instantiations.head.raMethod.spec;
	}
	def getNewIrSpec(ra: ReachabilityAnalyzer) -> IrSpec {
		if (newIrSpec != null) return newIrSpec;
		var set = ra.setTypeCon;
		// gather two lists of type args from the instantiations
		var l1: List<TypeArgs>, l2: List<TypeArgs>;
		for (l = instantiations; l != null; l = l.tail) {
			var tt = l.head.raMethod.spec.getTypes().typeArgsList;
			l1 = List.new(tt.head, l1);
			if (tt.tail != null) l2 = List.new(tt.tail.head, l2);
		}
		var typeArgsList = List.new(buildNewTypeArgs(l1, set), null);
		if (l2 != null) typeArgsList = List.new(buildNewTypeArgs(l2, set), typeArgsList);
		var methodTypeArgs: TypeArgs;
		var typeArgs: Array<Type>;
		// find the one with method type arguments (if any)
		if (method.typeArgs != null) {
			for (l = typeArgsList; l != null; l = l.tail) {
				if (method.typeArgs.typeEnv == l.head.typeEnv) methodTypeArgs = l.head;
			}
			typeArgs = Array<Type>.new(1 + methodTypeArgs.types.length);
			Arrays.copyInto(methodTypeArgs.types, typeArgs, 1);
		} else {
			typeArgs = Array<Type>.new(1);
		}
		// instantiate IrSpecTypes
		var types = IrSpecTypes.new(typeArgsList, methodTypeArgs);
		var receiver = types.instantiateType(this.method.receiver);
		// instantiate IrSpec
		newIrSpec = IrSpec.new(typeArgs[0] = receiver, typeArgs, method);
		newIrSpec.types = types; // no need to rebuild IrSpecTypes next time

		var tn = RaFuncType.!(ra.makeType(newIrSpec.getMethodType()));
		var newSig = FuncType.!(tn.sub[0]).sig();
		newMethod = IrMethod.new(receiver, methodTypeArgs, newSig);
		newMethod.source = method.source;
		for (l = instantiations; l != null; l = l.tail) {
			l.head.raMethod.norm = newMethod;
		}
		return newIrSpec;
	}
	def buildNewTypeArgs(list: List<TypeArgs>, typeCon: TypeCon) -> TypeArgs {
		var max = list.head.types.length, typeParams = list.head.typeEnv.paramArray;
		var types = Array<Type>.new(max);
		for (i < max) {
			var typeSet = TypeSet.new(TypeParam.!(typeParams[i]));
			for (l = list; l != null; l = l.tail) typeSet.put(l.head.types[i]);
			types[i] = typeSet.getType(typeCon);
		}
		return TypeArgs.new(list.head.typeEnv, types);
	}
}
// A customized datastructure that divides a set of SpecMethod's based on
// equivalent "signatures", which are sequences of bytes representing the
// polymorphism of the operations.
class SpecSignature {
	def root = SpecSigNode.new();
	def directCalls = Vector<IrSpec>.new();
	def virtualCalls = Vector<IrSpec>.new();
	var cur = root;
	var first = true;

	def addDirectCall(spec: IrSpec) {
		directCalls.put(spec);
	}
	def addVirtualCall(spec: IrSpec) {
		virtualCalls.put(spec);
	}
	def put(key: byte) {
		cur = cur.put(key);
	}
	// add a type to the signature
	def addType(spec: Specializer, t: TypeNorm) {
		addInt(spec.typeMap[t.newType]);
	}
	def addVal(spec: Specializer, v: Val) {
		if (v == null) addInt(0);
		else addInt(spec.valMap[v]);
	}
	// add an integer to the signature
	def addInt(h: int) {
		put(byte.!(h));
		put(byte.!(h >>> 8));
		put(byte.!(h >>> 16));
		put(byte.!(h >>> 24));
	}
	// add a memory reference to the signature
	def addMemory(t: Type) {
		match (t.typeCon.kind) {
			V3Kind.BOOL => put('\x01');
			V3Kind.INT => put(byte.!(IntType.!(t).byteSize()));
			V3Kind.ARRAY => put('\x09');
			V3Kind.CLASS => put('\x09');
			V3Kind.CLOSURE => put('\x0a');
			V3Kind.FUNCREF => put('\x0b'); // XXX: could be equal to the word size of target.
			V3Kind.COMPONENT,
			V3Kind.VOID => put('\x00');
			V3Kind.TUPLE => {
				put(TUPLE_MARK);
				Lists.apply(Tuple.toTypeList(t), addMemory);
				put(TUPLE_MARK);
			}
		}
	}
	// add a parameter type to the signature
	def addParam(t: Type) {
		match (t.typeCon.kind) {
			V3Kind.BOOL => put('\x04');
			V3Kind.INT => put('\x04'); // TODO: size of the integer, calling convention
			V3Kind.ARRAY => put('\x05');
			V3Kind.CLASS => put('\x05');
			V3Kind.CLOSURE => put('\x08');
			V3Kind.FUNCREF => put('\x04');
			V3Kind.TUPLE => {
				put(TUPLE_MARK);
				Lists.apply(Tuple.toTypeList(t), addParam);
				put(TUPLE_MARK);
			}
		}
	}
	// finish the current array and associate it with the given item
	def finish(item: SpecMethod) {
		cur.finish(item);
		first = false;
		cur = root;
		cur.cursor = 0;
	}
}
class SpecSigNode {
	var list: List<SpecMethod>;
	var keys = Vector<byte>.new();
	var splits: Vector<List<SpecSigNode>>;
	var cursor: int;
	// start the current key
	// add one key to the current array
	def put(key: byte) -> SpecSigNode {
		if (list == null) {
			// no elements in the set yet, just add the key
			keys.put(key);
			return this;
		}
		// reached the end of the keys?
		if (cursor == keys.length) return split(key);
		// doesn't match the current key?
		if (keys[cursor] != key) return split(key);
		cursor++;
		// matches the current key, everything is fine
		return this;
	}
	def split(key: byte) -> SpecSigNode {
		if (splits == null) {
			// no splits yet
			splits = Vector.new();
		}
		if (splits.length < cursor + 1) {
			// splits don't extend to cover this position
			splits.grow(cursor + 1);
			splits.length = cursor + 1;
		}
		for (l = splits[cursor]; l != null; l = l.tail) {
			// search for an existing split with a matching key
			if (l.head.keys[cursor] == key) {
				l.head.cursor = cursor + 1;
				return l.head;
			}
		}
		// no existing split found, create a new one
		var set = SpecSigNode.new(), nkeys = Vector<byte>.new();
		set.keys = nkeys.grow(keys.length);
		for (i < cursor) {
			nkeys.put(keys[i]);
		}
		nkeys.put(key);
		set.cursor = cursor + 1;
		// insert new split into the list
		splits[cursor] = List.new(set, splits[cursor]);
		return set;
	}
	// finish the current array and associate it with the given item
	def finish(item: SpecMethod) {
		// TODO: check against the length
		list = List.new(item, list);
	}
	// visit all the collected sets of items
	def apply(f: List<SpecMethod> -> void) {
		if (list != null) f(list);
		if (splits != null) {
			for (i < splits.length) {
				for (l = splits[i]; l != null; l = l.tail) {
					l.head.apply(f);
				}
			}
		}
	}
}
// a set of types
class TypeSet(typeParam: TypeParam) {
	var types = Array<Type>.new(5);
	var length: int;

	def put(t: Type) {
		var a = types;
		for (i < a.length) {
			if (i == length) break;
			var e = a[i];
			if (e == t) return;
			if (e.hash > t.hash) {
				// insert into array
				a = grow();
				for (j = length; j >= i; j--) {
					a[j + 1] = a[j];
				}
				a[i] = t;
				length++;
				return;
			}
		}
		grow()[length++] = t;
		// XXX: switch to a hashmap if the number types gets too large
	}
	def grow() -> Array<Type> {
		if (length == types.length - 1) types = Arrays.grow(types, length * 3);
		return types;
	}
	def render(buf: StringBuffer) -> StringBuffer {
		typeParam.render(buf).puts("={");
		for (i < length) {
			if (i > 0) buf.putc(',');
			types[i].render(buf);
		}
		return buf.putc('}');
	}
	def getType(setTypeCon: TypeCon) -> Type {
		if (length == 0) return V3.fail("no types in type set");
		if (length == 1) return types[0];
		var l: List<Type>;
		for (i < length) l = List.new(types[i], l);
		return setTypeCon.create(l);
	}
}
// TypeCon for set types in the compiler
class TypeSet_TypeCon extends TypeCon {
	new(typeCache: TypeCache) super("<set>", V3Kind.SET, -1, typeCache) { }

	def renderType(buffer: StringBuffer, list: List<Type>) -> StringBuffer {
		buffer.putc('{');
		for (l = list; l != null; l = l.tail) {
			l.head.render(buffer);
			if (l.tail != null) buffer.putc('|');
		}
		return buffer.putc('}');
	}
	def renderTypeRef(buffer: StringBuffer, list: List<TypeRef>) -> StringBuffer {
		buffer.putc('{');
		for (l = list; l != null; l = l.tail) {
			l.head.render(buffer);
			if (l.tail != null) buffer.putc('|');
		}
		return buffer.putc('}');
	}
}
// An edge representing a direct use (e.g. a Call*Method or Get*Method) between methods.
class SpecEdge extends Edge<SpecMethod> {
	def index: int;
	new(index, src: SpecMethod, dst: SpecMethod) super(src, dst) { }
	def getListHead(dest: SpecMethod) -> SpecEdge { return dest.useList; }
	def setListHead(dest: SpecMethod, e: Edge<SpecMethod>) { dest.useList = SpecEdge.!(e); }
}
