// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def INITIAL_MSIZE = 16;

// Creates methods to wrap operators so they can be used as closures
class IrOpMethodBuilder(prog: Program) {
	var closures: Array<IrClass>;

	def buildOpMethod(compiler: Compiler, op: Operator, facts: Fact.set) -> IrSpec {
		// XXX: cache Operator -> IrSpec
		var typeArgs: TypeArgs;
		if (op.isPolymorphic()) {
			var abstracter = TypeParamAbstracter.new(prog);
			op = op.subst(abstracter.substitute);
			typeArgs = abstracter.getTypeArgs();
		}
		// build SSA params and types
		def receiver = createGlobalIrClass();
		var context = SsaContext.new(compiler, prog);
		var meth = createIrMethod(receiver, typeArgs, op.sig);
		meth.setFact(Fact.M_INLINE);
		context.enterMethod(meth);
		var block = createSsa(context, receiver, meth);
		// build block
		var params = Arrays.range(meth.ssa.params, 1, meth.ssa.params.length);
		var args = Arrays.map(params, SsaInstr.!<SsaParam>);
		var apply: SsaInstr;
		apply = block.addApply(null, Operator.!(op), args);
		apply.setFact(facts);
		block.addReturn([apply]);
		context.printSsa("Generated");
		// create the IrSpec
		var ta = if(typeArgs != null, Arrays.prepend(receiver, typeArgs.types), [receiver]);
		return IrSpec.new(receiver, ta, meth);
	}
	// build an operator capable of creating a closure for the given operator and args
	def buildOpClosure(context: SsaContext, ssa: SsaBuilder, op: Operator, args: Array<SsaInstr>, indexMap: Array<int>) -> SsaInstr {
		// get the closure type
		var ic = createClosureClass(context, indexMap.length);
		var closureType = getClosureType(ic, op, indexMap);
		var newSpec = IrSpec.new(closureType, [closureType], ic.methods[0]);
		// create the closure object
		// XXX: fold the closure creation if possible
		var closure = ssa.addApply(null, V3Op.newClassAlloc(newSpec), args);
		closure.facts |= Fact.O_PURE;
		// create the closure method
		var abstracter = TypeParamAbstracter.new(prog);
		var meth = createClosureMethod(context, ic, op, abstracter, indexMap);
		var spec = IrSpec.new(prog.globalType(), Lists.toArray(List.new(closureType, abstracter.oldTypeParams)), meth);
		// XXX: fold creation of closure if possible
		return ssa.addApply(null, V3Op.newCreateClosure(spec, closureType), [closure]);
	}
	def getClosureType(ic: IrClass, op: Operator, indexMap: Array<int>) -> Type {
		var boundTypes: List<Type>;
		for (i = indexMap.length - 1; i >= 0; i--) {
			boundTypes = List.new(op.sig.paramTypes[indexMap[i]], boundTypes);
		}
		return ic.ctype.typeCon.create(boundTypes);
	}
	def createClosureMethod(context: SsaContext, ic: IrClass, op: Operator, abstracter: TypeParamAbstracter, indexMap: Array<int>) -> IrMethod {
		// create parameters and method
		op = op.subst(abstracter.substitute);
		var paramTypes = Lists.toArray(op.sig.getResidualParamTypeList(indexMap));
		var meth = createIrMethod(ic.ctype, abstracter.getDefaultTypeArgs(), Function.siga(paramTypes, op.sig.returnType()));
		meth.facts |= Fact.M_INLINE;
		context.enterMethod(meth);
		// build the body of the method
		var closureType = getClosureType(ic, op, indexMap);
		var block = createSsa(context, closureType, meth);
		var receiver: SsaInstr = meth.ssa.params[0];
		var args = Array<SsaInstr>.new(op.sig.paramTypes.length);
		var ia = 0, ip = 1;
		for (i < op.sig.paramTypes.length) {
			if (ia < indexMap.length && i == indexMap[ia]) {
				// the argument is bound in the closure
				var spec = IrSpec.new(closureType, [closureType], ic.fields[ia]);
				var load = block.addApply(null, V3Op.newClassGetField(spec), [receiver]);
				load.setFact(Fact.O_PURE | Fact.O_NO_NULL_CHECK);
				args[i] = load;
				ia++;
			} else {
				// the argument is a parameter to this method
				args[i] = meth.ssa.params[ip++];
			}
		}

		var app = block.addApply(null, op, args);
		block.addReturn([app]);
		context.printSsa("Generated");
		return meth;
	}
	def createClosureClass(context: SsaContext, numBound: int) -> IrClass {
		if (closures == null) closures = Array.new(numBound + 3);
		if (numBound >= closures.length) closures = Arrays.grow(closures, closures.length + numBound);
		if (closures[numBound] != null) return closures[numBound];

		// create the VST-level class type
		var name = Strings.builderOf(prog.name()).puts("$closure").putd(numBound).toString();
		var typeParams: List<TypeParamType>;
		for (i < numBound) {
			typeParams = List.new(TypeUtil.newTypeParam(null, prog.typeCache), typeParams);
		}
		var decl = VstClass.new(false, Token.new("<generated>", name, 0, 0), typeParams, null, null, null, null);
		decl.typeEnv = TypeEnv.new(null, typeParams, null);
		decl.typeCon = V3Class_TypeCon.new(decl, prog.typeCache);
		var classType = decl.getDeclaredType();

		// add a constructor that initializes the fields
		var builder = IrBuilder.new(classType, null);
		var paramTypes = Array<Type>.new(numBound);
		var i = 0;
		for (l = typeParams; l != null; (l = l.tail, i++)) {
			var f = IrField.new(classType, l.head);
			f.index = i;
			f.setFact(Fact.F_VALUE | Fact.O_FOLDABLE);
			builder.addIrField(f); // add a field
			paramTypes[i] = l.head; // and a parameter type
		}
		var meth = IrMethod.new(classType, null, Function.siga(paramTypes, classType));
		meth.setFact(Fact.M_NEW | Fact.M_INLINE);
		builder.addIrMethod(meth);
		builder.methods.grow(INITIAL_MSIZE);
		builder.methods.length = INITIAL_MSIZE;
		context.enterMethod(meth);

		// build the body of the constructor
		var block = createSsa(context, classType, meth), params = meth.ssa.params;
		var receiver: SsaInstr = params[0];
		for (i < numBound) {
			var spec = IrSpec.new(classType, [classType], builder.fields[i]);
			block.addApply(null, V3Op.newClassInitField(spec), [receiver, params[i + 1]]);
		}
		block.addReturn([receiver]);
		context.printSsa("Generated");
		var ic = closures[numBound] = builder.build();
		prog.ir.classMap[ic.ctype] = ic;
		return ic;
	}
	def createSsa(context: SsaContext, receiver: Type, meth: IrMethod) -> SsaBuilder {
		var params = Array<SsaParam>.new(meth.sig.paramTypes.length + 1);
		params[0] = SsaParam.new(0, receiver);
		for (i = 1; i < params.length; i++) {
			params[i] = SsaParam.new(i, meth.sig.paramTypes[i - 1]);
		}
		meth.ssa = SsaGraph.new(params, meth.sig.returnType());
		context.graph = meth.ssa;
		return SsaBuilder.new(context, meth.ssa, meth.ssa.startBlock);
	}
	def createIrMethod(receiver: Type, typeArgs: TypeArgs, sig: Signature) -> IrMethod {
		// XXX: ugly hack; add another method to an existing IrClass by recreating it if necessary
		var ic = prog.ir.getIrClass(receiver);
		var m = IrMethod.new(receiver, typeArgs, sig);
		// search for an empty slot
		var length = ic.methods.length;
		for (i = 1; i < length; i++) {
			if (ic.methods[i] == null) return setIrMethod(ic, i, m);
		}
		ic = IrClass.new(receiver, ic.typeArgs, ic.parent, ic.fields, Arrays.grow(ic.methods, length * 4));
		prog.ir.classMap[receiver] = ic;
		return setIrMethod(ic, length, m);
	}
	private def setIrMethod(ic: IrClass, i: int, m: IrMethod) -> IrMethod {
		m.index = i;
		return ic.methods[i] = m;
	}
	def createGlobalIrClass() -> Type {
		var receiver = prog.globalType();
		var ic = prog.ir.getIrClass(receiver);
		if (ic == null) {
			ic = IrClass.new(receiver, null, null, [], Array<IrMethod>.new(INITIAL_MSIZE));
			prog.ir.classMap[receiver] = ic;
		}
		return receiver;
	}
}
// Abstracts any type parameters in a type with a new type parameter
class TypeParamAbstracter(prog: Program) extends TypeSubst {
	var newTypeParams: List<TypeParamType>;
	var oldTypeParams: List<Type>;

	def substituteTypeParam(typeParam: TypeParamType) -> Type {
		// XXX: (linear) search for existing type parameter substitution
		var nl = newTypeParams;
		for (ol = oldTypeParams; ol != null; (ol = ol.tail, nl = nl.tail)) {
			if (ol.head == typeParam) return nl.head;
		}
		// introduce a new type parameter
		oldTypeParams = List.new(typeParam, oldTypeParams);
		var newTypeParam = TypeUtil.newTypeParam(null, prog.typeCache);
		newTypeParams = List.new(newTypeParam, newTypeParams);
		return newTypeParam;
	}
	def getTypeArgs() -> TypeArgs {
		if (oldTypeParams == null) return null;
		var typeEnv = TypeEnv.new(null, newTypeParams, null);
		return TypeArgs.new(typeEnv, Lists.toArray(oldTypeParams));
	}
	def getDefaultTypeArgs() -> TypeArgs {
		if (oldTypeParams == null) return null;
		return TypeArgs.new(TypeEnv.new(null, newTypeParams, null), null);
	}
}
