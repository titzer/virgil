// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

enum Fact {
	UNUSED,                 // prevent some compiler bugs
	// facts for fields
	F_VALUE,		// field is read-only
	F_NORM,			// the field is an element of a normalized field
	// facts for methods
	M_EQUALS,		// method is an equality comparator
	M_OVERRIDDEN,		// method has been overridden in a subclass
	M_OVERRIDE,		// method overrides a superclass method
	M_OPERATOR,		// method wraps an operator
	M_NEW,			// the method is a constructor
	M_ABSTRACT,		// the method is abstract
	M_INLINE,		// method should be inlined whenever possible
	M_NEVER_INLINE,		// method should never be inlined
	M_EMPTY,		// method has no body (should throw)
	// facts for classes
	C_ALLOCATED,		// the class is allocated dynamically
	C_HEAP,			// exists live in the heap
	C_ENUM,			// this class represents an enum
	// facts for values
	V_ZERO,			// == 0 (or null)
	V_NON_ZERO,		// != 0 (or null)
	V_BELOW_ZERO,		// < 0
	V_NON_NEGATIVE,		// >= 0
	// facts for operators
	O_PURE,			// no side-effects + deterministic
	O_FOLDABLE,		// can be constant folded
	O_COMMUTATIVE,		// f(x, y) == f(y, x)
	O_ASSOCIATIVE,		// f(f(x, y), z) == f(x, f(y, z))
	O_NO_SHIFT_CHECK,	// 31 >= y >= 0
	O_NO_NULL_CHECK,	// x != null, x != NaN for floats
	O_NO_BOUNDS_CHECK,	// no bounds check required
	O_NO_ZERO_CHECK,	// y != 0
	O_NO_NEGATIVE_CHECK,	// x >= 0
	O_NO_DIV_CHECK,		// x != Int.MIN || y != -1
	O_NO_INT_TRUNC,		// integer truncation not necessary
	O_KILLED,		// instruction is dead
	X_LIVE 			// used for reachability
}

// Facts and flags for classes, fields, methods, values, and operators
component Facts {
	def NONE: Fact.set;
	// combinations of facts
	def O_SAFE_BOUNDS = Fact.O_NO_NULL_CHECK | Fact.O_NO_BOUNDS_CHECK;
	// all facts about a value
	def V_FACTS = Fact.V_ZERO | Fact.V_NON_ZERO | Fact.V_BELOW_ZERO | Fact.V_NON_NEGATIVE;
	// facts for default values
	def V_DEFAULT = Fact.V_ZERO | Fact.V_NON_NEGATIVE;
	// facts for a safe divide
	def O_SAFE_DIVIDE = Fact.O_NO_ZERO_CHECK | Fact.O_PURE;
	// alias for NO_NULL_CHECK
	def O_NO_NAN_CHECK = Fact.O_NO_NULL_CHECK;
	// facts for a safe shift
	def O_SAFE_SHIFT = Fact.O_NO_SHIFT_CHECK | Fact.O_PURE;

	def isLive(ic: IrClass) -> bool {
		return (ic.facts & (Fact.C_ALLOCATED | Fact.C_HEAP)) != NONE;
	}
	def renderFacts(buf: StringBuilder, facts: Fact.set) -> StringBuilder {
		var first = true;
		for (fact in facts) {
			if (!first) buf.sp();
			first = false;
                        buf.puts(fact.name);
		}
		return buf;
	}
	def intFacts(v: int) -> Fact.set {
		if (v < 0) return Fact.V_BELOW_ZERO | Fact.V_NON_ZERO;
		if (v == 0) return Facts.V_DEFAULT;
		// XXX: V_SHIFTOR for values 0 <= v <= 31
		// XXX: V_BYTE for values 0 <= v <= 255
		return Fact.V_NON_NEGATIVE | Fact.V_NON_ZERO;
	}
	def longFacts(v: long) -> Fact.set {
		if (v < 0) return Fact.V_BELOW_ZERO | Fact.V_NON_ZERO;
		if (v == 0) return Facts.V_DEFAULT;
		// XXX: V_SHIFTOR for values 0 <= v <= 31
		// XXX: V_BYTE for values 0 <= v <= 255
		return Fact.V_NON_NEGATIVE | Fact.V_NON_ZERO;
	}
}
