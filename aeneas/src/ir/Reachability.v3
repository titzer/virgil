// Copyright 2013 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Constants representing flags for reachability analysis
enum RaFact {
	RM_LIVE,
	RF_NORMALIZED,
	RF_READ,
	RF_WRITTEN,
	RF_INIT,
	RF_VAL_ONE,
	RF_VAL_MANY,
	RC_ALLOC,
	RC_LIVE,
	RC_DUMPED,
	RC_EQUALITY,
	RC_VARIANT,
	RC_ENUM,
	RC_CLOSURE,
	RC_BOXED,
}

def DUMP: Terminal;
def XXX: Terminal;
def NONE: RaFact.set;
def countVals(facts: RaFact.set) -> int {
	return if(facts.RF_VAL_MANY, 2, if(facts.RF_VAL_ONE, 1));
}
def live(facts: RaFact.set) -> bool {
       	return (facts & (RaFact.RC_LIVE | RaFact.RC_ALLOC)) != NONE;
}

def MONO_TYPEARGS: Array<Type> = [AnyRef.TYPE];

def EQUALS_VST_METHOD = VstMethod.new(false, Token.new(null, "==", 0, 0), null, null, ReturnType.Void, null);

// Performs polymorphic reachability analysis over a program.
class ReachabilityAnalyzer(compilation: Compilation) {
	def compiler = compilation.compiler;
	def prog = compilation.prog;
	def oldIr = prog.ir;
	def typeMap = TypeUtil.newTypeMap<RaType>();
	def records = V3.newRecordMap<Record>();
	def polyMap = IrUtil.newIrItemMap<List<SsaApplyOp>>();
	def queue = WorkQueue.new();
	def classes = Vector<RaClass>.new();
	def arrays = Vector<RaArray>.new();
	var liveMethods = Vector<RaMethod>.new();

	// perform the analysis, starting from the roots
	def analyze() {
		for (i < oldIr.roots.length) {
			var meth = oldIr.roots[i].spec;
			getMethod(null, makeMethod(meth.typeArgs, meth.asMethod(), null));
			makeType(meth.receiver);
		}
		queue.drain(); // do all work
	}
	def transform(config: NormalizerConfig) {
		ReachabilityNormalizer.new(config, this).normalize();
	}
	def dump() {
		liveMethods.apply(dumpMethod);
		arrays.apply(dumpType);
		classes.apply(dumpType);
		records.apply(dumpRecord);
	}
	def dumpMethod(rm: RaMethod) {
		if (rm == null || rm.setFact(RaFact.RC_DUMPED)) return;
		DUMP.put1("%q", if (rm.spec != null, rm.spec.render, rm.orig.renderLong));
		dumpFacts(rm.raFacts, rm.virtual, null, false);
	}
	def dumpField(receiver: Type, rf: RaField) {
		if (rf == null) return;
		DUMP.put2("%q.%q", receiver.render, rf.orig.render);
		dumpFacts(rf.raFacts, null, rf.val, false);
	}
	def dumpType(rt: RaType) {
		if (live(rt.raFacts)) {
			DUMP.put1("%q", rt.oldType.render);
			dumpFacts(rt.raFacts, null, null, RaClass.?(rt) && RaClass.!(rt).recursive == 2);
		}
		if (RaClass.?(rt)) {
			var rc = RaClass.!(rt);
			for (list in rc.methods) {
				for (l = list; l != null; l = l.tail) {
					dumpMethod(l.head);
				}
			}
			for (i = rc.fieldStart(); i < rc.fields.length; i++) {
				dumpField(rt.oldType, rc.fields[i]);
			}
		}
	}
	def dumpRecord(r: Record, x: Record) {
		if (!V3.isComponent(r.rtype)) DUMP.put2("%q #%d\n", r.rtype.render, r.id);
	}
	def dumpFacts(facts: RaFact.set, virtual: RaVirtual, val: Val, recursive: bool) {
		if (facts.RF_READ) DUMP.put(" read");
		if (facts.RF_WRITTEN) DUMP.put(" written");
		if (facts.RF_INIT) DUMP.put(" init");
		if (facts.RM_LIVE) DUMP.put(" live");
		if (virtual != null) DUMP.put(" virtual");
		if (facts.RC_LIVE) DUMP.put(" live");
		if (facts.RC_ALLOC) DUMP.put(" alloc");
		if (facts.RC_VARIANT) DUMP.put(" variant");
		if (facts.RC_EQUALITY) DUMP.put(" equal");
		if (facts.RC_CLOSURE) DUMP.put(" closure");
		if (facts.RC_BOXED) DUMP.put(" boxed");
		if (countVals(facts) == 1) {
			DUMP.put1(" const[%s]", V3.renderVal(val));
		}
		if (recursive) DUMP.put(" recursive");
		DUMP.ln();
	}
	// a quick check to see if a type is the same as its normalization
	def isNormalType(t: Type) -> bool {
		match(t.typeCon.kind) {
			BOOL, INT, CLASS => return true;
			ARRAY => return isNormalType(V3Array.elementType(t));
			_ => return false;
		}
	}
	// defer analysis of a value
	def deferValue(val: Val) {
		match (val) {
			null => ;
			x: Record => queue.add(analyzeRecord, x);
			x: Closure => queue.add(analyzeValue, x);
			x: TupleVal => queue.add(analyzeValue, x);
			x: ArrayRangeVal => queue.add(analyzeRecord, x.array);
		}
	}
	// defer analysis of a record
	def deferRecord(r: Record) {
		if (r != null) queue.add(analyzeRecord, r);
	}
	// analyze a value such as a record, closure, or tuple
	def analyzeValue(val: Val) {
		match (val) {
			x: Record => analyzeRecord(x);
			x: Closure => {
				// analyze a record + method closure pair
				var spec = x.memberRef;
				var rm = makeMethod(spec.typeArgs, IrMethod.!(spec.member), null);
				var receiver = makeType(rm.receiver);
				receiver.raFacts |= RaFact.RC_CLOSURE;
				getMethod(null, rm);
				if (x.val != null) analyzeValue(x.val);
			}
			x: TupleVal => for(e in x.values) analyzeValue(e);
		}
	}
	// analyze a record
	def analyzeRecord(record: Record) {
		if (records[record] == record) return;
		records[record] = record;
		var raType = makeType(record.rtype);
		var newlyLive = !live(raType.raFacts);
		raType.raFacts |= RaFact.RC_LIVE;
		match (raType) {
			x: RaClass => {
				// analyze a class object's fields and methods
				x.instances = List.new(record, x.instances);
				if (newlyLive) analyzeLiveClass(x);
				// analyze class fields
				for (rf in x.fields) analyzeField(record, rf);
			}
			x: RaArray => {
				// analyze an array's elements
				x.instances = List.new(record, x.instances);
				if (x.primitive) return;
				for (v in record.values) deferValue(v);
			}
		}
	}
	// analyze a field of a record if the field is live
	def analyzeField(record: Record, rf: RaField) {
		if (rf != null && rf.raFacts.RF_READ) {
			var v = record.values[rf.orig.index];
			rf.addValue(v);
			deferValue(v);
		}
	}
	// analyze a class that just became live
	def analyzeLiveClass(rc: RaClass) {
		for (c = rc; c != null; c = c.parent) {
			c.subtypes = List.new(rc, c.subtypes);
			for (ml in c.methods) {
				for (l = ml; l != null; l = l.tail) analyzeVirtual(rc, l.head);
			}
			if (c.raFacts.RC_EQUALITY) {
				if (!rc.setFact(RaFact.RC_EQUALITY) && V3.isVariant(rc.oldType)) getAndCompareAllFields(rc);
			}
		}
	}
	// analyze a possible virtual dispatch of the given method on the given type
	def analyzeVirtual(rc: RaClass, rm: RaMethod) {
		var rv = rm.virtual;
		if (rv == null) return;
		var spec = oldIr.resolveMethodImpl(rc.oldType, rm.getSpec());
		var impl = makeMethod(spec.typeArgs, IrMethod.!(spec.member), null);
		rv.addImpl(impl);
		getMethod(null, impl);
	}
	def gatherCaseClasses(vec: Vector<IrClass>, decl: VstClass) -> Vector<IrClass> {
		if (decl.cases == null) return vec;
		for (c in decl.cases) {
			vec.put(oldIr.getIrClass(c.decl.getDeclaredType()));
			if (c.decl != decl) gatherCaseClasses(vec, c.decl);
		}
		return vec;
	}
	def generateVariantEquals(t: Type) -> RaClass {
		var rc = makeClass(t);
		while (rc.parent != null) rc = rc.parent;  // get root declaration.
		if (rc.orig.methods[IrUtil.EQUALS_METHOD_INDEX] != null) return rc; // done.

		var decl = V3.classDecl(rc.orig.ctype);
		var cases = gatherCaseClasses(Vector<IrClass>.new(), decl);
		var polyType = decl.getDeclaredType();

		var method = IrMethod.new(polyType, null, Function.sig(polyType, Bool.TYPE));
		method.source = EQUALS_VST_METHOD;
		method.setFact(Fact.M_EQUALS | Fact.M_INLINE);
		rc.orig.methods[IrUtil.EQUALS_METHOD_INDEX] = method;
		method.index = IrUtil.EQUALS_METHOD_INDEX;

		// build overridden methods for each case that has fields
		for (i < cases.length) {
			var ic = cases[i];
			var superType = V3.getSuperType(ic.ctype);
			if (superType == null) superType = ic.ctype;
			var pc = oldIr.getIrClass(superType);
			var pm = pc.methods[IrUtil.EQUALS_METHOD_INDEX];
			if (ic.fields.length > 0) {
				pm.facts |= Fact.M_OVERRIDDEN;
				pm = IrMethod.new(ic.ctype, null, Function.sig(polyType, Bool.TYPE));
				pm.source = EQUALS_VST_METHOD;
				pm.facts |= Fact.M_EQUALS;
				pm.index = IrUtil.EQUALS_METHOD_INDEX;
			}
			ic.methods[IrUtil.EQUALS_METHOD_INDEX] = pm;
		}
		return rc;
	}
	// analyze a method's code
	def analyzeMethod(rm: RaMethod) {
		var graph = rm.orig.ssa;
		if (graph == null) {
			if (rm.orig.facts.M_EQUALS) return; // don't analyze equality methods
			graph = compilation.genSsa(rm.getSpec(), 0);
		}
		if (rm.spec != null) {
			// analyze a polymorphic method
			var polyOps = polyMap[rm.orig];
			if (polyOps == null) {
				analyzeValues(graph);
				polyOps = gatherPolyOps(graph);
				polyMap[rm.orig] = polyOps;
			}
			for (l = polyOps; l != null; l = l.tail) {
				if (l.head != null) analyzeOp(l.head, rm.spec);
			}
		} else {
			analyzeValues(graph);
			// analyze a monomorphic method
			for (b in graph.bfBlocks(null)) { // XXX: iterate over blocks directly
				for (i = b.next; i != b; i = i.next) {
					if (SsaApplyOp.?(i)) analyzeOp(SsaApplyOp.!(i), rm.spec);
				}
			}
		}
	}
	// analyze the values in a graph
	def analyzeValues(graph: SsaGraph) {
		if (graph.values != null) {
			for (v in graph.values) if (v != null) analyzeValue(v.val);
		}
	}
	// gather polymorphic operators
	def gatherPolyOps(graph: SsaGraph) -> List<SsaApplyOp> {
		var polyOps: List<SsaApplyOp>;
		for (b in graph.bfBlocks(null)) { // XXX: iterate over blocks directly
			for (i = b.next; i != b; i = i.next) {
				if (SsaApplyOp.?(i)) {
					var apply = SsaApplyOp.!(i);
					if (apply.op.isPolymorphic()) polyOps = List.new(apply, polyOps);
					else analyzeOp(apply, null);
				}
			}
		}
		if (polyOps == null) polyOps = List.new(null, null); // add at least one element
		return polyOps;
	}
	// analyze an operator
	def analyzeOp(op: SsaApplyOp, context: IrSpec) {
		match (op.op.opcode) {
			OverloadedEq,
			RefEq,
			VariantEq => getEquality(mono(op.op.typeArgs[0], context), context);
			ArrayAlloc,
			ArrayInit => allocation(makeType(mono(op.op.typeArgs[0], context)));
			ClassAlloc(method) => {
				var rm = opMethod(op, method, context);
				if (rm != null) getMethod(op, rm);
				allocation(makeType(mono(op.op.typeArgs[0], context)));
			}
			ClassGetVirtual(method) => getVirtual(closureMethod(opMethod(op, method, context)));
			ClassGetMethod(method) => getMethod(op, closureMethod(opMethod(op, method, context)));
			CreateClosure(method) => getMethod(op, closureMethod(opMethod(op, method, context)));
			ClassGetField(field) => if (op.useList != null) getField(makeField(op, field, context));
			VariantGetField(field) => if (op.useList != null) getField(makeField(op, field, context));
			VariantGetVirtual(method) => getVirtual(closureMethod(opMethod(op, method, context)));
			VariantGetMethod(method) => getMethod(op, closureMethod(opMethod(op, method, context)));
			ComponentGetField(field) => if (op.useList != null) getField(makeField(op, field, context));
			ClassInitField(field) => initField(op, makeField(op, field, context));
			ClassSetField(field) => setField(op, makeField(op, field, context));
			ComponentSetField(field) => setField(op, makeField(op, field, context));
			CallMethod(method) => getMethod(op, opMethod(op, method, context));
			CallClassMethod(method) => getMethod(op, opMethod(op, method, context));
			CallClassVirtual(method) => getVirtual(opMethod(op, method, context));
			CallVariantVirtual(method) => getVirtual(opMethod(op, method, context));
			PtrAtObjectField(field) => if (op.useList != null) getAndSetField(makeField(op, field, context));
			PtrAtComponentField(field) => if (op.useList != null) getAndSetField(makeField(op, field, context));
			_ => ;
		}
	}
	def closureMethod(m: RaMethod) -> RaMethod {
		var receiver = makeType(m.receiver);
		receiver.raFacts |= RaFact.RC_CLOSURE;
		return m;
	}
	// analyze an equality comparison
	def getEquality(t: Type, context: IrSpec) {
		match (t.typeCon.kind) {
			CLASS => {
				var rc = makeClass(t);
				// Set equality on all live subtypes
				if (!rc.setFact(RaFact.RC_EQUALITY)) {
					for (l = rc.subtypes; l != null; l = l.tail) {
						rc.raFacts |= RaFact.RC_EQUALITY;
					}
				}
			}
			VARIANT => {
				var rc = generateVariantEquals(t);
				// Set equality on all live subtypes and mark all fields as read
				if (!rc.setFact(RaFact.RC_EQUALITY)) {
					getAndCompareAllFields(rc);
					for (l = rc.subtypes; l != null; l = l.tail) {
						if (!l.head.setFact(RaFact.RC_EQUALITY)) getAndCompareAllFields(l.head);
					}
				}
				var rm = makeMethod([rc.oldType], rc.orig.methods[IrUtil.EQUALS_METHOD_INDEX], context);
				getVirtual(rm);
			}
			_ => for (l = t.nested; l != null; l = l.tail) getEquality(l.head, context);
		}
	}
	// analyze an access of a field
	def analyzeGetField(receiver: RaClass, rf: RaField) {
		for (t = receiver.subtypes; t != null; t = t.tail) { // for all live subtypes
			for (l = t.head.instances; l != null; l = l.tail) { // for all instances
				analyzeField(l.head, rf);
			}
		}
	}
	def allocation(raType: RaType) {
		var oldFacts = raType.raFacts;
		raType.raFacts |= RaFact.RC_ALLOC;
		if (RaClass.?(raType) && !live(oldFacts)) {
			// process a newly-live class
			analyzeLiveClass(RaClass.!(raType));
		}
	}
	def getVirtual(rm: RaMethod) {
		if (rm.isVirtual()) return;
		rm.virtual = RaVirtual.new(rm);
		var rc = makeClass(rm.receiver);
		for (l = rc.subtypes; l != null; l = l.tail) {
			analyzeVirtual(l.head, rm);
		}
	}
	def getMethod(op: SsaApplyOp, rm: RaMethod) {
		if (rm.setFact(RaFact.RM_LIVE)) return;
		liveMethods.put(rm);
		queue.add(analyzeMethod, rm);
		if (V3.isVariant(rm.receiver)) { // XXX: this is because of variant null replacement
			var rc = makeClass(V3.getDefaultVariantCaseType(prog, rm.receiver));
			var newlyLive = !live(rc.raFacts);
			rc.raFacts |= RaFact.RC_LIVE;
			if (newlyLive) analyzeLiveClass(rc);
		}
	}
	def getField(rf: RaField) {
		if (rf.setFact(RaFact.RF_READ)) return;
		queue.add(analyzeGetField, (makeClass(rf.receiver), rf));
	}
	def getAndCompareAllFields(rc: RaClass) {
		var typeArgs = V3.getTypeArgs(rc.oldType);
		for (f in rc.orig.fields) {
			var rf = makeField2(rc, f);
			getField(rf);
			getEquality(if(rf.fieldType == null, f.fieldType, rf.fieldType), null);
		}
	}
	def getAndSetField(rf: RaField) {
		getField(rf);
		rf.raFacts |= RaFact.RF_WRITTEN;
		var none: Fact.set;
		rf.writeFacts = none;
		rf.setFact(RaFact.RF_VAL_MANY);
	}
	def setField(op: SsaApplyOp, rf: RaField) {
		rf.raFacts |= RaFact.RF_WRITTEN;
		var val = op.input1();
		rf.writeFacts = rf.writeFacts & val.facts & Facts.V_FACTS;
		if (SsaConst.?(val)) rf.addValue(SsaConst.!(val).val);
		else rf.setFact(RaFact.RF_VAL_MANY);
	}
	def initField(op: SsaApplyOp, rf: RaField) {
		var val = op.input1();
		if (SsaConst.?(val)) rf.addValue(SsaConst.!(val).val);
		else rf.setFact(RaFact.RF_VAL_MANY);
		if (!rf.raFacts.RF_INIT) {
			// first initialization seen of the field
			rf.raFacts |= RaFact.RF_INIT;
			rf.initFacts = val.facts & Facts.V_FACTS;
		} else {
			// not the first initialization seen
			rf.initFacts = rf.initFacts & val.facts & Facts.V_FACTS;
		}
	}
	def makeField(op: SsaApplyOp, f: IrField, context: IrSpec) -> RaField {
		var rf = f.raField;
		if (rf != null) return rf;
		// try to make a simple field first
		var receiver = f.receiver;
		if (!receiver.open()) return makeSimpleField(makeClass(receiver), f);
		// get polymorphic receiver type from operator
		receiver = mono(op.op.typeArgs[0], context);
		return makePolyField(makeClass(receiver), f);
	}
	def makeSimpleField(raType: RaClass, f: IrField) -> RaField {
		// monomorphic receiver type
		if (isNormalType(f.fieldType)) {
			// the field is a simple, monomorphic, normalized field
			return f.raField = raType.makeField(f, null);
		}
		return makePolyField(raType, f);
	}
	def makeField2(raType: RaClass, f: IrField) -> RaField {
		var rf = f.raField;
		if (rf != null) return rf;
		// try to make a simple field first
		var receiver = f.receiver;
		if (!receiver.open()) return makeSimpleField(raType, f);
		// make a polymorphic field
		return makePolyField(raType, f);
	}
	def makePolyField(raType: RaClass, f: IrField) -> RaField {
		var rf = raType.fields[f.index];
		if (rf == null) {
			// create the RaField from the normalized type
			var ft = f.fieldType;
			if (ft.open()) ft = f.fieldType.substitute(V3.getTypeArgs(raType.oldType));
			rf = raType.makeField(f, ft);
		}
		return rf;
	}
	def opMethod(op: SsaApplyOp, m: IrMethod, context: IrSpec) -> RaMethod {
		if (m == null) return null;
		return makeMethod(op.op.typeArgs, m, context);
	}
	def makeMethod(typeArgs: Array<Type>, m: IrMethod, context: IrSpec) -> RaMethod {
		var rm = m.raMethod;
		if (rm != null) return rm; // RaMethod already cached

		if (typeArgs.length == 1 && !m.receiver.open()) {
			// a monomorphic method
			var rc = makeClass(m.receiver);
			var rm = rc.makeMethod(m, null);
			return rm.orig.raMethod = rm;
		}
		// search for existing specialization
		if (context != null) typeArgs = context.instantiateTypes(typeArgs);
		var rc = makeClass(typeArgs[0]);
		rm = rc.findMethod(m.index, typeArgs);
		if (rm != null) return rm;  // specialization found

		// not found; fully specialize and normalize the method
		var spec = IrSpec.new(rc.oldType, typeArgs, m);
		rm = rc.makeMethod(m, spec);
		return rm;
	}
	def makeClass(t: Type) -> RaClass {
		return RaClass.!(makeType(t));
	}
	def getClass(t: Type) -> RaClass {
		return RaClass.!(typeMap[t]);
	}
	def makeType(t: Type) -> RaType {
		if (t.open()) return V3.fail1("is open %q", t.render);
		var raType = typeMap[t];
		if (raType != null) return raType;
		// not in the hashmap, build appropriately
		match (t.typeCon.kind) {
			COMPONENT => {
				var compDecl = V3.componentDecl(t);
				deferRecord(prog.getComponentRecord(compDecl));
				raType = newRaClass(t, oldIr.makeIrClass(t), null);
			}
			ARRAY => {
				// normalize element type
				var elem = makeType(V3Array.elementType(t));
				var at = RaArray.new(t, elem);
				arrays.put(at);
				raType = at;
			}
			VARIANT => {
				var ic = oldIr.makeIrClass(t);
				var superType = V3.getSuperType(t), parent: RaClass;
				if (superType != null) {
					parent = makeClass(superType);
				} else {
					// make the default variant record for field analysis
					deferRecord(V3.makeDefaultVariantRecord(prog, t));
				}
				var rc = newRaClass(t, ic, parent);
				rc.raFacts |= RaFact.RC_VARIANT;
				raType = rc;
			}
			CLASS => {
				var superType = V3.getSuperType(t);
				var parent = if(superType != null, makeClass(superType));
				var ic = oldIr.makeIrClass(t);
				if (ic == null) ic = IrClass.new(t, null, null, [], []);
				raType = newRaClass(t, ic, parent);
			}
			_ => {
				for (l = t.nested; l != null; l = l.tail) makeType(l.head);
				raType = RaType.new(t);
			}
		}
		typeMap[t] = raType;
		return raType;
	}
	def newRaClass(oldType: Type, ic: IrClass, parent: RaClass) -> RaClass {
		var rc = RaClass.new(oldType, ic, parent);
		classes.put(rc);
		return rc;
	}
	def mono(t: Type, spec: IrSpec) -> Type {
		return if(spec != null, spec.instantiateType(t), t);
	}
}
// Base class which contains facts for all types of entities during analysis
class RaItem {
	var raFacts: RaFact.set;
	// sets the given fact bit; returns true if the fact was already set
	def setFact(fact: RaFact.set) -> bool {
		if ((raFacts & fact) == NONE) {
			raFacts = raFacts | fact;
			return false;
		}
		return true;
	}
}
// Collects facts about a type used during reachability analysis.
class RaType(oldType: Type) extends RaItem {
	var recursive: int;			// 0 if unknown, < 0 if on stack, 1 if not recursive, > 1 if recursive
	def isRecursive() -> bool { return recursive > 1; }
}
// Tracks whether a class is allocated, collects instances, and tracks information
// about fields and methods.
class RaClass extends RaType {
	def orig: IrClass;			// original, polymorphic IrClass
	def parent: RaClass;			// super class, if any
	def fields = Array<RaField>.new(orig.fields.length);          // index of fields
	var methods = Array<List<RaMethod>>.new(orig.methods.length); // index of methods
	var instances: List<Record>;		// list of live records
	var children: List<RaClass>;		// list of all child classes
	var subtypes: List<RaClass>;		// list of live subtypes
	var normClass: IrClass;			// normalized class
	var liveFields: Array<IrSpec>;		// normalized fields
	var normMethods: Array<IrMethod>;	// normalized methods
	var minClassId = -1;			// minimum class ID
	var maxClassId = -1;			// maximum class ID
	var newIrType: Type;

	var variantNorm: VariantNorm;		// non-null for flattened variants
	var fieldRangesO: Array<(int, int)>;
	var fieldRangesT: Array<(int, int)>;	// mapping of unnormalized field index to normalized range
	var variantFields: Array<VariantField>;
	var vecO: Array<Type>;

	new(oldType: Type, orig, parent) super(oldType) {
		newIrType = oldType;
		if (parent != null) {
			parent.children = List.new(this, parent.children);
			Arrays.copyInto(parent.fields, fields, 0);
		}
		if (oldType.typeCon.kind != Kind.VARIANT) recursive = 1; // not a variant, can't be recursive
	}
	def makeField(f: IrField, fieldType: Type) -> RaField {
		var rf = addField(RaField.new(oldType, f, fieldType));
		if (oldType.typeCon.kind == Kind.VARIANT) rf.addValue(null); // TODO: hack for default variant value
		return rf;
	}
	private def addField(rf: RaField) -> RaField {
		fields[rf.orig.index] = rf;
		for (l = children; l != null; l = l.tail) l.head.addField(rf);
		return rf;
	}
	def fieldStart() -> int {
		return if(parent != null, parent.fields.length);
	}
	def inheritedField(rf: RaField) -> bool {
		if (parent == null) return false;
		var i = rf.orig.index;
		return i < parent.fields.length && parent.fields[i] == rf;
	}
	def makeMethod(m: IrMethod, spec: IrSpec) -> RaMethod {
		if (m.index >= methods.length) methods = Arrays.grow(methods, methods.length + m.index + 1);
		var rm = RaMethod.new(oldType, m, spec);
		methods[m.index] = List.new(rm, methods[m.index]);
		return rm;
	}
	def findMethod(index: int, typeArgs: Array<Type>) -> RaMethod {
		if (index >= methods.length) return null;
		for (l = methods[index]; l != null; l = l.tail) {
			if (compareTypeArgs(l.head, typeArgs)) return l.head;
		}
		return null;
	}
	def findRaMethod(rm: RaMethod) -> RaMethod {
		return findMethod(rm.orig.index, if(rm.spec == null, MONO_TYPEARGS, rm.spec.typeArgs));
	}
	def compareTypeArgs(rm: RaMethod, typeArgs: Array<Type>) -> bool {
		if (rm.spec == null) return typeArgs.length == 1;
		var mtypeArgs = rm.spec.typeArgs;
		for (i = 1; i < typeArgs.length; i++) {
			if (mtypeArgs[i] != typeArgs[i]) return false;
		}
		return true;
	}
	def isUnboxed() -> bool { return variantNorm != null; }
}
// Tracks instances of an array type.
class RaArray extends RaType {
	def elem: RaType;
	var instances: List<Record>;		// list of live records
	var primitive: bool;

	new(oldType: Type, elem) super(oldType) {
		var elem = oldType.nested.head;
		match (elem.typeCon.kind) {
			INT, FLOAT, BOOL, VOID => primitive = true;
			_ => ;
		}
	}
}
// Information about a field, including whether it is initialized, written, read,
// and facts about each of the values written to the field
class RaField(receiver: Type, orig: IrField, fieldType: Type) extends RaItem {
	var val: Val;
	var initFacts = Facts.V_DEFAULT;
	var writeFacts = Facts.V_FACTS;
	var typeNorm: TypeNorm;
	var origIndices: (int, int) = (-1, -1);
	var normIndices: (int, int) = (-1, -1);

	def facts() -> Fact.set {
		return initFacts & writeFacts;
	}
	def addValue(v: Val) {
		// add a value to the set for this field
                var count = countVals(raFacts);
		if (count == 1) {
			if (!Values.equal(val, v)) raFacts |= RaFact.RF_VAL_MANY;
		} else if (count == 0) {
			raFacts |= RaFact.RF_VAL_ONE;
			val = v;
		}
		// also set the facts that are true for all values and writes
		var wfacts = Facts.NONE;
		if (v == null) wfacts = Fact.V_ZERO;
		else if (Box<int>.?(v)) wfacts = Facts.intFacts(Int.unbox(v));
		else if (Box<bool>.?(v)) wfacts = if(Bool.unbox(v), Fact.V_NON_ZERO, Fact.V_ZERO);
		else wfacts = Fact.V_NON_ZERO;
		writeFacts = writeFacts & wfacts;
	}
	def isConst() -> bool {
        	var f = raFacts, count = countVals(f);
		if (count == 1) {
			if (f.RF_INIT) return true; // initialized and a value
			if (!f.RF_WRITTEN) return true; // a value and never written
			if (Values.equal(val, null)) return true; // always written null
		} else if (count == 0 && (f & (RaFact.RF_WRITTEN | RaFact.RF_INIT)) == NONE) {
			return true; // neither written nor initialized, nor any values
		}
		return false;
	}
	def normOf<T>(r: Range<T>) -> Range<T> {
		if (normIndices.0 == normIndices.1) return null;
		return r[normIndices.0 ... normIndices.1];
	}
	def liveFields(ra: ReachabilityAnalyzer) -> Range<IrSpec> {
		var rc = ra.getClass(receiver);
		return normOf(rc.liveFields);
	}
}
// Information about a method, including any specialization, whether it is reusable
// across normalization, etc.
class RaMethod(receiver: Type, orig: IrMethod, spec: IrSpec) extends RaItem {
	var norm: IrMethod;
	var funcNorm: FuncNorm;
	var normIndex = -1;
	var virtual: RaVirtual;
	private var cachedSpec: IrSpec;

	def getSpec() -> IrSpec {
		if (cachedSpec != null) return cachedSpec;
		if (spec != null) return cachedSpec = spec;
		return cachedSpec = IrSpec.new(receiver, [receiver], orig);
	}
	def isLive() -> bool {
		return raFacts.RM_LIVE;
	}
	def isVirtual() -> bool {
		return virtual != null;
	}
}
// Extra information about a virtual method.
class RaVirtual(raMethod: RaMethod) {
	var mtable: IrMtable;		// mtable used for machine-level virtual calls
	var devirtual: RaMethod;	// RA-devirtualized target, if any
	var impls: List<RaMethod>;	// list of all implementations
	var count = 0;
	def addImpl(rm: RaMethod) {
		if (count == 0) { devirtual = rm; count = 1; }
		else if (count == 1 && devirtual != rm) { devirtual = null; count = 2; }
		for (l = impls; l != null; l = l.tail) {
			if (l.head == rm) return; // XXX: linear search for RaMethod
		}
		impls = List.new(rm, impls);
	}
}
// A target which prints out the results of reachability analysis
def raTarget = Aeneas.registerTarget(RaTarget.new());
class RaTarget extends Target("ra") {
	def configureCompiler(compiler: Compiler) {
		compiler.Reachability = true;
	}
	def configureProgram(prog: Program) {
		SystemCalls.install(prog);
	}
	def emit(compiler: Compiler, prog: Program) {
		IrPrinter.new(prog).print();
	}
}
// Generates the comparator method for a (polymorphic) variant type.
class VariantComparatorGen(context: SsaContext, root: IrClass, receiver: IrClass, method: IrMethod) {
	def numCases = V3.classDecl(root.ctype).cases.length;
	var graph: SsaGraph;
	var p0: SsaInstr, p1: SsaInstr;
	def generate() -> SsaGraph {
		context.enterMethod(method);

		var tag = V3.classDecl(receiver.ctype).variantTag;
		var params = Array<SsaParam>.new(2);
		p0 = params[0] = SsaParam.new(0, receiver.ctype);
		p1 = params[1] = SsaParam.new(1, root.ctype);
		if (tag > 0) p0.facts |= Fact.V_NON_ZERO;
		method.ssa = context.graph = graph = SsaGraph.new(params, Bool.TYPE);

		if (tag == -1) genCompareTag();
		else genCompareFields(tag);

		context.printSsa("Generated");
		return graph;
	}
	def genCompareTag() {
		var b = newBuilder(graph.startBlock);
		var cmp: SsaInstr;
		if (numCases > 1) {
			var op = V3Op.newVariantGetTag(root.ctype);
			var t0 = b.addApply(null, op, [p0]);
			var t1 = b.addApply(null, op, [p1]);
			cmp = b.opEqual(op.sig.returnType(), t0, t1);
		} else {
			cmp = graph.trueConst();
		}
		b.addReturn([cmp]);
	}
	def genCompareFields(tag: int) {
		var b = newBuilder(graph.startBlock);
		var falseBlock = SsaBlock.new();
		addReturnBool(falseBlock, false);

		var fieldCompare: SsaBlock;
		if (tag == 0) {
			// check p1 for null
			var eqNull1 = SsaBlock.new(), neNull1 = SsaBlock.new();
			b.addIfNull(p1, eqNull1, neNull1);
			b = newBuilder(eqNull1);
			// check p0 for null
			var neNull0a = SsaBlock.new();
			var trueBlock = SsaBlock.new();
			b.addIfNull(p0, trueBlock, neNull0a);
			addReturnBool(trueBlock, true);
			b = newBuilder(neNull0a);
			// if p0 is null, compare p1 fields with default
			genFieldComparisonsWithDefault(false, b, p0, falseBlock);

			b = newBuilder(neNull1);
			var eqNull0b = SsaBlock.new(), neNull0b = SsaBlock.new();
			b.addIfNull(p0, eqNull0b, neNull0b);
			b = newBuilder(eqNull0b);
			genFieldComparisonsWithDefault(true, b, p1, falseBlock);

			fieldCompare = neNull0b;
		} else {
			// check p1 for null
			var neNull1 = SsaBlock.new();
			b.addIfNull(p1, falseBlock, neNull1);
			fieldCompare = neNull1;
		}
		b = newBuilder(fieldCompare);

		if (numCases > 1) { // tag comparison only necessary if more than 1 case
			var op = V3Op.newVariantGetTag(root.ctype);
			var get = b.addApply(null, op, [p1]);
			get.facts |= Fact.O_NO_NULL_CHECK;
			var cmp = b.opEqual(op.sig.returnType(), get, graph.intConst(tag));

			var eqTag = SsaBlock.new();
			b.addIf(cmp, eqTag, falseBlock);
			b = newBuilder(eqTag);
		}
		p1 = b.opTypeSubsume(root.ctype, receiver.ctype, p1); // safe cast
		p1.setFact(Fact.O_NO_NULL_CHECK | Fact.V_NON_ZERO);
		genFieldComparisons(b, falseBlock);
	}
	def genFieldComparisons(b: SsaBuilder, falseBlock: SsaBlock) {
		// compare each field
		for (f in receiver.fields) {
			var spec = IrSpec.new(receiver.ctype, [receiver.ctype], f);
			var f0 = b.opGetField(spec, p0);
			var f1 = b.opGetField(spec, p1);
			f0.facts |= Fact.O_NO_NULL_CHECK;
			f1.facts |= Fact.O_NO_NULL_CHECK;
			var cmp = b.opEqual(f.fieldType, f0, f1);
			if (f.index == receiver.fields.length - 1) {
				// last field
				b.addReturn([cmp]);
				return;
			}
			var cont = SsaBlock.new();
			b.addIf(cmp, cont, falseBlock);
			b = newBuilder(cont);
		}
		b.addReturn([graph.trueConst()]);
	}
	def genFieldComparisonsWithDefault(compareTag: bool, b: SsaBuilder, p0: SsaInstr, falseBlock: SsaBlock) {
		if (compareTag) {
			var cont = SsaBlock.new();
			var t0 = V3Op.newVariantGetTag(root.ctype);
			var get = b.addApply(null, t0, [p0]);
			get.facts |= Fact.O_NO_NULL_CHECK;
			var cmp = b.opEqual(t0.sig.returnType(), get, graph.nullConst(t0.sig.returnType()));
			if (receiver.fields.length > 0) {
				b.addIf(cmp, cont, falseBlock);
				b = newBuilder(cont);
				p0 = b.opTypeSubsume(root.ctype, receiver.ctype, p0);
			} else {
				b.addReturn([cmp]);
				return;
			}
		}
		// compare each field with the default value
		for (f in receiver.fields) {
			var spec = IrSpec.new(receiver.ctype, [receiver.ctype], f);
			var f0 = b.opGetField(spec, p0);
			var f1 = graph.nullConst(f.fieldType);
			f0.facts |= Fact.O_NO_NULL_CHECK;
			var cmp = b.opEqual(f.fieldType, f0, f1);
			if (f.index == receiver.fields.length - 1) {
				// last field
				b.addReturn([cmp]);
				return;
			}
			var cont = SsaBlock.new();
			b.addIf(cmp, cont, falseBlock);
			b = newBuilder(cont);
		}
		b.addReturn([graph.trueConst()]);
	}
	def newBuilder(block: SsaBlock) -> SsaBuilder {
		return SsaBuilder.new(context, graph, block);
	}
	def addReturnBool(block: SsaBlock, val: bool) {
		SsaBuilder.new(context, graph, block).addReturn([graph.boolConst(val)]);
	}
}
// Globally shareable normalizers.
component IntNormalizers {
	def I32LE = IntNormalizer.new(32, false);
	def I64LE = IntNormalizer.new(64, false);
}
// Reports code that is neither used during initialization nor reachable from main().
class DeadCodeAnalyzer(ra: ReachabilityAnalyzer) {
	def buf = TerminalBuffer.new();
	def report() {
		ra.typeMap.apply(processType);
		for (i < ra.prog.ir.classes.length) {
			var c = ra.prog.ir.classes[i];
			processIrClass(c);
			reportClass(c);
		}
	}
	def reportClass(ic: IrClass) {
		buf.reset();
		if (!ic.facts.X_LIVE && !isSynthetic(ic)) {
			// the entire class is dead
			addLine("dead ", ic);
		} else {
			// report dead fields if any
			for (f in ic.fields) {
				if (ic.inherits(f)) continue;
				if (!f.facts.X_LIVE) {
					if (buf.length == 0) addLine("within ", ic);
					buf.puts("  dead field: ");
					f.render(buf.red());
					buf.end().ln();
				}
			}
			// report dead methods if any
			for (m in ic.methods) {
				if (m == null) continue;
				if (ic.inherits(m)) continue;
				if (m.facts.M_EMPTY) continue;
				if (!m.facts.X_LIVE) {
					if (buf.length == 0) addLine("within ", ic);
					buf.puts("  dead method: ");
					m.render(buf.red());
					buf.end().ln();
				}
			}
		}
		buf.outt();
	}
	def addLine(p: string, ic: IrClass) {
		buf.puts(p);
		if (V3.isVariant(ic.ctype)) buf.puts("variant ");
		else if (V3.isClass(ic.ctype)) buf.puts("class ");
		else if (V3.isComponent(ic.ctype)) {
			if (isSynthetic(ic)) buf.puts("file ");
			else buf.puts("component ");
		}
		ic.ctype.render(buf.red());
		buf.end().ln();
	}
	def isSynthetic(ic: IrClass) -> bool {
		return V3.isComponent(ic.ctype) && V3.componentDecl(ic.ctype).isSynthetic;
	}
	def processIrClass(ic: IrClass) {
		for (f in ic.fields) {
			if (f.facts.X_LIVE) markMember(f);
		}
		for (m in ic.methods) {
			if (m != null && m.ic != null) markMember(m);
		}
	}
	def processType(t: Type, tn: RaType) {
		if (!RaClass.?(tn)) return;
		var rc = RaClass.!(tn);
		for (f in rc.fields) {
			if (f == null) continue;
			if (f.raFacts.RF_READ) markMember(f.orig);
		}
		for (ml in rc.methods) {
			for (l = ml; l != null; l = l.tail) {
				var m = l.head;
				if (m.raFacts.RM_LIVE) markMember(m.orig);
			}
		}
		if (live(rc.raFacts) || rc.orig.facts.X_LIVE) {
			while (rc != null) {
				rc.orig.facts |= Fact.X_LIVE;
				rc = rc.parent;
			}
		}
	}
	def markMember(m: IrMember) {
		m.facts |= Fact.X_LIVE;
		ra.prog.ir.getIrClass(m.receiver).facts |= Fact.X_LIVE;
	}
}
