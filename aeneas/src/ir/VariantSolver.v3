// Copyright 2024 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The set of individually register-allocatable storage locations across all targets.
// An individual target may support only a subset of scalars.
enum Scalar(size: byte, ty: Type) {
	B32(32, Int.getType(true, 32)),		// <= 32-bit non-references
	B64(64, Int.getType(true, 64)),		// <= 64-bit non-references
	F32(32, Float.FLOAT32),			// 32-bit floats
	F64(64, Float.FLOAT64),			// 64-bit floats
	R32(32, AnyRef.TYPE),			// <= 32-bit (possibly tagged) references
	R64(64, AnyRef.TYPE),			// <= 64-bit (possibly tagged) references
	Ref(64, AnyRef.TYPE),			// references of opaque size
}
def getScalarFromSet(s: Scalar.set) -> Scalar {
	for (i in s) return i;
	return Scalar.B32; // should be unreachable
}
def getTypeFromScalarSet(s: Scalar.set, usePacking: bool) -> Type {
	for (i in s) return if(usePacking, IntRep.getType(i), i.ty);
	return null;
}

class VariantPattern(scalars: Array<ScalarPattern>) {
	def render(buf: StringBuilder) -> StringBuilder {
		for (i < scalars.length) {
			if (i > 0) buf.putc('|');
			buf.put1("%q", scalars[i].render);
		}
		return buf;
	}
	def copy() -> VariantPattern {
		return VariantPattern.new(Arrays.map(scalars, ScalarPattern.copy));
	}
}

// The normalization of a variant, including the mapping of its fields to bit ranges within scalars.
class VariantNorm extends TypeNorm {
	def fields: Array<VariantField>;
	def tag: VariantField;
	var vecO: Array<Type>;
	var fieldRanges: Array<(int, int)>; // (start, end) index for ClassAlloc instructions
	
	var tagValue: int = -1;
	var children: List<VariantNorm>;

	var pattern: VariantPattern;

	new(oldType: Type, newType: Type, sub: Array<Type>, fields, tag)
		super(oldType, newType, sub) {}

	// represent empty variant as tag
	def isEnum() -> bool { return size == 1 && tag != null && fields.length == 0; }
	def isEnumCase() -> bool { return size == 1 && tag != null && tagValue >= 0 && fields.length == 0; }
	def tagType() -> IntType { return IntType.!(tag.tn.first()); }
	def tagIndex() -> int { return tag.indexes[0]; }
	
	// represent single-case, unboxed variant without its tag
	def hasNoTag() -> bool { return tag == null; }
	// tagging is explicit - may be packed, or a separate scalar
	def hasExplicitTag() -> bool { return tag != null; }
	// tagging is implicit (i.e. decision tree required)
	def hasImplicitTag() -> bool { return false; }

	def render(buf: StringBuilder) -> StringBuilder {
		buf.put3("%q ## %q |%d|", oldType.render, newType.render, size);
		buf.puts(" [");
		for (i < sub.length) {
			if (i > 0) buf.csp();
			sub[i].render(buf);
		}
		buf.puts("] {");
		if (tag != null) buf.put1("ftag: %q", tag.render);
		for (i < fields.length) {
			if (i > 0 || tag != null) buf.csp();
			buf.put2("f%d=%q", i, fields[i].render);
		}
		buf.puts("}");
		return buf;
	}
}

// Metadata about a variant's fields before/after normalization.
// The field {indexes} indicates which scalars store the field.
class VariantField(rf: RaField, tn: TypeNorm, indexes: Array<int>) {
	var intervals: Array<Interval>; // null, if no packing
	def isPacked() -> bool { return intervals != null; }

	def render(buf: StringBuilder) -> StringBuilder {
		buf.puts("(");
		for (i < indexes.length) {
			if (i > 0) buf.csp();
			buf.put1("#%d", indexes[i]);
			if (intervals != null) buf.put1("@%q", intervals[i].render);
		}
		if (tn != null) buf.put1(": %q", tn.newType.render);
		buf.puts(")");
		return buf;
	}
}

def ON_STACK = -1;
def EMPTY_FIELD = VariantField.new(null, null, []);
def NO_FIELDS = Array<VariantField>.new(0);

def copyMap<T, U>(x: HashMap<T, U>) -> HashMap<T, U> {
	var keys = Maps.keyList(x);
	var newMap = HashMap<T, U>.new(x.hash, x.equals);

	for (l = keys; l != null; l = l.tail) {
		newMap[l.head] = x[l.head];
	}
	return newMap;
}

type FlattenedExpr(assignment: Array<(int, Interval)>, pattern: ScalarPattern, size: byte) #unboxed {
	def render(buf: StringBuilder) -> StringBuilder {
		buf.put1("%q[", pattern.render);
		for (i < assignment.length) {
			if (i > 0) buf.csp();
			buf.put2("%d@%q", assignment[i].0, assignment[i].1.render);
		}
		buf.puts("]");
		return buf;
	}
}

class PackingContext {
	def vars = Strings.newMap<int>();
	def keyList = Vector<string>.new();

	def addVar(name: string, fieldIdx: int) {
		if (!vars.has(name)) keyList.put(name);
		vars[name] = fieldIdx;
	}
	def getVar(name: string) -> int { return vars[name]; }
	def getVarFromChar(c: byte) -> int {
		for (i < keyList.length) if (keyList[i][0] == c) return vars[keyList[i]];
		return -1;
	}
}

class VariantProblemGen(vn: VariantNormalizer) {
	var normFields: Array<Array<Type>>;
	var assignments = HashMap<CaseField, (int, Interval)>.new(CaseField.hash, CaseField.==);
	var state: Array<VariantPattern>;
	var hasPackingExpr: bool;

	def generateProblemFromRc(rc: RaClass) -> VariantProblem {
		var shouldPack = rc.orig.packed;
		var numChildren = Lists.length(rc.children);
		normFields = Array<Array<Type>>.new(if(rc.children == null, 1, numChildren));
		state = Array<VariantPattern>.new(normFields.length);

		if (rc.children == null) {
			normFields[0] = getNormFieldsForCase(rc);
			processAnnotationsForCase(rc, 0);
		} else {
			var caseIdx = 0;
			for (l = rc.children; l != null; l = l.tail) {
				normFields[caseIdx] = getNormFieldsForCase(l.head);
				processAnnotationsForCase(l.head, caseIdx);
				caseIdx++;
			}
		}
		var problem = VariantProblem.new(normFields, assignments, shouldPack);
		if (hasPackingExpr) problem.state = state;
		return problem;
	}
	private def processAnnotationsForCase(rc: RaClass, caseIdx: int) {
		if (!rc.orig.packed) return;
		var packingExpr = rc.orig.packingExpr;
		if (packingExpr != null) hasPackingExpr = true;

		var patterns = Vector<ScalarPattern>.new();
		var scalarIdx = 0;
		var context = PackingContext.new();

		for (i < rc.fields.length) {
			var rf = rc.fields[i];
			if (rf == null) continue;
			context.addVar(rf.orig.source.name(), rf.normIndices.0);
		}
		for (l = packingExpr; l != null; l = l.tail) {
			var expr = processPackingExpr(context, caseIdx, l.head);
			for (i < expr.assignment.length) {
				assignments[CaseField(caseIdx, expr.assignment[i].0)] = (scalarIdx, expr.assignment[i].1);
			}
			patterns.put(expr.pattern);
			scalarIdx++;
		}
		state[caseIdx] = VariantPattern.new(patterns.extract());
	}
	private def processPackingExpr(context: PackingContext, caseIdx: int, p: VstPackingExpr) -> FlattenedExpr {
		match (p) {
			Field(f) => {
				var fieldIdx = context.getVar(f.ident.name.image);
				var size = vn.getBitWidth(normFields[caseIdx][fieldIdx]);
				var pattern = ScalarPattern.new(Arrays.growV(Array<PackingBit>.new(0), size, PackingBit.Assigned(0)));
				return FlattenedExpr([(fieldIdx, Interval(0, size))], pattern, size);
			}
			Literal(l) => { // write into pattern
				match (l) {
					x: IntLiteral => {
						var t = IntType.!(x.exactType);
						var val = Long.unboxSU(x.val, false);
						var bits = Array<PackingBit>.new(t.width);
						for (i < t.width) bits[i] = PackingBit.Fixed(u1.view(val >> i & 1));
						return FlattenedExpr([], ScalarPattern.new(bits), t.width); // todo
					}
				}
			}	
			Concat(l) => {
				var combined = FlattenedExpr([], ScalarPattern.new([]), 0);
				for (l = l.list; l != null; l = l.tail) {
					var flattened = processPackingExpr(context, caseIdx, l.head);
					var shifted = Array<(int, Interval)>.new(flattened.assignment.length);
					for (i < shifted.length) shifted[i] = (flattened.assignment[i].0, flattened.assignment[i].1.shl(combined.size));
					combined = FlattenedExpr(
						Arrays.concat(combined.assignment, shifted),
						ScalarPattern.new(Arrays.concat(combined.pattern.bits, flattened.pattern.bits)),
						combined.size + flattened.size
					);
				}
				return combined;
			}
			Bits(t, rep) => { // process as intervals
				var curBits = Array<PackingBit>.new(rep.length);
				var assignments = Vector<(int, Interval)>.new();
				var curByte: byte = 0, oldByte: byte = 0;
				var curStart: byte = 0, oldStart: byte = 0;
				for (i < rep.length) {
					oldByte = curByte;
					oldStart = curStart;
					match (rep[i].1) {
						Assigned(ch) => {
							if (ch != curByte) {
								curByte = ch;
								curStart = byte.view(i);
							}
							curBits[i] = PackingBit.Assigned(0);
						}
						Fixed(v), Unassigned => {
							curByte = 0;
							curBits[i] = rep[i].1;
						}
					}
					if (oldByte != curByte && oldByte != 0) assignments.put((context.getVarFromChar(oldByte), Interval(oldStart, byte.view(i))));
				}
				if (curByte != 0) assignments.put((context.getVarFromChar(curByte), Interval(curStart, byte.view(rep.length))));
				return FlattenedExpr(assignments.extract(), ScalarPattern.new(curBits), byte.view(curBits.length));
			}
			App(p, args) => {
				var decl = vn.rn.ra.prog.packings[p.ident.name.image];
				var argExprs = Lists.map(args.list, processPackingExpr(context, caseIdx, _));

				var appContext = PackingContext.new();
				var argIdx = 0;
				for (l = decl.pparams.list; l != null; l = l.tail) {
					var pparam = l.head;
					appContext.addVar(pparam.token.image, argIdx++);
				}
				var flattened = processPackingExpr(appContext, 0, decl.expr);
				var newAssignments = Vector<(int, Interval)>.new();
				var newPattern = flattened.pattern.copy();

				argIdx = 0;
				for (l = argExprs; l != null; l = l.tail) {
					var argExp = l.head;
					for (i < flattened.assignment.length) {
						if (flattened.assignment[i].0 == argIdx) {
							var start = flattened.assignment[i].1.start;
							for (assn in argExp.assignment) newAssignments.put((assn.0, assn.1.shl(start)));
							for (j < argExp.size) newPattern.bits[start + j] = argExp.pattern.bits[j];
							break;
						}
					}
					argIdx++;
				}
				return FlattenedExpr(newAssignments.extract(), newPattern, flattened.size);
			}
			Solve => ; // unimplemented
		}
		return FlattenedExpr([], null, 0);
	}
	private def getNormFieldsForCase(rc: RaClass) -> Array<Type> {
		var rfs = rc.fields;
		var fields = Array<VariantField>.new(rfs.length);

		rc.fieldRangesO = Array<(int, int)>.new(rfs.length);
		rc.fieldRangesT = Array<(int, int)>.new(rfs.length);
		
		var fieldTypes = Vector<Type>.new();
		var vecO = Vector<Type>.new();

		for (i < rfs.length) {
			var rf = rc.fields[i];
			var startT = fieldTypes.length;

			if (rf != null && rf.normIndices.0 >= 0) {
				var tn = vn.fieldNorm(rf);
				tn.addTo(fieldTypes);
				fields[i] = VariantField.new(rf, tn, Array<int>.new(tn.size));
			} else fields[i] = EMPTY_FIELD;

			var origStart = vecO.length;
			var fieldType = rc.orig.fields[i].fieldType.substitute(V3.getTypeArgs(rc.oldType));
			vn.rn.norm(fieldType).addTo(vecO);
			rc.fieldRangesO[i] = (origStart, vecO.length);
			rc.fieldRangesT[i] = (startT, fieldTypes.length);
		}

		rc.variantFields = fields;
		rc.vecO = vecO.extract();
		return fieldTypes.extract();
	}
}

// an input to the VariantSolver
class VariantProblem {
	var normFields: Array<Array<Type>>;
	var state: Array<VariantPattern>;
	var assignments: HashMap<CaseField, (int, Interval)>;
	var types: Array<Type>;
	var usePacking: bool;

	new(normFields, assignments, usePacking) {}

	def render(buf: StringBuilder) -> StringBuilder {
		for (i < normFields.length) {
			if (i > 0) buf.csp();
			buf.put1("c%d: [", i);
			for (j < normFields[i].length) {
				if (j > 0) buf.csp();
				var cf = CaseField(i, j);
				var field = normFields[i][j];
				buf.put2("f%d=%q: ", j, field.render);

				if (!assignments.has(cf)) {
					buf.puts("?");
				} else {
					var a = assignments[cf], scalarIdx = a.0, interval = a.1;
					if (interval == EMPTY_INTERVAL) buf.put1("#%d@?", scalarIdx);
					else buf.put2("#%d@%q", scalarIdx, interval.render);
				}
			}
			buf.puts("]");
		}
		buf.ln();
		if (state != null) for (i < state.length) buf.put1("%q\n", state[i].render);
		return buf;
	}
}

class VariantSolution {
	var normFields: Array<Array<Type>>;
	var state: Array<VariantPattern>;
	var assignments: HashMap<CaseField, (int, Interval)>;

	var explicitTag: (int, Interval);
	var types: Array<Type>;

	var hasIntervals = false;
	var hasTagScalar = false;
	var tagType: IntType;

	var cachedScore = -1;

	new(normFields, assignments, state, explicitTag, types) {}

	def copy() -> VariantSolution {
		var vs = VariantSolution.new(
			normFields,
			copyMap<CaseField, (int, Interval)>(assignments),
			Arrays.map(state, VariantPattern.copy),
			explicitTag,
			Arrays.dup(types)
		);
		vs.tagType = tagType;
		vs.hasIntervals = hasIntervals;
		vs.hasTagScalar = hasTagScalar;
		return vs;
	}
	def render(buf: StringBuilder) -> StringBuilder {
		for (i < normFields.length) {
			if (i > 0) buf.csp();
			buf.put1("c%d: [", i);
			for (j < normFields[i].length) {
				if (j > 0) buf.csp();
				var cf = CaseField(i, j);
				var field = normFields[i][j];
				buf.put2("f%d=%q: ", j, field.render);

				if (!assignments.has(cf)) {
					buf.puts("?");
				} else {
					var a = assignments[cf], scalarIdx = a.0, interval = a.1;
					if (interval == EMPTY_INTERVAL) buf.put1("#%d@?", scalarIdx);
					else buf.put2("#%d@%q", scalarIdx, interval.render);
				}
			}
			buf.puts("]");
		}
		buf.ln();
		if (state != null) for (i < state.length) buf.put1("%q\n", state[i].render);
		return buf;
	}
	def score() -> int {
		if (cachedScore >= 0) return cachedScore;
		// XXX: better score function
		var total = types.length * 50;
		total += if(!hasTagScalar, 100);
		// estimate access cost
		if (hasIntervals) {
			for (i < normFields.length) {
				for (j < normFields[i].length) {
					var assn = assignments[CaseField(i, j)];
					if (assn.1 != EMPTY_INTERVAL && assn.1.start > 0) total += 10;
				}
			}
		}
		return total;
	}
}
def getTagLength(numCases: int) -> byte {
	var i: byte = 0;
	while (1 << i < numCases) i++;
	return i;
}

class VariantSolver(vnorm: VariantNormalizer) {
	var normFields: Array<Array<Type>>;
	var usePacking: bool;

	var fields = Vector<CaseField>.new(); // an ordering of fields to solve for during packing

	var curSoln: VariantSolution;
	var bestSoln: VariantSolution;

	var assignments = HashMap<CaseField, (int, Interval)>.new(CaseField.hash, CaseField.==);
	var baseState: Array<VariantPattern>;
	var state: Array<VariantPattern>;
	var explicitTag: (int, Interval) = (-1, EMPTY_INTERVAL);

	var explicitTagLength: byte;

	var curRep = Vector<Scalar.set>.new();
	var curUsed = Vector<byte>.new();
	var bwCache = TypeUtil.newTypeMap<byte>();

	private def getBitWidth(t: Type) -> byte {
		if (bwCache.has(t)) return bwCache[t];
		return bwCache[t] = vnorm.getBitWidth(t);
	}
	private def getScalarsWithSize(s: Scalar.set, n: byte) -> Scalar.set {
		var newRep = s;
		for (i in s) if (i.size < n) newRep -= i;
		return newRep;
	}
	// Perform recursive backtracking on the potential representation.
	// With each scalar in each case, we have several choices to make:
	// 1. Pack this scalar with an existing scalar
	// 2. Append this scalar as a new scalar.
	// We can only determine distinguishability after all the scalars have been assigned. Heuristics will help speed this part up.
	def solve(problem: VariantProblem) -> VariantSolution {
		normFields = problem.normFields;
		baseState = problem.state;
		assignments = problem.assignments;

		explicitTagLength = getTagLength(problem.normFields.length);
		usePacking = problem.usePacking;

		if (problem.state != null) {
			var numScalars = problem.state[0].scalars.length;
			curRep.putn(vnorm.nc.UsedScalars, numScalars);
			for (i < numScalars) curUsed.put(0);
		}

		for (i < normFields.length) {
			for (j < normFields[i].length) {
				if (!assignments.has(CaseField(i, j))) {
					fields.put(CaseField(i, j));
				} else {
					var assn = assignments[CaseField(i, j)];
					var sc = vnorm.getScalar(normFields[i][j]);
					curRep[assn.0] &= sc;
				}
			}
		}
		if (baseState != null) {
			for (i < baseState.length) {
				for (j < curRep.length) {
					curRep[j] = getScalarsWithSize(curRep[j], byte.view(baseState[i].scalars[j].bits.length));
					var scalar = getScalarFromSet(curRep[j]);
					baseState[i].scalars[j] = baseState[i].scalars[j].padTo(scalar.size);
				}
			}
		}
		tryRepresentationForField(0, 0);
		return bestSoln;
	}
	private def tryRepresentationForField(curCase: int, curField: int) {
		if (curCase >= normFields.length) {
			// XXX: check distinguishable
			return solvePacking();
		}
		if (curField >= normFields[curCase].length) {
			// move on to next case
			curUsed = Vector<byte>.new();
			for (i < curRep.length) curUsed.put(0);
			return tryRepresentationForField(curCase + 1, 0);
		}
		var cf = CaseField(curCase, curField);
		if (assignments.has(cf) && assignments[cf].0 != -1) return tryRepresentationForField(curCase, curField + 1);
		
		var sc = vnorm.getScalar(normFields[curCase][curField]);
		var bw = getBitWidth(normFields[curCase][curField]);
		var none: Scalar.set;

		for (i < curRep.length) {
			if (usePacking && curUsed[i] + bw > vnorm.nc.MaxScalarWidth) continue;
			if (!usePacking && curUsed[i] > 0) continue;

			var oldRep = curRep[i];
			var newRep = sc & oldRep;
			if (usePacking) newRep = getScalarsWithSize(newRep, curUsed[i] + bw);

			if (newRep != none) {
				curUsed[i] += bw; curRep[i] = newRep;
				assignments[cf] = (i, EMPTY_INTERVAL);
				tryRepresentationForField(curCase, curField + 1);
				assignments[cf] = (-1, EMPTY_INTERVAL);
				curUsed[i] -= bw; curRep[i] = oldRep;
			}
		}

		var len = curRep.length;
		curRep.put(sc); curUsed.put(bw);
		assignments[cf] = (curRep.length - 1, EMPTY_INTERVAL);
		tryRepresentationForField(curCase, curField + 1);
		curRep.resize(len); curUsed.resize(len);
		assignments[cf] = (-1, EMPTY_INTERVAL);
	}
	private def tryExplicitTaggingHeuristic() -> bool {
		for (i < state[0].scalars.length) {
			var scalar0 = state[0].scalars[i];
			var longest: Interval, curStart: byte = 0;
			for (j < scalar0.bits.length) {
				var allUnassigned = true;
				for (k < state.length) {
					if (state[k].scalars[i].bits[j] != PackingBit.Unassigned) {
						allUnassigned = false;
						break;
					}
				}

				if (allUnassigned) {
					if (j + 1 - curStart > longest.size()) longest = Interval(curStart, byte.!(j + 1));
				} else {
					curStart = byte.!(j + 1);
				}
			}

			if (explicitTagLength > 0 && longest.size() >= explicitTagLength) {
				for (j < state.length) {
					var realTag = normFields.length - j - 1; // variants are in reverse order
					for (k < explicitTagLength) {
						var bit = u1.!((realTag >> k) & 1);
						state[j].scalars[i].bits[longest.start + k] = PackingBit.Fixed(bit);
					}
				}
				explicitTag = (i, Interval(longest.start, longest.start + explicitTagLength));
				return true;
			}
		}
		return false;
	}
	private def solvePacking() {
		var cases = Array<VariantPattern>.new(normFields.length);
		state = baseState;
		if (state == null) {
			// build up patterns from the individual cases
			for (i < normFields.length) {
				var patterns = Array<ScalarPattern>.new(curRep.length);
				for (j < curRep.length) patterns[j] = getScalarPattern(getScalarFromSet(curRep[j]));
				cases[i] = VariantPattern.new(patterns);
			}
			state = cases;
		}
		solveField(0);
	}
	private def solveField(idx: int) {
		if (idx >= fields.length) {
			return checkDistinguishable();
		}
		var field = fields[idx];
		var scalarIdx = assignments[field].0;

		// try to squeeze this field into this scalar
		var casePattern = state[field.caseIdx];
		var bw = vnorm.nc.GetBitWidth(vnorm.rn.ra.compiler, vnorm.rn.ra.prog, normFields[field.caseIdx][field.fieldIdx]);
		var scalar = casePattern.scalars[scalarIdx];
		var intervals = scalar.getIntervalsForSize(bw);

		if (intervals.length == 0) return;
		for (interval in intervals) {
			scalar.assignInterval(interval);
			assignments[field] = (scalarIdx, interval);
			var result = solveField(idx + 1);
			assignments[field] = (scalarIdx, EMPTY_INTERVAL);
			scalar.unassignInterval(interval);
		}
	}
	private def getScalarPattern(s: Scalar) -> ScalarPattern {
		// XXX: Should be based on scalar type
		return ScalarPattern.new(Array<PackingBit>.new(s.size));
	}
	private def canDistinguish(active: Array<bool>) {
		// TODO - this is where unassigned bits will get assigned
	}
	private def updateSoln(soln: VariantSolution) {
		if (bestSoln == null || bestSoln.score() > soln.score()) {
			bestSoln = soln.copy();
			// Terminal.put2("updating with soln[score=%d] %q\n", bestSoln.score(), bestSoln.render);
		}
	}
	private def checkDistinguishable() {
		if (normFields.length <= 1) {
			var types = getTypes(false);
			curSoln = VariantSolution.new(normFields, assignments, state, explicitTag, types);
			curSoln.hasIntervals = usePacking;
			updateSoln(curSoln);
			return; // single case is always distinguishable
		}

		var packedTag: bool;
		if (usePacking) packedTag = tryExplicitTaggingHeuristic();
		
		var types = getTypes(!packedTag);
		curSoln = VariantSolution.new(normFields, assignments, state, explicitTag, types);
		curSoln.tagType = Int.getType(false, getTagLength(normFields.length));
		curSoln.hasTagScalar = !packedTag;
		curSoln.hasIntervals = usePacking;
		updateSoln(curSoln);

		if (packedTag) {
			// undo assignments
			for (i < state.length) {
				for (j < explicitTagLength) {
					state[i].scalars[explicitTag.0].bits[explicitTag.1.start + j] = PackingBit.Unassigned;
				}
			}
			explicitTag = (-1, EMPTY_INTERVAL);
		}

		// TODO: try difficult tagging
	}
	private def getTypes(useTagScalar: bool) -> Array<Type> {
		var types = Array<Type>.new(curRep.length + if(useTagScalar, 1));
		for (i < curRep.length) types[i] = getTypeFromScalarSet(curRep[i], usePacking);

		// simplification: if every field assigned to this scalar has the same type, we should use that type instead
		// since there will be no casting necessary
		var uniqueTypes = Array<Type>.new(curRep.length);
		var uses = Array<int>.new(curRep.length);

		if (!useTagScalar && explicitTag.0 >= 0) uses[explicitTag.0]++;
		for (i < normFields.length) {
			var caseUses = Array<int>.new(curRep.length);
			for (j < normFields[i].length) {
				var assignment = assignments[CaseField(i, j)];
				var scalarIdx = assignment.0;
				uses[scalarIdx]++;
				caseUses[scalarIdx]++;

				if (caseUses[scalarIdx] > 1) uniqueTypes[scalarIdx] = null;
				else if (uniqueTypes[scalarIdx] != null && uniqueTypes[scalarIdx] != normFields[i][j]) uniqueTypes[scalarIdx] = null;
				if (uses[scalarIdx] == 1 && uniqueTypes[scalarIdx] == null) uniqueTypes[scalarIdx] = normFields[i][j];
			}
		}
		for (i < uniqueTypes.length) if (uniqueTypes[i] != null) types[i] = uniqueTypes[i];

		var tagType = Int.getType(false, getTagLength(normFields.length));
		if (useTagScalar) types[curRep.length] = tagType;
		return types;
	}
}

// Contains the logic for choosing the representation of a variant (i.e. normalizing it) in terms
// of scalars, which includes unboxing and (in the future) packing fields.
class VariantNormalizer(nc: NormalizerConfig, rn: ReachabilityNormalizer, verbose: bool) {
	def PRINT_PACKING = CLOptions.PRINT_PACKING.get();
	def buf = TerminalBuffer.new();

	private var assignments: HashMap<CaseField, int>; // used in unboxing solving algorithm

	// Entrypoint into representation selection. Recursively tries to unbox and pack this variant.
	// Returns either a {VariantNorm} for an unboxed variant or a simple {TypeNorm} for a boxed variant.
	def normVariant(t: Type, rc: RaClass) -> TypeNorm {
		if (rc.variantNorm != null) return rc.variantNorm; // already done
		if (rc.orig.boxing == Boxing.BOXED) rn.mapSimple(t);

		var prev = rc.recursive;
		match (rc.recursive) {
			ON_STACK => {
				rc.recursive = 2; // cycle detected; box
			}
			0 => {
				rc.recursive = ON_STACK;
				tryUnboxing(rc);
				if (rc.recursive == ON_STACK) rc.recursive = 1;
				if (rc.variantNorm != null) return rc.variantNorm;
			}
		}
		return rn.mapSimple(t); 
	}
	// Try to unbox a variant in one of three ways:
	// 1. If a (non-closure) variant has all empty fields in all cases, represent it as a single uN tag (enum representation).
	// 2. If a variant has only one case, represent it as a tagless tuple of scalars (data representation).
	// 3. If a variant has multiple cases and is marked #unboxed, use a flattened representation with the smallest set of scalars.
	private def tryUnboxing(rc: RaClass) -> bool {
		if (rc.variantNorm != null) return true; // already done
		while (rc.parent != null) rc = rc.parent;
		
		rn.makeNormFields(rc);

		var isEmpty = rc.liveFields.length == 0;
		var closure = rc.raFacts.RC_CLOSURE;

		for (l = rc.children; l != null; l = l.tail) {
			var c = l.head;
			rn.makeNormFields(c);
			if (c.liveFields.length > 0) isEmpty = false;
			closure |= c.raFacts.RC_CLOSURE;
		}

		if (isEmpty && !closure) {
			// normalize empty variant to just its tag; i.e. become an enum
			var tagType = V3.getVariantTagType(rc.oldType);
			var tagTypeNorm = rn.norm(tagType);
			var tagField = VariantField.new(null, tagTypeNorm, [0]);
			unboxUsingEnumVariantNorm(rc, tagType, tagField);
			return true;
		}
		if (rc.children != null) {
			// multi-case variant unboxing
			if (closure) return printNoUnboxReason(rc, false, true);
			match (rc.orig.boxing) {
				BOXED, AUTO => return false;
				_ => return unboxUsingTaggedVariantNorm(rc);
			}
		}
		match (rc.orig.boxing) {
			BOXED => return false;
			AUTO => if (rc.liveFields.length > nc.MaxFlatDataValues) return false;
			UNBOXED => ; // program specified unboxed; TODO: recursion or closure should be an error
		}
		if (rc.recursive > 1 || closure) return printNoUnboxReason(rc, rc.recursive > 1, closure); // recursive or closed over
		unboxUsingTaglessVariantNorm(rc);
		return true;
	}
	private def unboxUsingTaglessVariantNorm(rc: RaClass) {
		var solver = VariantSolver.new(this);
		var pgen = VariantProblemGen.new(this);
		var problem = pgen.generateProblemFromRc(rc);
		var solution = solver.solve(problem);

		var vn = VariantNorm.new(rc.oldType, Tuple.newType(Lists.fromArray(solution.types)), solution.types, rc.variantFields, null);

		vn.fieldRanges = rc.fieldRangesO;
		vn.vecO = rc.vecO;
		rc.variantNorm = vn;
		setVariantFields(rc, 0, solution);
		vn.pattern = solution.state[0];

		printNorm(rc, vn);
	}
	private def setVariantFields(rc: RaClass, caseIdx: int, soln: VariantSolution) {
		var ofs = rc.orig.fields;
		for (i < ofs.length) {
			var rf = rc.fields[i];
			if (rf != null && rf.normIndices.0 >= 0) {
				var fr = rc.fieldRangesT[i];
				if (soln.hasIntervals) rc.variantFields[i].intervals = Array<Interval>.new(fr.1 - fr.0);
				for (j < fr.1 - fr.0) {
					var assignment = soln.assignments[CaseField(caseIdx, fr.0 + j)];
					rc.variantFields[i].indexes[j] = assignment.0;
					if (soln.hasIntervals) rc.variantFields[i].intervals[j] = assignment.1;
				}
			}
		}
	}
	private def unboxUsingTaggedVariantNorm(rc: RaClass) -> bool {
		var vecT = Vector<Type>.new();
		var parentUnboxed = rc.orig.boxing == Boxing.UNBOXED;

		var numChildren = Lists.length(rc.children);
		if (rc.recursive > 1) return false;
		// now that we know it's not recursive, we can safely assign the variant norm

		var solver = VariantSolver.new(this);
		var pgen = VariantProblemGen.new(this);
		var problem = pgen.generateProblemFromRc(rc);
		var solution = solver.solve(problem);

		if (solution == null) return false; // XXX: warn that no solution was found

		Terminal.put1("solution=%q\n", solution.render);

		var tagField: VariantField;
		if (solution.hasTagScalar) tagField = VariantField.new(null, rn.norm(solution.tagType), [solution.types.length - 1]);
		else if (solution.explicitTag.0 >= 0) {
			tagField = VariantField.new(null, rn.norm(solution.tagType), [solution.explicitTag.0]);
			tagField.intervals = [solution.explicitTag.1];
		}
		var newType = Tuple.newType(Lists.fromArray(solution.types));

		var parentNorm = VariantNorm.new(rc.oldType, newType, solution.types, NO_FIELDS, tagField);
		if (verbose) Terminal.put1("%q\n", parentNorm.render);
		rc.variantNorm = parentNorm;
		var children = rc.children;

		var caseIdx = 0;
		for (l = rc.children; l != null; l = l.tail) {
			var child = l.head;
			setVariantFields(child, caseIdx, solution);

			var vn = VariantNorm.new(child.oldType, newType, solution.types, child.variantFields, tagField);
			vn.fieldRanges = child.fieldRangesO;
			vn.vecO = child.vecO;
			vn.tagValue = V3.getVariantTag(child.oldType);
			vn.pattern = solution.state[caseIdx];
			child.variantNorm = vn;
			
			parentNorm.children = List<VariantNorm>.new(vn, parentNorm.children);
			if (verbose) Terminal.put1("  %q\n", vn.render);
			caseIdx++;
		}
		printNorm(rc, parentNorm);
		return true;
	}
	private def unboxUsingEnumVariantNorm(rc: RaClass, tagType: IntType, tagField: VariantField) {
		var vn = VariantNorm.new(rc.oldType, tagType, [tagType], NO_FIELDS, tagField);
		vn.tagValue = V3.getVariantTag(rc.oldType);
		rc.raFacts |= RaFact.RC_ENUM;
		rc.variantNorm = vn;
		
		for (l = rc.children; l != null; l = l.tail) unboxUsingEnumVariantNorm(l.head, tagType, tagField);
	}
	private def fieldNorm(rf: RaField) -> TypeNorm {
		if (rf.typeNorm != null) return rf.typeNorm;
		else if (rf.fieldType != null) return rf.typeNorm = rn.norm(rf.fieldType);
		else return rn.norm(rf.orig.fieldType);
	}
	def getScalar(t: Type) -> Scalar.set {
		return nc.GetScalar(rn.ra.compiler, rn.ra.prog, t);
	}
	def getBitWidth(t: Type) -> byte {
		return nc.GetBitWidth(rn.ra.compiler, rn.ra.prog, t);
	}
	private def printField(field: VariantField, idx: int, tag: bool) {
		if (tag) buf.puts("tag:");
		else buf.put2("%s.%d:", field.rf.orig.source.name(), idx);
		buf.green().put1("%q", field.tn.at(idx).render).end().puts("->").cyan().put1("#%d", field.indexes[idx]);
		if (field.intervals != null && field.intervals[idx] != EMPTY_INTERVAL) buf.put1("@%q", field.intervals[idx].render);
		buf.end().putc(' ');
	}
	private def printSingleNorm(rc: RaClass, vn: VariantNorm) {
		buf.typeColor().put1("              %q ", rc.oldType.render).end();
				
		for (field in vn.fields) {
			if (field == EMPTY_FIELD) continue;
			for (j < field.tn.size) printField(field, j, false);
		}
		if (vn.tag != null) printField(vn.tag, 0, true);
		buf.outln();
		if (vn.pattern != null) buf.purple().put1("                  %q\n", vn.pattern.render).end();
		buf.outt();
	}
	private def printNorm(rc: RaClass, vn: VariantNorm) {
		if (!PRINT_PACKING) return;
		buf.puts("Unboxing for: ").typeColor().put1("%q", vn.oldType.render).end().puts(" ## ");
		buf.puts("[");
		for (i < vn.size) {
			if (i > 0) buf.csp();
			buf.green().put1("%q", vn.at(i).render).end();
		}
		buf.puts("]\n");

		if (rc.children == null) {
			printSingleNorm(rc, vn);
		} else {
			for (l = rc.children; l != null; l = l.tail) printSingleNorm(l.head, l.head.variantNorm);
		}
	}
	private def printNoUnboxReason(rc: RaClass, recursive: bool, closure: bool) -> bool {
		if (PRINT_PACKING) {
			var reason = Strings.format2("%s%s", if(recursive, "recursive ", ""), if(closure, "closure", ""));
			buf.puts("Unboxing for: ").typeColor().put1("%q", rc.oldType.render).end();
			buf.puts(" - no unboxing because ").red().puts(reason).ln().end();
		}
		buf.outt();
		return false;
	}
}

def EMPTY_INTERVAL = Interval(0, 0);