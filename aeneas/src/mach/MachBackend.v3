// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A machine-independent representation of an instruction.
class MachInstr(name: string) {
	var live: bool;		// used for marking dead code
	var useStart: int;	// index into code describing use/def info
	var useEnd: int;	// end index into code describing use/def info
	var moves: MachMoves;	// moves to be inserted before instruction

	def render(buf: StringBuffer) -> StringBuffer;
	def emit();
}
// Moves inserted before/after an instruction, either due to SSA deconstruction,
// spilling, register moves, calling conventions, etc
class MachMoves {
	var before: MoveResolver;	// phys -> phys moves, before
	var varMoves: List<(int, int)>; // usepos -> defpos moves, before
	var valMoves: List<(Val, int)>; // value -> usepos moves, before
	var after: MoveResolver;	// phys -> phys moves, after
}
// Machine-independent representation of virtual register classes
enum RegClass {
	REF,
	I32,
	I64,
	F32,
	F64
}
// Conversion functions from V3 Types to RegClasses
component Regs {
	def toRegClass(t: Type) -> RegClass {
		match (t.typeCon.kind) {
			V3Kind.INT => return toRegIntClass(IntType.!(t));
			V3Kind.FLOAT => {
				var ftc = Float_TypeCon.!(t.typeCon);
				return if(ftc.is64, RegClass.F64, RegClass.F32);
			}
			V3Kind.ENUM => return toRegIntClass(V3.getVariantTagType(t));
			V3Kind.ENUM_SET => return toRegIntClass(V3.getEnumSetType(t));
			_ => return RegClass.REF;
		}
	}

	def toRegIntClass(t: IntType) -> RegClass {
		return if(t.width <= 32, RegClass.I32, RegClass.I64);
	}
}
// Machine-independent representation of a virtual register.
class VReg {
	// -- state for code gen --------------------------------
	def ssa: SsaInstr;		// corresponding ssa instruction (if any)
	def varNum: int;		// virtual register number
	def varSize: int;		// number of virtual registers this var represents
	var start: int = -1;		// start position of code that defines this var
	var end: int = -1;		// end position of code that defines this var
	var live: bool;			// true if live
	// -- state for register allocation ---------------------
	var hint: byte;			// physical register hint
	var regClass: RegClass;		// required register type
	var reg: byte;			// assigned physical register
	var block: SsaBlock;
	var prev: VReg;			// prev link for list management
	var next: VReg;			// next link for list management
	var spill: int;			// assigned spill slot (< 0 indicates a constant)
	var endPos: int;		// last live position
	// -- state for stackifier -----------------------------
	var consumedFromStack: bool;
	var parmoveState: int;
	var stackIndex = -2;

	new(ssa, varNum, varSize, isConst: bool) {
		if (isConst) spill = -2 - varNum; // constants have invalid spill slots
	}
	def loc() -> int {
		return if(reg != 0, reg, spill);
	}
	def isConst() -> bool {
		return spill < 0;
	}
}
// Representation of a machine frame, including spill slots and space for outgoing params
class MachFrame(conv: MachCallConv) {
	var spillVars: int;		// spilled variables
	var spillArgs: int;		// space for outgoing spilled arguments
	var frameSize: int = -1;	// architecture-specific total frame size
	def IS_64: int = 0x40000000;	// if the spilled value is 64 bits

	def allocSpill(regClass: RegClass) -> int {
		match (regClass) {
			I64, F64 => {
				var spill = conv.regSet.spillStart + spillVars;
				spillVars += 2;
				return spill | IS_64;
			}
			_ => return conv.regSet.spillStart + spillVars++;
		}
	}
	def allocCallerSpace(conv: MachCallConv) -> MachCallConv {
		allocOverflow(conv.overflow);
		return conv;
	}
	def allocOverflow(overflow: int) {
		if (overflow > spillArgs) spillArgs = overflow;
	}
	def slots() -> int {
		return spillVars + spillArgs;
	}
	def size() -> int {
		return if(frameSize >= 0, frameSize, V3.fail("frame size not set"));
	}
	def is64(loc: int) -> bool {
		return (loc & IS_64) != 0;
	}
}
// Defines physical locations (registers, register sets, and stack locations).
// 1. 0 means an unassigned location.
// 2. Physical registers have low numbers in the range [1 ... physregs].
// 3. Sets of registers have numbers in the range (physregs ... spillStart).
// 4. Spill locations have numbers [spillStart ... callerStart).
// 5. Caller locations have numbers [callerStart ... calleeStart).
// 6. Callee locations have numbers [calleeStart ... MAX_INT).
class MachRegSet {
	def physRegs: int;			// number of physical registers
	def regSets: Array<Array<byte>>;	// registers in each set
	def names: Array<string>;		// names of each register and set
	def regClasses: Array<byte>;	// registers in each class
	def scratch: int;
	def fpScratch: int;
	def spillStart: int = regSets.length;
	def callerStart: int;
	def calleeStart: int;
	def matrix = BitMatrix.new(physRegs + 1, regSets.length);
	def IS_64: int = 0x40000000;
	new(physRegs, regSets, names, regClasses, scratch, fpScratch, callerStart, calleeStart) {
		// compute the matrix of physical register / register set membership
		for (i < regSets.length) {
			var rs = regSets[i];
			if (rs == null) continue;
			for (r in rs) matrix[r, i] = true;
		}
	}
	def isInRegSet(loc: int, snum: int) -> bool {
		if (loc < 1 || loc >= regSets.length) return false;
		return matrix[loc, snum];
	}
	def isReg(loc: int) -> bool {
		return loc > 0 && loc <= physRegs;
	}
	def isRegSet(loc: int) -> bool {
		return loc > 0 && loc <= regSets.length;
	}
	def isStack(loc: int) -> bool {
		return loc >= spillStart;
	}
	def isCallerStack(loc: int) -> bool {
		loc &= ~(IS_64);
		return loc >= callerStart && loc < calleeStart;
	}
	def isMultiple(loc: int) -> bool {
		if (loc == 0) return true;
		if (loc <= physRegs) return false;
		return loc < spillStart;
	}
	def identify(loc: int) -> string {
		loc &= ~(IS_64);
		if (loc < 0) return Strings.format1("invalid#%1", loc);
		if (loc == 0) return "unassigned";
		if (loc < spillStart) {
			var name = names[loc];
			if (name != null) return name;
			if (loc <= physRegs) return Strings.format1("r#%1", loc);
			else return Strings.format1("set#%1", loc);
		}
		if (loc < callerStart) return Strings.format1("spill#%1", loc - spillStart);
		if (loc < calleeStart) return Strings.format1("caller#%1", loc - callerStart);
		return Strings.format1("callee#%1", loc - calleeStart);
	}
}
// Machine-independent representation of the calling convention for a specific call.
class MachCallConv {
	def regSet: MachRegSet;		// associated register set
	def paramTypes: Array<Type>;	// parameter types
	def paramLocs: Array<int>;	// locations of parameters
	def returnTypes: Array<Type>;	// return types
	def retLocs: Array<int>;	// locations of return value(s)
	def overflow: int;		// number of overflow stack arguments
	new(regSet, paramTypes, paramLocs, returnTypes, retLocs, overflow) { }
	def callerParam(i: int) -> int {
		return adjust(paramLocs[i], regSet.callerStart);
	}
	def callerRet(i: int) -> int {
		return adjust(retLocs[i], regSet.callerStart);
	}
	def calleeParam(i: int) -> int {
		return adjust(paramLocs[i], regSet.calleeStart);
	}
	def calleeRet(i: int) -> int {
		return adjust(retLocs[i], regSet.calleeStart);
	}
	private def adjust(loc: int, adjust: int) -> int {
		if (loc <= regSet.physRegs) return loc;
		return loc - regSet.spillStart + adjust;
	}
}

// Base class for machine code generators.
class MachCodeGen(mach: MachProgram, context: SsaContext) {
	def rt = mach.runtime;
	def rtsrc = rt.src;
	def rtgc = rt.gc;
	def code = Vector<MachInstr>.new();
	def vars = Vector<VReg>.new();
	def uses  = Vector<int>.new();
	def markQueue = Vector<VReg>.new();
	def blocks = SsaBlockOrder.new(context.graph);

	var multiBlock: bool;
	var frame: MachFrame;
	var phiList: List<SsaPhi>;
	var lsra: LinearScanRegAlloc;
	var varRefSlotIndex: Array<int>; // XXX: move to VReg directly?
	// current position in the uses array
	var curUse: int;
	var curBlockStart: int;
	var curValMoves: List<(Val, int)>;
	var numLivePoints: int;
	// constants for encoding the used mach vars
	def USE	 = 0x0;
	def DEF	 = 0x1;
	def LIVE = 0x2;
	def KILL = 0x3;
	def TYPE_MASK = 0x3;
	def UNUSED_MASK	  = 0x8;
	def ASSIGNED_MASK = 0x4;
	def VAR_SHIFT: u3 = 4;

	new() {
		multiBlock = context.graph.isMultiBlock();
	}

	def makeVar(i: SsaInstr) -> VReg {
		var max = context.graph.markGen;
		if (i.mark >= max) return vars[i.mark - max]; // already has a variable
		var isConst = SsaConst.?(i);
		var varNum = vars.length;
		var t = i.getType();
		if (V3.isTuple(t)) {
			var size = Tuple.length(t);
			for (l = t.nested; l != null; l = l.tail) {
				var vreg = VReg.new(i, vars.length, size, isConst);
				vreg.regClass = Regs.toRegClass(l.head);
				vars.put(vreg);
				size = 1;
			}
		} else {
			var vreg = VReg.new(i, varNum, 1, isConst);
			vreg.regClass = Regs.toRegClass(t);
			vars.put(vreg);
		}
		i.mark = varNum + max; // maps instruction to var
		return vars[varNum];
	}
	def val(i: SsaInstr) -> Val {
		return SsaConst.!(i).val;
	}
	def id(i: SsaInstr, vreg: VReg) -> VReg {
		i.mark = vreg.varNum + context.graph.markGen;
		return vreg;
	}
	def info(b: SsaBlock) -> SsaBlockInfo {
		return blocks.order[b.mark];
	}
	def markLive(v: VReg) {
		if (!v.live) {
			markQueue.put(v);
			v.live = true;
		}
	}
	def markAllLiveVars() {
		for (j < markQueue.length) {
			var v = markQueue[j];
			if (v.start >= 0) {
				markUsesLive(v);
			} else {
				var inputs = v.ssa.inputs;
				for (k = 0; k < inputs.length; k++) markLive(makeVar(inputs[k].dest));
			}
		}
	}
	def markUsesLive(v: VReg) {
		if (SsaPhi.?(v.ssa)) {
			// mark all inputs to the SsaPhi as live
			for (i in v.ssa.inputs) markLive(makeVar(i.dest));
			return;
		}
		for (i = v.start; i < v.end; i++) {
			// for each instruction corresponding to this instruction
			var c = code[i];
			c.live = true;
			for (j = c.useStart; j < c.useEnd; j = j + 2) {
				// for every input to the instruction, mark it live
				var u = uses[j], uv = u & TYPE_MASK;
				if (uv == USE) markLive(vars[u >>> VAR_SHIFT]);
			}
		}
	}
	def genPhis() {
		// for each block that has phis
		for (l = phiList; l != null; l = l.tail) {
			var phi = l.head, firstInstr = code[info(phi.block).start];

			// define the live phis
			firstInstr.useStart = uses.length;
			var livePhis = definePhis(phi);
			firstInstr.useEnd = uses.length; // update defs of first instruction

			// add moves at control flow predecessors
			if (livePhis != null) addPhiMoves(livePhis, phi.block.preds);
		}
	}
	def definePhis(phi: SsaPhi) -> List<(SsaPhi, int)> {
		// for each live phi in this block, define it at this instruction
		var livePhis: List<(SsaPhi, int)>;
		while (true) {
			if (phi.mark >= context.graph.markGen) {
				var vreg = vars[phi.mark - context.graph.markGen];
				// define the phi at the beginning of the block
				if (vreg.live) {
					var defpos = dfnAt(vreg, 0);
					livePhis = List.new((phi, defpos), livePhis);
				}
			}
			var next = phi.next;
			if (!SsaPhi.?(next)) break;
			phi = SsaPhi.!(next);
		}
		return livePhis;
	}
	def addPhiMoves(livePhis: List<(SsaPhi, int)>, edges: Array<SsaCfEdge>) {
		// for each incoming edge to this block
		for (j < edges.length) {
			var e = edges[j], endInstr = code[info(e.src.block()).end - 2];
			if (endInstr.moves != null) failCriticalEdge(e);
			if (e.src.succs.length > 1) failCriticalEdge(e);
			var m = MachMoves.new();
			endInstr.moves = m;
			endInstr.useStart = uses.length;
			// for each live phi
			for (lp = livePhis; lp != null; lp = lp.tail) {
				// use phi input at end of respective predecessor
				var input = lp.head.0.inputs[j].dest, defpos = lp.head.1;
				var phivar = makeVar(lp.head.0);
				if (SsaConst.?(input)) {
					// add a value move
					m.valMoves = List.new((val(input), defpos), m.valMoves);
				} else {
					// add a var-var move, and a hint
					var inputvar = makeVar(input);
					m.varMoves = List.new((useAt(inputvar, 0), defpos), m.varMoves);
					hintVar(inputvar, phivar);
				}
			}
			endInstr.useEnd = uses.length;
		}
	}
	def failCriticalEdge(e: SsaCfEdge) {
		context.fail(Strings.format2("critical edge #%1 -> #%2", e.src.uid, e.dest.uid));
	}
	def kill(fixed: int) -> int {
		return record(KILL, -1, fixed);
	}
	def livePoint() -> int {
		var lp = numLivePoints++;
		record(LIVE, lp, 0);
		return lp;
	}
	def useAt(v: VReg, fixed: int) -> int {
		var usepos = record(USE, v.varNum, fixed);
		if (v.isConst()) curValMoves = List.new((val(v.ssa), usepos), curValMoves);
		return usepos;
	}
	def dfnAt(v: VReg, fixed: int) -> int {
		return record(DEF, v.varNum, fixed);
	}
	def hintVar(src: VReg, dest: VReg) {
		// XXX: record a register hint
	}
	def hint(src: SsaInstr, dest: VReg) {
		// XXX: record a register hint
	}
	private def record(mode: int, num: int, fixed: int) -> int {
		var pos = uses.length;
		uses.put(mode | (num << VAR_SHIFT));
		uses.put(fixed);
		return pos;
	}
	def addInstr(i: MachInstr) -> MachInstr {
		if (curValMoves != null) {
			i.moves = MachMoves.new();
			i.moves.valMoves = curValMoves;
			curValMoves = null;
		}
		i.useStart = curUse;
		i.useEnd = uses.length;
		curUse = uses.length;
		code.put(i);
		return i;
	}
	def renderInstr(i: MachInstr, buf: StringBuffer) -> StringBuffer {
		var p = buf.length;
		if (!i.live) return buf; // nothing to print
		buf.puts(i.name).pad(' ', p + 8);
		for (j = i.useStart; j < i.useEnd; j = j + 2) {
			buf.puts(" ");
			renderUse(j, buf);
		}
		return buf;
	}
	def renderUse(use: int, buf: StringBuffer) {
		var u = uses[use], vnum = u >>> VAR_SHIFT;
		buf.puts(useType(u));
		buf.putc(':');
		if (vnum >= 0 && vnum < (-1 >>> VAR_SHIFT)) {
			var v = vars[vnum];
			if (v != null && v.ssa != null) buf.putc('@').puti(v.ssa.uid);
			buf.putc('#').puti(vnum);
		}
		buf.putc('u').puti(use);
		// render the constraint of the use
		var fixed = uses[use + 1];
		if (fixed != 0) {
			if ((u & ASSIGNED_MASK) != 0) buf.putc('=');
			else buf.putc('@');
			buf.puts(frame.conv.regSet.identify(fixed));
		}
	}
	def varOfUse(use: int) -> VReg {
		return vars[uses[use] >>> VAR_SHIFT];
	}
	def useType(u: int) -> string {
		u = u & TYPE_MASK;
		if (u == USE) return "use";
		if (u == DEF) return "def";
		if (u == KILL) return "kill";
		if (u == LIVE) return "live";
		return "??";
	}
	def matchEdge(e: SsaDfEdge, optag: u8) -> bool {
		return soleEdge(e) && e.dest.opcode() == optag;
	}
	def soleEdge(e: SsaDfEdge) -> bool {
		if (e.next != null) return false; // not the only use
		var i = e.dest;
		if (i.useList != e) return false; // not the only use
		return inSameBlock(i);
	}
	def inSameBlock(i: SsaInstr) -> bool {
		if (multiBlock) {
			if (i.mark < context.graph.markGen) return false;
			return vars[i.mark - context.graph.markGen].start >= curBlockStart;
		}
		return true;
	}
}

type Operand {
	case Scratch;
	case Immediate(val: Val);
	case Use(ssa: SsaInstr, vreg: VReg, constraint: int);
	case Def(ssa: SsaInstr, vreg: VReg, constraint: int);
	case Kill(livepoint: int, constraint: int);
	case Overwrite(i: SsaInstr, vreg: VReg, constraint: int);
	case Label(block: SsaBlock, label: Label);
	case ExSource(ex: string, source: Source);

	def isImm() -> bool { return tag == 1; }
}

class ArchInstr(op: int, operands: Array<Operand>) {
	var prev: ArchInstr;
	var next: ArchInstr;
	def opcode() -> i28 { return i28.!(op); }
	def remove() {
		if (prev != null) prev.next = next;
		if (next != null) next.prev = prev;
		prev = next = null;
	}
}

// Constants for Arch instructions.
component ArchInstrs {
	// flags for all arch instructions reordering and register allocation
	def FLAG_NO_GAP = 0x80000000;	// cannot insert instructions before this instruction
	def FLAG_REMAT	= 0x40000000;	// instruction can be copied for rematerialization
	def FLAG_LOAD	= 0x20000000;	// instruction reads mutable state
	def FLAG_STORE	= 0x10000000;	// instruction writes mutable state

	def NUM_FLAGS: u5 = 4;

	// block and SSA resolution instructions
	def ARCH_NOP	 = -6;
	def ARCH_BLOCK	 = -5;
	def ARCH_ENTRY	 = -4;
	def ARCH_PARMOVE = -3;
	def ARCH_END	 = -2;
	def ARCH_RET	 = -1;

	def NO_OPERANDS: Array<Operand> = [];
}

def CACHED_INT_IMMEDIATES = [
	Operand.Immediate(Box<int>.new(-1)),
	Operand.Immediate(Box<int>.new(0)),
	Operand.Immediate(Box<int>.new(1)),
	Operand.Immediate(Box<int>.new(2)),
	Operand.Immediate(Box<int>.new(3)),
	Operand.Immediate(Box<int>.new(4)),
	Operand.Immediate(Box<int>.new(5)),
	Operand.Immediate(Box<int>.new(6)),
	Operand.Immediate(Box<int>.new(7)),
	Operand.Immediate(Box<int>.new(8))
];

// Basic algorithm for code generation.
class ArchCodeGen(context: SsaContext, mach: MachProgram, regSet: MachRegSet, buffer: MachDataBuffer) {
	def operands = Vector<Operand>.new();
	def vars = Vector<VReg>.new();
	var lowestMark: int;
	var blocks: SsaBlockOrder;
	var order: Vector<SsaBlockInfo>;
	var liveness: BitMatrix;
	var numLivepoints = 0;
	def livepoints = Vector<(SsaBlock, ArchInstr, Operand.Kill)>.new();
	var anyReg: int;
	var first: ArchInstr;
	var cursor: ArchInstr;
	var blockEnd: ArchInstr;
	var frame: MachFrame;
	var curBlock: SsaBlock;
	var computingLiveness: bool;
	var out: ArchInstrBuffer;

	def reset(graph: SsaGraph, blocks: SsaBlockOrder, frame: MachFrame) {
		this.operands.length = 0;
		this.vars.length = 0;
		this.context.graph = graph;
		this.context.block = null;
		this.lowestMark = graph.markGen++;
		this.blocks = blocks;
		this.order = if(blocks != null, blocks.order);
		this.liveness = BitMatrix.new(if(order != null, order.length, 1), 32); // XXX: reuse?
		this.numLivepoints = 0;
		this.livepoints.length = 0;
		this.first = null;
		this.cursor = null;
		this.frame = frame;
		this.curBlock = null;
		this.computingLiveness = true;
	}
	def generate(m: IrMethod, frame: MachFrame) {
		context.enterMethod(m);
		var blocks = SsaBlockOrder.new(m.ssa);
		reset(m.ssa, blocks, frame);
		selectInstructionsForGraph();
		print();
	}
	def print() {
		if (!context.shouldPrintMach()) return;
		// print header
		var out = getOutput();
		out.puts("Arch instructions for: ");
		var render: StringBuffer -> StringBuffer;
		if (context.spec != null) context.spec.render(out);
		else if (context.method != null) context.method.renderLong(out);
		out.outln();
		// print instructions
		var indent = 1;
		for (i = first; i != null; i = i.next) {
			indent = out.putInstr(indent, i);
		}
		out.outln();
	}
	def selectInstructionsForGraph() {
		cursor = ArchInstr.new(ArchInstrs.ARCH_END, []);
		// Process blocks in reverse order.
		for (i = order.length - 1; i >= 0; i--) {
			var info = order[i], block = info.block;
			context.block = block;
			gatherLivenessForBlock(block);
			selectInstructionsForBlock(block);
			if (info.loop != null) finishLoopLiveness(info);
		}
		// emit the entry instruction.
		visitEntry(context.graph.params);
		first = cursor;
		cursor = null;
	}
	def finishLoopLiveness(info: SsaBlockInfo) {
		// Propagate liveness from the loop header to all live points
		// contained in the loop.
		var end = info.loop.end;
		for (i = livepoints.length - 1; i >= 0; i--) {	// process newest first
			var t = livepoints[i], block = t.0;
			if (block.mark > end) break;  // rely on backwards codegen order
			liveness.or(order.length + t.2.livepoint, block.mark);
		}
	}
	def gatherLivenessForBlock(block: SsaBlock) {
		for (e in block.succs()) {
			var succ = e.dest;
			// union the succesor's live-in set into this.
			liveness.or(block.mark, succ.mark);
		}
	}
	def selectInstructionsForBlock(block: SsaBlock) {
		curBlock = block;
		blockEnd = cursor;
		// Pre-process instructions in forward order.
		// Mark instructions in this block.
		for (i = block.next; i != block; i = i.next) {
			if (!SsaInstr.?(i)) break;
			var instr = SsaInstr.!(i);
			var vreg = getVReg(instr);
			vreg.block = block;
		}
		// Select instructions in reverse order.
		for (i = block.prev; i != block; i = i.prev) {
			// Skip instructions that are not live.
			if (SsaPhi.?(i)) break;
			if (!isLive(i, block) && i.facts.O_PURE) continue;
			selectInstructions(block, i);
			advanceCursor();
		}
		// Cap the top of the block with a special instruction.
		emit1(ArchInstrs.ARCH_BLOCK, useLabel(block));
		advanceCursor();
	}
	def advanceCursor() {
		while (cursor.prev != null) cursor = cursor.prev;
	}
	def selectInstructions(block: SsaBlock, i: SsaLink) {
		// Dispatch to appropriate architecture-specific routine.
		match (i) {
			x: SsaApplyOp => visitApply(block, x);
			x: SsaGoto => {
				// Emit SSA-resolution moves for the successor if necessary.
				emitPhiResolutionMoves(block, x.succs[0]);
				visitGoto(block, x);
			}
			x: SsaIf => visitIf(block, x);
			x: SsaReturn => visitReturn(block, x);
			x: SsaSwitch => visitSwitch(block, x);
			x: SsaThrow => visitThrow(block, x);
			_ => context.fail("invalid instruction type");
		}
	}
	def emitPhiResolutionMoves(block: SsaBlock, edge: SsaCfEdge) {
		var index = edge.desti;
		// Add definitions of all phis.
		for (i = edge.dest.next; SsaPhi.?(i); i = i.next) {
			var phi = SsaPhi.!(i);
			dfn(phi);
		}
		// Add uses of all phi inputs.
		for (i = edge.dest.next; SsaPhi.?(i); i = i.next) {
			var phi = SsaPhi.!(i);
			use(phi.inputs[index].dest);
		}
		emitN(ArchInstrs.ARCH_PARMOVE);
	}
	// Mark {i} as live in {block}
	def setLive(i: SsaInstr, block: SsaBlock) {
		liveness[block.mark, getVReg(i).varNum] = true;
	}
	// Check if {i} is live in {block}
	def isLive(i: SsaLink, block: SsaBlock) -> bool {
		if (i.mark >= context.graph.markGen) {
			context.fail1("mark @%1 invalid", i.uid);
			return false;
		}
		if (i.mark <= lowestMark) return false;
		return liveness[block.mark, i.mark - lowestMark];
	}

	def getVReg(i: SsaInstr) -> VReg {
		// TODO: handle multiple return values
		if (i.mark >= context.graph.markGen) {
			context.fail1("mark @%1 invalid", i.uid);
			return null;
		}
		if (i.mark <= lowestMark) {
			return newVReg(i);
		}
		return vars[i.mark - lowestMark];
	}
	def newVReg(i: SsaInstr) -> VReg {
		var next = context.graph.markGen++;
		var width = 1;
		if (i != null) {
			width = numVars(i);
			i.mark = next;
		}
		var id = next - lowestMark;
		var length = id + width + 1;
		liveness.widen(length);
		vars.grow(length);
		vars.length = length;
		var n = VReg.new(i, id, width, false);
		vars[id] = n;
		return n;
	}
	def newLivepoint() -> int {
		return numLivepoints++;
	}
	def numVars(i: SsaInstr) -> int {
		return Tuple.length(i.getType());
	}
	def updateLiveness(i: ArchInstr) {
		def DEFS = 0, KILLS = 1, OVW = 2, USES = 3;
		var state = DEFS;
		for (o in i.operands) match (o) {
			Def(i, vreg, constraint) => {
				if (state > DEFS) context.fail("out of order def");
				liveness[context.block.mark, vreg.varNum] = false;
				state = DEFS;
			}
			Overwrite(i, vreg, constraint) => {
				if (state > OVW) context.fail("out of order ovw");
				liveness[context.block.mark, vreg.varNum] = false;
				state = OVW;
			}
			Kill(livepoint, constraint) => {
				if (state > KILLS) context.fail("out of order kill");
				if (livepoint >= 0) {
					var index = order.length + livepoint;
					liveness.grow(index + 1);
					liveness.or(index, context.block.mark);
					livepoints.put((context.block, i, Operand.Kill.!(o)));
				}
				state = KILLS;
			}
			Use(i, vreg, constraint) => {
				liveness[context.block.mark, vreg.varNum] = true;
				state = USES;
			}
			_ => ;
		}
	}
	def isRef(v: VReg) -> bool {
		if (v == null || v.ssa == null) return false;
		if (SsaConst.?(v.ssa)) return false;
		return mach.isRefType(v.ssa.getType());
	}
	def runInsertion<T>(f: T -> void, arg: T, next: ArchInstr) {
		var prevCursor = cursor, prevL = computingLiveness;
		computingLiveness = false;
		cursor = next;
		f(arg);
		computingLiveness = prevL;
		cursor = prevCursor;
	}
	//======================================================================
	// MachStackifier uses these codegen methods to insert loads, stores,
	// etc. Only relevant targets implement the gen*() methods.
	//======================================================================
	def insertLoadLocal(v: VReg, next: ArchInstr) {
		runInsertion(genLoadLocal, v, next);
	}
	def insertStoreLocal(v: VReg, pop: bool, next: ArchInstr) {
		runInsertion(genStoreLocal, (v, pop), next);
	}
	def insertPop(v: VReg, next: ArchInstr) {
		runInsertion(genPop, v, next);
	}
	def insertLoadConst(t: Type, val: Val, next: ArchInstr) {
		runInsertion(genLoadConst, (t, val), next);
	}
	def genLoadLocal(v: VReg);		// arch-specific
	def genStoreLocal(v: VReg, pop: bool);	// arch-specific
	def genPop(v: VReg);			// arch-specific
	def genLoadConst(t: Type, val: Val);	// arch-specific

	//======================================================================
	// ShadowStackSpiller uses these codegen methods to insert saves,
	// restores, etc. Only relevant targets implement the gen*() methods.
	//======================================================================
	def insertShadowStackAlloc(shadow_sp: VReg, slots: int, next: ArchInstr) {
		runInsertion(genShadowStackAlloc, (shadow_sp, slots), next);
	}
	def insertShadowStackFree(shadow_sp: VReg, slots: int, next: ArchInstr) {
		runInsertion(genShadowStackFree, (shadow_sp, slots), next);
	}
	def insertShadowStackSave(shadow_sp: VReg, v: VReg, slot: int, next: ArchInstr) {
		runInsertion(genShadowStackSave, (shadow_sp, v, slot), next);
	}
	def insertShadowStackRestore(shadow_sp: VReg, v: VReg, slot: int, next: ArchInstr) {
		runInsertion(genShadowStackRestore, (shadow_sp, v, slot), next);
	}
	def newShadowSpTmp() -> VReg;					// arch-specific
	def genShadowStackAlloc(shadow_sp: VReg, slots: int);		// arch-specific
	def genShadowStackFree(shadow_sp: VReg, slots: int);		// arch-specific
	def genShadowStackSave(shadow_sp: VReg, v: VReg, slot: int);	// arch-specific
	def genShadowStackRestore(shadow_sp: VReg, v: VReg, slot: int);	// arch-specific

	//======================================================================
	// Helper routines for emitting instructions.
	//======================================================================
	def matchAddImm(i: SsaInstr) -> (SsaInstr, Val) {
		// TODO: check covering condition: in same block and single use
		if (!SsaApplyOp.?(i)) return (i, null);
		var apply = SsaApplyOp.!(i);
		if (Opcode.IntAdd.?(apply.op.opcode) || Opcode.PtrAdd.?(apply.op.opcode)) {
			var x = apply.input0(), y = apply.input1();
			if (SsaConst.?(y)) return (x, SsaConst.!(y).val);
			if (SsaConst.?(x)) return (y, SsaConst.!(x).val);
		}
		return (i, null);
	}
	def canCover(i: SsaInstr) -> bool {
		if (!inSameBlock(i)) return false;
		if (i.useList.next != null) return false;
		return true;
	}
	def cover(optag: u8, i: SsaInstr) -> SsaApplyOp {
		if (!SsaApplyOp.?(i)) return null;
		if (!inSameBlock(i)) return null;
		var apply = SsaApplyOp.!(i);
		if (apply.op.opcode.tag != optag) return null;
		return apply;
	}
	def emit0(opcode: int) {
		if (operands.length != 0) return context.fail("expected 0 operands");
		emitN(opcode);
	}
	def emit1(opcode: int, a: void) {
		if (operands.length != 1) return context.fail("expected 1 operand");
		emitN(opcode);
	}
	def emit2(opcode: int, a: void, b: void) {
		if (operands.length != 2) return context.fail("expected 2 operands");
		emitN(opcode);
	}
	def emit3(opcode: int, a: void, b: void, c: void) {
		if (operands.length != 3) return context.fail("expected 3 operands");
		emitN(opcode);
	}
	def emitN(opcode: int) {
		var x = operands.extract();
		var i = ArchInstr.new(opcode, x);
		// insert {i} between {cursor.prev} and {cursor}
		i.next = cursor;
		var prev = cursor.prev;
		if (prev != null) {
			prev.next = i;
			i.prev = prev;
		}
		cursor.prev = i;
		if (computingLiveness) updateLiveness(i);
	}
	def useLabel(block: SsaBlock) {
		operands.put(Operand.Label(block, order[block.mark].label));
	}
	def dfnAll(i: SsaInstr) {
		var rv = getVReg(i);
		match (rv.varSize) {
			0 => ;
			1 => dfn(i);
			_ => {
				var proj = Array<SsaInstr>.new(rv.varSize);
				for (l: Edge<SsaInstr> = i.useList; l != null; l = l.next) {
					var u = l.src;
					if (SsaApplyOp.?(u)) {
						match (SsaApplyOp.!(u).op.opcode) {
							TupleGetElem(index) => proj[index] = u;
							_ => ;
						}
					}
				}
				for (j < rv.varSize) {
					operands.put(Operand.Def(proj[j], vars[rv.varNum + j], 0));
				}
			}
		}
	}
	def dfn(i: SsaInstr) {
		operands.put(Operand.Def(i, getVReg(i), 0));
	}
	def dfnv(vreg: VReg) {
		operands.put(Operand.Def(vreg.ssa, vreg, 0));
	}
	def kill(livepoint: int, constraint: int) {
		operands.put(Operand.Kill(livepoint, constraint));
	}
	def useAll(array: Array<SsaDfEdge>, start: int) {
		for (j = start; j < array.length; j++) use(array[j].dest);
	}
	def use(i: SsaInstr) {
		operands.put(Operand.Use(i, getVReg(i), 0));
	}
	def usev(vreg: VReg) {
		operands.put(Operand.Use(vreg.ssa, vreg, 0));
	}
	def useReg(i: SsaInstr) {
		operands.put(Operand.Use(i, getVReg(i), anyReg));
	}
	def useImm(val: Val) {
		operands.put(Operand.Immediate(val));
	}
	def useInt(val: int) {
		var x = val + 1;
		if (x >= 0 && x < CACHED_INT_IMMEDIATES.length) {
			return operands.put(CACHED_INT_IMMEDIATES[x]);
		}
		operands.put(Operand.Immediate(Int.box(val)));
	}
	def useIntConst(val: int) {
		useConstant(context.graph.intConst(val), 0);
	}
	def useAddrConst(addr: Addr) {
		useConstant(context.graph.valConst(mach.data.ptrType, addr), 0);
	}
	def useLongConst(val: int) {
		useConstant(context.graph.valConst(Long.TYPE, Long.box(val)), 0);
	}
	def useFixed(i: SsaInstr, constraint: int) {
		operands.put(Operand.Use(i, getVReg(i), constraint));
	}
	def useConstant(i: SsaConst, constraint: int) {
		operands.put(Operand.Use(i, getVReg(i), constraint));
	}
	def dfnFixed(i: SsaInstr, constraint: int) {
		operands.put(Operand.Def(i, getVReg(i), constraint));
	}
	def dfnReg(i: SsaInstr) {
		operands.put(Operand.Def(i, getVReg(i), anyReg));
	}
	def ovwReg(i: SsaInstr) {
		operands.put(Operand.Overwrite(i, getVReg(i), anyReg));
	}
	def useScratch() {
		operands.put(Operand.Scratch);
	}
	def newTmp(t: Type) -> SsaInstr {
		return SsaParam.new(-1, t);
	}
	def id(i: SsaInstr, vreg: VReg) -> VReg {
		i.mark = vreg.varNum;
		return vreg;
	}
	def useExSource(ex: string, source: Source) {
		operands.put(Operand.ExSource(ex, source));
	}

	def toLabel(o: Operand) -> Label {
		match (o) {
			Label(block, label) => return label;
			_ => context.fail("expected label");
		}
		return null;
	}
	def toBlock(o: Operand) -> SsaBlock {
		match (o) {
			Label(block, label) => return block;
			_ => context.fail("expected block");
		}
		return null;
	}
	def toInt(o: Operand) -> int {
		return Int.unbox(toImm(o));
	}
	def toImm(o: Operand) -> Val {
		match (o) {
			Immediate(val) => return val;
			_ => context.fail("expected immediate");
		}
		return null;
	}
	def toVar(o: Operand) -> VReg {
		match (o) {
			Use(i, vreg, constraint) => return vreg;
			Def(i, vreg, constraint) => return vreg;
			_ => context.fail("expected immediate");
		}
		return null;
	}
	def toExSource(o: Operand) -> (string, Source) {
		match (o) {
			ExSource(ex, source) => return (ex, source);
			_ => context.fail("expected exception + source");
		}
		return (null, null);
	}
	def inSameBlock(i: SsaInstr) -> bool {
		if (order.length == 1) return true;
		return getVReg(i).block == curBlock;
	}
	def isSigned(op: Operator) -> bool {
		return IntType.!(op.typeArgs[0]).signed;
	}

	//======================================================================
	// Architecture-specific routines.
	//======================================================================

	// Instruction selection.
	def visitEntry(params: Array<SsaParam>) {
		for (i < params.length) {
			if (!isLive(params[i], context.block)) continue;
			if (frame == null) dfn(params[i]);
			else dfnFixed(params[i], frame.conv.callerParam(i));
		}
		emitN(ArchInstrs.ARCH_ENTRY);
		advanceCursor();
	}
	def visitApply(block: SsaBlock, i: SsaApplyOp);
	def visitThrow(block: SsaBlock, i: SsaThrow);
	def visitIf(block: SsaBlock, i: SsaIf);
	def visitSwitch(block: SsaBlock, i: SsaSwitch);
	def visitGoto(block: SsaBlock, target: SsaGoto);
	def visitReturn(block: SsaBlock, i: SsaReturn) {
		for (j < i.inputs.length) useFixed(i.inputs[j].dest, frame.conv.callerRet(j));
		emitN(ArchInstrs.ARCH_RET);
	}

	def getProjections(i: SsaInstr) -> Array<SsaInstr> {
		return [i];  // TODO
	}

	def assembleInstrs() {
		for (i = cursor; i != null; i = i.next) {
			assemble(i.opcode(), i.operands);
		}
	}

	// Code generation.
	def assemble(opcode: int, x: Array<Operand>);
	// Rendering.
	// Override this method to add architecture-specific rendering of instructions.
	def getOutput() -> ArchInstrBuffer {
		if (out != null) return out;
		return out = ArchInstrBuffer.new(this, context.prog, regSet);
	}
}
// Helper class for rendering architecture-specific machine instructions.
class ArchInstrBuffer(codegen: ArchCodeGen, prog: Program, regSet: MachRegSet) extends TerminalBuffer {
	def putBlock(indent: int, i: ArchInstr) -> int {
		while (i != null) {
			indent = putInstr(indent, i);
			i = i.next;
			if (i != null && i.opcode() == ArchInstrs.ARCH_BLOCK) break;
		}
		return indent;
	}
	def putInstrV(i: ArchInstr) {
		putInstr(1, i);
	}
	def putInstr(indent: int, i: ArchInstr) -> int {
		var a = i.operands;
		match (int.!(i.opcode())) {
			ArchInstrs.ARCH_NOP => {
				putIndent(indent);
				puts("nop ");
				putOperands(a);
			}
			ArchInstrs.ARCH_ENTRY => {
				putIndent(1);
				puts("entry ");
				putOperands(a);
			}
			ArchInstrs.ARCH_BLOCK => {
				putIndent(1);
				puts("block ");
				putSsaBlock(Operand.Label.!(a[0]).block);
			}
			ArchInstrs.ARCH_PARMOVE => {
				putIndent(indent);
				puts("parallel-move");
				var half = a.length / 2;
				for (i < half) {
					var dst = a[i], src = a[i + half];
					ln();
					putIndent(indent+4);
					putOperand(dst);
					puts(" <- ");
					putOperand(src);
				}
			}
			ArchInstrs.ARCH_RET => {
				putIndent(indent);
				puts("ret ");
				putOperands(a);
			}
			ArchInstrs.ARCH_END => {
				putIndent(1);
				puts("end");
			}
			_ => {
				indent = putArchInstr(indent, i);
			}
		}
		ln();
		return indent;
	}
	// Override this method to add architecture-specific rendering of instructions.
	def putArchInstr(indent: int, i: ArchInstr) -> int {
		return putSimpleInstr(indent, i);
	}
	def putSimpleInstr(indent: int, i: ArchInstr) -> int {
		putIndent(indent);
		puts("opcode: ").putx(i.opcode()).sp();
		putOperands(i.operands);
		return indent;
	}
	def putIndent(indent: int) {
		if (indent-- > 0) tab();
		while (indent-- > 0) sp().sp();
	}
	def putSsaBlock(block: SsaBlock) {
		blue().putc('#').puti(block.uid).end();
	}
	def putSsa(i: SsaInstr) -> this {
		cyan().putc('@').puti(i.uid).end();
		if (SsaConst.?(i)) {
			V3.renderResult(SsaConst.!(i).val, null, green().putc('#'));
			end();
		}
	}
	def putArchWithI(name: string, x: Array<Operand>) -> this {
		var y = x[x.length - 1];
		puts(name);
		if (y.isImm()) putc('i');
		sp();
		putOperands(x);
	}
	def putNamedInstr(indent: int, name: string, x: Array<Operand>) -> int {
		putIndent(indent);
		puts(name).sp();
		putOperands(x);
		return indent;
	}
	def putOperands(x: Array<Operand>) -> this {
		for (j < x.length) {
			if (j > 0) csp();
			putOperand(x[j]);
		}
	}
	def putConstraint(constraint: int) -> this {
		if (constraint != 0) putc(':').yellow().puts(regSet.identify(constraint)).end();
	}
	def putVReg(mode: byte, vreg: VReg) -> this {
		putc(mode);
		puti(vreg.varNum);
	}
	def putOperand(o: Operand) -> this {
		match (o) {
			Scratch => puts("<scratch>");
			Immediate(val) => {
				puts("imm=");
				green();
				V3.renderResult(val, null, this);
				end();
			}
			Use(i, vreg, constraint) => {
				if (i != null) putSsa(i);
				putVReg('u', vreg);
				putConstraint(constraint);
			}
			Def(i, vreg, constraint) => {
				if (i != null) putSsa(i);
				putVReg('d', vreg);
				putConstraint(constraint);
			}
			Kill(livepoint, constraint) => {
				putc('k');
				if (livepoint >= 0) puti(livepoint);
				putConstraint(constraint);
			}
			Overwrite(i, vreg, constraint) => {
				putSsa(i);
				putVReg('v', vreg);
				putConstraint(constraint);
			}
			Label(block, label) => {
				puts("lbl=");
				putSsaBlock(block);
			}
			ExSource(ex, source) => {
				if (ex != null) {
					puts("ex=");
					green().puts(ex).end();
					sp();
				}
				if (source != null) {
					puts("src=");
					green();
					source.render(this).end();
				}
			}
		}
	}
	def putLiveness(liveness: BitMatrix, index: int) {
		put1("{livepoint=%1", index);
		for (j < liveness.numcols) {
			if (liveness[index, j]) {
				put1(" v%1", j);
			}
		}
		puts("}\n");
	}
}
