// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def pname(width: int) -> string {
	return Strings.builderOf("$p").putd(width).toString();
}
class AddressSpace {
	def name: string;		// name of address space
	def bigEndian: bool;		// true if data is loaded/stored in big endian
	def addressWidth: u8;		// width of address in bits
	def addressSize: u8;		// size of address in bytes
	def addressSizeLog2: u8 = u8.view(Ints.log(addressSize)); // log of address size
	def pageAlign: Alignment;
	def addrAlign: Alignment;
	def ptrTypeCon: TypeCon = Pointer_TypeCon.new(pname(addressWidth), addressWidth);
	def ptrType: PointerType = PointerType.!(ptrTypeCon.create0());

	new(name, bigEndian, addressWidth, addressSize, pageAlign, addrAlign) { }
}
// Represents a contiguous region of memory with an address space, e.g. the data region.
// Allows allocation of space within the region to various program entities and records
// the offsets for each allocation for later debugging.
class Region(name: string, space: AddressSpace) {
	def contents = Vector<(Addr, int, int)>.new();
	var mark: int;		// the current end of the allocations

	// align the current allocation mark to the specified size
	def align(size: int) {
		mark = (mark + (size - 1)) & (-1 ^ (size - 1));
	}
	// allocate a new item into this region
	def allocate<T>(v: T, size: int) -> Address<T> {
		var addr = Address.new(this, v);
		contents.put(addr, mark, size);
		mark += size;
		return addr;
	}
	// apply the function to the contents of this region
	def apply(f: (Addr, int, int) -> void) {
		contents.apply(f);
	}
	def setStartAddr(startAddr: int) -> int {
		// set all addresses
		for (i < contents.length) {
			var t = contents[i];
			t.0.absolute = startAddr + t.1;
		}
		return mark;
	}
}
// Addr represents any kind of address
class Addr(region: Region, base: Addr, offset: int) extends Val {
	var absolute: int = -1;	// absolute address if this is a base address
	var size: int;
	var mask: u64;

	def equals(val: Val) -> bool {
		if (Addr.?(val)) {
			var that = Addr.!(val);
			return that.region == this.region
				&& that.offset == this.offset
				&& Values.equal(that.base, this.base)
				&& that.mask == this.mask;
		}
		return false;
	}
	def add(delta: int) -> Addr {
		if (delta == 0) return this; // nothing to do
		var noffset = offset + delta;
		if (base == null) {
			if (noffset == 0) return null; // null address
			return Addr.new(region, this, noffset); // use this as the base
		} else {
			if (noffset == 0) return base; // zero offset
			return Addr.new(region, base, noffset); // new offset from base
		}
	}
	def get<T>() -> T {
		return Address<T>.!(this).val;
	}
	def is<T>() -> bool {
		return Address<T>.?(this);
	}
	def setAbsolute(a: int) -> this {
		absolute = a;
	}
}
// Address represents the exact address of a particular type of item, like an object or method
class Address<T> extends Addr {
	def val: T;
	new(region: Region, val) super(region, null, 0) { }
	def equals(v: Val) -> bool {
		if (Address<T>.?(v)) {
			var other = Address<T>.!(v);
			return other.val == val && other.offset == 0; // only compare values
		}
		return false;
	}
}
