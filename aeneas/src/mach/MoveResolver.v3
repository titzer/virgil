// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Resolves a list of parallel moves, e.g. to resolve the value of each phi at
// a control flow predecessor, or to rearrange values into correct registers
// according to a specific calling convention.
// Uses a custom map from int -> MoveNode internally for performance.
// Note: most move graphs will be tiny, with just 2 or 3 nodes
class MoveResolver(ERROR: ErrorGen) {
	def GRAY    = '\x01';
	def BLACK   = '\x02';
	def mapSize = 8;	// TUNABLE: size of move graph
	def mapMask = 0b111;	// mask for looking up in map
	def map = Array<MoveNode>.new(mapSize); // int -> node map
	var size: int;

	// add a move from src -> dst to the graph
	def addMove(src: int, dest: int) {
		if (src == dest) return;
		var ns = make(src), nd = make(dest);
		if (nd.src == ns) return; // already added this edge
		if (nd.src != null) {
			return ERROR.fail(Strings.format3("Cannot add edge %d -> %d: edge %d -> already exists", src, dest, nd.src.loc));
		}
		nd.src = ns;
		nd.dstNext = ns.dstList;
		ns.dstList = nd;
	}
	def clear() {
		for (i < map.length) map[i] = null;
	}
	// remove a move from this graph
	def removeMove(src: int, dest: int) { // XXX: dead
		var ns = getNode(src), nd = getNode(dest);
		if (nd == null || nd.src != ns) return;
		var prev: MoveNode;
		for (l = ns.dstList; l != null; l = l.dstNext) {
			if (l == nd) {
				if (prev != null) prev.dstNext = l.dstNext;
				else ns.dstList = l.dstNext;
				break;
			}
			prev = l;
		}
		nd.src = null;
	}
	def render(b: StringBuilder, regSet: MachRegSet) -> StringBuilder {
		for (i < map.length) {
			var n = map[i];
			while (n != null) {
				var dl = n.dstList;
				if (dl == null) { n = n.hashNext; continue; }
				b.puts(regSet.identify(n.loc)).puts("->{");
				for (d = dl; d != null; d = d.dstNext) {
					b.puts(regSet.identify(d.loc));
					b.puts(" ");
				}
				b.puts("} ");
				n = n.hashNext;
			}
		}
		return b;
	}
	private def make(loc: int) -> MoveNode {
		// get a node if it exists; create it if it does not
		var node = getNode(loc);
		if (node == null) {
			size++;
			node = MoveNode.new(loc);
			node.hashNext = map[loc & mapMask];
			map[loc & mapMask] = node;
		}
		return node;
	}
	// generate moves in appropriate order
	def genMoves(alloc: int -> int, move: (int, int) -> void) {
		if (size == 0) return;
		for (i < map.length) {
			var node = map[i];
			while (node != null) {
				orderMove(alloc, move, node);
				node = node.hashNext;
			}
		}
	}
	// get the node corresponding the specified location, if one exists
	def getNode(loc: int) -> MoveNode {
		var node = map[loc & mapMask];
		while (node != null) {
			if (node.loc == loc) return node;
			node = node.hashNext;
		}
		return null;
	}
	// check if a location is overwritten
	def isOverwritten(loc: int) -> bool {
		var node = getNode(loc);
		return node != null && node.src != null;
	}
	// traverse the move graph, inserting moves in post-order
	private def orderMove(alloc: int -> int, move: (int, int) -> void, node: MoveNode) {
		if (node.color == BLACK) return;
		node.color = GRAY;
		for (l = node.dstList; l != null; l = l.dstNext) {
			if (l.color == GRAY) {
				// cycle detected; break it with a temporary
				var tmp = alloc(l.loc);    // allocate a temporary
				move(l.loc, tmp);	// save
				move(node.loc, l.loc);	// overwrite
				l.loc = tmp;		// on-stack uses will use tmp
			} else {
				orderMove(alloc, move, l);
			}
		}
		node.color = BLACK;
		if (node.src != null) move(node.src.loc, node.loc);
	}
}

// Representation of a location, including a source and a destination list
class MoveNode {
	var loc: int;			// location of the node
	var color: byte;		// used in traversing the graph
	var src: MoveNode;		// source of the value for this node
	var dstList: MoveNode;	// head of destination list
	var dstNext: MoveNode;	// next in a list of successors
	var hashNext: MoveNode;	// next in hash chain
	new(loc) { }
}
