// Copyright 2023 Virgil Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Track which variable is stored in the physical register. Using register as
// the index of {regState}, which stores the indices into {allocated}.
class RegState(regSet: MachRegSet, codegen: SsaMachGen) {
	def regState = Array<int>.new(regSet.physRegs);			// indices into {allocated}
	def allocated = Array<(VReg, int)>.new(regSet.physRegs);	// (VReg, pos)
	var cursor: int; // point to next free slot in allocated
	var pos: int;    // an accumulated number
	var buf = ArchInstrBuffer.new(codegen, codegen.mach.prog, regSet);

	def updateUsePos(reg: byte) {
		var i = regState[reg];
		if (i < 0) return;
		var t = allocated[i];
		allocated[i] = (t.0, pos);
	}
	def freeReg(loc: int, clear: bool) {
		if (!regSet.isReg(loc)) return;
		var i = regState[loc];
		if (i < 0) return;
		var o = allocated[i];
		var a = allocated[--cursor];
		if (cursor > 0) { 
			allocated[i] = a;
			regState[a.0.reg] = i;
		}
		regState[loc] = -1;
		if (clear) o.0.reg = 0;
	}
	def getVreg(loc: int) -> VReg {
		if (!regSet.isReg(loc)) return null;
		var i = regState[loc];
		if (i < 0) return null;
		return allocated[i].0;
	}
	def isUsedInThisInstr(reg: byte) -> bool {
		var i = regState[reg];
		if (i < 0) return false;
		return allocated[i].1 == pos;
	}
	def chooseRegister(constraint: int) -> int {
		// Find a register from the constraint set; a free one, or the one used farthest in future
		var minpos = int.max, newReg: byte = 0;
		for (reg in regSet.regSets[constraint]) {
			var i = regState[reg];
			if (i < 0) return reg; // found a free register in the set
			var a = allocated[i];
			if (a.1 < minpos) {
				minpos = a.1;
				newReg = reg;
			}
		}
		if (newReg == 0) codegen.context.fail("no registers available");
		return newReg;
	}
	def reassignReg(vreg: VReg, reg: int) -> VReg {
		var i = regState[reg];
		if (i < 0) {
			regState[reg] = cursor;
			allocated[cursor++] = (vreg, pos);
			return null;
		} else {
			var old = allocated[i].0;
			allocated[i] = (vreg, pos);
			return old;
		}
	}
	def dumpState(str: string) {
		buf.reset();
		buf.puts(str);
		buf.puts(" regState = [");
		for (j < regState.length) {
			var i = regState[j];
			if (i < 0) continue;
			var a = allocated[i];
			buf.puts(regSet.identify(j)).putc('=');
			buf.putVReg("", a.0);
			buf.putc('^');
			buf.putd(a.1);
			buf.csp();
		}
		Terminal.put(buf.puts("]").ln().toString());
	}
	def clear() {
		for (i < allocated.length) allocated[i] = (null, -1);
		for (i < regState.length) regState[i] = -1;
		cursor = 0;
		pos = 0;
	}
	def release() {
		for (i < allocated.length) allocated[i] = (null, -1);
		for (i < regState.length) regState[i] = -1;
		cursor = 0;
	}
	def sanityCheck() {
//		dumpState("sanity");
		if (regState[0] >= 0) return V3.fail("regState[unassigned] is allocated");
		for (j < regState.length) {
			var i = regState[j];
			if (i < 0) continue;
			if (i >= cursor) return V3.fail1("regState[%s] index oob", regSet.identify(j));
			var a = allocated[i], vreg = a.0;
			if (vreg == null) return V3.fail1("allocated[%d] unallocated", i);
			if (vreg.reg != j) return V3.fail(Strings.format2("v%d.reg != %s", vreg.varNum, regSet.identify(j)));
		}
		for (i < cursor) {
			var a = allocated[i], vreg = a.0;
			if (vreg == null) return V3.fail1("allocated[%d] unallocated", i);
			if (vreg.reg <= 0) return V3.fail(Strings.format2("allocated[%d]=v%d mismatch", i, vreg.varNum));
			if (vreg.reg >= allocated.length) return V3.fail1("allocated[%d] mismatch", i);
			if (a.1 > pos) return V3.fail1("allocated[%d] pos too big", i);
		}
		for (j < codegen.vars.length) {
			if (true) continue; // TODO
			var vreg = codegen.vars[j];
			if (vreg == null) continue;
			if (vreg.reg != 0) {
				var i = regState[vreg.reg];
				if (i < 0) return V3.fail(Strings.format2("regState[@%d, %s] mismatched", j, regSet.identify(vreg.reg)));
				if (i >= cursor) return V3.fail(Strings.format2("regState[@%d, %s] mismatched", j, regSet.identify(vreg.reg)));
				var a = allocated[i];
				if (a.0 != vreg) return V3.fail(Strings.format2("regState[@%d, %s] mismatched", j, regSet.identify(vreg.reg)));
			}
		}
	}
}