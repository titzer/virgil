// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.
// module which provides the "Pointer" type
component MachModule {
	def ptr = "Pointer";
	def PTR_16: Pointer_TypeCon = Pointer_TypeCon.new(ptr, 16);
	def PTR_32: Pointer_TypeCon = Pointer_TypeCon.new(ptr, 32);
	def PTR_64: Pointer_TypeCon = Pointer_TypeCon.new(ptr, 64);
	def install(prog: Program, mach: MachProgram) {
		// install the builtin "Pointer" type in the program
		var size = mach.data.addressWidth;
		if (size <= 16) return prog.typeEnv.add(PTR_16);
		if (size <= 32) return prog.typeEnv.add(PTR_32);
		return prog.typeEnv.add(PTR_64);
	}
}
// Type constructor for language-level "Pointer" type, available to programs
// that target machine targets (e.g. x86-darwin)
class Pointer_TypeCon extends TypeCon {
	def width: byte;
	def size = byte.view((width + 7u) >>> 3);
	private var cache: Pointer_OpCache;

	new(name: string, width) super(name, Kind.POINTER, 0, TypeUtil.globalCache) {
		singleton = PointerType.new(this, width, null);
	}
	def opcache() -> Pointer_OpCache {
		if (cache == null) cache = Pointer_OpCache.new(singleton, Int.getType(true, width));
		return cache;
	}
	def create1(t: Type) -> Type {
		return PointerType.new(this, width, List.new(t, null));
	}
}
// The type of pointers of various sizes.
class PointerType extends PrimType {
	new(typeCon: TypeCon, width: byte, nested: List<Type>) super(typeCon.uid, typeCon, width, nested) { }
}
class Pointer_OpCache(ptrType: Type, it: IntType) {
	def typeParamList = TypeUtil.ONE_TYPE_PARAM;
	private def typeParam = typeParamList.head;
	def opLoad = V3Op.newPtrLoad(ptrType, typeParam);
	def opStore = V3Op.newPtrStore(ptrType, typeParam);
	def opCmpSwp = V3Op.newPtrCmpSwp(ptrType, typeParam);
	def opAdd = V3Op.newPtrAdd(ptrType, it);
	def opSub = V3Op.newPtrSub(ptrType, it);
	def opLt = V3Op.newPtrLt(ptrType);
	def opLteq = V3Op.newPtrLteq(ptrType);
	def opGt = V3Op.newVstSugar(VstOperator.Commute(opLt), opLt.typeArgs, opLt.sig.paramTypes, Bool.TYPE);
	def opGteq = V3Op.newVstSugar(VstOperator.Commute(opLteq), opLt.typeArgs, opLt.sig.paramTypes, Bool.TYPE);

	var rangeType = V3Range.newType(typeParam);
	var arrayType = V3Array.newType(typeParam);

	def atContents = V3Op.newPtrAtContents(rangeType, ptrType);
	def atLength = V3Op.newPtrAtLength(arrayType, ptrType);
	def atObject = V3Op.newPtrAtObject(TypeUtil.REF_TYPE_PARAM.head, ptrType);
	def atElem = V3Op.newPtrAtRangeElem(rangeType, Int.TYPE, ptrType);
	def atEnd = V3Op.newPtrAtEnd(TypeUtil.REF_TYPE_PARAM.head, ptrType);
	def atRef = V3Op.newPtrAtRef(TypeUtil.LAYOUT_TYPE_PARAM.head, ptrType);
}
