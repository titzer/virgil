// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Manages the mapping between V3-level program entities (classes, objects, functions)
// and machine-level entities (addresses and tables) and provides logic to encode
// values into byte arrays for producing binaries.
class MachProgram extends TargetProgram {
	def code: AddressSpace;
	def data: AddressSpace;
	def intNorm: IntNormalizer;
	def typeReps = TypeUtil.newTypeMap<MachRep>();
	def tagType = Int.TYPE;
	def refSize = data.addressSize;

	var runtime: MachRuntime;
	def codeRegion    = Region.new("code", code);
	def metaRegion    = Region.new("meta", code);
	def dataRegion    = Region.new("data", data);
	def mtableMap     = IrUtil.newIrItemMap<Addr>();
	def methodMap     = IrUtil.newIrItemMap<Address<IrMethod>>();
	def fieldMap      = IrUtil.newIrItemMap<Address<IrField>>();
	def recordMap     = V3.newRecordMap<Address<Record>>();
	def recordQueue   = Vector<Record>.new();
	def stubMap       = Strings.newMap<(Addr, (Addr, MachDataWriter) -> void)>();
	var longMap: HashMap<long, Addr>;
	def entryStub = Addr.new(codeRegion, null, 0);
	var allocMethod: IrMethod;
	var allocStub: Addr;
	var signalStub: Addr;
	var allocates = false;
	var stackAlign: int;
	var numMethods: int;
	var negativeHeaders = false; // object headers are at negative offsets

	new(prog: Program, code, data, intNorm) super(prog) {
		stackAlign = data.addrAlign.size;
	}
	def build(compiler: Compiler, config: MachLoweringConfig) {
		prog.ir.classes.apply(processIrClass);
		var methods = prog.ir.methods;
		var lowering = MachLowering.new(this, compiler, config);
		var opt = if(compiler.MachOptimize, SsaOptimizer.new(lowering.context));
		for (i < methods.length) {
			lowering.doMethod(methods[i]);
			if (compiler.MachOptimize) {
				opt.reset(lowering.context.graph);
				opt.optGraph();
				lowering.context.printSsa("Mach Optimized");
			}
//XXX			SsaGraphVerifier.new(prog, methods[i].ssa).verify();
		}
		numMethods = methods.length;
	}
	def processIrClass(ic: IrClass) {
		if (ic.machSize >= 0) return;
		var t = ic.ctype;
		if (V3.isComponent(t)) return processComponent(ic);
		if (ic.parent != null) processIrClass(ic.parent);
		var mlayout = MachLayout.new(this);
		var start = 0;
		if (ic.parent != null) {
			mlayout.size = ic.parent.machSize;
			start = ic.parent.fields.length;
		} else {
			mlayout.addType(tagType);
		}
		var b = ic.fields;
		for (i = start; i < b.length; i++) {
			var f = b[i];
			f.machOffset = mlayout.addType(f.fieldType);
		}
		ic.machSize = mlayout.size;
		// create GC maps for object if necessary
		if (runtime != null && runtime.gc != null && Facts.isLive(ic)) runtime.gc.recordTypeRefMap(ic);
	}
	def processComponent(ic: IrClass) {
		// queue component record for processing
		var r = getComponentRecord(ic.ctype);
		if (r != null) recordQueue.put(r);
		for (i < ic.fields.length) {
			// XXX: could segregate component fields into refs and nonrefs
			var f = ic.fields[i];
			var size = sizeOf(f.fieldType);
			dataRegion.align(size);
			fieldMap[f] = dataRegion.allocate(f, size);
		}
	}
	def makeMachArray(utype: Type) -> Mach_V3Array {
		var arrayRep = Mach_V3Array.new(utype, utype);
		var mlayout = MachLayout.new(this);
		// 1. compute the layout for the array header
		mlayout.addType(tagType);
		arrayRep.lengthOffset = mlayout.addType(Int.TYPE);
		arrayRep.headerSize = data.addrAlign.alignUp(mlayout.size);
		// 2. compute the scale for elements
		var elemType = V3Array.elementType(utype);
		if (V3.isTuple(elemType)) {
			// 3. compute the type tag, offsets, and refmap for a mixed array
			makeMixedArrayRep(arrayRep, elemType);
		} else {
			arrayRep.elemScale = sizeOf(elemType);
			// 3. compute the type tag for the array
			var tag = if(isRefType(elemType), MachObjectTags.REF_ARRAY_TAG, MachObjectTags.PRIM_ARRAY_TAG);
			arrayRep.typeTag = Int.box((arrayRep.elemScale << 2) | tag);
		}
		return arrayRep;
	}
	def makeMixedArrayRep(arrayRep: Mach_V3Array, elemType: Type) {
		var mlayout = MachLayout.new(this);
		var isMixed = false;
		var ets = arrayRep.elemTypes = Tuple.toTypeArray(elemType);
		
		arrayRep.offsets = Arrays.map(ets, mlayout.addType);
		arrayRep.elemScale = mlayout.size;

		for (et in ets) if (isRefType(et)) {
			// compute a bitmap that encodes the reference map and element size
			arrayRep.elemScale = alignTo(arrayRep.elemScale, refSize);
			var refmap = 1 << byte.!(arrayRep.elemScale / refSize);
			for (i < ets.length) {
				if (isRefType(ets[i])) refmap |= 1 << byte.!(arrayRep.offsets[i] / refSize);
			}
			var tag = MachObjectTags.MIXED_ARRAY_TAG;
			arrayRep.typeTag = Int.box((refmap << 2) | tag);
			arrayRep.refmap = refmap;
			return;
		}
		// no references; encode as a primitive array tag
		var tag = MachObjectTags.PRIM_ARRAY_TAG;
		arrayRep.typeTag = Int.box((arrayRep.elemScale << 2) | tag);
	}
	def machType(t: Type) -> Type {
		var r: MachRep;
		match (t.typeCon.kind) {
			ENUM_SET => return V3.getEnumSetType(t);
			ENUM => return V3.getVariantTagType(t);
			VOID,
			BOOL,
			INT,
			FLOAT,
			ARRAY,
			CLASS,
			VARIANT,
			ANYFUNC,
			RANGE_START,
			POINTER => return t;
			COMPONENT => return Void.TYPE;
			FUNCREF => {
				// recursively create machine function type
				r = typeReps[t];
				if (r != null) return r.machType;
				r = makeFuncRep(t);
			}
			TUPLE => {
				// recursively create machine tuple type
				r = typeReps[t];
				if (r != null) return r.machType;
				r = MachRep.new(t, Tuple.newType(machTypeList(t.nested)));
			}
			_ => ; // TODO
		}
		typeReps[t] = r;
		return r.machType;
	}
	def funcRep(m: IrSpec) -> Mach_FuncRep {
		var t = m.getUnboundType();
		var r = typeReps[t];
		if (r != null) return Mach_FuncRep.!(r);
		return getFuncRep(Function.funcRefType(t));
	}
	def getFuncRep(t: Type) -> Mach_FuncRep {
		var r = typeReps[t];
		if (r != null) return Mach_FuncRep.!(r);
		var fr = makeFuncRep(t);
		typeReps[t] = fr;
		return fr;
	}
	def makeFuncRep(t: Type) -> Mach_FuncRep {
		// recursively create function type
		var ptypeList = machTypeList(Tuple.toTypeList(Function.getParamType(t)));
		var rtypeList = machTypeList(Tuple.toTypeList(Function.getReturnType(t)));
		var ftype = Function.FUNCREF.create(Lists.cons2(Tuple.newType(ptypeList), Tuple.newType(rtypeList)));
		return Mach_FuncRep.new(t,
			code.ptrTypeCon.create1(ftype),
			Lists.toArray(ptypeList),
			Lists.toArray(rtypeList));
	}
	def machVal(val: Val) -> Val {
		if (val == null) return null;
		match (val) {
			x: Record => {
				if (V3.isVariant(x.rtype)) {
					// check for variants represented as enums
					if (prog.ir.isEnum(x.rtype)) return Int.box(V3.getVariantTag(x.rtype));
				}
				return addrOfRecord(x);
			}
			x: FuncVal => return addrOfMethod(x.memberRef.asMethod());
			x: ArrayRangeStart => {
				var ar = arrayRep(x.arrayType);
				return Int.box(x.start * ar.elemScale + ar.headerSize);
			}
			x: PointerRangeStart => return x.start;
			x: PackedRef => {
				if (x.r == null) return PackedRef.new(null, x.m);
				return PackedRef.new(machVal(x.r), x.m);
			}
		}
		return val;
	}
	def machTypeList(list: List<Type>) -> List<Type> {
		if (list == null) return null;
		var sub = machTypeList(list.tail);
		var head = list.head, kind = head.typeCon.kind;
		if (kind == Kind.INT || kind == Kind.ENUM_SET) {
			var tn = intNorm.normType(machType(list.head));
			if (tn != null) {
				for (i = tn.size -1; i >= 0; i--) sub = List.new(tn.sub[i], sub);
				return sub;
			}
		} else {
			head = machType(head);
		}
		return if(head == list.head && sub == list.tail, list, List.new(head, sub));
	}
	def getCodeAddress(methodRef: IrSpec) -> Val {
		return addrOfMethod(methodRef.asMethod());
	}
	def getArrayLengthOffset(arrayType: Type) -> int {
		return arrayRep(arrayType).lengthOffset;
	}
	def getArrayElemScale(arrayType: Type) -> int {
		return arrayRep(arrayType).elemScale;
	}
	def getArrayElemOffset(arrayType: Type, elem: int) -> int {
		var ar = arrayRep(arrayType);
		if (elem > 0) return ar.headerSize + ar.offsets[elem];
		return ar.headerSize;
	}
	def getObjectSize(t: Type, r: Record) -> int {
		var size: int;
		match (t) {
			x: ClassType => size = prog.ir.getIrClass(t).machSize;
			x: ArrayType => size = arrayRep(t).getObjectSize(r);
			_ => return unexpectedType(t, 0);
		}
		return data.addrAlign.alignUp(size);
	}
	def alignTo(i: int, a: int) -> int {
		// XXX: use masks for powers of two
		if (a > 1) return (i + a - 1) / a * a;
		return i;
	}
	def arrayRep(t: Type) -> Mach_V3Array {
		var ar = Mach_V3Array.!(typeReps[t]);
		if (ar == null) typeReps[t] = ar = makeMachArray(t); // create array representation
		return ar;
	}
	def classIdRange(t: Type) -> (int, int) {
		var r = prog.ir.getIrClass(t);
		if (r == null) return (0, 0);
		return (r.minClassId * code.addressSize, r.maxClassId * code.addressSize);
	}
	def componentFieldPtr(f: IrSpec) -> Val {
		return fieldMap[f.asField()];
	}
	def classFieldOffset(f: IrSpec) -> int {
		return f.asField().machOffset;
	}
	def methodTable(spec: IrSpec) -> Addr {
		var mtable = IrSelector.!(spec.member).mtable;
		if (mtable == null) return V3.fail1("mtable is null for %q", spec.render);
		var mtaddr = mtableMap[mtable];
		if (mtaddr == null) { // allocate space in method region for mtable
			var size = mtable.table.length * code.addressSize;
			mtaddr = metaRegion.allocate(mtable, size);
			// return a pointer to a table indexed starting from 0
			mtaddr = mtaddr.add(0 - mtable.rootId * code.addressSize);
			mtableMap[mtable] = mtaddr;
		}
		return mtaddr;
	}
	def methodTableRaw(spec: IrSpec) -> Addr {
		var mtable = IrSelector.!(spec.member).mtable;
		var addr = methodTable(spec);
		// return a pointer directly to the table.
		return addr.add(mtable.rootId * code.addressSize);
	}
	def unexpectedType<T>(t: Type, v: T) -> T {
		return prog.ERROR.unexpectedType(t, v);
	}
	def objectTag(t: Type) -> Val {
		if (V3.isClass(t)) return Int.box(prog.ir.getIrClass(t).minClassId * code.addressSize);
		if (V3.isArray(t)) return arrayRep(t).typeTag;
		return unexpectedType(t, null);
	}
	def sizeOf(t: Type) -> int {
		match(t.typeCon.kind) {
			COMPONENT,
			VOID => return 0;
			INT => return IntType.!(t).byteSize();
			BOOL => return 1;
			CLASS,
			ARRAY => return refSize;
			FLOAT => return FloatType.!(t).total_width >>> 3;
			ENUM => return V3.getVariantTagType(t).byteSize();
			ENUM_SET => return V3.getEnumSetType(t).byteSize();
			VARIANT => {
				return if (prog.ir.isEnum(t), V3.getVariantTagType(t).byteSize(), refSize);
			}
			ANYFUNC,
			FUNCREF => return code.addressSize;
			RANGE_START,
			POINTER => return data.addressSize;
			_ => ; // TODO
		}
		return unexpectedType(t, 0);
	}
	def sizeOfRegClass(rcl: RegClass) -> int {
		match (rcl) {
			I32, F32 => return 4;
			I64, F64 => return 8;
			REF => return refSize;
		}
	}
	private def getComponentRecord(t: Type) -> Record {
		return prog.getComponentRecord(V3.componentDecl(t));
	}
	def encodeData(region: Region, w: DataWriter, a: Addr) {
		if (a.is<Record>()) encodeRecord(w, a.get<Record>());
		else if (a.is<IrMtable>()) encodeMtable(w, a.get<IrMtable>());
		else if (a.is<IrField>()) encodeField(w, a.get<IrField>());
		else if (a.is<long>()) {
			if (region.space.bigEndian) w.put_b64be(a.get<long>());
			else w.put_b64(a.get<long>());
		}
		else return fail("unexpected data item in region");
	}
	def encodeField(w: DataWriter, f: IrField) {
		// encode a component's field at the address
		var r = getComponentRecord(f.receiver);
		encodeVal(w, r.values[f.index], f.fieldType);
	}
	def encodeRecord(w: DataWriter, r: Record) {
		var v = r.values;
		var start = w.pos;
		if (V3.isArray(r.rtype)) {
			// encode an array record
			var rep = arrayRep(r.rtype);
			w.put_b32(Int.unbox(rep.typeTag));
			w.at(start + rep.lengthOffset).put_b32(v.length);
			if (rep.offsets != null) {
				// mixed array
				var et = V3Array.elementType(r.rtype), ets = Tuple.toTypeArray(et);
				for (i < v.length) {
					var tv = TupleVal.!(v[i]), elemBegin = start + i * rep.elemScale + rep.headerSize;
					for (j < ets.length) {
						// XXX: special case Array<byte>, Array<Record>, Array<int> for performance
						encodeVal(w.at(elemBegin + rep.offsets[j]), if(tv == null, null, tv.values[j]), ets[j]);
					}
				}
			} else if (rep.elemScale > 0) {
				var et = V3Array.elementType(r.rtype);
				for (i < v.length) {
					// XXX: special case Array<byte>, Array<Record>, Array<int> for performance
					encodeVal(w.at(start + i * rep.elemScale + rep.headerSize), v[i], et);
				}
			}
		} else if (V3.isClass(r.rtype)) {
			// encode a class record
			var ic = prog.ir.getIrClass(r.rtype), f = ic.fields;
			w.put_b32(ic.minClassId * code.addressSize);
			for (i < v.length) {
				encodeVal(w.at(start + f[i].machOffset), v[i], f[i].fieldType);
			}
		} else {
			return unexpectedType(r.rtype, ());
		}
		if (CLOptions.PRINT_MACH_DATA.get()) {
			var size = w.pos - start;
			var buf = TerminalBuffer.new();
			buf.putv(r, null).puts(": ").putd(size).ln();
			w.render(MachDataWriter.!(w).endAddr() - size, start, size, buf);
			buf.outln();
		}
	}
	def encodeMtable(w: DataWriter, mtable: IrMtable) {
		for (m in mtable.table) {
			if (m == null) w.zeroN(code.addressSize);
			else encodeAddr(w, code, addrOfMethod(m));
		}
	}
	def encodeVal(w: DataWriter, v: Val, t: Type) {
		v = machVal(v);
		match (t.typeCon.kind) {
			BOOL => w.putb(Bool.toInt(Bool.unbox(v)));
			INT => {
				match (v) {
					x: PackedRef => {
						var abs = absolute(Addr.!(x.r));
						var mask = Long.unboxSU(x.m, false);
						w.put_b64(abs | mask);
					}
					_ => encodeInt(w, v, IntType.!(t));
				}
			}
			FLOAT => {
				var ft = FloatType.!(t);
				if (ft.is64) {
					w.put_b64(if(v != null, i64.view(Float64Val.!(v).bits)));
				} else {
					w.put_b32(if(v != null, i32.view(Float32Val.!(v).bits)));
				}
			}
			ENUM => encodeInt(w, v, V3.getVariantTagType(t));
			ENUM_SET => encodeInt(w, v, V3.getEnumSetType(t));
			VARIANT,
			CLASS,
			ARRAY,
			POINTER => {
				match (v) {
					null => encodeAddr(w, data, null);
					x: Addr => encodeAddr(w, data, x);
					x: Record => encodeAddr(w, data, addrOfRecord(x));
					_ => encodeAbs(w, data, Int.unbox(v));
				}
			}
			ANYFUNC,
			FUNCREF => {
				encodeAddr(w, code, Addr.!(v));
			}
			RANGE_START => {
				match (v) {
					x: Box<int> => encodeAbs(w, data, x.val); // ArrayRangeStart
					x: Addr => encodeAddr(w, data, x); // PointerRangeStart
				}
			}
		} else {
			unexpectedType(t, ());
		}
	}
	def encodeInt(w: DataWriter, v: Val, tt: IntType) {
		match(tt.size) {
			1 => w.putb(Byte.unbox(v));
			2 => w.put_b16(Int.unbox(v));
			3, 4 => w.put_b32(Int.unbox(v));
			5, 6, 7, 8 => w.put_b64(Long.unboxSU(v, tt.signed));
		} else {
			fail("unhandled integer byte size");
		}
	}
	def encodeAddr(w: DataWriter, space: AddressSpace, addr: Addr) {
		var abs = absolute(addr);
		if (CLOptions.PRINT_BIN.get()) {
			TerminalBuffer.new()
				.puts("encode ")
				.putcv(addr, null)
				.puts(" = ")
				.putx(abs)
				.put1(" @ %d", w.pos)
				.outln();
		}
		encodeAbs(w, space, abs);
	}
	def encodeAbs(w: DataWriter, space: AddressSpace, abs: int) {
		match (space.addressSize) {
			1 => w.putb(abs);
			2 => w.put_b16(abs);
			4 => w.put_b32(abs);
			8 => w.put_b64(abs);
		}
	}
	def fail(msg: string) {
		prog.ERROR.fail(msg);
	}
	def isRefType(t: Type) -> bool {
		match (t.typeCon.kind) {
			VARIANT => return !prog.ir.isEnum(t);
			CLASS, ARRAY => return true;
			INT => {
				match (t) {
					x: IntRepType => return x.scalar.isRef;
					_ => return false;
				}
			}
			_ => return false;
		}
	}
	def toRegClass(t: Type) -> RegClass {
		var width: byte;
		match (t.typeCon.kind) {
			FUNCREF =>	width = code.addressWidth;
			INT =>		width = IntType.!(t).width;
			ENUM =>		width = V3.getVariantTagType(t).width;
			ENUM_SET =>	width = V3.getEnumSetType(t).width;
			RANGE_START,
			POINTER =>	width = data.addressWidth;
			FLOAT =>		return if(FloatType.!(t).is64, RegClass.F64, RegClass.F32);
			VARIANT =>	return if(prog.ir.isEnum(t), RegClass.I32, RegClass.REF);
			CLASS,
			ARRAY,
			RANGE =>	return RegClass.REF;
			BOOL,
			VOID,
			COMPONENT,
			TUPLE =>	return RegClass.I32;
			_ => ; // TODO
		}
		return if(width > 32, RegClass.I64, RegClass.I32);
	}
	def addrOfMethod(m: IrMethod) -> Address<IrMethod> {
		var a = methodMap[m];
		if (a == null) methodMap[m] = a = Address.new(codeRegion, m);
		return a;
	}
	def absolute(a: Addr) -> int {
		if (a == null) return 0;
		if (a.base != null) return absolute(a.base) + a.offset;
		if (CiRuntime_Address.?(a)) return CiRuntime_Address.!(a).getAbs(runtime);
		if (a.absolute == -1) {
			var buf = TerminalBuffer.new();
			buf.puts("address ").putcv(a, null).puts(" not fixed");
			fail(buf.toString());
		}
		return a.absolute;
	}
	def printBin(irm: IrMethod, methodStart: int, w: MachDataWriter) {
		var buf = TerminalBuffer.new();
		var size = w.endAddr() - methodStart;
		irm.renderLong(buf).puts(": ").putd(size).puts(" bytes").ln();
		w.render(methodStart, w.end() - size, size, buf);
		buf.outln();
	}
	// layout the method tables
	def layoutMeta(w: MachDataWriter) {
		w.atEnd().align(data.addressSize);
		metaRegion.setStartAddr(w.endAddr());
		encodeRegion(metaRegion, w);
	}
	// layout all runtime datastructures
	def layoutRuntime(w: MachDataWriter) {
		// have to finish laying out the data section to know its size
		w.atEnd().align(data.addressSize);
		Vectors.drain(recordQueue, 0, layoutRecord);
		if (runtime.gc != null) {
			// record the data size and the locations of mutable refs
			runtime.gc.recordDataSize(dataRegion.mark);
			dataRegion.apply(recordDataRefs);
		}
		runtime.encode(w);
	}
	// layout all records into the data region
	def layoutData(w: MachDataWriter) {
		// compute addresses for all objects in the data region
		dataRegion.setStartAddr(w.endAddr());
		// encode all records into the buffer
		encodeRegion(dataRegion, w);
	}
	private def recordDataRefs(a: Addr, off: int, size: int) {
		if (a.is<IrField>()) {
			// a global field in the data section
			var f = a.get<IrField>();
			if (!f.facts.F_VALUE) {
				if (isRefType(f.fieldType)) runtime.gc.recordRootRef(off);
			}
		} else if (a.is<Record>()) {
			// an object in the data section
			runtime.gc.recordRootObject(off, a.get<Record>());
		}
	}
	def layoutAllRecordsAndFuncs() {
		Vectors.drain(recordQueue, 0, layoutRecord);
	}
	private def layoutRecord(r: Record) {
		for (v in r.values) layoutVal(v);
	}
	private def layoutVal(val: Val) {
		match (val) {
			x: Record => addrOfRecord(x);
			x: PackedRef => if (x.r != null) layoutVal(x.r);
			x: FuncVal => addrOfMethod(x.memberRef.asMethod());
			x: Closure => { layoutVal(x.val); addrOfMethod(x.memberRef.asMethod()); }
			x: TupleVal => for (e in x.values) layoutVal(e);
		}
	}
	def encodeRegion(region: Region, w: MachDataWriter) {
		// encode region contents at the end of this buffer
		var start = w.atEnd().pos;
		w.skipN(region.mark);
		var c = region.contents;
		for (i < c.length) {
			var t = c[i];
			encodeData(region, w.at(start + t.1), t.0);
		}
	}
	def isValid(addr: Addr) -> bool {
		// XXX: return true for all invalid addresses
		if (addr == null) return false;
		if (addr.equals(null)) return false;
		return true;
	}
	def addrOfRecord(r: Record) -> Address<Record> {
		var addr = recordMap[r];
		if (addr == null) {
			// allocate space in the data region
			dataRegion.align(data.addrAlign.size);
			addr = dataRegion.allocate(r, getObjectSize(r.rtype, r));
			recordMap[r] = addr;
			// queue for later processing
			recordQueue.put(r);
		}
		return addr;
	}
	def getLongConstAddr(val: long) -> Addr {
		if (longMap == null) longMap = HashMap.new(Long.hash, long.==);
		var addr = longMap[val];
		if (addr == null) {
			dataRegion.align(8);
			addr = dataRegion.allocate(val, 8);
			longMap[val] = addr;
		}
		return addr;
	}
}
// Machine representation of a type.
class MachRep(origType: Type, machType: Type) { }
class Mach_FuncRep extends MachRep {
	def paramTypes: Array<Type>;
	def returnTypes: Array<Type>;
	var callConv: MachCallConv;
	new(oldType: Type, newType: Type, paramTypes, returnTypes) super(oldType, newType) { }
}
// Machine representation of an array.
class Mach_V3Array extends MachRep {
	var lengthOffset: int;
	var headerSize: int;
	var elemScale: int;
	var typeTag: Box<int>;
	// for compound arrays
	var elemTypes: Array<Type>; 
	var offsets: Array<int>;
	var refmap: int;

	new(arrayType: Type, machType: Type) super(arrayType, machType) { }

	def getObjectSize(r: Record) -> int {
		if (r == null) return headerSize;
		return headerSize + r.values.length * elemScale;
	}
	def getElemElemOffset(elem: int) -> int {
		if (offsets != null) return headerSize + offsets[elem];
		return headerSize;
	}
	def getElemElemType(arrayType: Type, elem: int) -> Type {
		if (elemTypes != null) return elemTypes[elem];
		return V3Array.elementType(arrayType);
	}
}
// A layout is used for adding fields sequentially to a memory area, aligning fields
// as necessary and recording which offsets contain references.
class MachLayout(mach: MachProgram) {
	var size: int;

	def addType(t: Type) -> int {
		var s = mach.sizeOf(t);
		var offset = mach.alignTo(size, s);
		size = offset + s;
		return offset;
	}
}
// A utility to encode sorted, page-indexed tables such as for stackmaps and sourcepoints.
class MachRtPageTable(
		pageTable: CiRuntime_Address,
		table: CiRuntime_Address,
		end: CiRuntime_Address,
		wide: bool) { // 8-byte entries

	def entries = Vector<(int, int, int)>.new();

	def encode(rt: MachRuntime, w: MachDataWriter) {
		var pageTableAddr = w.endAddr();
		pageTable.setAbs(rt, pageTableAddr);
		var maxPage = rt.codePages(), maxEntry = entries.length;
		var tableAddr = pageTableAddr + 4 * (maxPage + 1);
		var tableEndAddr = tableAddr + maxEntry * 4;
		table.setAbs(rt, tableAddr);
		// encode the page table pointers
		var lastPage = -1;
		var shift = rt.codeRegion.space.pageAlign.shift;
		for (i < maxEntry) {
			var page = entries[i].0 >> shift;
			if (page != lastPage) {
				// first entry on new page, fill intervening pages
				var entryAddr = tableAddr + i * 4;
				for (j = lastPage; j < page; j++) w.put_b32(entryAddr);
				lastPage = page;
			}
		}
		// encode the last entries of the table
		for (j = lastPage; j < maxPage; j++) w.put_b32(tableEndAddr);
		// encode the table entries
		var mask = rt.codeRegion.space.pageAlign.add;
		for (i < maxEntry) {
			var entry = entries[i];
			if (CLOptions.PRINT_STACKMAP.val) {
				var page = entry.0 >> shift;
				var offset = entry.0 & mask;
				Terminal.put3(" entry page=%d, offset=%d, val=%x(<< shift)\n", page, offset, entry.1);
			}
			w.put_b32((entry.0 & mask) | (entry.1 << shift));
		}
		if (!wide) return;
		// encode the wide part of the table
		if (end != null) end.setAbs(rt, w.endAddr());
		for (i < maxEntry) {
			w.put_b32(entries[i].2);
		}
	}
	def add(offset: int, e0: int, e1: int) {
		entries.put(offset, e0, e1);
	}
	def grow(len: int) -> this {
		entries.grow(len);
	}
}
// Constants for object tags.
component MachObjectTags {
	def OBJECT_TAG = 0;
	def MIXED_ARRAY_TAG = 2;
	def PRIM_ARRAY_TAG = 1;
	def REF_ARRAY_TAG = 3;
}