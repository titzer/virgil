// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// helper methods
def hashVstMethod(m: VstMethod) -> int {
	var hash = 0;
	if (m != null) {
		hash |= Strings.hash(m.name());
		if (m.receiver != null) hash |= Strings.hash(m.receiver.name());
	}
	return hash;
}
def hashVstCompound(c: VstCompound) -> int {
	return Strings.hash(c.name());
}

// and encodes CiRuntime.SRC_* tables into a compact format.
class MachRtSrcTables(mach: MachProgram, rt: MachRuntime) {
	def exRegion  = Region.new("ex", mach.code);

	def sourcePoints  = MachRtPageTable.new(
		CiRuntimeModule.SRC_POINTS_PAGES,
		CiRuntimeModule.SRC_POINTS_TABLE,
		null, false).grow(mach.numMethods * 3);
	def sourceMethods = MachRtPageTable.new(
		CiRuntimeModule.SRC_METHODS_PAGES,
		CiRuntimeModule.SRC_METHODS_TABLE,
		CiRuntimeModule.SRC_METHODS_TABLE_END, true).grow(mach.numMethods + 2);

	def sourceMethodIndex = TableIndex<VstMethod, void>.new(hashVstMethod);
	def exEntries  = Vector<(int, int)>.new();
	var inlineEntries: List<(int, Source, int)>;
	def classTable = TableIndex<VstCompound, (int, int)>.new(hashVstCompound);
	def exStringTable = TableIndex<string, int>.new(Strings.hash);

	def stringMap  = Strings.newMap<int>();
	def stringData = StringBuilder.new();

	var curMethod: VstMethod;
	var curFrame: MachFrame;
	var lastMethodOffset: int = Int.MAX_VALUE;
	var exDests: List<Addr>;

	def recordStubStart(off: int, name: string, frame: MachFrame) {
		var nameOffset = getStringOffset(name);
		recordFrameStart(null, off, nameOffset, -1, frame);
//		if (rt.debug) {
//			Terminal.put3("@stub %s +%d |%d|\n", name, off, frameSlots);
//		}
	}
	def recordMethodStart(off: int, source: VstMethod, frame: MachFrame) {
		curMethod = source;
		var nameOffset = -1, classEntry = -1;
		if (source != null) {
			nameOffset = getStringOffset(source.name());
			if (source.receiver != null) classEntry = classTable.find(source.receiver, addClassEntry);
		}
		recordFrameStart(source, off, nameOffset, classEntry, frame);
//		if (rt.debug) {
//			var str = if (source == null, "-", source.name());
//			Terminal.put3("@method %s +%d |%d|\n", str, off, frameSlots());
//		}
	}
	private def recordFrameStart(source: VstMethod, off: int, nameOffset: int, classEntry: int, frame: MachFrame) {
		curFrame = frame;
		var meth0 = (frameSlots() << 8) | (nameOffset >>> 16) & 0xFF;
		var meth1 = nameOffset << 16 | classEntry & 0xFFFF;
		sourceMethods.add(off, meth0, meth1);
		sourceMethodIndex.add(source, ());
	}
	def recordFrameEnd(off: int) {
		lastMethodOffset = off;
		curMethod = null;
		curFrame = null;
	}
	def recordSource(off: int, source: Source) {
//		if (rt.debug) debugPoint("source", "-", off, source, frameSlots());
		encodeSource(off, source);
	}
	def recordReturnSource(off: int, source: Source) {
//		if (rt.debug) debugPoint("retsource", "-", off - 1, source, frameSlots());
		encodeSource(off - 1, source);
	}
	private def addClassEntry(compound: VstCompound) -> (int, int) {
		var fileOffset = getStringOffset(compound.token.fileName);
		var nameOffset = if (!compound.isFileScope, getStringOffset(compound.fullName));
		return (nameOffset, fileOffset);
	}
	private def encodeSource(off: int, source: Source) {
		var encoded = 0;
		if (source != null) {
			if (source.tail == null && source.mdecl == curMethod && source.line < 2048) {
				encoded = source.line << 8 | Ints.min(255, source.column);
			} else {
				encoded = 0xC0000 | recordExtendedEntry(null, source);
			}
		} else {
			// source is null, just record the size of the frame
			encoded = 0x80000 | frameSlots();
		}
		sourcePoints.add(off, encoded, 0);
	}
	private def recordExtendedEntry(ex: string, source: Source) -> int {
		var exstrIndex = if (ex == null, 15, exStringTable.find(ex, getStringOffset));
		var exEntry = exEntries.length;
		if (source == null) {
			// | FFFFF:20      ex:4     0:4 fw:4 ||    framewords:16   |
			var frameWords = curFrame.slots();
			var ex0 = (0xFFFFF000) | (exstrIndex << 8) | (frameWords >>> 16);
			exEntries.put(ex0, frameWords & 0xFFFF);
		} else if (source.tail == null) {
			// single entry
			recordExtendedSource(exstrIndex, source);
		} else {
			// multiple entries
			// | FFFFF:20      ex:4 count:4 fw:4 ||    framewords:16   | ...
			var count = 0;
			for (s = source; s != null; s = s.tail) count++;
			var frameWords = curFrame.slots();
			var ex0 = (0xFFFFF000) | (exstrIndex << 8) | (count << 4) | (frameWords >>> 16);
			exEntries.put(ex0, frameWords & 0xFFFF);
			for (s = source; s != null; s = s.tail) recordExtendedSource(15, s);
		}
		return exEntry;
	}
	def recordExtendedSource(exstrIndex: int, source: Source) {
		// | 32             ex0            0 || 16      ex1      0 |
		// | meth:20       ex:4        col:8 ||       line:16      |
		if (source.mdecl != curMethod) {
			// need to find the source method later and fix this entry.
			inlineEntries = List.new((exstrIndex, source, exEntries.length), inlineEntries);
		}
		var methIndex = sourceMethods.entries.length - 1;
		var ex0 = (methIndex << 12) | (exstrIndex << 8) | Ints.min(255, source.column);
		exEntries.put(ex0, Ints.min(65535, source.line));
	}
	def patchExEntry(exstrIndex: int, source: Source, exIndex: int) {
		var methIndex = sourceMethodIndex.find(source.mdecl, addInlineMethodEntry);
		var ex0 = (methIndex << 12) | (exstrIndex << 8) | Ints.min(255, source.column);
		exEntries[exIndex] = (ex0, Ints.min(65535, source.line));
	}
	def addInlineMethodEntry(source: VstMethod) {
		// create a method entry for an inlined method that was never seen
		var nameOffset = if(source == null, -1, getStringOffset(source.name()));
		var classEntry = if(source == null, -1, classTable.find(source.receiver, addClassEntry));
		var frameSlots = 0; // method doesn't really exist, so no slots
		var meth0 = (frameSlots << 8) | (nameOffset >>> 16) & 0xFF;
		var meth1 = nameOffset << 16 | classEntry & 0xFFFF;
		sourceMethods.add(lastMethodOffset, meth0, meth1);
	}
	def newExceptionDest(ex: string, source: Source) -> Addr {
		var index = recordExtendedEntry(ex, source);
		var addr = Addr.new(exRegion, null, index * 6);
		exDests = List.new(addr, exDests);
		return addr;
	}
	def getStringOffset(str: string) -> int {
		// XXX: grow string map to be numMethods * K + numClasses * K?
		if (stringMap.has(str)) return stringMap[str];
		var off = stringData.length;
		stringData.puts(str);
		stringData.putc('\x00');
		stringMap[str] = off;
		return off;
	}
	// set absolute addresses for addresses in ex region and return the size
	def layoutExRegion(startAddr: int) -> int {
		for (l = exDests; l != null; l = l.tail) {
			l.head.absolute = startAddr + l.head.offset;
		}
		var size = exEntries.length * 6;
		rt.setAddr(CiRuntimeModule.EX_START, startAddr);
		rt.setAddr(CiRuntimeModule.EX_END, startAddr + size);
		return size;
	}
	def frameSlots() -> int {
		if (curFrame == null) {
			mach.prog.ERROR.fail("current frame should be set");
			return 0;
		}
		return curFrame.slots();
	}
	def debugPoint(kind: string, p: string, off: int, source: Source, slots: int) {
		Terminal.put2("@%s %s ", kind, p);
		Terminal.put2("+%d %d ", off, slots);
		if (source != null) Terminal.put1("%q\n", source.render);
		else Terminal.put("-\n");
	}
	def encode(w: MachDataWriter) {
		// fixup any inlined entries first
		for (l = inlineEntries; l != null; l = l.tail) patchExEntry(l.head);
		// encode source point table
		sourcePoints.encode(rt, w);
		// encode method table
		sourceMethods.encode(rt, w);
		// encode strings
		var stringAddr = w.addr_end();
		rt.setAddr(CiRuntimeModule.SRC_STRINGS, stringAddr);
		w.putr(stringData.buf[0 ... stringData.length]);
		// encode class table
		w.align(4);
		rt.bindAddr(CiRuntimeModule.SRC_CLASS_TABLE, w);
		for (i < classTable.rows.length) {
			var t = classTable.rows[i].1;
			w.put_b32(t.0);
			w.put_b32(t.1);
		}
		// encode extended/exception entry table
		rt.bindAddr(CiRuntimeModule.EX_TABLE, w);
		for (i < exEntries.length) {
			var t = exEntries[i];
			w.put_b32(t.0);
			w.put_b16(t.1);
		}
		rt.bindAddr(CiRuntimeModule.EX_STRINGS, w);
		for (i < exStringTable.rows.length) {
			w.put_b32(exStringTable.rows[i].1 + stringAddr);
		}
	}
}
// A searchable table of entries that maps a key value to an index 0...length-1
// and data. Allows for searching the table by key efficiently by hashing the key,
// but assumes identity equality (==) for keys.
class TableIndex<K, D>(hash: K -> int) {
	def rows = Vector<(K, D)>.new();
	var map: HashMap<K, int>;

	def add(key: K, data: D) {
		rows.put(key, data);
		if (map != null) map[key] = rows.length - 1;
	}
	// search for an entry in this table, and if not found, call {f} to create it
	def find(key: K, f: K -> D) -> int {
		if (map == null) {
			map = HashMap.new(hash, K.==);
			for (i < rows.length) {
				map[rows[i].0] = i;
			}
		}
		if (map.has(key)) return map[key];
		add(key, f(key));
		return rows.length - 1;
	}
}
