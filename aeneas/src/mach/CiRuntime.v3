// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Defines operations and constants exposed by the compiler (Ci) to the runtime (Runtime).
component CiRuntimeModule {
	var max = 0;
	def map = Strings.newMap<CiRuntime_Address>();
	// region begin and end constants
	def HEAP_START            = addr("HEAP_START");
	def HEAP_END              = addr("HEAP_END");
	def CODE_START            = addr("CODE_START");
	def CODE_END              = addr("CODE_END");
	def DATA_START            = addr("DATA_START");
	def DATA_END              = addr("DATA_END");
	def STACK_START           = addr("STACK_START");
	def STACK_END             = addr("STACK_END");
	// machine code stub for handling signals
	def SIGNAL_STUB           = addr("signalStub");
	def SIGNAL_RESTORER       = addr("signalRestorer");
	// address of heap current and end pointers
	def HEAP_CUR_LOC          = addr("heapCurLoc");
	def HEAP_END_LOC          = addr("heapEndLoc");
	// address of shadow stack current and end pointers
	def SHADOW_STACK_START      = addr("SHADOW_STACK_START");
	def SHADOW_STACK_END        = addr("SHADOW_STACK_END");
	def SHADOW_STACK_START_PTR  = addr("SHADOW_STACK_START_PTR");
	def SHADOW_STACK_CUR_PTR    = addr("SHADOW_STACK_CUR_PTR");
	def SHADOW_STACK_END_PTR    = addr("SHADOW_STACK_END_PTR");
	// tables for print stack traces
	def SRC_POINTS_PAGES      = addr("SRC_POINTS_PAGES");
	def SRC_POINTS_TABLE      = addr("SRC_POINTS_TABLE");
	def SRC_METHODS_PAGES     = addr("SRC_METHODS_PAGES");
	def SRC_METHODS_TABLE     = addr("SRC_METHODS_TABLE");
	def SRC_METHODS_TABLE_END = addr("SRC_METHODS_TABLE_END");
	def SRC_CLASS_TABLE       = addr("SRC_CLASS_TABLE");
	def SRC_STRINGS           = addr("SRC_STRINGS");
	// tables for the "ex" region which encodes failed explicit checks
	def EX_START              = addr("EX_START");
	def EX_END                = addr("EX_END");
	def EX_TABLE              = addr("EX_TABLE");
	def EX_STRINGS            = addr("EX_STRINGS");
	// tables for precise GC
	def GC_STACKMAP_PAGES     = addr("GC_STACKMAP_PAGES");
	def GC_STACKMAP_TABLE     = addr("GC_STACKMAP_TABLE");
	def GC_EXTMAPS            = addr("GC_EXTMAPS");
	def GC_ROOTS_START        = addr("GC_ROOTS_START");
	def GC_ROOTS_END          = addr("GC_ROOTS_END");
	def GC_TYPE_TABLE         = addr("GC_TYPE_TABLE");

	def addr(name: string) -> CiRuntime_Address {
		return map[name] = CiRuntime_Address.new(name, max++);
	}
}
// An address in the runtime, such as a compiler-generated table or specialized routine.
class CiRuntime_Address extends Addr {
	def name: string;
	def index: int;
	// Negative indices distinguish this address from "user" addresses.
	new(name, index) super(null, null, -1 - index) { }
	def setAbs(rt: MachRuntime, addr: int) {
		rt.addrs[index] = addr;
	}
	def getAbs(rt: MachRuntime) -> int {
		return rt.addrs[index];
	}
}
def B = TypeUtil.BUILTIN_TOKEN.fileName;
def C = TypeUtil.newTypeParam(Token.new(B, "C", 0, 0), TypeUtil.globalCache);
def P = TypeUtil.newTypeParam(Token.new(B, "P", 0, 0), TypeUtil.globalCache);
def R = TypeUtil.newTypeParam(Token.new(B, "R", 0, 0), TypeUtil.globalCache);
// The "CiRuntime" component exposes addresses of (readonly) data structures to the
// "RiRuntime" code, which implements GC, stack walking, stack traces, etc.
class CiRuntime_TypeCon extends Member_TypeCon {
	def ptrType: Type;
	def TYPE_PARAMS = Lists.cons3(C, P, R);

	new(ptrType, typeCache: TypeCache) super("CiRuntime", Kind.VOID, 0, typeCache) { }
	def lookupMember(t: Type, name: string) -> LookupResult {
		var val = CiRuntimeModule.map[name];
		if (val != null) return LookupResult.Const(ptrType, val);
		if (Strings.equal(name, "callerIp")) return LookupResult.Inst(V3Op.newCallerIp(ptrType), null);
		if (Strings.equal(name, "callerSp")) return LookupResult.Inst(V3Op.newCallerSp(ptrType), null);
		if (Strings.equal(name, "forgeClosure")) return LookupResult.Inst(V3Op.newForgeClosure(ptrType, C, P, R), TYPE_PARAMS);
		if (Strings.equal(name, "unpackClosure")) return LookupResult.Inst(V3Op.newUnpackClosure(ptrType, C, P, R), TYPE_PARAMS);
		var tp = TypeUtil.ONE_TYPE_PARAM.head;
		if (Strings.equal(name, "forgeRange")) return LookupResult.Inst(V3Op.newForgeRange(tp, ptrType), TypeUtil.ONE_TYPE_PARAM);
		if (Strings.startsWith(name, "FEATURE_")) return LookupResult.Const(Bool.TYPE, Bool.FALSE);
		return LookupResult.None;
	}
}
