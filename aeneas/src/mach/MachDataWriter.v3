// Copyright 2011 Google Inc. All rights reserved.
// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A specialized DataWriter with machine-level properties, such as a start address
// and the ability to encode an address that is tracked for later patching.
class MachDataWriter extends DataWriter {
	def pageAlign: Alignment;
	var startAddr: int;
	var startPos: int; // start position from which offset() is calculated
	var refs: List<(Addr, /*posAddr:*/int, /*pos:*/int)>;
	var arm64Refs: List<(Addr, Arm64PatchKind, /*posAddr:*/int, /*pos:*/int)>;

	new(pageAlign, startAddr, initialSize: int) {
		grow(initialSize);
	}

	def recordArm64Patch(addr: Addr, kind: Arm64PatchKind, pos: int) {
		def posAddr = startAddr + pos;
		arm64Refs = List.new((addr, kind, posAddr, pos), arm64Refs);
	}
	def recordPatch(addr: Addr, pos: int) {
		var posAddr = startAddr + pos;
		refs = List.new((addr, posAddr, pos), refs);
	}
	// align the current address to a multiple of {size} bytes
	def align(size: int) -> this {
		var rem = (startAddr + pos) & (size - 1);
		if (rem > 0) skipN(size - rem);
	}
	def patch(f: (MachDataWriter, Addr, int) -> void) {
		// patch address locations with user function
		for (l = refs; l != null; l = l.tail) {
			var addr = l.head.0, posAddr = l.head.1, pos = l.head.2;
			f(at(pos), addr, posAddr);
		}
	}
	def patchArm64(f: (MachDataWriter, Addr, Arm64PatchKind, int) -> void) {
		for (l = arm64Refs; l != null; l = l.tail) {
			var addr = l.head.0, kind = l.head.1, posAddr = l.head.2, pos = l.head.3;
			f(at(pos), addr, kind, posAddr);
		}	
	}
	def abs4(addr: Addr, encoding: int) {
		recordPatch(addr, pos);
		put_b32(encoding);
	}
	def alignAddr(size: int) {
		var rem = (pos + startAddr) & (size - 1);
		if (rem > 0) {
			acquire(size - rem);
			at(pos + size - rem);
		}
	}
	def posAddr() -> int {
		return startAddr + pos;
	}
	def endAddr() -> int {
		return startAddr + end();
	}
	def skipPage() {
		startAddr = startAddr + pageAlign.size;
	}
	def endPageAddr() -> int {
		return pageAlign.alignDown(startAddr + end());
	}
	def putmd(w: MachDataWriter) {
		var p = this.pos;
		putk(w.data, 0, w.end());
		for (l = w.refs; l != null; l = l.tail) {
			var t = l.head;
			refs = List.new((t.0, t.1 + p, t.2 + p), refs);
		}
		w.refs = null;
	}
	def offset() -> int {
		return pos - startPos;
	}
	def endOffset() -> int {
		return end() - startPos;
	}
	def bind(addr: Addr) {
		addr.absolute = posAddr();
	}
	def bindSize(addr: Addr) {
		addr.size = posAddr() - addr.absolute;
	}
}
