// Copyright 2019 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def EVERYUSE = false;
def EVERYLPS = false; // only available if useShadowStack

// Responsible for transforming Arch code containing livepoints (i.e. kills
// of VRegs across potential GC points) to use a shadow stack. To do this,
// it computes good locations for the allocation and deallocation of the stack frame,
// saves and restores of VRegs, and inserts code into the instruction stream
// to accomplish this. Code after this transformation is no longer in SSA form,
// since multiple new definitions of a VReg may be introduced. The code is, however,
// safe to run through the MachStackifier, since all live ranges will be split so
// that no VReg originally live across a livepoint is live across any livepoint after
// transformation.
class ShadowStackSpiller() {
	var codegen: SsaMachGen;
	var order: SsaBlockOrder;
	var matrix: BitMatrix;
	var lpPassStart: int;
	var reloadStart: int;
	var allLive: BitMatrixRow;
	var tmpRow: BitMatrixRow;
	var curRow: BitMatrixRow;
	var saveRow: BitMatrixRow;
	var shadowStackAllocNext: ArchInstr;
	var lps: Vector<(SsaBlock, ArchInstr, Operand.RefMap)>;
	var useShadowStack: bool;
	var inShadowStack: bool;
	var shadow_sp: VReg;
	def shadowVarMap = Vector<int>.new();
	def lastLivepoint = Vector<ArchInstr>.new();
	def deallocate = Vector<bool>.new();

	def reset(codegen: SsaMachGen, order: SsaBlockOrder) {
		this.codegen = codegen;
		this.order = order;
		useShadowStack = if(WasmCodeGen.?(codegen), WasmCodeGen.!(codegen).useShadowStack, false);
		inShadowStack = false;
	}
	// Run the algorithm, inserting save and restore code.
	def run() {
		lps = codegen.livepoints;
		if (lps.length == 0) return;  // nothing to do
		matrix = codegen.liveness;
		matrix.grow(matrix.numrows + 3);
		saveRow = matrix.row(matrix.numrows - 3);
		allLive = matrix.row(matrix.numrows - 2);
		tmpRow = matrix.row(matrix.numrows - 1);
		allLive.clear();
		for (i < lps.length) {
			var t = lps[i], lp = order.order.length + t.2.livepoint;
			allLive.ori(lp); // union all livepoint sets
		}
		var numSlots = allocSpillSlot();
		if (numSlots == 0) return; // no live references at any livepoint
		if (useShadowStack) {
			allocateShadowStack(numSlots);
		}
		if (useShadowStack && EVERYLPS) saveRestoreLps();
		else {
			restore();
			if (useShadowStack) {
				saveRow.apply(insertSSVarNum, (shadowStackAllocNext, null));
			}
		}
	}
	def allocSpillSlot() -> int {
		var numVars = codegen.vars.length;
		var numSlots = 0;
		if (useShadowStack) {
			// Allocate a temporary for a shadow stack pointer.
			shadow_sp = codegen.newShadowSpTmp();
			// Initialize the shadow variable map, which maps (reference) variables to shadow
			// spill slots.
			shadowVarMap.grow(numVars);
			shadowVarMap.length = numVars;
		}
		for (i < numVars) {
			if (allLive[i]) {
				var vreg = codegen.vars[i];
				if (!vreg.isConst() && (!useShadowStack || codegen.isRef(vreg))) {
					if (useShadowStack) shadowVarMap[i] = numSlots;
					else allocSpill(codegen.vars[i]);
					numSlots++;
					continue;
				}
			}
			if (useShadowStack) shadowVarMap[i] = -1;
			allLive[i] = false; // filter out non-ref vars and consts
		}
		saveRow.copy(allLive);
		return numSlots;
	}
	def allocSpill(vreg: VReg) {
		if (vreg.spill == 0) vreg.spill = codegen.frame.allocSpill(vreg.regClass);
	}
	def allocateShadowStack(numShadowSlots: int) {
		// Make a first pass over all livepoints.
		lastLivepoint.resize(codegen.order.length);
		deallocate.resize(codegen.order.length);
		for (i < lastLivepoint.length) {
			lastLivepoint[i] = null;
			deallocate[i] = false;
		}

		// Compute the allocation block A, where the shadow stack pointer will be adjusted.
		// Find the common dominator A of all blocks that contain livepoints.
		var blockA_i = lps[0].0.info.srpo_num, blockA = order.order[blockA_i].info;
		for (i < lps.length) {
			var t = lps[i], bm = t.0.info.srpo_num, info = order.order[bm].info;
			if (lastLivepoint[bm] == null) lastLivepoint[bm] = t.1;
			if (info == blockA) continue;
			blockA = order.commonDominatorByInfo(blockA, info);
		}

		// Pull the allocation out of any loops; the lowest non-loop dominator of A.
		for (p = blockA; p != null; p = p.dom_parent) {
			if (p.loop != null) blockA = p.dom_parent;
		}
		if (blockA == null) blockA = order.order[0].info;  // TODO: first block was a loop

		// Compute deallocation points D, which are either blocks with throws/returns or
		// on the dominance frontier of A (i.e. not dominated by A, but the destination of
		// an edge from A).
		var range = (blockA.srpo_num, blockA.dom_max);
		for (i = range.0; i < range.1; i++) {
			var b = order.order[i], end = b.end();
			match (end.succs.length) {
				0 => deallocate[i] = true;
				1 => {
					var ti = end.succs[0].dest.info.srpo_num;
					if (ti < range.0 || ti >= range.1) deallocate[i] = true; // target not dominated
				}
				_ => {
					if (Debug.PARANOID) for (s in end.succs) { // check for non-dominated blocks
						var ti = s.dest.info.srpo_num;
						if (ti < range.0 || ti >= range.1) {
							codegen.context.fail(Strings.format2("unsplit critical edge at #%d -> #%d", b.uid, s.dest.uid));
						}
					}
				}
			}
		}

		// Insert shadow stack allocation and deallocations. Iterate instructions from top
		// to bottom because blocks don't know their first instruction.
		for (i = codegen.first; i != null; i = i.next) {
			if (i.opcode() != ArchInstrs.ARCH_BLOCK) continue; // only need block starts
			var label = Operand.Label.!(i.operands[0]);
			if (label.block == blockA.block) { // allocation block
				var startOfBlock = i.next;
				codegen.insertShadowStackAlloc(shadow_sp, numShadowSlots, startOfBlock);
				shadowStackAllocNext = startOfBlock;
			}
			if (deallocate[label.block.info.srpo_num]) { // deallocation block
				var point = lastLivepoint[label.block.info.srpo_num]; // insert after last livepoint
				if (point == null) point = i;  // no livepoint, using block start is ok
				codegen.insertShadowStackFree(shadow_sp, numShadowSlots, point.next);
			}
		}
	}
	def saveRestoreLps() {
		// For every livepoint, for every live variable, add a save before and a restore after.
		for (j < lps.length) {
			var t = lps[j], i = t.1, lp = order.order.length + t.2.livepoint;
			tmpRow.copyi(lp);
			tmpRow.and(allLive);  // filter non-refs and constants
			var before = i, after = i.next;
			tmpRow.apply(insertSSVarNum, (before, after));
		}
	}
	// Mark blocks which contain reachable use from kill and try to push the mark up.
	// Insert restore instruction when the mark isn't pushed upward.
	def restore() {
		if (lps.length == 0) return;
		matrix = codegen.liveness;
		lpPassStart = matrix.numrows;
		reloadStart = matrix.numrows + codegen.order.length;
		matrix.grow(matrix.numrows + codegen.order.length * 2);
		codegen.iterateInstructionsForward(markRestore);
		if (!EVERYUSE) codegen.blocks.iterateBlocksBackward(pushRestoreUp);
	}
	def killsFromPred(storeRow: BitMatrixRow, block: SsaBlock) {
		storeRow.clear();
		for (e in block.preds) {
			var pred = e.src.block();
			storeRow.ori(lpPassStart + pred.info.srpo_num);
		}
		storeRow.and(allLive);
	}
	def iterateloop(loop: SsaLoopInfo, endinstr: ArchInstr) {
		var cur = codegen.instrs[loop.start];
		var block: SsaBlock;
		while (cur != endinstr) {
			var next = cur.next;
			var opcode = cur.opcode();
			if (opcode == ArchInstrs.ARCH_BLOCK) {
				block = Operand.Label.!(cur.operands[0]).block;
				curRow = BitMatrixRow(matrix, lpPassStart + block.info.srpo_num);
				killsFromPred(curRow, block);
			} else if (opcode == ArchInstrs.ARCH_SETSHADOWSTACKPTR) {
				curRow.clear();
			}
			var operands = cur.operands;
			for (j = operands.length-1; j >= 0; j--) {
				match (operands[j]) {
					Def(vreg, constraint) => {
						if (vreg != null) curRow[vreg.varNum] = false;
					}
					Use(vreg, constraint) => {
						if (vreg != null ) markRestoreVregLoop(block, cur, vreg);
					}
					Overwrite(vreg, use, constraint) => {
						markRestoreVregLoop(block, cur, use);
					}
					RefMap(livepoint, outgoing) => {
						curRow.ori(codegen.order.length + livepoint);
						curRow.and(allLive);
					}
					_ => ;
				}
			}
			cur = next;
		}
	}
	def markRestore(block: SsaBlock, cur: ArchInstr) {
		var opcode = cur.opcode();
		if (opcode == ArchInstrs.ARCH_BLOCK) {
			codegen.instrs[block.info.srpo_num] = cur;
			killsFromPred(tmpRow, block);
			curRow = BitMatrixRow(matrix, lpPassStart + block.info.srpo_num);
		}
		if (useShadowStack) {
			if (cur == shadowStackAllocNext) inShadowStack = true;
			else if (!inShadowStack) return;
		}
		if (opcode == ArchInstrs.ARCH_BLOCK_END) {
			curRow.or(tmpRow);
			if (order.loops != null) for (i < order.loops.length) {
				if (block.info.srpo_num == order.loops[i].end-1) {
					iterateloop(order.loops[i], cur);
					break;
				}
			}
		} else if (opcode == ArchInstrs.ARCH_SETSHADOWSTACKPTR) {
			curRow.clear();
			tmpRow.clear();
		}
		var operands = cur.operands;
		for (j = operands.length-1; j >= 0; j--) {
			match (operands[j]) {
				Use(vreg, constraint) => {
					if (vreg != null) markRestoreVreg(block, cur, vreg);
				}
				Overwrite(vreg, use, constraint) => {
					markRestoreVreg(block, cur, use);
				}
				RefMap(livepoint, outgoing) => { // kills in this block
					curRow.ori(codegen.order.length + livepoint);
					curRow.and(allLive);
				}
				Def(vreg, constraint) => {
					if (useShadowStack && allLive[vreg.varNum]) {
						var slot = shadowVarMap[vreg.varNum];
						codegen.insertShadowStackSave(shadow_sp, vreg, slot, cur.next);
						saveRow[vreg.varNum] = false;
					}
				}
				_ => ;
			}
		}
	}
	def markRestoreVregLoop(block: SsaBlock, cur: ArchInstr, vreg: VReg) {
		if (curRow[vreg.varNum]) {
			if (EVERYUSE) insertRestore(vreg, cur);
			else matrix[reloadStart + block.info.srpo_num, vreg.varNum] = true;
			curRow[vreg.varNum] = false;
		}
	}
	def markRestoreVreg(block: SsaBlock, cur: ArchInstr, vreg: VReg) {
		if (curRow[vreg.varNum]) { // kills in this block
			insertRestore(vreg, cur);
			tmpRow[vreg.varNum] = false;
			curRow[vreg.varNum] = false;
		} else if (tmpRow[vreg.varNum]) { // kills from predecessor
			if (EVERYUSE) insertRestore(vreg, cur);
			else matrix[reloadStart + block.info.srpo_num, vreg.varNum] = true;
			tmpRow[vreg.varNum] = false;
		}
	}
	def isSucc(block: SsaBlock, succs: Array<SsaCfEdge>) -> bool {
		for (e in succs) {
			if (e.dest == block) return true;
		}
		return false;
	}
	def killsFromSucc(block: SsaBlock, succs: Array<SsaCfEdge>) -> BitMatrixRow {
		var killRow = BitMatrixRow(matrix, lpPassStart + block.info.srpo_num);
		killRow.clear();
		for (i < lps.length) if (lps[i].0 == block) {
			killRow.ori(order.order.length + lps[i].2.livepoint);
		}
		for (e in succs) {
			killRow.ori(lpPassStart + e.dest.info.srpo_num);
		}
		killRow.and(allLive);
		return killRow;
	}
	def pushRestoreUp(info: SsaBlockInfo) {
		var block = info.block;
		curRow = BitMatrixRow(matrix, reloadStart + block.info.srpo_num);
		var succs = block.succs();
		var killRow = killsFromSucc(block, succs);
		var child = info.dom_child;
		if (child != null) {
			if (child.dom_sibling == null || !killRow.isZero()) {
				while (child != null) {
					var next = codegen.instrs[child.srpo_num].next;
					matrix.apply(reloadStart + child.srpo_num, insertRestoreVarNum, (next, child.block, succs, killRow));
					child = child.dom_sibling;
				}
			} else {
				tmpRow.set();
				// Mark reload if all successors require reload
				for (e in succs) {
					tmpRow.andi(reloadStart + e.dest.info.srpo_num);
				}
				curRow.or(tmpRow);
				// Mark reload if some succs and dom_child that is not a successor require reload
				tmpRow.clear();
				for (e in succs) {
					tmpRow.ori(reloadStart + e.dest.info.srpo_num);
				}
				while (child != null) {
					if (!isSucc(child.block, succs)) {
						tmpRow.andi(reloadStart + child.srpo_num);
						curRow.or(tmpRow);
						break;
					}
					child = child.dom_sibling;
				}
				child = info.dom_child;
				while (child != null) {
					// Reload at child if child requires reload but current block doesn't.
					var next = codegen.instrs[child.srpo_num].next;
					tmpRow.copy(curRow);
					tmpRow.flip();
					tmpRow.andi(reloadStart + child.srpo_num);
					tmpRow.apply(insertRestoreVarNum, (next, child.block, succs, killRow));
					child = child.dom_sibling;
				}
			}
		}
	}
	def insertRestoreVarNum(varNum: int, t: (ArchInstr, SsaBlock, /*succs*/Array<SsaCfEdge>, /*killRow*/BitMatrixRow)) {
		insertRestore(codegen.vars[varNum], t.0);
		matrix[t.1.info.srpo_num, varNum] = false;
		if (!isSucc(t.1, t.2)) t.3[varNum] = false;
	}
	// Insert a ShadowStack save and/or restore. The save instruction is inserted before {t.0},
	// ans the restore instruction is inserted before {t.1}.
	def insertSSVarNum(varNum: int, t: (ArchInstr, ArchInstr)) {
		var vreg = codegen.vars[varNum], slot = shadowVarMap[varNum];
		if (t.0 != null) codegen.insertShadowStackSave(shadow_sp, vreg, slot, t.0);
		if (t.1 != null) codegen.insertShadowStackRestore(shadow_sp, vreg, slot, t.1);
	}
	def insertRestore(vreg: VReg, next: ArchInstr) {
		if (!useShadowStack) codegen.insertRestore((vreg, 0), vreg.spill, next);
		else codegen.insertShadowStackRestore(shadow_sp, vreg, shadowVarMap[vreg.varNum], next);
	}
	def print() {
		var out = codegen.getOutput(), indent = 1;
		for (i = codegen.first; i != null; i = i.next) {
			indent = out.putInstr(indent, i);
			for (o in i.operands) match (o) {
				RefMap(livepoint, outgoing) => {
					out.putLiveness(codegen.liveness, livepoint + codegen.order.length);
				}
				_ => ;
			}
		}
	}
}
