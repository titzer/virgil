// Copyright 2014 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Register sets for Arm, used in register allocation.
component ArmMachRegs {
	def R0 = '\x01';
	def R1 = '\x02';
	def R2 = '\x03';
	def R3 = '\x04';
	def R4 = '\x05';
	def R5 = '\x06';
	def R6 = '\x07';
	def R7 = '\x08';
	def R8 = '\x09';
	def R9 = '\x0a';
	def R10 = '\x0b';
	def R11 = '\x0c';
	def R12 = '\x0d';
	def GPR = '\x0e';
	def ALL = '\x0f';

	def SCRATCH = ArmReg.R12;
	def SP = ArmReg.R13;
	def LR = ArmReg.R14;
	def IP = ArmReg.R15;

	// XXX: enough spill slots to not use the 31st bit
	def CALLER_SPILL_START = 100000000;
	def CALLEE_SPILL_START = 200000000;

	var regs: MachRegSet;

	new() {
		// TODO
		var rarray = Array<Array<byte>>.new(ALL + 1);
		rarray[R0] = [R0];
		rarray[R1] = [R1];
		rarray[R2] = [R2];
		rarray[R3] = [R3];
		rarray[R4] = [R4];
		rarray[R5] = [R5];
		rarray[R6] = [R6];
		rarray[R7] = [R7];
		rarray[R8] = [R8];
		rarray[R9] = [R9];
		rarray[R10] = [R10];
		rarray[R11] = [R11];
		rarray[R12] = [];
		rarray[GPR] = [R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11];

		var rnames = Array<string>.new(rarray.length);
		rnames[R0] = "r0";
		rnames[R1] = "r1";
		rnames[R2] = "r2";
		rnames[R3] = "r3";
		rnames[R4] = "r4";
		rnames[R5] = "r5";
		rnames[R6] = "r6";
		rnames[R7] = "r7";
		rnames[R8] = "r8";
		rnames[R9] = "r9";
		rnames[R10] = "r10";
		rnames[R11] = "r11";
		rnames[R12] = "r12";
		rnames[GPR] = "{gpr}";
		rnames[ALL] = "{all}";

		// XXX: fpScratch = 0 as no floating point support for arm currently
		regs = MachRegSet.new(12, rarray, rnames, [GPR], R12, 0, CALLER_SPILL_START, CALLEE_SPILL_START);
	}
}
// Defines the standard parameter and return registers for Arm calls between Virgil methods.
component ArmVirgilCallConv {
	def S: ArmMachRegs;
	def paramRegs: Array<int> = [S.R0, S.R1, S.R2, S.R3];
	def retRegs: Array<int> = [S.R0, S.R1, S.R2, S.R3];
	private def compute(paramTypes: Array<Type>, returnTypes: Array<Type>) -> MachCallConv {
		// compute the locations of each parameter
		var spillStart = ArmMachRegs.regs.spillStart;
		var ploc = Array<int>.new(paramTypes.length);
		var pspill = 0;
		for (i < ploc.length) {
			if (i < paramRegs.length) ploc[i] = paramRegs[i];
			else ploc[i] = spillStart + pspill++;
		}
		// compute locations of each return value
		var len = returnTypes.length;
		if (len == 0) len = 1;  // TODO: fix return count
		var rloc = Array<int>.new(len), rspill = 0;
		for (i < rloc.length) {
			if (i < retRegs.length) rloc[i] = retRegs[i];
			else rloc[i] = spillStart + rspill++;
		}
		if (pspill > rspill) rspill = pspill;
		return MachCallConv.new(ArmMachRegs.regs, paramTypes, ploc, returnTypes, rloc, rspill);
	}
	def getForGraph(graph: SsaGraph) -> MachCallConv {
		// XXX: cache calling conventions by type for SSA graph
		return compute(Arrays.map(graph.params, SsaParam.vtype), Tuple.toTypeArray(graph.returnType));
	}
	def getForFunc(funcRep: Mach_FuncRep) -> MachCallConv {
		if (funcRep.callConv != null) return funcRep.callConv;
		return funcRep.callConv = compute(funcRep.paramTypes, funcRep.returnTypes);
	}
}
