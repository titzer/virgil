// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// a program module represented as syntax trees, directly from the parser
class VstModule {
	def classes = Vector<VstClass>.new();
	def components = Vector<VstComponent>.new();
	def enums = Vector<VstEnum>.new();
	def exports = Vector<ExportDecl>.new();
	def layouts = Vector<VstLayout>.new();
	def packings = Vector<VstPacking>.new();
	var files: Array<VstFile>;			// all files, in order specified on command line
	var redefFile: VstFile;				// synthetic file for field redefinition string
	var fieldRedefs: VstList<VstRedefField>;	// parse field redefinitions
	var numComponents: int;				// total number of components
	var numStrings: int;				// total number of string constants
}
// The result of parsing a file, including a line/offset map and declarations
class VstFile extends ParsedFile {
	def classes = Vector<VstClass>.new();
	def components = Vector<VstComponent>.new();
	def enums = Vector<VstEnum>.new();
	def exports = Vector<ExportDecl>.new();
	def layouts = Vector<VstLayout>.new();
	def packings = Vector<VstPacking>.new();
	var synthetic: VstComponent;	// declaration for synthesized component
	var typeEnv: TypeEnv;

	new(fileName: string, input: Array<byte>) super(fileName, input) { }

	def getSyntheticComponent() -> VstComponent {
		if (synthetic != null) return synthetic;
		var token = Token.new(fileName, Paths.baseName(fileName), 1, 1);
		synthetic = VstComponent.new(false, null, token, null);
		synthetic.isSynthetic = true;
		synthetic.isFileScope = true;
		components.put(synthetic);
		return synthetic;
	}
}
// a list of T's with a source range and several utility methods
class VstList<T>(src: FileRange, list: List<T>) {
	private var len = if(list != null, -1);
	private var array: Array<T>;

	def range() -> FileRange { return src; }
	def first() -> T {
		if (list == null) { var n: T; return n; }
		return list.head;
	}
	def length() -> int {
		if (len < 0) len = Lists.length(list);
		return len;
	}
	def apply(f: T -> void) { Lists.apply(list, f); }
	def asArray() -> Array<T> {
		if (array == null) {
			array = Lists.toArray(list);
			len = array.length;
		}
		return array;
	}
	def mapList<R>(f: T -> R) -> List<R> { return Lists.map(list, f); }
	def mapArray<R>(f: T -> R) -> Array<R> { return Arrays.map(asArray(), f); }
	def map<R>(f: T -> R) -> VstList<R> { return VstList.new(src, Lists.map(list, f)); }
}
// an identifier parameterized with T's
class VstIdent<T>(name: Token, kwClass: byte, params: VstList<T>) {
	def list() -> List<T> {
		if (params != null) return params.list;
		return null;
	}
	def range() -> FileRange {
		var src = name.range();
		if (params != null) return FileRanges.add(src, params.src);
		return src;
	}
	def parameterized() -> bool {
		return params != null;
	}
}
// Any kind of declaration that has a name
class Decl(token: Token) {
	def name() -> string { return token.image; }
	def render(buf: StringBuilder) -> StringBuilder {
		return buf.puts(token.image);
	}
}
// Parsed parameter
class ParamDecl extends VarDecl {
	var member: VstField;
	var index: int;
	new(token: Token, tref: TypeRef) super(token, tref, null) { }
}
// Parsed packing parameter
class PackingParamDecl extends VarDecl {
	def size: IntLiteral;
	var locations: Array<Interval>;	// a series of intervals indicating the position of all bits
	var bitPos: int;		// used in verification
	var bitWidth: byte;

	new(token: Token, size) super(token, null, null) { }
}
def NON_VARIANT = -2;
def ROOT_VARIANT = -1;
// base class of all compound declarations
class VstCompound extends Decl {
	def typeParams: List<TypeParamType>;
	def params: VstList<ParamDecl>;
	def superclause: SuperClause;
	var members: List<VstMember>;
	var typeCon: TypeCon;
	var typeEnv: TypeEnv;
	var memberMap: HashMap<string, VstMember>;
	var declType: Type;
	var fullName: string;
	var numFields: int;
	var numMethods: int;
	var constructor: VstNew;
	var isSynthetic: bool;
	var isFileScope: bool;
	def isPrivate: bool;
	var verifier: VstCompoundVerifier;
	var variantTag = NON_VARIANT;
	var repHints: List<VstRepHint>;

	new(isPrivate, name: Token, typeParams, params, superclause, members) super(name) {
		fullName = name.image;
	}
	def getDeclaredType() -> Type {
		if (declType == null && typeCon != null) {
			declType = typeCon.create(Lists.map(typeParams, Type.!<TypeParamType>));
		}
		return declType;
	}
	def getParams() -> List<ParamDecl> {
		return if(params != null, params.list);
	}
	def isEnum() -> bool { return VstEnum.?(this); }
	def isVariant() -> bool { return variantTag > NON_VARIANT; }
	def isVariantCase() -> bool { return variantTag >= 0; }
}
// Parsed "class X { ... }"
class VstClass extends VstCompound {
	def superclass: TypeRef;
	var kind = Kind.CLASS;
	var tagType: IntType;
	var cases: Array<VstCaseMember>;

	new(isPrivate: bool, name: Token, typeParams: List<TypeParamType>, params: VstList<ParamDecl>,
		superclass, superclause: SuperClause, members: List<VstMember>)
		super(isPrivate, name, typeParams, params, superclause, members) { }
}
// Parsed "component X { ... }"
class VstComponent extends VstCompound {
	def importName: Token;
	var recordIndex: int;
	new(isPrivate: bool, importName, name: Token, members: List<VstMember>) super(isPrivate, name, null, null, null, members) { }
}
// Parsed "enum X { ... }"
class VstEnum extends VstCompound {
	def cases: Array<VstEnumCase>;
	def tagType = getTagType(cases.length);

	new(isPrivate: bool, name: Token, params: VstList<ParamDecl>, cases, members: List<VstMember>)
		super(isPrivate, name, null, params, null, members) {
		// XXX: move type creation somewhere else?
		typeCon = TypeCon.new(token.image, Kind.ENUM, 0, TypeUtil.globalCache);
		var enumType = EnumType.new(typeCon.uid, this, typeCon);
		typeCon.singleton = enumType;
		typeCon = typeCon;
		if (cases.length <= Int.MAX_WIDTH) {
			var setName = Strings.builderOf(token.image).puts(".set").toString();
			var typeCon = TypeCon.new(setName, Kind.ENUM_SET, 0, TypeUtil.globalCache);
			var repType = Int.getType(false, cases.length);
			var enumSetType = EnumSetType.new(typeCon.uid, this, repType, typeCon);
			enumType.setType = typeCon.singleton = enumSetType;
		}
	}
}
// Parsed "layout L { ... }"
class VstLayout extends VstCompound {
	def size: Literal;
	var byteSize: int;
	var readonlyType: Type;
	new(size, name: Token, params: VstList<ParamDecl>, members: List<VstMember>, repHints: List<VstRepHint>)
		super(false, name, null, params, null, members) {
	}
}
// Parsed "packing P(): N = 0b..."
class VstPacking extends VstCompound {
	def pparams: VstList<PackingParamDecl>;
	def expr: VstPackingExpr;
	def size: Literal;
	var bitWidth: byte;

	new(name: Token, pparams, expr, size) super(false, name, null, null, null, null) {}
}

// Member of an enum.
class VstEnumCase extends VstMember {
	def tag: int;
	def args: VstList<Expr>;
	new(tag, name: Token, args) super(false, name) { }
	def getType() -> Type {
		return receiver.getDeclaredType();
	}
}
// Member of a layout
class VstLayoutField extends VstMember {
	def offset: Literal;
	def mtref: MemoryTypeRef;
	var byteOffset: int = -1;

	new (offset, mtref, name: Token, repHints: List<VstRepHint>) super(false, name) {
		this.repHints = repHints;
	}
}
// A field redefinition represents an override to a field's value, e.g. specified by the -redef-fields=var=val
// command-line option.
class VstRedefField {
	def receiver: VstIdent<void>;
	def ident: VstIdent<void>;
	def val: Literal;
	new(receiver, ident, val) { }
	def range() -> FileRange {
		var left = if(receiver == null, ident, receiver);
		return FileRanges.add(left.range(), val.range());
	}
}
// A helper class for desugaring variants into VstClasses.
class VariantDesugaring(isPrivate: bool, outer: VstIdent<TypeParamType>, params: VstList<ParamDecl>) {
	def superclass = NamedTypeRef.new(null, outer.name,
		 if(outer.params != null, outer.params.map(TypeUtil.typeRefOfParam)));
	var cases = Vector<VstCaseMember>.new();
	def synthesizeMembers(fileName: string, line: int, col: int) -> List<VstMember> {
		var tagToken = Token.new(fileName, "tag", line, col);
		var nameToken = Token.new(fileName, "name", line, col);
		var list: List<VstMember>;
		if (params == null) {
			list = List.new(VstVariantTagMember.new(tagToken), list);
			list = List.new(VstVariantNameMember.new(nameToken), list);
		}
		return list;
	}
	def synthesizeTopLevelClass(members: List<VstMember>) -> VstClass {
		var decl = VstClass.new(isPrivate, outer.name, outer.list(), params, null, null, members);
		if (params != null) {
			cases.put(VstCaseMember.new(0, outer.name, decl));
			decl.variantTag = 0;
		} else {
			decl.variantTag = ROOT_VARIANT;
		}
		decl.kind = Kind.VARIANT;
		decl.tagType = getTagType(cases.length);
		decl.cases = cases.extract();
		for (c in decl.cases) c.decl.tagType = decl.tagType;
		return decl;
	}
	def synthesizeVariantCaseMember(id: VstIdent<void>, params: VstList<ParamDecl>, members: List<VstMember>) -> VstCaseMember {
		var synthetic = VstClass.new(false, id.name, outer.list(), params, superclass, null, members);
		var tag = cases.length;
		synthetic.kind = Kind.VARIANT;
		synthetic.variantTag = tag;
		synthetic.isSynthetic = true;
		var buf = StringBuilder.new().puts(superclass.name.image);
		buf.putc('.');
		synthetic.fullName = buf.puts(id.name.image).toString();
		var c = VstCaseMember.new(tag, id.name, synthetic);
		cases.put(c);
		return c;
	}
}
// compute the type of the tag based on the number of cases
def getTagType(caseCount: int) -> IntType {
	var width = 1, exp = 2;
	while (exp < caseCount) {
		exp = exp << 1;
		width++;
	}
	return Int.getType(false, width);
}
// A member of a class or component
class VstMember extends Decl {
	def isPrivate: bool;
	var isSynthetic: bool;
	var receiver: VstCompound;
	var index: int;
	var repHints: List<VstRepHint>;

	new(isPrivate, name: Token) super(name) { }

	def getType() -> Type;
	def renderLong(buf: StringBuilder) -> StringBuilder {
		if (receiver != null && !receiver.isFileScope) buf.puts(receiver.fullName).putc('.');
		return buf.puts(token.image);
	}
}
// Desugared case member from a variant.
class VstCaseMember extends VstMember {
	def tag: int;
	def decl: VstClass;

	new(tag, name: Token, decl) super(false, name) { }

	def getType() -> Type {
		return if(decl == null, receiver.declType, decl.declType);
	}
}
// Synthesized .tag member from a variant.
class VstVariantTagMember extends VstMember {
	new(name: Token) super(false, name) { }
	def getType() -> Type {
		match (receiver) {
			x: VstClass => return x.tagType;
			x: VstEnum => return x.tagType;
			_ => return null;
		}
	}
}
// Synthesized .name member from a variant.
class VstVariantNameMember extends VstMember {
	new(name: Token) super(false, name) { }
	def getType() -> Type { return V3.stringType; }
}
// A method
class VstMethod extends VstMember {
	def typeParams: List<TypeParamType>;
	var params: VstList<ParamDecl>;
	def rettype: ReturnType;
	def body: Stmt;

	var thisParam: ParamDecl;
	var typeEnv: TypeEnv;
	var root: VstMethod;
	var ftype: Type;
	var numNonSsa: int;
	var numParams: int;
	var numLoops: int;
	def returnThis = ReturnType.This.?(rettype);
	var importName: Token;

	new(isPrivate: bool, name: Token, typeParams, params, rettype, body) super(isPrivate, name) { }

	def getType() -> Type {
		if (ftype == null) {
			// XXX: refactor Lists.map(params, ParamDecl.vtype);
			var ptypes = Lists.map(params.list, TypeUtil.getParamType);
			var ptype = Tuple.newType(ptypes);
			var rt = getReturnType();
			if (rt == null) return null;
			ftype = Function.newType(ptype, rt);
		}
		return ftype;
	}
	def getReturnType() -> Type { // XXX: force callers to handle ReturnType.This
		match (rettype) {
			Void => return Void.TYPE;
			This => return Void.TYPE;
			Implicit(expr) => return expr.exactType;
			Explicit(tref) => return tref.getType();
		}
	}
	def getReturnRange() -> FileRange {
		match (rettype) {
			Void => return body.range().firstByte();
			This(token) => return token.range();
			Implicit(expr) => return expr.range().firstByte();
			Explicit(tref) => return tref.range();
		}
	}
	def isIndexed() -> bool {
		return token.image[0] == '[';  // an indexed get or set method
	}
}

class VstNew extends VstMethod {
	var superclause: SuperClause;
	var memberinits: List<VstField>;
	var initIndex = -2;
	new(isPrivate: bool, name: Token, params: VstList<ParamDecl>, superclause, body: Stmt) :
		super(isPrivate, name, null, params, ReturnType.This(name), body) {
		this.superclause = superclause;
	}
	def nontrivial() -> bool { return initIndex > -2; }
	def markNontrivial() { if (initIndex < -1) initIndex = -1; }
}

enum Writability { READ_ONLY, PRIVATE_WRITEABLE, WRITEABLE }
class VstField extends VstMember {
	def writability: Writability;
	def tref: TypeRef;
	var init: Expr;
	var vtype: Type;
	var initOrder: int;
	var initEnv: MethodEnv;
	var synthetic: bool;
	var enumVals: Record;

	new(isPrivate: bool, writability, name: Token, tref, init, repHints: List<VstRepHint>) super(isPrivate, name) {
		this.repHints = repHints;
	}
	def getType() -> Type { return vtype; }
}

class SuperClause {
	def point: FilePoint;
	def args: TupleExpr;
	var constructor: VstNew;
	new(point, args) { }
}

type VstRepHint {
	case Boxed;
	case Unboxed;
	case Packed;
	case Packing(p: VstList<VstPackingExpr>);
	case Other(hint: string);
}

type VstPackingExpr {
	case Bits(token: Token, rep: Array<(int, PackingBit)>);
	case Solve(l: VstList<VstPackingExpr>);				// #solve(_, ...)
	case Concat(l: VstList<VstPackingExpr>);			// #concat(_, ...)
	case App(p: VarExpr, args: VstList<VstPackingExpr>);
	case Field(f: VarExpr);
	case Literal(l: Literal);
}

class VstVisitor<E, R> {
	def visitIf(stmt: IfStmt, env: E) -> R;
	def visitBlock(stmt: BlockStmt, env: E) -> R;
	def visitWhile(stmt: WhileStmt, env: E) -> R;
	def visitFor(stmt: ForStmt, env: E) -> R;
	def visitForeach(stmt: ForeachStmt, env: E) -> R;
	def visitForLess(stmt: ForLessStmt, env: E) -> R;
	def visitLocal(stmt: LocalStmt, env: E) -> R;
	def visitBreak(stmt: BreakStmt, env: E) -> R;
	def visitContinue(stmt: ContinueStmt, env: E) -> R;
	def visitExpr(stmt: ExprStmt, env: E) -> R;
	def visitMatch(stmt: MatchStmt, env: E) -> R;
	def visitEmpty(stmt: EmptyStmt, env: E) -> R;
	def visitReturn(stmt: ReturnStmt, env: E) -> R;

	def visitTuple(expr: TupleExpr, env: E) -> R;
	def visitParamExpr(expr: ParamExpr, env: E) -> R;
	def visitAutoExpr(expr: AutoExpr, env: E) -> R;
	def visitArray(expr: ArrayExpr, env: E) -> R;
	def visitVar(expr: VarExpr, env: E) -> R;
	def visitLiteral(expr: Literal, env: E) -> R;
	def visitString(expr: StringExpr, env: E) -> R;
	def visitApp(expr: AppExpr, env: E) -> R;
	def visitIndex(expr: IndexExpr, env: E) -> R;
	def visitRange(expr: RangeExpr, env: E) -> R;
	def visitNot(expr: NotExpr, env: E) -> R;
	def visitNeg(expr: NegExpr, env: E) -> R;
	def visitBitwiseNeg(expr: BitwiseNegExpr, env: E) -> R;
	def visitAssign(expr: AssignExpr, env: E) -> R;
	def visitBinOp(expr: BinOpExpr, env: E) -> R;
	def visitIfExpr(expr: IfExpr, env: E) -> R;
	def visitFuncExpr(expr: FuncExpr, env: E) -> R;
}
// The return type of a method or function.
type ReturnType {
	case Void;			// omitted
	case This(token: Token);	// -> this
	case Implicit(expr: Expr);	// => expr
	case Explicit(tref: TypeRef);	// -> typeref
}
// base class of all TypeRefs
class TypeRef {
	var binding: Type;
	def render(buf: StringBuilder) -> StringBuilder {
		if (binding == null) return buf.puts("?");
		return binding.render(buf);
	}
	def range() -> FileRange;
	def getType() -> Type {
		if (binding == null) return V3.fail1("unbound TypeRef: %q", render);
		return binding;
	}
}
// typeref -> typeref
class FuncTypeRef(paramType: TypeRef, returnType: TypeRef) extends TypeRef {
	def render(buf: StringBuilder) -> StringBuilder {
		var pfunc = FuncTypeRef.?(paramType);
		if (pfunc) buf.putc('(');
		paramType.render(buf);
		if (pfunc) buf.putc(')');
		buf.puts(" -> ");
		returnType.render(buf);
		return buf;
	}
	def range() -> FileRange {
		return FileRanges.add(paramType.range(), returnType.range());
	}
}
// "(" typeref("," typeref)* ")"
class TupleTypeRef(nested: VstList<TypeRef>) extends TypeRef {
	def render(buf: StringBuilder) -> StringBuilder {
		var list = nested.list;
		if (list == null) {
			buf.puts("void");
		} else if (list.tail == null) {
			list.head.render(buf);
		} else {
			buf.putc('(');
			Lists.render(buf, TypeRef.render, list);
			buf.putc(')');
		}
		return buf;
	}
	def range() -> FileRange {
		return nested.range();
	}
}
// [ typeref . ] typename [ "<" typeref("," typeref)* ">" ]
class NamedTypeRef(left: NamedTypeRef, name: Token, nested: VstList<TypeRef>) extends TypeRef {
	def render(buf: StringBuilder) -> StringBuilder {
		if (binding != null) return binding.render(buf);
		if (left != null) left.render(buf).putc('.');
		if (name == null) buf.puts("<null>");
		else buf.puts(name.image);
		if (nested != null) {
			buf.putc('<');
			Lists.render(buf, TypeRef.render, nested.list);
			buf.putc('>');
		}
		return buf;
	}
	def range() -> FileRange {
		if (nested == null) return name.range();
		return FileRanges.add(name.range(), nested.range());
	}
}
// allowed memory types in layouts
class MemoryTypeRef(tname: VstIdent<void>, repeat: Literal) {
	var mttype: Type;
	var mtlayout: RefType;
	var repeatCount = -1;
	var byteSize = -1;
	var scale = -1;

	def render(buf: StringBuilder) -> StringBuilder {
		buf.puts(tname.name.image);
		if (repeat != null) buf.putc('[').puts(repeat.token.image).putc(']');
		return buf;
	}
	def range() -> FileRange {
		if (repeat != null) return FileRanges.add(tname.range(), repeat.range()); // TODO: include ]
		return tname.range();
	}
	def getType() -> Type {
		return if(mttype != null, mttype, mtlayout);
	}
}
// name [ : tref ] = expr
class VarDecl extends Decl {
	def tref: TypeRef;
	var init: Expr;
	var vtype: Type;
	var isReadOnly: bool;
	var ssa: VstSsaVar;

	new(name: Token, tref, init) super(name) { }
}
// export name = expr
class ExportDecl extends Decl {
	def expname: string;
	def synthetic: VstComponent;
	def expr: VarExpr;
	new(token: Token, expname, synthetic, expr) super(token) { }
}

// base class of statements
class Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R;
	def range() -> FileRange;
}
// if (cond) tbranch; else fbranch
class IfStmt(start: FilePoint, cond: Expr, tbranch: Stmt, fbranch: Stmt) extends Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitIf(this, env); }
	def range() -> FileRange {
		var src = FileRanges.add(start, FileRanges.ofStmt(tbranch));
		if (fbranch != null) src = FileRanges.add(src, FileRanges.ofStmt(fbranch));
		return src;
	}
}
// { stmts }
class BlockStmt(stmts: VstList<Stmt>) extends Stmt {
	var localVars: Array<VarDecl>;
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitBlock(this, env); }
	def range() -> FileRange { return stmts.range(); }
}
// while(cond) body
class WhileStmt(start: FilePoint, cond: Expr, body: Stmt) extends Stmt {
	var loopNum: int;		// loop number, computed by verifier

	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitWhile(this, env); }
	def range() -> FileRange { return FileRanges.add(start, FileRanges.ofStmt(body)); }
}
// for(varDecl; cond; update) body
class ForStmt(start: FilePoint, varDecl: VarDecl, cond: Expr, update: Expr, body: Stmt) extends Stmt {
	var loopNum: int;		// loop number, computed by verifier

	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitFor(this, env); }
	def range() -> FileRange { return FileRanges.add(start, FileRanges.ofStmt(body)); }
}
// for(varDecl in expr) body
class ForeachStmt(start: FilePoint, varDecl: VarDecl, expr: Expr, body: Stmt) extends Stmt {
	var loopNum: int;	// loop number, computed by verifier
	var loopVar: VstSsaVar;	// loop control variable

	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitForeach(this, env); }
	def range() -> FileRange { return FileRanges.add(start, FileRanges.ofStmt(body)); }
}
// for(varDecl < expr) body
class ForLessStmt(start: FilePoint, varDecl: VarDecl, lt: Token, expr: Expr, body: Stmt) extends Stmt {
	var loopNum: int;	// loop number, computed by verifier

	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitForLess(this, env); }
	def range() -> FileRange { return FileRanges.add(start, FileRanges.ofStmt(body)); }
}
// var|def vars
class LocalStmt(start: FilePoint, vars: List<VarDecl>) extends Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitLocal(this, env); }
	def range() -> FileRange { return start.rangeOf(3); } // TODO: include the end of the last variable
}
// break;
class BreakStmt(src: FileRange) extends Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitBreak(this, env); }
	def range() -> FileRange { return src; }
}
// expr;
class ExprStmt(src: FileRange, expr: Expr) extends Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitExpr(this, env); }
	def range() -> FileRange { return src; }
}
// match(expr) cases else defcase
class MatchStmt(src: FilePoint, expr: Expr, cases: VstList<MatchCase>) extends Stmt {
	var defcase: MatchCase;
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitMatch(this, env); }
	def range() -> FileRange {
		var r = FileRanges.add(src, cases.range());
		if (defcase != null) r = FileRanges.add(r, defcase.range());
		return r;
	}
}
// patterns: stmt
class MatchCase(default: FilePoint, patterns: VstList<MatchPattern>, stmt: Stmt) {
	def range() -> FileRange {
		return FileRanges.add(if(default != null, default, patterns.range()), FileRanges.ofStmt(stmt));
	}
}
// var(params) | var: Type
class MatchPattern(expr: Expr, params: VstList<VarDecl>) {
	var variantCase: VstCaseMember;  // if this is a match on a variant case
	var vdecl: VarDecl; // if this is a type case
	var val: Val;
	def decl() -> VstClass { return variantCase.decl; }
}
// continue;
class ContinueStmt(src: FileRange) extends Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitContinue(this, env); }
	def range() -> FileRange { return src; }
}
// ;
class EmptyStmt(point: FilePoint) extends Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitEmpty(this, env); }
	def range() -> FileRange { return point.rangeOf(1); }
}
// return expr;
class ReturnStmt(src: FileRange, expr: Expr) extends Stmt {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitReturn(this, env); }
	def range() -> FileRange { return FileRanges.add(src, if(expr!=null,expr.range())); }
}
// base class of expressions
class Expr {
	var exactType: Type;
	var implicitType: Type;
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R;
	// range in the file covering the whole expression, e.g. >"e + e"<
	def range() -> FileRange;
	// point in the expression where execution happens, e.g. "e >+ e"
	def point() -> FilePoint { return range(); }
	def effectiveType() -> Type { return if(implicitType != null, implicitType, exactType); }
}
// (exprs)
class TupleExpr(exprs: VstList<Expr>) extends Expr {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitTuple(this, env); }
	def range() -> FileRange { return exprs.range(); }
}
// [exprs]
class ArrayExpr(exprs: VstList<Expr>) extends Expr {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitArray(this, env); }
	def range() -> FileRange { return exprs.range(); }
}
// var|literal
class VarExpr(expr: Expr, dot: FilePoint, ident: VstIdent<TypeRef>) extends Expr {
	var receiver: Expr;
	var varbind: VarBinding;

	def bind(r: Expr, b: VarBinding, t: Type) -> VarBinding {
		receiver = r;
		varbind = b;
		exactType = t;
		return b;
	}
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R {
		return v.visitVar(this, env);
	}
	def range() -> FileRange {
		if (expr != null) return FileRanges.add(FileRanges.ofExpr(expr), ident.range());
		return ident.range();
	}
	def point() -> FilePoint {
		if (dot != null) return dot;
		return ident.name;
	}
	def isAssignable(compound: VstCompound) -> bool {
		match (varbind) {
			Local(decl) => return !decl.isReadOnly;
			ObjectField(receiver, decl) => return isAssignableFrom(decl, compound);
			ComponentField(decl) => return isAssignableFrom(decl, compound);
			RefLayoutField(receiver, decl) => {
				var tc = V3Ref_TypeCon.!(receiver.typeCon);
				return tc.writeable && decl.mtref.repeat == null;
			}
			_ => return false;
		}
	}
	def isLocal() -> bool {
		return varbind.tag == VarBinding.Local.tag;
	}
	def isAssignableFrom(decl: VstField, compound: VstCompound) -> bool {
		match (decl.writability) {
			WRITEABLE => return true;
			PRIVATE_WRITEABLE => return decl.receiver.verifier.file == compound.verifier.file;
			READ_ONLY => return false;
		}
	}
}
// literal
class Literal extends Expr {
	def token: Token;
	var val: Val;
	new(token, val, t: Type) { exactType = t; }
	def range() -> FileRange { return token.range(); }
	def point() -> FilePoint { return token; }
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R {
		return v.visitLiteral(this, env);
	}
}
// Binary|Decimal|Hex literals
class IntLiteral extends Literal {
	def lsuffix: bool;
	def usuffix: bool;
	new(token: Token, val: Val, t: Type, lsuffix, usuffix) super(token, val, t) { }
}
// 0b(0|1)+
class BinLiteral extends IntLiteral {
	def digits: int;
	new(token: Token, val: Val, t: Type, lsuffix: bool, usuffix: bool, digits) super(token, val, t, lsuffix, usuffix) { }
}
// [-](0...9)+
class DecLiteral extends IntLiteral {
	def negative: bool;
	new(token: Token, val: Val, t: Type, lsuffix: bool, usuffix: bool, negative) super(token, val, t, lsuffix, usuffix) { }
}
// 0x(0...9a...zA...Z)+
class HexLiteral extends IntLiteral {
	def digits: int;
	new(token: Token, val: Val, t: Type, lsuffix: bool, usuffix: bool, digits) super(token, val, t, lsuffix, usuffix) { }
}
// [-](0...9)+[.(0...9)*][e[+|-](0...9)+]
class FloatLiteral extends Literal {
	new(token: Token, val: Val, t: Type) super(token, val, t) { }
}
// _
class ParamExpr(token: Token) extends Expr {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitParamExpr(this, env); }
	def range() -> FileRange { return token.range(); }
}
// x++|++x|x--|--x
class AutoExpr(token: Token, expr: Expr, infix: V3Infix, post: bool) extends Expr {
	var op: Operator;
	var facts: Fact.set;
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitAutoExpr(this, env); }
	def range() -> FileRange { return FileRanges.add(FileRanges.ofExpr(expr), token.range()); }
}
// "string"
class StringExpr(token: Token, array: Array<byte>) extends Expr {
	var recordIndex: int;

	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitString(this, env); }
	def range() -> FileRange { return token.range(); }
}
// func(args)
class AppExpr(func: Expr, var args: TupleExpr) extends Expr {
	var boundMap: Array<int>;  // which expressions are bound for partial applications
	var target = func;
	var appbind: AppBinding;

	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitApp(this, env); }
	def range() -> FileRange { return FileRanges.add(FileRanges.ofExpr(func), args.range()); }
	def point() -> FilePoint { return args.range(); }
}
// expr[exprs]
class IndexExpr(expr: Expr, exprs: VstList<Expr>) extends Expr {
	var read: AppBinding;
	var write: AppBinding;
	var receiver: Expr = expr;

	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitIndex(this, env); }
	def range() -> FileRange { return FileRanges.add(FileRanges.ofExpr(expr), exprs.range()); }
	def point() -> FilePoint { return exprs.range(); }
}
// expr[expr ... expr]
class RangeExpr(expr: Expr, start: Expr, plus: bool, end: Expr) extends Expr {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitRange(this, env); }
	def range() -> FileRange { return FileRanges.add(FileRanges.ofExpr(expr), if(end != null, end, start).range()); }
	def point() -> FilePoint { return start.range(); }
}
// !expr
class NotExpr(not: FilePoint, expr: Expr) extends Expr {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitNot(this, env); }
	def range() -> FileRange { return FileRanges.add(not, FileRanges.ofExpr(expr)); }
}
// -expr
class NegExpr(not: FilePoint, expr: Expr) extends Expr {
	var op: Operator;
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitNeg(this, env); }
	def range() -> FileRange { return FileRanges.add(not, FileRanges.ofExpr(expr)); }
}
// ~expr
class BitwiseNegExpr(neg: FilePoint, expr: Expr) extends Expr {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitBitwiseNeg(this, env); }
	def range() -> FileRange { return FileRanges.add(neg, FileRanges.ofExpr(expr)); }
}
// expr [infix]= expr
class AssignExpr(target: Expr, infix: InfixOp, assign: FilePoint, expr: Expr) extends Expr {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitAssign(this, env); }
	def range() -> FileRange {
		if (target == null) return assign.rangeOf(1);
		var r = FileRanges.ofExpr(target);
		if (expr != null) r = FileRanges.add(r, FileRanges.ofExpr(expr));
		return r;
	}
	def point() -> FilePoint { return assign; }
}
// op
class InfixOp(token: Token, infix: V3Infix, prec: byte, assign: bool) {
	var op: Operator;
}
// left op right
class BinOpExpr(left: Expr, op: InfixOp, right: Expr) extends Expr {
	def set(binop: Operator) -> this {
		op.op = binop;
	}
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitBinOp(this, env); }
	def range() -> FileRange {
		if (left == null) return op.token.range();
		var r = FileRanges.ofExpr(left);
		if (right != null) r = FileRanges.add(r, FileRanges.ofExpr(right));
		return r;
	}
	def point() -> FilePoint { return op.token; }
}
// if(exprs)
class IfExpr(start: FilePoint, exprs: VstList<Expr>) extends Expr {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitIfExpr(this, env); }
	def range() -> FileRange { return FileRanges.add(start, exprs.range()); }
	def point() -> FilePoint { return exprs.range(); }
}
// def name(args) { ... }
class FuncExpr(start: FilePoint, name: Token, params: VstList<ParamDecl>, rettype: ReturnType, body: Stmt) extends Expr {
	def accept<E, R>(v: VstVisitor<E, R>, env: E) -> R { return v.visitFuncExpr(this, env); }
	def range() -> FileRange { return FileRanges.add(start, body.range()); }
	def point() -> FilePoint { return start.rangeOf(1); }
}
// The possible shapes that bindings can take for these expressions:
// "Type.name"
// "expr.name"
type VarBinding {
	case None;
	case Void;
	// read/write bindings
	case Local(decl: VarDecl);
	case ObjectField(receiver: Type, member: VstField);
	case ComponentField(member: VstField);
	case RefLayoutField(receiver: RefType, member: VstLayoutField);
	// read-only bindings
	case Const(val: Val, vtype: Type);
	case Type(t: Type);
	case ObjectMethod(receiver: Type, member: VstMethod, typeArgs: TypeArgs);
	case ClassMethod(receiver: Type, member: VstMethod, typeArgs: TypeArgs);
	case ClassField(receiver: Type, member: VstField);
	case LayoutField(receiver: RefType, member: VstLayoutField);
	case LayoutNested(receiver: RefType, member: VstLayoutField);
	case LayoutRepeatedField(receiver: RefType, member: VstLayoutField);
	case LayoutRepeatedNested(receiver: RefType, member: VstLayoutField);
	case RefLayoutRepeatedField(receiver: RefType, member: VstLayoutField);
	case RefLayoutNested(receiver: RefType, member: VstLayoutField);
	case RefLayoutRepeatedNested(receiver: RefType, member: VstLayoutField);
	case ClassNew(receiver: Type, member: VstNew, funcType: Type);
	case ComponentMethod(member: VstMethod, typeArgs: TypeArgs);
	case VariantCase(receiver: Type, member: VstCaseMember);
	case VariantField(receiver: Type, member: VstField);
	case EnumConst(member: VstEnumCase);
	case Inst(op: Operator, facts: Fact.set);		// instantiate {op}
	case Apply(op: Operator, facts: Fact.set);		// apply {op} to receiver
	case Partial(op: Operator, facts: Fact.set);		// partially apply {op} to receiver
	case PtrAtField(ptrType: Type);
	case LayoutDecl(decl: VstLayout);
	case LayoutFieldDecl(decl: VstLayoutField);

	def none() -> bool { return this.tag == 0; }
	def ok() -> bool { return this.tag != 0; }
}
// The possible shapes that bindings can take for these expressions:
// "expr(expr*)"
// "expr.var(expr*)"
type AppBinding {
	case None;
	case Void;
	case CallClosure(t: Type);		// func(args)
	case CallComponentMethod(receiver: Type, member: VstMethod, typeArgs: TypeArgs);
	case CallObjectMethod(receiver: Type, member: VstMethod, typeArgs: TypeArgs);
	case CallClassMethod(receiver: Type, member: VstMethod, typeArgs: TypeArgs);
	case ClassNew(receiver: Type, member: VstNew);
	case Apply(op: Operator, facts: Fact.set);
	case Partial(indexMap: Array<int>);	// func(args, _, args)
	case PtrAtComponentField(receiver: Type, field: VstField, ptrType: Type);
	case PtrAtObjectField(receiver: Type, field: VstField, ptrType: Type);
	case PtrAtRefLayoutField(receiver: Type, field: VstLayoutField, ptrType: Type);

	def nullCheck() -> bool {
		match (this) {
			CallObjectMethod(receiver, member, typeArgs) => {
				return receiver.typeCon.kind == Kind.CLASS;
			}
			_ => return false;
		}
	}
}
// The result of looking up a member or an operator in a type or on a type.
type LookupResult {
	case None;
	case Const(vtype: Type, val: Val);
	case Inst(op: Operator, typeParams: List<TypeParamType>);
}
// Utility methods for dealing with file ranges
component FileRanges {
	def add(start: FilePoint, end: FileRange) -> FileRange {
		if (start == null) return end;
		if (end == null) {
			if (FileRange.?(start)) return FileRange.!(start);
			return start.rangeOf(0);
		}
		return FileRange.new(start.fileName, start.beginLine, start.beginColumn, end.endLine, end.endColumn);
	}
	def ofExpr(e: Expr) -> FileRange {
		if (e == null) return null;
		return e.range();
	}
	def ofStmt(s: Stmt) -> FileRange {
		if (s == null) return null;
		return s.range();
	}
}
// Operators that are treated as sugar and lowered immediately when generating SSA.
type VstOperator {
	case Nop;		// desugar op(x) to x
	case TypeCast;		// overloading resolved if possible
	case TypeQuery;		// overloading resolved if possible
	case NotEqual;		// desugared to !(a == b)
	case BoolAndAnd;	// desugared to if(a, b, false)
	case BoolOrOr;		// desugared to if(a, true, b)

	case Commute(op: Operator);	// desugared to (y op x)

	case IntMixedEqual;	// desugared to multiple comparisons
	case IntMixedNotEqual;	// desugared to multiple comparisons
	case IntMixedLt;	// desugared to multiple comparisons
	case IntMixedLteq;	// desugared to multiple comparisons
	case IntBitwiseNeg;	// desugared to (-1 ^ a)
	case IntView;		// desugared to IntConvert or FloatToBits
	case FloatSign;		// desugared to u32|u64.view(float|double) >> 31|63
	case FloatExponent;     // desugared to (u32|u64.view(float|double) >> 23|52) & (0xFF|0x7FF)
	case FloatFraction;	// desugared to (u23|u52).!(u32|u64.view(float|double))

	case VariantGetName;	// desugared to ArrayGetElem(#names, VariantGetTag(x))

	case EnumGetParam(field: VstField);	// desugared to ArrayGetElem(#field, x)

	case EnumSetHas(vcase: VstEnumCase);	// desugared to (1 << k) & x != 0
	case EnumSetUnion;			// desugared to x | y
	case EnumSetIntersect;			// desugared to x & y
	case EnumSetSubtract;			// desugared to x & ~(x & y)
	case EnumSetSubset;			// desugared to x & y == x
	case EnumSetStrictSubset;
	case EnumSetSuperset;
	case EnumSetStrictSuperset;
}
