// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// A printer for VST classes and components that can be supplied an IR-specific
// method to print the representation of methods and fields.
class Printer(printer: VstPrinter) {
	def printClass(cldecl: VstClass) {
		printVstCompound("class ", cldecl);
	}
	def printComponent(cdecl: VstComponent) {
		printVstCompound("component ", cdecl);
	}
	def printVstCompound(kind: string, compound: VstCompound) {
		Terminal.put(kind);
		Terminal.put(compound.name());
		printTypeParams(compound.typeEnv.typeParams);
		if (compound.repHints != null) {
			Terminal.sp();
			printCommaList<VstRepHint>(compound.repHints, printRepHint);
		}
		Terminal.put(" {\n");
		var list = compound.members;
		while (list != null) {
			printMember(list.head);
			list = list.tail;
		}
		Terminal.put("}\n");
	}
	def printMember(decl: VstMember) {
		if (VstField.?(decl)) printField(VstField.!(decl));
		else if (VstNew.?(decl)) printNew(VstNew.!(decl));
		else if (VstMethod.?(decl)) printMethod(VstMethod.!(decl));
	}
	def printMethod(mdecl: VstMethod) {
		space("method ");
		Terminal.put(mdecl.name());
		printTypeParams(mdecl.typeParams);
		Terminal.putc('(');
		printCommaList(mdecl.params.list, printParam);
		Terminal.putc(')');
		match (mdecl.rettype) {
			Void => ;
			This => Terminal.put(" -> this");
			Implicit(expr) => Terminal.put(" => "); // TODO
			Explicit(tref) => {
				Terminal.put(" -> ");
				printTypeRef(tref);
			}
		}
		printer.printVstMethod(mdecl);
	}
	def printNew(cdecl: VstNew) {
		space("new(");
		printCommaList(cdecl.params.list, printParam);
		Terminal.putc(')');
		printer.printVstMethod(cdecl);
	}
	def printParam(vdecl: ParamDecl) {
		Terminal.put(vdecl.name());
		if (vdecl.tref != null) {
			Terminal.put(": ");
			printTypeRef(vdecl.tref);
		}
	}
	def printField(fdecl: VstField) {
		match (fdecl.writability) {
			WRITEABLE => space("var ");
			PRIVATE_WRITEABLE => space("def var ");
			READ_ONLY => space("def ");
		}
		Terminal.put(fdecl.name());
		Terminal.put(": ");
		printTypeRef(fdecl.tref);
		printer.printVstField(fdecl);
	}
	def printTypeRef(tref: TypeRef) {
		if (tref == null) return Terminal.put("null");
		var buf = TerminalBuffer.new();
		tref.render(buf);
		buf.outt();
	}
	def printCommaList<T>(list: List<T>, print: T -> void) {
		var prev = false;
		while (list != null) {
			if (prev) Terminal.put(", ");
			print(list.head);
			list = list.tail;
			prev = true;
		}
	}
	def printTypeParams(list: List<TypeParamType>) {
		if (list != null) {
			Terminal.putc('<');
			printCommaList(list, printTypeParam);
			Terminal.putc('>');
		}
	}
	def printTypeParam(tparam: TypeParamType) {
		Terminal.put(tparam.token.image);
	}
	def printRepHint(repHint: VstRepHint) {
		match (repHint) {
			Boxed => Terminal.put("#boxed");
			Unboxed => Terminal.put("#unboxed");
			Packed => Terminal.put("#packed");
			Packing(p) => {
				Terminal.put("#packing ");
				printCommaList(p.list, printPackingExpr);
			}
			Other(s) => Terminal.put1("#%s", s);
		}
	}
	def printToken(t: Token) {
		Terminal.put1("%s", t.image);
	}
	def printPackingExpr(p: VstPackingExpr) {
		match (p) {
			Bits(token, b) => Terminal.put(token.image);
			Literal(e) => printer.printExpr(e, 0);
			App(p, args) => {
				Terminal.put1("%s(", p.ident.name.image);
				printCommaList(args.list, printPackingExpr);
				Terminal.put(")");
			}
			Solve(l) => {
				Terminal.put("#solve(");
				printCommaList(l.list, printPackingExpr);
				Terminal.put(")");
			}
			Concat(l) => {
				Terminal.put("#concat(");
				printCommaList(l.list, printPackingExpr);
				Terminal.put(")");
			}
			Field(f) => Terminal.put1("%s", f.ident.name.image);	
		}
	}
	def printPackingParam(param: PackingParamDecl) {
		Terminal.put2("%s: %s", param.token.image, param.size.token.image);
	}
	def printPacking(p: VstPacking) {
		Terminal.put1("packing %s(", p.token.image);
		printCommaList(p.pparams.list, printPackingParam);
		Terminal.put1("): %s = ", p.size.token.image);
		printPackingExpr(p.expr);
		Terminal.put(";\n");
	}
	def simple(name: string, indent: int) {
		enter(name, indent);
		exit();
	}
	def enter(name: string, indent: int) {
		Terminal.ln();
		for (i < indent) space(null);
		Terminal.put("(");
		Terminal.put(name);
	}
	def space(str: string) {
		Terminal.put("    ");
		if (str != null) Terminal.put(str);
	}
	def exit() {
		Terminal.put(")");
	}
}

class VstPrinter extends VstVisitor<int, void> {
	var p: Printer;
	new() { p = Printer.new(this); }
	def printVstMethod(mdecl: VstMethod) {
		if (mdecl.body != null) {
			mdecl.body.accept(this, 2);
			Terminal.ln();
		} else {
			Terminal.put(");");
		}
	}
	def printVstField(fdecl: VstField) {
		if (fdecl.init != null) {
			Terminal.put(" = ");
			fdecl.init.accept(this, 2);
		}
		if (fdecl.repHints != null) {
			Terminal.sp();
			p.printCommaList<VstRepHint>(fdecl.repHints, p.printRepHint);
		}
		Terminal.put(";\n");
	}
	def printProgram(prog: Program) {
		prog.vst.components.apply(p.printComponent);
		prog.vst.classes.apply(p.printClass);
		prog.vst.packings.apply(p.printPacking);
	}
	def visitIf(stmt: IfStmt, indent: int) {
		p.enter("IfStmt", indent);
		printExpr(stmt.cond, indent + 1);
		printStmt(stmt.tbranch, indent + 1);
		if (stmt.fbranch != null) printStmt(stmt.fbranch, indent + 1);
		p.exit();
	}
	def visitBlock(stmt: BlockStmt, indent: int) {
		p.enter("BlockStmt", indent);
		Lists.apply(stmt.stmts.list, printStmt(_, indent + 1));
		p.exit();
	}
	def visitWhile(stmt: WhileStmt, indent: int) {
		p.enter("WhileStmt", indent);
		printExpr(stmt.cond, indent + 1);
		printStmt(stmt.body, indent + 1);
		p.exit();
	}
	def visitFor(stmt: ForStmt, indent: int) {
		p.enter("ForStmt", indent);
		printVar(stmt.varDecl, indent + 1);
		printExpr(stmt.cond, indent + 1);
		printExpr(stmt.update, indent + 1);
		printStmt(stmt.body, indent + 1);
		p.exit();
	}
	def visitForLess(stmt: ForLessStmt, indent: int) {
		p.enter("ForLessStmt", indent);
		printVar(stmt.varDecl, indent + 1);
		printExpr(stmt.expr, indent + 1);
		printStmt(stmt.body, indent + 1);
		p.exit();
	}
	def visitForeach(stmt: ForeachStmt, indent: int) {
		p.enter("ForeachStmt", indent);
		printVar(stmt.varDecl, indent + 1);
		printExpr(stmt.expr, indent + 1);
		printStmt(stmt.body, indent + 1);
		p.exit();
	}
	def visitLocal(stmt: LocalStmt, indent: int) {
		p.enter("LocalStmt", indent);
		Lists.apply(stmt.vars, printVar(_, indent + 1));
		p.exit();
	}
	def visitBreak(stmt: BreakStmt, indent: int) {
		p.simple("BreakStmt", indent);
	}
	def visitContinue(stmt: ContinueStmt, indent: int) {
		p.simple("ContinueStmt", indent);
	}
	def visitExpr(stmt: ExprStmt, indent: int) {
		p.enter("ExprStmt", indent);
		printExpr(stmt.expr, indent + 1);
		p.exit();
	}
	def visitMatch(stmt: MatchStmt, indent: int) {
		p.enter("MatchStmt", indent);
		stmt.expr.accept(this, indent + 1);
		Lists.apply(stmt.cases.list, printCases(_, indent + 2));
		if (stmt.defcase != null) printCases(stmt.defcase, indent + 2);
		p.exit();
	}
	def visitEmpty(stmt: EmptyStmt, indent: int) {
		p.simple("EmptyStmt", indent);
	}
	def visitReturn(stmt: ReturnStmt, indent: int) {
		p.enter("ReturnStmt", indent);
		if (stmt.expr != null) printExpr(stmt.expr, indent + 1);
		p.exit();
	}
	def visitTuple(expr: TupleExpr, indent: int) {
		param("TupleExpr", null, expr.exprs.list, expr.exactType, expr.implicitType, indent);
	}
	def visitParamExpr(expr: ParamExpr, indent: int) {
		param("ParamExpr", null, null, expr.exactType, expr.implicitType, indent);
	}
	def visitArray(expr: ArrayExpr, indent: int) {
		param("ArrayExpr", null, expr.exprs.list, expr.exactType, expr.implicitType, indent);
	}
	def visitAutoExpr(expr: AutoExpr, indent: int) {
		param("AutoExpr", if(expr.post, "post", "pre"), List.new(expr.expr, null), expr.exactType, expr.implicitType, indent);
	}
	def visitIfExpr(expr: IfExpr, indent: int) {
		param("IfExpr", null, expr.exprs.list, expr.exactType, expr.implicitType, indent);
	}
	def visitFuncExpr(expr: FuncExpr, indent: int) {
		p.enter("FuncExpr ", indent);
		if (expr.name != null) Terminal.put1("\"%s\" ", expr.name.image);
		Terminal.putc('(');
		p.printCommaList(expr.params.list, p.printParam);
		Terminal.putc(')');
		match (expr.rettype) {
			Void => ;
			This => Terminal.put(" -> this");
			Implicit(expr) => Terminal.put(" => ");
			Explicit(tref) => {
				Terminal.put(" -> ");
				p.printTypeRef(tref);
			}
		}
		printStmt(expr.body, indent + 1);
		p.exit();
	}
	def visitVar(expr: VarExpr, indent: int) {
		var buffer = Strings.builderOf("VarExpr[").puts(expr.varbind.name).putc(']');
		var nested = if(expr.expr != null, Lists.cons1(expr.expr));
		param(buffer.toString(), expr.ident.name.image, nested, expr.exactType, expr.implicitType, indent);
	}
	def visitLiteral(expr: Literal, indent: int) {
		param("Literal", expr.token.image, null, expr.exactType, expr.implicitType, indent);
	}
	def visitString(expr: StringExpr, indent: int) {
		param("StringExpr", expr.token.image, null, expr.exactType, expr.implicitType, indent);
	}
	def visitApp(expr: AppExpr, indent: int) {
		param("AppExpr", null, List.new(expr.func, expr.args.exprs.list), expr.exactType, expr.implicitType, indent);
	}
	def visitIndex(expr: IndexExpr, indent: int) {
		var buf = StringBuilder.new();
		buf.put2("read=%s, write=%s", expr.read.name, expr.write.name);
		param("IndexExpr", buf.toString(), List.new(expr.expr, expr.exprs.list), expr.exactType, expr.implicitType, indent);
	}
	def visitRange(expr: RangeExpr, indent: int) {
		var str = if(expr.plus, "RangeExpr[..+]", "RangeExpr[...]");
		var end = if(expr.end != null, List<Expr>.new(expr.end, null));
		var list = List<Expr>.new(expr.expr, List.new(expr.start, end));
		param(str, null, list, expr.exactType, expr.implicitType, indent);
	}
	def visitNot(expr: NotExpr, indent: int) {
		param("NotExpr", null, Lists.cons1(expr.expr), expr.exactType, expr.implicitType, indent);
	}
	def visitBitwiseNeg(expr: BitwiseNegExpr, indent: int) {
		param("BitwiseNegExpr", null, Lists.cons1(expr.expr), expr.exactType, expr.implicitType, indent);
	}
	def visitNeg(expr: NegExpr, indent: int) {
		param("NegExpr", null, Lists.cons1(expr.expr), expr.exactType, expr.implicitType, indent);
	}
	def visitAssign(expr: AssignExpr, indent: int) {
		var infix = if(expr.infix != null, expr.infix.token.image);
		param("AssignExpr", infix, Lists.cons2(expr.target, expr.expr), expr.exactType, expr.implicitType, indent);
	}
	def visitBinOp(expr: BinOpExpr, indent: int) {
		param("BinOpExpr", expr.op.token.image, Lists.cons2(expr.left, expr.right), expr.exactType, expr.implicitType, indent);
	}
	def printStmt(stmt: Stmt, indent: int) {
		stmt.accept(this, indent);
	}
	def printExpr(expr: Expr, indent: int) {
		expr.accept(this, indent);
	}
	def printCases(c: MatchCase, indent: int) {
		if (c.patterns == null) p.simple("DefCase", indent);
		else Lists.apply(c.patterns.list, printPattern(_, indent));
		printStmt(c.stmt, indent);
	}
	def printPattern(c: MatchPattern, indent: int) {
		printExpr(c.expr, indent); // XXX: print parameters
	}
	def printVar(vdecl: VarDecl, indent: int) {
		var buf = StringBuilder.new();
		if (vdecl.tref != null) buf.put2("\"%s\": %q", vdecl.name(), vdecl.tref.render);
		else if (vdecl.vtype != null) buf.put2("\"%s\": %q", vdecl.name(), vdecl.vtype.render);
		else buf.put1("\"%s\"", vdecl.name());
		p.enter(buf.toString(), indent);
		if (vdecl.init != null) printExpr(vdecl.init, indent + 1);
		p.exit();
	}
	def param(name: string, param: string, list: List<Expr>, exactType: Type, implicitType: Type, indent: int) {
		var buffer = StringBuilder.new();
		buffer.puts(name);
		if (param != null) buffer.put1(" \"%s\"", param);
		if (exactType != null) buffer.put1(": %q", exactType.render);
		if (implicitType != null) buffer.put1(" implicitly %q", implicitType.render);
		p.enter(buffer.toString(), indent);
		Lists.apply(list, printExpr(_, indent + 1));
		p.exit();
	}
}
