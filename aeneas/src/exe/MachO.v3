// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Constants for the MachO binary format.
component MachO {
	def MH_MAGIC_32 = 0xFEEDFACE;
	def MH_MAGIC_64 = 0xFEEDFACF;

	// filetype field of mach header
	def MH_OBJECT		= 0x1; // relocatable object file
	def MH_EXECUTE		= 0x2; // demand paged executable file
	def MH_FVMLIB		= 0x3; // fixed VM shared library file
	def MH_CORE		= 0x4; // core file
	def MH_PRELOAD		= 0x5; // preloaded executable file
	def MH_DYLIB		= 0x6; // dynamically bound shared library
	def MH_DYLINKER		= 0x7; // dynamic link editor
	def MH_BUNDLE		= 0x8; // dynamically bound bundle file
	def MH_DYLIB_STUB	= 0x9; // shared library stub for static
	// linking only, no section contents
	def MH_DSYM		= 0xa; // companion file with only debug
	// sections
	def MH_KEXT_BUNDLE	= 0xb; // x86_64 kexts
	// thread state flavors
	def X86_64_THREAD_STATE_FLAVOR = 0x4; // 4

	// CPU types
	def CPU_TYPE_X86	= 0x00000007; // 7
	def CPU_TYPE_X86_64	= 0x01000007;
	def CPU_TYPE_ARM	= 0x0000000C; // 12
	def CPU_TYPE_POWERPC	= 0x00000012; // 18
	def CPU_TYPE_POWERPC_64	= 0x01000012;
	def CPU_SUBTYPE_X86_64  = 0x00000003; // 3

	// constants for protections
	def VM_PROT_READ    = 0x01;
	def VM_PROT_WRITE   = 0x02;
	def VM_PROT_EXECUTE = 0x04;
	def VM_PROT_RW      = 0x03;
	def VM_PROT_RX      = 0x05;
	def VM_PROT_RWX     = 0x07;
}
// represents the header of a MachO binary.
class MachO_Header(is64: bool) {
	def cmds = Vector<MachO_LoadCmd>.new();
	var cputype: int;
	var cpusubtype: int;
	var totalsize: int = if (is64, 32, 28);
	var cmdsize: int;
	var filetype: int;
	var flags: int;

	// encodes the header (only) of a MachO binary
	def encode(w: DataWriter) {
		if (is64) w.put_b32(MachO.MH_MAGIC_64);
		else w.put_b32(MachO.MH_MAGIC_32);
		w.put_b32(cputype);
		w.put_b32(cpusubtype);
		w.put_b32(filetype);
		w.put_b32(cmds.length);
		w.put_b32(cmdsize);
		w.put_b32(flags);
		if (is64) w.zeroN(4);
	}
	// encodes the commands into a MachO binary
	def encodeCmds(w: DataWriter) {
		// XXX: cmds.apply(MachO_LoadCmd.encode(_, is64, u));
		for (i < cmds.length) cmds[i].encode(is64, w);
	}
	// add a command to this header
	def addCmd(cmd: MachO_LoadCmd) {
		cmd.cmdoffset = totalsize;
		cmds.put(cmd);
		var s = cmd.size(is64);
		cmdsize = cmdsize + s;
		totalsize = totalsize + s;
	}
}
// base of all load commands.
class MachO_LoadCmd {
	var cmdoffset: int;
	def encode(is64: bool, u: DataWriter);
	def size(is64: bool) -> int;
}
// A load segment command
class MachO_SegmentLoad(segname: string) extends MachO_LoadCmd {
	var vmaddr: int;
	var vmsize: int;
	var fileoff: int;
	var filesize: int;
	var maxprot: int;
	var initprot: int;
	var nsects: int;
	var flags: int;
	var sectList: List<MachO_Section>;

	def encode(is64: bool, w: DataWriter) {
		var start = w.pos;
		if (is64) w.put_b32(0x19);
		else w.put_b32(0x1);
		var sizePos = w.pos;
		w.put_b32(0);
		out16(w, segname);
		if (is64) {
			w.put_b64(vmaddr);
			w.put_b64(vmsize);
			w.put_b64(fileoff);
			w.put_b64(filesize);
		} else {
			w.put_b32(vmaddr);
			w.put_b32(vmsize);
			w.put_b32(fileoff);
			w.put_b32(filesize);
		}
		w.put_b32(maxprot);
		w.put_b32(initprot);
		w.put_b32(nsects);
		w.put_b32(flags);
		for (l = sectList; l != null; l = l.tail) {
			l.head.encode(is64, w, this);
		}
		var diff = w.pos - start;
		//write the size of the command and go back
		w.at(sizePos).put_b32(diff);
		w.at(start + diff);
	}
	def size(is64: bool) -> int {
		return if (is64, 72, 56);
	}
	def addSect(sect: MachO_Section) {
		nsects++;
		sectList = List.new(sect, sectList);
	}
	def out16(w: DataWriter, str: string) {
		if (str.length > 16) {
			w.putr(str[0 ... 16]);
		} else {
			w.puta(str);
			w.zeroN(16 - str.length);
		}
	}
}
// A section within a segment
class MachO_Section(sectname: string, segname: string) {
	var addr: int;
	var size: int;
	var offset: int;
	var align: int;
	var reloff: int;
	var nreloc: int;
	var flags: int;
	var reserved1: int;
	var reserved2: int;

	def encode(is64: bool, w: DataWriter, seg: MachO_SegmentLoad) {
		seg.out16(w, sectname);
		seg.out16(w, segname);
		if (is64) {
			w.put_b64(addr);
			w.put_b64(size);
		} else {
			w.put_b32(addr);
			w.put_b32(size);
		}
		w.put_b32(offset);
		w.put_b32(align);
		w.put_b32(reloff);
		w.put_b32(nreloc);
		w.put_b32(flags);
		w.put_b32(reserved1);
		w.put_b32(reserved2);
		if (is64) w.zeroN(4);
	}
}
