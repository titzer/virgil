// Copyright 2012 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Constants associated with ELF files
component ElfConst {
	// constants for ElfHeader.e_machine
	def EM_NONE = 0u8;
	def EM_386 = 3u8;
	def EM_MIPS = 8u8;
	def EM_PPC = 20u8;
	def EM_PPC64 = 21u8;
	def EM_ARM = 40u8;
	def EM_X86_64 = 62u8;
	def EM_AARCH64 = 183u8;
	def EM_RISCV = 243u8;

	// constants for ElfProgramHeader.p_flags
	def PF_R = 0x4u;
	def PF_W = 0x2u;
	def PF_X = 0x1u;
	def PF_RX = 0x5u;
	def PF_RW = 0x6u;
	def PF_RWX = 0x7u;
	// constants for symbol type
	def STT_OBJECT = '\x01';
	def STT_FUNC = '\x02';
	def STT_SECTION = '\x03';
	def STT_FILE = '\x04';
	// constants for symbol binding
	def STB_LOCAL = '\x00';
	def STB_GLOBAL = '\x10';
	def STB_WEAK = '\x20';
	// constants for section header flags
	def SHF_WRITE = '\x01';
	def SHF_ALLOC = '\x02';
	def SHF_EXECINSTR = '\x04';
}

// Represents the header of an ELF file, including both section headers and program headers.
class ElfHeader {
	def pheaders = Vector<ElfProgramHeader>.new();
	def sheaders = Vector<ElfSectionHeader>.new();

	var e_type = ElfType.ET_EXEC;
	var e_entry: long;
	var e_flags: u32;
	var e_machine: u8;
	var e_shstrndx: u16;

	def encode(w: DataWriter) {
		if (is64()) encode64(w);
		else encode32(w);
	}
	def encode32(w: DataWriter) {
		// encode the header
		var l = Ref<Elf32le_Header>.of(w.acquire(Elf32le_Header.size));
		l.magic 		= ElfMagic.EI_MAGIC.code;
		l.ei_class 		= ElfClass.ELFCLASS32.code;
		l.ei_data 		= ElfData.ELFDATA2LSB.code;
		l.ei_version 		= 1;
		l.e_type 		= this.e_type.code;
		l.e_machine 		= this.e_machine;
		l.e_version 		= 1;
		l.e_entry 		= u32.!(this.e_entry);
		l.e_phoff 		= u32.!(e_phoff());
		l.e_shoff 		= u32.!(e_shoff());
		l.e_flags 		= this.e_flags;
		l.e_phentsize 		= u16.!(Elf32le_ProgramHeader.size);
		l.e_ehsize 		= u16.!(Elf32le_Header.size);
		l.e_phnum 		= u16.!(pheaders.length);
		l.e_shentsize 		= u16.!(Elf32le_SectionHeader.size);
		l.e_shnum 		= u16.!(sheaders.length);
		l.e_shstrndx 		= this.e_shstrndx;
		// encode the program and section headers
		for (i < pheaders.length) pheaders[i].encode32(w);
		for (i < sheaders.length) sheaders[i].encode32(w);
	}
	def encode64(w: DataWriter) {
		// encode the header
		var l = Ref<Elf64le_Header>.of(w.acquire(Elf64le_Header.size));
		l.magic 		= ElfMagic.EI_MAGIC.code;
		l.ei_class 		= ElfClass.ELFCLASS64.code;
		l.ei_data 		= ElfData.ELFDATA2LSB.code;
		l.ei_version 		= 1;
		l.e_type 		= this.e_type.code;
		l.e_machine 		= this.e_machine;
		l.e_version 		= 1;
		l.e_entry 		= u64.!(this.e_entry);
		l.e_phoff 		= u64.!(e_phoff());
		l.e_shoff 		= u64.!(e_shoff());
		l.e_flags 		= this.e_flags;
		l.e_phentsize 		= u16.!(Elf64le_ProgramHeader.size);
		l.e_ehsize 		= u16.!(Elf64le_Header.size);
		l.e_phnum 		= u16.!(pheaders.length);
		l.e_shentsize 		= u16.!(Elf64le_SectionHeader.size);
		l.e_shnum 		= u16.!(sheaders.length);
		l.e_shstrndx 		= this.e_shstrndx;
		// encode the program and section headers
		for (i < pheaders.length) pheaders[i].encode64(w);
		for (i < sheaders.length) sheaders[i].encode64(w);
	}
	def e_phoff() -> long {
		return if(is64(), Elf64le_Header.size, Elf32le_Header.size);
	}
	def e_shoff() -> long {
		var e_phentsize = if(is64(), Elf64le_ProgramHeader.size, Elf32le_ProgramHeader.size);
		return if(sheaders.length != 0, e_phoff() + pheaders.length * e_phentsize);
	}
	def size() -> long {
		if (is64()) {
			return Elf64le_Header.size + pheaders.length * Elf64le_ProgramHeader.size
				+ sheaders.length * Elf64le_SectionHeader.size;
		} else {
			return Elf32le_Header.size + pheaders.length * Elf32le_ProgramHeader.size
				+ sheaders.length * Elf32le_SectionHeader.size;
		}
	}
	def addProgramHeader() -> ElfProgramHeader {
		var h = ElfProgramHeader.new();
		pheaders.put(h);
		return h;
	}
	def is64() -> bool {
		match (e_machine) {
			ElfConst.EM_PPC64,
			ElfConst.EM_X86_64,
			ElfConst.EM_AARCH64,
			ElfConst.EM_RISCV => return true;
			_ => return false;
		}
	}
}
// Represents a program header entry; executable information for segments
class ElfProgramHeader {
	var p_type: ElfPhType;
	var p_flags: u32;
	var p_offset: long;
	var p_vaddr: long;
	var p_paddr: long;
	var p_filesz: long;
	var p_memsz: long;
	var p_align: long;

	def encode32(w: DataWriter) {
		var l = Ref<Elf32le_ProgramHeader>.of(w.acquire(Elf32le_ProgramHeader.size));
		l.p_type 	= this.p_type.code;
		l.p_offset 	= u32.!(this.p_offset);
		l.p_vaddr 	= u32.!(this.p_vaddr);
		l.p_filesz	= u32.!(this.p_filesz);
		l.p_memsz	= u32.!(this.p_memsz);
		l.p_flags	= this.p_flags;
		l.p_align	= u32.!(this.p_align);
	}
	def encode64(w: DataWriter) {
		var l = Ref<Elf64le_ProgramHeader>.of(w.acquire(Elf64le_ProgramHeader.size));
		l.p_type 	= this.p_type.code;
		l.p_offset 	= u32.!(this.p_offset);
		l.p_vaddr 	= u64.!(this.p_vaddr);
		l.p_filesz	= u64.!(this.p_filesz);
		l.p_memsz	= u64.!(this.p_memsz);
		l.p_flags	= this.p_flags;
		l.p_align	= u64.!(this.p_align);
	}
}
// Represents a section header entry; symbolic information for segments
class ElfSectionHeader {
	var index: int;
	var sh_name: int;
	var sh_type: ElfShType;
	var sh_flags: u32;
	var sh_addr: long;
	var sh_offset: long;
	var sh_size: long;
	var sh_link: int;
	var sh_info: u32;
	var sh_addralign: long;
	var sh_entsize: long;

	def encode32(w: DataWriter) {
		var l = Ref<Elf32le_SectionHeader>.of(w.acquire(Elf32le_SectionHeader.size));
		l.sh_name 	= u32.!(this.sh_name);
		l.sh_type 	= this.sh_type.code;
		l.sh_flags 	= this.sh_flags;
		l.sh_addr 	= u32.!(this.sh_addr);
		l.sh_offset 	= u32.!(this.sh_offset);
		l.sh_size 	= u32.!(this.sh_size);
		l.sh_link 	= u32.!(this.sh_link);
		l.sh_info 	= this.sh_info;
		l.sh_addralign 	= u32.!(this.sh_addralign);
		l.sh_entsize 	= u32.!(this.sh_entsize);
	}
	def encode64(w: DataWriter) {
		var l = Ref<Elf64le_SectionHeader>.of(w.acquire(Elf64le_SectionHeader.size));
		l.sh_name 	= u32.!(this.sh_name);
		l.sh_type 	= this.sh_type.code;
		l.sh_flags 	= this.sh_flags;
		l.sh_addr 	= u64.!(this.sh_addr);
		l.sh_offset 	= u64.!(this.sh_offset);
		l.sh_size 	= u64.!(this.sh_size);
		l.sh_link 	= u32.!(this.sh_link);
		l.sh_info 	= this.sh_info;
		l.sh_addralign 	= u64.!(this.sh_addralign);
		l.sh_entsize 	= u64.!(this.sh_entsize);
	}
}
class ElfSymbol {
	var st_name: int;
	var st_info: byte;
	var st_other: byte;
	var st_index: u16;
	var st_value: long;
	var st_size: long;

	def encode32(w: DataWriter) {
		var l = Ref<Elf32le_Symbol>.of(w.acquire(Elf32le_Symbol.size));
		l.st_name	= u32.!(this.st_name);
		l.st_value	= u32.!(this.st_value);
		l.st_size	= u32.!(this.st_size);
		l.st_info	= this.st_info;
		l.st_other	= this.st_other;
		l.st_index	= u16.!(this.st_index);
	}
	def encode64(w: DataWriter) {
		var l = Ref<Elf64le_Symbol>.of(w.acquire(Elf64le_Symbol.size));
		l.st_name	= u32.!(this.st_name);
		l.st_value	= u64.!(this.st_value);
		l.st_size	= u64.!(this.st_size);
		l.st_info	= this.st_info;
		l.st_other	= this.st_other;
		l.st_shndx	= u16.!(this.st_index);
	}
}
