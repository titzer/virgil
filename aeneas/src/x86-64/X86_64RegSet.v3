// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Register allocator configuration for X86-64.
component X86_64RegSet {
	private def GPR_COUNT = 14;
	private def XMM_COUNT = 15;
	private def ALL_COUNT = 41;

	private def ALL_ARRAY = Array<Array<byte>>.new(ALL_COUNT);
	private def ALL_NAMES = Array<Array<byte>>.new(ALL_COUNT);
	private def GPR_ARRAY = Array<byte>.new(GPR_COUNT);
	private def XMM_ARRAY = Array<byte>.new(XMM_COUNT);
	private def GPR_REGS = Array<X86_64Gpr>.new(GPR_COUNT + 1 /*one unallocatable*/);
	private def XMM_REGS = Array<X86_64Xmmr>.new(XMM_COUNT + 1 /*one unallocatable*/);

	private var cursor = 1;
	private var gpr_start = cursor;
	def RAX = gpr("rax", X86_64Regs.RAX, true);
	def RCX = gpr("rcx", X86_64Regs.RCX, true);
	def RDX = gpr("rdx", X86_64Regs.RDX, true);
	def RBX = gpr("rbx", X86_64Regs.RBX, true);
	def RSI = gpr("rsi", X86_64Regs.RSI, true);
	def RDI = gpr("rdi", X86_64Regs.RDI, true);
	def R8  = gpr("r8",  X86_64Regs.R8,  true);
	def R9  = gpr("r9",  X86_64Regs.R9,  true);
	def R10 = gpr("r10", X86_64Regs.R10, true);
	def R11 = gpr("r11", X86_64Regs.R11, true);
	def R12 = gpr("r12", X86_64Regs.R12, true);
	def R13 = gpr("r13", X86_64Regs.R13, true);
	def R14 = gpr("r14", X86_64Regs.R14, true);
	def R15 = gpr("r15", X86_64Regs.R15, true);
	def RBP = gpr("rbp", X86_64Regs.RBP, false);

	private var xmm_start = cursor;
	def XMM0  = xmm("xmm0",  X86_64Regs.XMM0,  true);
	def XMM1  = xmm("xmm1",  X86_64Regs.XMM1,  true);
	def XMM2  = xmm("xmm2",  X86_64Regs.XMM2,  true);
	def XMM3  = xmm("xmm3",  X86_64Regs.XMM3,  true);
	def XMM4  = xmm("xmm4",  X86_64Regs.XMM4,  true);
	def XMM5  = xmm("xmm5",  X86_64Regs.XMM5,  true);
	def XMM6  = xmm("xmm6",  X86_64Regs.XMM6,  true);
	def XMM8  = xmm("xmm8",  X86_64Regs.XMM8,  true);
	def XMM9  = xmm("xmm9",  X86_64Regs.XMM9,  true);
	def XMM10 = xmm("xmm10", X86_64Regs.XMM10, true);
	def XMM11 = xmm("xmm11", X86_64Regs.XMM11, true);
	def XMM12 = xmm("xmm12", X86_64Regs.XMM12, true);
	def XMM13 = xmm("xmm13", X86_64Regs.XMM13, true);
	def XMM14 = xmm("xmm14", X86_64Regs.XMM14, true);
	def XMM15 = xmm("xmm15", X86_64Regs.XMM15, true);
	def XMM7  = xmm("xmm7",  X86_64Regs.XMM7,  false);
	def PHYS_COUNT = cursor;

	def RAX_RDX = set("{rax,rdx}", [RAX, RDX]);
	def NOT_RDX = set("~{rdx}", [RAX, RBX, RCX, RSI, RDI, R8, R9, R10, R11, R12, R13, R14]);
	def NOT_RCX = set("~{rcx}", [RAX, RBX, RDX, RSI, RDI, R8, R9, R10, R11, R12, R13, R14]);
	def NOT_RAX = set("~{rax}", [RBX, RCX, RDX, RSI, RDI, R8, R9, R10, R11, R12, R13, R14]);
	def NOT_RAX_RDX = set("~{rax,rdx}", [RBX, RCX, RSI, RDI, R8, R9, R10, R11, R12, R13, R14]);
	def NOT_PARAM = set("~{param}", [RAX, RBX, R10, R11, R12, R13, R14]);
	def GPR_CLASS = set("{gpr}", GPR_ARRAY);
	def XMM_CLASS = set("{xmm}", XMM_ARRAY);
	def ALL = set("{all}", Arrays.concat(GPR_ARRAY, XMM_ARRAY));

	def SCRATCH_GPR = R15;

	// XXX: enough spill slots to not use the 31st bit
	def CALLER_SPILL_START = 100000000;
	def CALLEE_SPILL_START = 200000000;

	private var rclasses = mapRegClasses([
		(RegClass.REF, GPR_CLASS),
		(RegClass.I32, GPR_CLASS),
		(RegClass.I64, GPR_CLASS),
		(RegClass.F32, XMM_CLASS),
		(RegClass.F64, XMM_CLASS)
	]);

	private var tmps = mapRegClasses([
		(RegClass.REF, R15),
		(RegClass.I32, R15),
		(RegClass.I64, R15),
		(RegClass.F32, XMM7),
		(RegClass.F64, XMM7)
	]);

	def SET = MachRegSet.new(PHYS_COUNT, ALL_ARRAY, ALL_NAMES, rclasses, tmps,
		CALLER_SPILL_START, CALLEE_SPILL_START);

	private def mapRegClasses(v: Array<(RegClass, byte)>) -> Array<byte> {
		var result = Array<byte>.new(5); // XXX: number of reg classes
		for (t in v) result[t.0.tag] = t.1;
		return result;
	}

	private def gpr(name: string, r: X86_64Gpr, allocatable: bool) -> byte {
		var index = byte.view(cursor++), pos = index - gpr_start;
		GPR_REGS[pos] = r;
		if (allocatable) GPR_ARRAY[pos] = index;
		ALL_ARRAY[index] = [index];
		ALL_NAMES[index] = name;
		return index;
	}
	private def xmm(name: string, r: X86_64Xmmr, allocatable: bool) -> byte {
		var index = byte.view(cursor++), pos = index - xmm_start;
		XMM_REGS[pos] = r;
		if (allocatable) XMM_ARRAY[pos] = index;
		ALL_ARRAY[index] = [index];
		ALL_NAMES[index] = name;
		return index;
	}
	private def set(name: string, a: Array<byte>) -> byte {
		var index = byte.view(cursor++);
		ALL_ARRAY[index] = a;
		ALL_NAMES[index] = name;
		return index;
	}
	private def unalloc(name: string) -> byte {
		var index = byte.view(cursor++);
		ALL_ARRAY[index] = [index];
		ALL_NAMES[index] = name;
		return index;
	}
	def toGpr(loc: int) -> X86_64Gpr {
		var rel = loc - RAX;
		return if(u32.view(rel) < GPR_REGS.length, GPR_REGS[rel]);
	}
	def toXmmr(loc: int) -> X86_64Xmmr {
		var rel = loc - XMM0;
		return if(u32.view(rel) < XMM_REGS.length, XMM_REGS[rel]);
	}
}
// Defines the standard parameter and return registers for X86_64 calls between Virgil methods.
component X86_64VirgilCallConv {
	def R: X86_64RegSet;
	def PARAM_GPRS = [R.RDI, R.RSI, R.RDX, R.RCX, R.R8, R.R9]; 			// System-V
	def PARAM_XMMS = [R.XMM0, R.XMM1, R.XMM2, R.XMM3, R.XMM4, R.XMM5, R.XMM6];	// System-V - 1
	def RET_GPRS = [R.RAX, R.RDX, R.RCX, R.RSI]; 					// System-V + 2
	def RET_XMMS = [R.XMM0, R.XMM1];						// System-V

	private def compute(mach: MachProgram, paramTypes: Array<Type>, returnTypes: Array<Type>) -> MachCallConv {
		// XXX: align spill slots to word boundary?
		var pt = alloc(mach, paramTypes, PARAM_GPRS, PARAM_XMMS);
		var ploc = pt.0, pspill = pt.1;
		var rt = alloc(mach, returnTypes, RET_GPRS, RET_XMMS);
		var rloc = rt.0, rspill = rt.1;
		if (returnTypes.length == 0) rloc = [RET_GPRS[0]]; // TODO: workaround for 0-length returns
		if (pspill > rspill) rspill = pspill;
		return MachCallConv.new(R.SET, paramTypes, ploc, returnTypes, rloc, rspill);
	}
	def alloc(mach: MachProgram, types: Array<Type>, gpr: Array<byte>, xmm: Array<byte>) -> (Array<int>, int) {
		var S = R.SET.spillStart;
		var loc = Array<int>.new(types.length);
		var pspill = 0, iprm = 0, fprm = 0;
		for (i < loc.length) {
			// XXX: allocate 4-byte slots?
			match (mach.toRegClass(types[i])) {
				I32, REF, I64 => {
					if (iprm < gpr.length) loc[i] = gpr[iprm++];
					else loc[i] = S + pspill++;
				}
				F64, F32 => {
					if (fprm < xmm.length) loc[i] = xmm[fprm++];
					else loc[i] = S + pspill++;
				}
			}
		}
		return (loc, pspill);
	}
	def getForGraph(mach: MachProgram, graph: SsaGraph) -> MachCallConv { // XXX: put Signature in SsaGraph
		return compute(mach, Arrays.map(graph.params, SsaParam.vtype), Tuple.toTypeArray(graph.returnType));
	}
	def getForFunc(mach: MachProgram, funcRep: Mach_FuncRep) -> MachCallConv {
		if (funcRep.callConv != null) return funcRep.callConv;
		return funcRep.callConv = compute(mach, funcRep.paramTypes, funcRep.returnTypes);
	}
}
