// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def SPACE = AddressSpace.new("mem", false, 64, 8,
	Alignment.new(4096), Alignment.new(8));
def KERNEL_CALL_RETURN = Tuple.newType(Lists.cons2(Long.TYPE, Long.TYPE));
def X86_64_LINUX_TARGET = Aeneas.registerTarget(
		LinuxTarget.new("x86-64-linux", SPACE, IntNormalizers.I64LE, X86_64Common.LOWERING,
			X86_64LinuxBackend.new(_, _, _, _, _, false), ElfConst.EM_X86_64,
			KERNEL_CALL_RETURN));
def X86_64_LINUX_TEST_TARGET = Aeneas.registerTarget(
		LinuxTarget.new("x86-64-linux-test", SPACE, IntNormalizers.I64LE, X86_64Common.LOWERING,
			X86_64LinuxBackend.new(_, _, _, _, _, true), ElfConst.EM_X86_64,
			KERNEL_CALL_RETURN));

def Regs: X86_64Regs;
def MRegs: X86_64RegSet;


// Provides the x86-64-specific logic for generating a Linux binary.
class X86_64LinuxBackend extends X86_64Backend {
	def SYSNUM = Regs.RAX;
	def PARAM0 = Regs.RDI;
	def PARAM1 = Regs.RSI;
	def PARAM2 = Regs.RDX;
	def PARAM3 = Regs.R10;
	def PARAM4 = Regs.R8;
	def PARAM5 = Regs.R9;

	new(compiler: Compiler, prog: Program, mach: MachProgram, w: MachDataWriter, dwarf: Dwarf,
		test: bool) super(compiler, prog, mach, w, dwarf, test) { }
	def asm_exit_r(r: X86_64Gpr) {
		asm.movq_r_r(PARAM0, r);
		asm.movd_r_i(SYSNUM, 60);
		asm.syscall();
	}
	def asm_exit_code(code: int) {
		asm.movd_r_i(SYSNUM, 60);
		asm.movd_r_i(PARAM0, code);
		asm.syscall();
	}
	def genTestOutput(main: IrMethod, frame: MachFrame) {
		// output the return register as a 4-byte integer to stdout
		var rt = main.sig.returnType();
		var gpr = loc_gpr(frame, frame.conv.callerRet(0));
		match (rt) { // sign- or zero-extend subword return values
			x: IntType => if (x.width < 32) {
				if (x.signed) {
					if (x.width <= 8) asm.movbsx_r_r(gpr, gpr);
					else if (x.width <= 16) asm.movwsx_r_r(gpr, gpr);
				} else {
					if (x.width <= 8) asm.movbzx_r_r(gpr, gpr);
					else if (x.width <= 16) asm.movwzx_r_r(gpr, gpr);
				}
			}
			_ => match (mach.sizeOf(rt)) {
				0 => asm.movd_r_i(gpr, 0);
				1 => asm.movbzx_r_r(gpr, gpr);
				2 => asm.movwzx_r_r(gpr, gpr);
			}
		}
		asm.pushq_r(gpr);
		asm.movd_r_i(SYSNUM, 1);	// sys_write() = 1
		asm.movd_r_i(PARAM0, 1);	// stdout
		asm.movq_r_r(PARAM1, Regs.RSP);	// integer is on stack
		asm.movd_r_i(PARAM2, 4);	// size to write
		asm.syscall();
	}
	def genSignalHandlerStub() {
		var handler_meth = mach.runtime.getRiSignal();
		if (handler_meth == null) return;
		var frame = getFrame(handler_meth.ssa);
		mach.runtime.bindAddr(CiRuntimeModule.SIGNAL_STUB, w);

		// save RBP; V3 execution uses it as scratch
		asm.pushq_r(Regs.RBP);
		// from kernel:
		asm.pushq_r(Regs.RDX); // ucontext
		asm.pushq_r(Regs.RSI); // siginfo
		asm.pushq_r(Regs.RDI); // signal number
		// "this" = null
		asm.movd_r_i(MRegs.toGpr(frame.conv.calleeParam(0)), 0); // "this" = null
		// param 1 = signum
		asm.popq_r(MRegs.toGpr(frame.conv.calleeParam(1)));
		// param 2 = siginfo
		asm.popq_r(MRegs.toGpr(frame.conv.calleeParam(2)));
		// param 3 = ucontext
		asm.popq_r(MRegs.toGpr(frame.conv.calleeParam(3)));

		// call RiRuntime.signal(signum: int, siginfo: Pointer, ucontext: Pointer)
		asm.callr_v3(mach.addrOfMethod(handler_meth));
		// RiRuntime.signal may return
		asm.popq_r(Regs.RBP);
		asm.ret();
		// restorer stub for X86-64
		mach.runtime.bindAddr(CiRuntimeModule.SIGNAL_RESTORER, w);
		asm.movd_r_i(SYSNUM, 15);	// sys_rt_sigreturn() = 15
		asm.syscall();
	}
	def genFatalStub(ex: string, addr: Addr) {
		// 1. encode a call to write() on stderr
		var msgAddr = Addr.new(mach.codeRegion, null, 0);
		asm.movd_r_i(SYSNUM, 1);			// sys_write() = 1
		asm.movd_r_i(PARAM0, 2);			// stderr
		asm.lea(PARAM1, X86_64AddrRef.new(null, null, 1, msgAddr, false));	// buffer
		asm.movd_r_i(PARAM2, ex.length + 1);		// write size
		asm.syscall();
		// 2. encode a call to exit()
		asm_exit_code(-1);
		// 3. output message at end of code
		w.bind(msgAddr);
		w.putb('!');
		w.puta(ex);
		w.atEnd();
	}
	def genSigHandlerInstall(signo: int, handler: Addr) {
		// XXX: reduce duplication with RiOS.installHandler
		// construct sigaction (in reverse order) on the stack
		asm.pushq_i(0); // sa_mask
		asm.pushq_i(0x08000000); // sa_restorer (fatal signal handlers never return)
		asm.pushq_i(0x04000000); // sa_flags
		asm.lea(Regs.RBP, X86_64AddrRef.new(null, null, 1, handler, false)); // XXX: pushq_i with patch
		asm.pushq_r(Regs.RBP); // sa_handler
		def struct_size = 4 * 8;

		asm.movd_r_i(SYSNUM, 13);	// sys_rt_sigaction() = 13
		asm.movd_r_i(PARAM0, signo);	// signo
		asm.movq_r_r(PARAM1, Regs.RSP);	// sigaction*
		asm.movd_r_i(PARAM2, 0);	// old sigaction*
		asm.movd_r_i(PARAM3, 8);	// sigsetsize
		asm.syscall();
		asm.add_r_i(Regs.RSP, struct_size);
	}
}
