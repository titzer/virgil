// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Built-in Virgil system calls.
enum SystemCall(eval: (SystemCallState, Arguments) -> Result, paramTypes: Array<Type>, returnType: Type) {
	chmod(		SystemCallState.chmod,		[V3.stringType, Int.TYPE], Void.TYPE),
	fileOpen(	SystemCallState.fileOpen,	[V3.stringType, Bool.TYPE], Int.TYPE),
	fileClose(	SystemCallState.fileClose,	Int.ARRAY_T, Void.TYPE),
	fileRead(	SystemCallState.fileRead,	Int.ARRAY_T, Int.TYPE),
	fileReadK(	SystemCallState.fileReadK,	[Int.TYPE, V3.stringType, Int.TYPE, Int.TYPE], Int.TYPE),
	fileWriteK(	SystemCallState.fileWriteK,	[Int.TYPE, V3.stringType, Int.TYPE, Int.TYPE], Void.TYPE),
	fileLeft(	SystemCallState.fileLeft,	Int.ARRAY_T, Int.TYPE),
	fileLoad(	SystemCallState.fileLoad,	[V3.stringType], V3.stringType),
	read(		SystemCallState.read,		[Int.TYPE, V3.rangeByteType], Int.TYPE),
	write(		SystemCallState.write,		[Int.TYPE, V3.rangeByteType], Int.TYPE),
	putc(		SystemCallState.putc,		[Byte.TYPE], Void.TYPE),
	puti(		SystemCallState.puti,		Int.ARRAY_T, Void.TYPE),
	puts(		SystemCallState.puts,		[V3.stringType], Void.TYPE),
	ln(		SystemCallState.ln,		TypeUtil.NO_TYPES, Void.TYPE),
	error(		SystemCallState.error,		[V3.stringType, V3.stringType], Void.TYPE),
	ticksMs(	SystemCallState.ticksMs,	TypeUtil.NO_TYPES, Int.TYPE),
	ticksUs(	SystemCallState.ticksUs,	TypeUtil.NO_TYPES, Int.TYPE),
	ticksNs(	SystemCallState.ticksNs,	TypeUtil.NO_TYPES, Int.TYPE),
}

// Representation of the "System" component which provides system calls
// like opening a file, performing IO, etc
component SystemCalls {
	def map = Strings.newMap<Operator>();
	def TYPECON = System_TypeCon.new();

	new() {
		for (syscall in SystemCall) map[syscall.name] = V3Op.newSystemCall(syscall, syscall.paramTypes, syscall.returnType);
	}
	def install(prog: Program) {
		prog.typeEnv.add(TYPECON);
	}
}

// The runtime state of the system module.
class SystemCallState {
	private def openFiles = Array<int>.new(128);

	new() { clear(); }

	// @System.chmod
	def chmod(args: Arguments) -> Result {
		System.chmod(args.s(0), args.i(1));
		return Values.BOTTOM;
	}
	// @System.fileOpen
	def fileOpen(args: Arguments) -> Box<int> {
		var sysfd = System.fileOpen(args.s(0), args.z(1));
		return Int.box(acquireFileID(sysfd));
	}
	// @System.fileClose
	def fileClose(args: Arguments) -> Val {
		var fd = args.i(0);
		System.fileClose(getSystemFileID(fd));
		releaseFileID(fd);
		return Values.BOTTOM;
	}
	// @System.fileRead
	def fileRead(args: Arguments) -> Val {
		return Int.box(System.fileRead(getSystemFileID(args.i(0))));
	}
	// @System.fileWriteK
	def fileWriteK(args: Arguments) -> Result {
		var start = args.i(2), len = args.i(3);
		if (start < 0) return args.throw(V3Exception.BoundsCheck, null);
		var array = args.s(1);
		if (array == null) return args.throw(V3Exception.NullCheck, null);
		if (start > array.length) return args.throw(V3Exception.BoundsCheck, null);
		var end = u32.view(start) + u32.view(len);
		if (end > u32.view(array.length)) return args.throw(V3Exception.BoundsCheck, null);
		System.fileWriteK(getSystemFileID(args.i(0)), array, start, len);
		return Values.BOTTOM;
	}
	// @System.fileReadK
	def fileReadK(args: Arguments) -> Result {
		var start = args.i(2), len = args.i(3);
		if (start < 0) return args.throw(V3Exception.BoundsCheck, null);
		var record = Record.!(args.vals[1]);
		if (record == null) return args.throw(V3Exception.NullCheck, null);
		if (start > record.values.length) return args.throw(V3Exception.BoundsCheck, null);
		var end = u32.view(start) + u32.view(len);
		if (end > u32.view(record.values.length)) return args.throw(V3Exception.BoundsCheck, null);
		var fd = getSystemFileID(args.i(0));
		for (i = start; i < end; i++) {
			var b = System.fileRead(fd);
			if (b < 0) return Int.box(i - start);
			record.values[i] = Int.box(b);
		}
		return Int.box(len);
	}
	// @System.fileLoad
	def fileLoad(args: Arguments) -> Record {
		var prog = args.getProgram();
		return Byte.boxString(System.fileLoad(args.s(0)), prog);
	}
	// @System.fileLeft
	def fileLeft(args: Arguments) -> Val {
		return Int.box(System.fileLeft(getSystemFileID(args.i(0))));
	}
	// @System.read
	def read(args: Arguments) -> Result {
		var fd = getSystemFileID(args.i(0));
		var ra = args.ra(1);
		if (ra == null || ra.array == null) return args.throw(V3Exception.NullCheck, null);
		var buf = Array<byte>.new(ra.length); // XXX: avoid copy by representing byte arrays as byte arrays
		System.fileReadK(fd, buf, 0, buf.length);
		for (i < buf.length) ra.array.values[ra.start + i] = Byte.box(buf[i]); // TODO: partial reads
		return Int.box(buf.length);
	}
	// @System.write
	def write(args: Arguments) -> Result {
		var fd = getSystemFileID(args.i(0));
		var ra = args.ra(1);
		if (ra == null || ra.array == null) return args.throw(V3Exception.NullCheck, null);
		var buf = Array<byte>.new(ra.length); // XXX: avoid copy by representing byte arrays as byte arrays
		for (i < buf.length) buf[i] = Byte.unbox(ra.array.values[ra.start + i]);
		System.fileWriteK(fd, buf, 0, buf.length);
		return Int.box(buf.length); // TODO: partial writes
	}
	// @System.putc
	def putc(args: Arguments) -> Val {
		Terminal.putc(args.b(0));
		return Values.BOTTOM;
	}
	// @System.puti
	def puti(args: Arguments) -> Val {
		Terminal.putd(args.i(0));
		return Values.BOTTOM;
	}
	// @System.puts
	def puts(args: Arguments) -> Val {
		System.puts(args.s(0));
		return Values.BOTTOM;
	}
	// @System.ln
	def ln(args: Arguments) -> Val {
		Terminal.ln();
		return Values.BOTTOM;
	}
	// @System.error
	def error(args: Arguments) -> Exception {
		var ekind = args.s(0);
		var msg = args.s(1);
		return args.throw(ekind, msg);
	}
	// @System.ticksMs
	def ticksMs(args: Arguments) -> Val {
		return Int.box(System.ticksMs());
	}
	// @System.ticksUs
	def ticksUs(args: Arguments) -> Val {
		return Int.box(System.ticksUs());
	}
	// @System.ticksNs
	def ticksNs(args: Arguments) -> Val {
		return Int.box(System.ticksNs());
	}
	private def acquireFileID(sysfd: int) -> int {
		if (sysfd < 0) return -1;
		for (i < openFiles.length) {
			if (openFiles[i] == -1) {
				openFiles[i] = sysfd;
				return i;
			}
		}
		return -1;
	}
	private def getSystemFileID(fd: int) -> int {
		if (u32.view(fd) >= u32.view(openFiles.length)) return -1;
		return openFiles[fd];
	}
	private def releaseFileID(fd: int) {
		if (u32.view(fd) < u32.view(openFiles.length)) openFiles[fd] = -1;
	}
	private def closeAllFiles() {
		for (fd in openFiles) if (fd >= 0) System.fileClose(fd);
	}
	private def clear() {
		for (i < openFiles.length) openFiles[i] = -1;
		openFiles[0] = 0;  // stdin
		openFiles[1] = 1;  // stdout
		openFiles[2] = 2;  // stderr
	}
}

class System_TypeCon extends Member_TypeCon {
	new() super("System", V3Kind.VOID, 0, TypeUtil.globalCache) { }

	def lookupMember(t: Type, name: string) -> LookupResult {
		var t = SystemCalls.map[name];
		return if (t != null, LookupResult.Inst(t, null));
	}
}
