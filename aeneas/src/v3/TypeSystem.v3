// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Defines operations on types for type checking.
component TypeSystem {
	private def ELIM = TypeVarEliminator.new(null, null);

	// Check if type {xt} is a subtype (i.e. can be assigned without conversion) of type {yt}.
	def isSubtype(xt: Type, yt: Type) -> bool {
		return isSubsume0(computeConversion(xt, yt));
	}
	// For element types {xt} and {yt}, check if {xt} is a subtype (i.e. can be assigned
	// without conversion) of type {yt}. This is currently unstable because proper checking
	// for downcasts is involved; variance for element types is only enabled by a command-line
	// flag.
	private def isElemSubtype(xt: Type, yt: Type) -> bool {
		return xt == yt || (CLOptions.COVARIANT_ARRAYS.val && isSubtype(xt, yt));
	}
	// Check if type {xt} is promotable (i.e. with conversion operation) to type {yt}.
	def isPromotable(xt: Type, yt: Type) -> bool {
		return isPromote0(computeConversion(xt, yt));
	}
	// Check if the integer type {x} is promotable to the integer type {y}.
	def isIntPromotable(x: IntType, y: IntType) -> bool {
		if (x == y) return true;
		if (x.width > y.width) return false;
		if (x.width == y.width) return x.signed == y.signed;
		return y.signed || x.signed == y.signed;
	}
	// Check if the type {xt} is promotable to the float type {y}.
	def isPromotableToFloat(xt: Type, y: FloatType) -> bool {
		return isPromotable(xt, y);
	}
	// Check if the type {xt} is an enum and the type {yt} is its corresponding set type.
	def isEnumToSet(xt: Type, yt: Type) -> bool {
		if (EnumType.?(xt) && EnumSetType.?(yt)) {
			return EnumType.!(xt).enumDecl == EnumSetType.!(yt).enumDecl;
		}
		return false;
	}
	// Returns {true} if {t1} and {t2} are either the same type, or there is
	// some assignment to type parameters and variables where {t1} and {t2} are
	// the same type. (exposed for testing)
	def maybeEqual(t1: Type, t2: Type) -> bool {
		if (t1 == t2) return true;
		if (TypeParamType.?(t1) || TypeParamType.?(t2)) return true;
		if (TypeVarType.?(t1) || TypeVarType.?(t2)) return true;
		if (t1.typeCon == t2.typeCon) {
			return Lists.allTrue(t1.nested, t2.nested, maybeEqual);
		}
		return false;
	}
	// Computes which, if any, implicit conversion operation is necessary when assigning
	// values of type {xt} to locations of type {yt}. (exposed for testing)
	def computeConversion(xt: Type, yt: Type) -> Conversion {
		if (xt == yt) return Conversion.IDENTITY;
		match (xt) {
			x: NullType => {
				match (yt) {
					y: ClassType => if (y.typeCon.kind != Kind.VARIANT) return Conversion.SUBSUME_NULL_CLASS;
					y: ArrayType => return Conversion.SUBSUME_NULL_ARRAY;
					y: RangeType => return Conversion.SUBSUME_NULL_RANGE;
					y: FuncType => return Conversion.SUBSUME_NULL_FUNC;
				}
			}
			x: ClassType => match (yt) {
				y: ClassType => {
					for (sx = x; sx != null; sx = sx.getSuperType()) {
						if (sx == y) return Conversion.SUBSUME_CLASS;
						if (sx.classDecl == y.classDecl) return Conversion.ILLEGAL; // same decl, different type args
					}
				}
			}
			x: ArrayType => match (yt) {
				y: ArrayType => if (!y.writeable && isSubtype(x.elementType(), y.elementType())) return Conversion.SUBSUME_ARRAY;
				y: RangeType => {
					var xe = x.elementType(), ye = y.elementType();
					if (x.writeable) {
						if (xe == ye) return Conversion.PROMOTE_ARRAY_TO_RANGE;
					} else if (!y.writeable && isElemSubtype(xe, ye)) { // covariance
						return Conversion.PROMOTE_ARRAY_TO_RANGE;
					}
				}
			}
			x: RangeType => match (yt) {
				y: RangeType => if (!y.writeable && isElemSubtype(x.elementType(), y.elementType())) return Conversion.SUBSUME_RANGE;
			}
			x: TupleType => match (yt) {
				y: TupleType => {
					if (Lists.allTrue(x.nested, y.nested, isSubtype)) return Conversion.SUBSUME_TUPLE; // covariance
					if (Lists.allTrue(x.nested, y.nested, isPromotable)) return Conversion.PROMOTE_TUPLE; // covariance
				}
			}
			x: FuncType => match (yt) {
				y: FuncType => {
					if (isSubtype(x.returnType(), y.returnType()) // covariance
						&& isSubtype(y.paramType(), x.paramType())) return Conversion.SUBSUME_FUNCTION; // contravariance
				}
			}
			x: RefType => match (yt) {
				y: RefType => {
					for (sx = x; sx != null; sx = sx.getSuperType()) {
						if (sx == y) return Conversion.SUBSUME_REF;
					}
				}
			}
			x: IntType => match (yt) {
				y: IntType => if (isIntPromotable(x, y)) return Conversion.PROMOTE_INT_TO_INT;
				y: FloatType => {
					if (x.signed) {
						if (x.width <= y.fraction_width) return Conversion.PROMOTE_INT_TO_FLOAT;
					} else {
						if (x.width <= 1 + y.fraction_width) return Conversion.PROMOTE_INT_TO_FLOAT;
					}
				}
			}
			x: EnumType => match (yt) {
				y: EnumSetType => if (x.enumDecl == y.enumDecl) return Conversion.PROMOTE_ENUM_TO_SET;
			}
			x: FloatType => match (yt) {
				y: FloatType => if (x.width <= y.width) return Conversion.PROMOTE_FLOAT_TO_FLOAT;
			}
		}
		return Conversion.ILLEGAL;
	}
	// Computes which, if any, conversion *or cast* operation is necessary when assigning
	// values of type {xt} to locations of type {yt}. (exposed for testing)
	def computeCast(xt: Type, yt: Type) -> Conversion {
		if (xt == yt) return Conversion.IDENTITY;
		if (TypeParamType.?(yt)) return Conversion.CAST_POLY;
		if (TypeParamType.?(xt)) return Conversion.CAST_POLY;
		if (TypeVarType.?(yt)) return Conversion.CAST_POLY;
		if (TypeVarType.?(xt)) return Conversion.CAST_POLY;

		match (xt) {
			x: ClassType => match(yt) {
				y: ClassType => {
					if (x.typeCon.kind != y.typeCon.kind) return Conversion.ILLEGAL;
					var xdepth = x.getDepth(), ydepth = y.getDepth();
					var xl = x, yl = y;
					var query: Conversion;
					if (xdepth < ydepth) {  // downcast
						for (i < (ydepth - xdepth)) yl = yl.getSuperType();
						query = if(xl.typeCon.kind == Kind.CLASS, Conversion.CAST_CLASS, Conversion.CAST_VARIANT);
					} else {  // upcast
						for (i < (xdepth - ydepth)) xl = xl.getSuperType();
						query = if(xl.typeCon.kind == Kind.CLASS, Conversion.SUBSUME_CLASS, Conversion.SUBSUME_VARIANT);
					}
					if (xl == yl) return query;
					if (x.typeCon == y.typeCon && maybeEqual(xl, yl)) return Conversion.CAST_POLY;
					return Conversion.ILLEGAL;
				}
			}
			x: IntType => match(yt) {
				y: FloatType => return Conversion.CAST_INT_TO_FLOAT;
				y: IntType => {
					return if(isIntPromotable(x, y), Conversion.PROMOTE_INT_TO_INT, Conversion.CAST_INT_TO_INT);
				}
			}
			x: FloatType => match(yt) {
				y: IntType => return Conversion.CAST_FLOAT_TO_INT;
				y: FloatType => {
					if (x.width < y.width) return Conversion.PROMOTE_FLOAT_TO_FLOAT;
					return Conversion.CAST_FLOAT_TO_FLOAT;
				}
			}
			x: TupleType => match (yt) {
				y: TupleType => {
					var xl = x.nested, yl = y.nested;
					var current = Conversion.IDENTITY;
					while (xl != null) {
						if (yl == null) return Conversion.ILLEGAL; // tuple size doesnt match
						var inner = computeCast(xl.head, yl.head);
						current = mergeConversions(current, inner);
						if (current == Conversion.ILLEGAL) return Conversion.ILLEGAL;
						xl = xl.tail;
						yl = yl.tail;
					}
					if (yl != null) return Conversion.ILLEGAL; // tuple size doesnt match
					return current;
				}
			}
			x: ArrayType => match (yt) {
				y: ArrayType => {
					var xe = x.elementType(), ye = y.elementType();
					if (!y.writeable) {
						if (isElemSubtype(xe, ye)) return Conversion.SUBSUME_ARRAY; // covariant upcast
						if (isElemSubtype(ye, xe)) return Conversion.CAST_ARRAY;    // downcast
					}
					if (xe.open() || ye.open()) {
						return if(maybeEqual(xe, ye), Conversion.CAST_POLY, Conversion.ILLEGAL);
					}
				}
				y: RangeType => {
					var xe = x.elementType(), ye = y.elementType();
					if (xe == ye) return Conversion.PROMOTE_ARRAY_TO_RANGE;
					if (!y.writeable) {
						if (isElemSubtype(xe, ye)) return Conversion.PROMOTE_ARRAY_TO_RANGE;
						if (isElemSubtype(ye, xe)) return Conversion.CAST_ARRAY_TO_RANGE;
					}
					if (xe.open() || ye.open()) {
						return if(maybeEqual(xe, ye), Conversion.CAST_POLY, Conversion.ILLEGAL);
					}
				}
			}
			x: RangeType => match (yt) {
				y: RangeType => {
					var xe = x.elementType(), ye = y.elementType();
					if (!y.writeable) {
						if (isElemSubtype(xe, ye)) return Conversion.SUBSUME_RANGE; // covariant upcast
						if (isElemSubtype(ye, xe)) return Conversion.CAST_RANGE;    // downcast
					}
					if (xe.open() || ye.open()) {
						return if(maybeEqual(xe, ye), Conversion.CAST_POLY, Conversion.ILLEGAL);
					}
				}
			}
			x: FuncType => match (yt) {
				y: FuncType => {
					if (x.open() || y.open()) return Conversion.CAST_POLY;
					var a = computeConversion(x.returnType(), y.returnType()); // covariance
					var b = computeConversion(y.paramType(), x.paramType());   // contravariance
					var r = mergeConversions(a, b);
					if (isCast0(r)) return Conversion.CAST_FUNCTION;
					// XXX: function -> function with promotion is illegal?
					if (isSubsume0(r)) return Conversion.SUBSUME_FUNCTION;
				}
			}
			x: AnyRefType => match (yt) {
				y: ArrayType => return Conversion.CAST_ARRAY;
				y: ClassType => return if(V3.isVariant(y), Conversion.CAST_VARIANT, Conversion.CAST_CLASS);
				y: FuncType => {
					if(y.typeCon.kind == Kind.FUNCREF) return Conversion.CAST_FUNCREF;
				}
			}
		}
		return computeConversion(xt, yt);
	}
	private def mergeLists(tl1: List<Type>, tl2: List<Type>, tc: TypeCon, mergefun: (Type, Type) -> Type) -> Type {
		var rl: List<Type>;
		while (tl1 != null) {
			if (tl2 == null) return null;
			var rt = mergefun(tl1.head, tl2.head);
			if (rt == null) return null;
			rl = List.new(rt, rl);
			tl1 = tl1.tail;
			tl2 = tl2.tail;
		}
		if (tl2 == null) return tc.create(Lists.reverse(rl));
		return null;
	}
	private def commonSuperClass(ct1: ClassType, ct2: ClassType) -> (ClassType, ClassType) {
		var d1 = ct1.getDepth(), d2 = ct2.getDepth();
		while (d1 > d2) { ct1 = ct1.getSuperType(); d1--; }	// walk up ct1 to the same depth
		while (d2 > d1) { ct2 = ct2.getSuperType(); d2--; }	// walk up ct2 to the same depth
		while (d1-- >= 0) {
			if (ct1.typeCon == ct2.typeCon) return (ct1, ct2);
			ct1 = ct1.getSuperType();
			if (ct1 == null) break;
			ct2 = ct2.getSuperType();
			if (ct2 == null) break;
		}
		return (null, null);
	}
	// Compute the least supertype of types {t1} and {t2}, solving for any type variables in {t1}.
	def upper = unify0(UnificationDir.UPPER, _, _);
	// Compute the least type to which {t1} and {t2} are both assignable, with possible promotion,
	// solving for type variables in {t1}.
	def widen = unify0(UnificationDir.WIDER, _, _);
	// Same name for above.
	def unifyWiden = unify0(UnificationDir.WIDER, _, _);
	// Unify the nested type variables in {t1} by structural recursion with {t2}.
	private def unifyInvariant = unify0(UnificationDir.NONE, _, _); // cache
	// Compute the least supertype of types {t1} and {t2}, solving for any type variables in {t1}.
	private def lower = unify0(UnificationDir.LOWER, _, _);

	private def unify0(dir: UnificationDir, t1: Type, t2: Type) -> Type {
		if (t1 == t2) return t1;

		match (t1) {
			x: TypeVarType => {
				// solve for this type variable
				if (x.vtype == null) {
					x.setType(t2);
					return t2;
				} else {
					var sol = unify0(dir, x.vtype, t2);
					if (sol != null) x.setType(sol);
					return sol;
				}
			}
			x: IntType => match (t2) {
				y: IntType => {
					// XXX: add 1 if signed/unsigned mismatch
					if (isIntPromotable(x, y)) return unifyPromotable(dir, x, y);
					if (isIntPromotable(y, x)) return unifyPromotable(dir, y, x);
				}
				y: FloatType => {
					if (isPromotableToFloat(x, y)) return unifyPromotable(dir, x, y);
				}
			}
			x: EnumType => match (t2) {
				y: EnumSetType => if(x.enumDecl == y.enumDecl) return unifyPromotable(dir, x, y);
			}
			x: EnumSetType => match (t2) {
				y: EnumType => if(x.enumDecl == y.enumDecl) return unifyPromotable(dir, y, x);
			}
			x: FloatType => match (t2) {
				y: IntType => {
					if (isPromotableToFloat(y, x)) return unifyPromotable(dir, y, x);
				}
				y: FloatType => {
					if (x.width < y.width) return unifyPromotable(dir, x, y);
					else return unifyPromotable(dir, y, x);
				}
			}
			x: NullType => match(t2) {
				y: ClassType => return if(y.typeCon.kind != Kind.VARIANT, unifySubtype(dir, x, y));
				y: ArrayType => return unifySubtype(dir, x, y);
				y: RangeType => return unifySubtype(dir, x, y);
				y: FuncType => return unifySubtype(dir, x, y);
			}
			x: ClassType => match(t2) {
				y: NullType => return if(x.typeCon.kind != Kind.VARIANT, unifySubtype(dir, y, x));
				y: ClassType => {
					match (dir) {
						NONE => {
							if (x.typeCon == y.typeCon) {
								return mergeLists(x.nested, y.nested, x.typeCon, unifyInvariant);
							}
						}
						UPPER, WIDER => {
							var t = commonSuperClass(x, y), nx = t.0, ny = t.1;
							if (nx == ny) return nx;
							if (nx != null && ny != null && nx.typeCon == ny.typeCon) {
								var f = if(CLOptions.LEGACY_INFER.val, upper, unifyInvariant);
								return mergeLists(nx.nested, ny.nested, nx.typeCon, f);
							}
						}
						LOWER, NARROWER => {
							var t = commonSuperClass(x, y), nx = t.0, ny = t.1;
							if (nx == null || ny == null) return null;
							Lists.reduceV(nx.nested, ny.nested, lower);
							if (nx.typeCon == x.typeCon) return elimTypeVars(y); // XXX: should be no typevars in y
							if (ny.typeCon == y.typeCon) return elimTypeVars(x);
						}
					}
				}
			}
			x: ArrayType => match(t2) {
				y: NullType => return unifySubtype(dir, y, x);
				y: ArrayType => {
					match (dir) {
						NONE => {
							var ndir = if(CLOptions.LEGACY_INFER.val, UnificationDir.UPPER, UnificationDir.NONE);
							var et = unify0(ndir, x.elementType(), y.elementType());
							if (x.writeable != y.writeable) return null;
							return if(et != null, x.typeCon.create1(et));
						}
						_ => {
							var tc = if(x.writeable == y.writeable, y.typeCon, V3Array.RO_TYPECON);
							var ndir = notwider(dir);
							if (!CLOptions.LEGACY_INFER.val && x.writeable && y.writeable) ndir = UnificationDir.NONE;
							var et = unify0(ndir, x.elementType(), y.elementType());
							return if(et != null, tc.create1(et));
						}
					}
				}
				y: RangeType => {
					match (dir) {
						NONE, UPPER, LOWER => return null; // Array -> Range requires promotion
						WIDER => {
							var tc = if(x.writeable == y.writeable, y.typeCon, V3Range.RO_TYPECON);
							var ndir = if(x.writeable && y.writeable, UnificationDir.NONE, UnificationDir.UPPER);
							var et = unify0(ndir, x.elementType(), y.elementType());
							return if(et != null, tc.create1(et));
						}
						NARROWER => {
							var tc = if(x.writeable == y.writeable, y.typeCon, V3Range.RO_TYPECON);
							var ndir = if(x.writeable && y.writeable, UnificationDir.NONE, UnificationDir.LOWER);
							var et = unify0(ndir, x.elementType(), y.elementType());
							return if(et != null, tc.create1(et));
						}
					}
				}
			}
			x: RangeType => match(t2) {
				y: NullType => return unifySubtype(dir, y, x);
				y: RangeType => {
					match (dir) {
						NONE => {
							if (x.writeable != y.writeable) return null;
							var et = unify0(dir, x.elementType(), y.elementType());
							return if(et != null, x.typeCon.create1(et));
						}
						_ => {
							var tc = if(x.writeable == y.writeable, y.typeCon, V3Range.RO_TYPECON);
							var ndir = if(x.writeable && y.writeable, UnificationDir.NONE, notwider(dir));
							var et = unify0(ndir, x.elementType(), y.elementType());
							return if(et != null, tc.create1(et));
						}
					}
				}
				y: ArrayType => {
					match (dir) {
						NONE, UPPER, LOWER => return null; // Array -> Range requires promotion
						WIDER => {
							var tc = if(x.writeable == y.writeable, x.typeCon, V3Range.RO_TYPECON);
							var ndir = if(x.writeable && y.writeable, UnificationDir.NONE, UnificationDir.UPPER);
							var et = unify0(ndir, x.elementType(), y.elementType());
							return if(et != null, tc.create1(et));
						}
						NARROWER => {
							var tc = if(x.writeable == y.writeable, x.typeCon, V3Range.RO_TYPECON);
							var ndir = if(x.writeable && y.writeable, UnificationDir.NONE, UnificationDir.LOWER);
							var et = unify0(ndir, x.elementType(), y.elementType());
							return if(et != null, tc.create1(et));
						}
					}
				}
			}
			x: FuncType => match(t2) {
				y: NullType => return unifySubtype(dir, y, x);
				y: FuncType => {
					if (x.typeCon != y.typeCon) return null;
					var ndir = notwider(dir);
					var pt = unify0(reverse(ndir), x.paramType(), y.paramType());
					var rt = unify0(ndir, x.returnType(), y.returnType());
					if (pt == null) return null;
					if (rt == null) return null;
					return x.typeCon.create(Lists.cons2(pt, rt));
				}
			}
			x: TupleType => match(t2) {
				y: TupleType => {
					return mergeLists(t1.nested, t2.nested, Tuple.TYPECON, unify0(dir, _, _));
				}
			}
			x: RefType => match(t2) {
				y: RefType => {
					if (x.getSuperType() == y) return unifySubtype(dir, x, y);
					if (y.getSuperType() == x) return unifySubtype(dir, y, x);
				}
			}
		}
		return null;
	}
	def elimTypeVars(t: Type) -> Type {
		return ELIM.substitute(t);
	}
	def newTypeQuery(fromType: Type, toType: Type) -> TypeQuery {
		if (fromType == Null.TYPE) return TypeQuery.FALSE;
		if (TypeParamType.?(toType)) return TypeQuery.UNKNOWN_QUERY;
		if (TypeParamType.?(fromType)) return TypeQuery.UNKNOWN_QUERY;
		if (TypeVarType.?(toType)) return TypeQuery.UNKNOWN_QUERY;
		if (TypeVarType.?(fromType)) return TypeQuery.UNKNOWN_QUERY;
		if (V3.isClass(toType)) {
			if (fromType.typeCon.kind != toType.typeCon.kind) return TypeQuery.FALSE;
			var ftc = ClassType.!(fromType), ttc = ClassType.!(toType);
			var fd = ftc.getDepth(), td = ttc.getDepth();
			var query: TypeQuery;
			if (fd < td) {  // downquery
				for (i < (td - fd)) ttc = ttc.getSuperType();
				query = if(ftc.typeCon.kind == Kind.CLASS, TypeQuery.CLASS_QUERY, TypeQuery.VARIANT_QUERY);
			} else {  // upquery
				for (i < (fd - td)) ftc = ftc.getSuperType();
				query = if(fromType.typeCon.kind == Kind.CLASS, TypeQuery.TRUE_IF_NOT_NULL, TypeQuery.TRUE);
			}
			if (ftc.typeCon == ttc.typeCon) return maybeQuery(ftc, ttc, query, TypeQuery.FALSE);
			return TypeQuery.FALSE;
		}
		if (V3.isTuple(fromType) && V3.isTuple(toType)) {
			return newTupleQuery(fromType, toType);
		}
		if (V3.isFunction(fromType) && V3.isFunction(toType)) {
			// check param and return types
			if (fromType.open() || toType.open()) return TypeQuery.UNKNOWN_QUERY;
			var fl = fromType.nested, tl = toType.nested;
			if (!TypeSystem.isSubtype(fl.tail.head, tl.tail.head)) return TypeQuery.FALSE;
			if (!TypeSystem.isSubtype(tl.head, fl.head)) return TypeQuery.FALSE;
			return TypeQuery.TRUE;
		}
		if (V3.isArray(toType)) return maybeQuery(fromType, toType, TypeQuery.TRUE_IF_NOT_NULL, TypeQuery.FALSE);
		if (fromType == toType) return TypeQuery.TRUE;
		if (IntType.?(fromType)) {
			if (FloatType.?(toType)) return TypeQuery.FLOAT_QUERY_I;
			if (IntType.?(toType)) {
				var ft = IntType.!(fromType), tt = IntType.!(toType);
				return if(isIntPromotable(ft, tt), TypeQuery.TRUE, TypeQuery.INT_QUERY_I);
			}
		}
		if (FloatType.?(fromType)) {
			if (IntType.?(toType)) return TypeQuery.INT_QUERY_F;
			if (FloatType.?(toType)) {
				var ftc = FloatType.!(fromType);
				var ttc = FloatType.!(toType);
				if (ftc.width < ttc.width) return TypeQuery.TRUE;
				return TypeQuery.FLOAT_QUERY_D;
			}
		}
		return maybeQuery(fromType, toType, TypeQuery.TRUE, TypeQuery.FALSE);
	}
	def newTypeCast(fromType: Type, toType: Type) -> TypeCast {
		if (fromType == toType) return TypeCast.TRUE;
		if (TypeParamType.?(toType)) return TypeCast.UNKNOWN_CAST;
		if (TypeParamType.?(fromType)) return TypeCast.UNKNOWN_CAST;
		if (TypeVarType.?(toType)) return TypeCast.UNKNOWN_CAST;
		if (TypeVarType.?(fromType)) return TypeCast.UNKNOWN_CAST;
		if (V3.isClass(toType)) {
			if (fromType == Null.TYPE) return if(V3.isVariant(toType), TypeCast.THROW, TypeCast.TRUE);
			if (AnyRefType.?(fromType)) return if(V3.isVariant(toType), TypeCast.VARIANT_CAST, TypeCast.CLASS_CAST);
			if (fromType.typeCon.kind != toType.typeCon.kind) return TypeCast.THROW;
			var ftc = ClassType.!(fromType), ttc = ClassType.!(toType);
			var fd = ftc.getDepth(), td = ttc.getDepth();
			var cast: TypeCast;
			if (fd <= td) {  // downcast
				for (i < (td - fd)) ttc = ttc.getSuperType();
				cast = if(ftc.typeCon.kind == Kind.CLASS, TypeCast.CLASS_CAST, TypeCast.VARIANT_CAST);
			} else {  // upcast (subsumption)
				for (i < (fd - td)) ftc = ftc.getSuperType();
				cast = TypeCast.TRUE;
			}
			var not = if(fromType.typeCon.kind == Kind.CLASS, TypeCast.THROW_IF_NOT_NULL, TypeCast.THROW);
			if (ftc.typeCon == ttc.typeCon) return maybeCast(ftc, ttc, cast, not);
			return not;
		}
		if (V3.isTuple(fromType) && V3.isTuple(toType)) {
			return newTupleCast(fromType, toType);
		}
		if (V3.isFunction(fromType)) {
			if (fromType == Null.TYPE) return TypeCast.TRUE;
			if (V3.isFunction(toType)) {
				// check param and return types
				if (fromType.open() || toType.open()) return TypeCast.UNKNOWN_CAST;
				var fl = fromType.nested, tl = toType.nested;
				if (!TypeSystem.isSubtype(fl.tail.head, tl.tail.head)) return TypeCast.THROW;
				if (!TypeSystem.isSubtype(tl.head, fl.head)) return TypeCast.THROW;
				return TypeCast.TRUE;
			}
		}
		if (V3.isArray(toType)) {
			if (fromType == Null.TYPE) return TypeCast.TRUE;
			if (AnyRefType.?(fromType)) return TypeCast.TRUE; // TODO: array downcast
			var tt = ArrayType.!(toType);
			match (fromType) {
				ft: ArrayType => if (!tt.writeable) {
					var fte = ft.elementType(), tte = tt.elementType();
					if (isElemSubtype(fte, tte)) return TypeCast.TRUE;
					return maybeCast(fte, tte, TypeCast.TRUE, TypeCast.THROW);
				}
			}
			return maybeCast(fromType, toType, TypeCast.TRUE, TypeCast.THROW);
		}
		if (V3.isVariant(fromType)) {
			return maybeCast(fromType, toType, TypeCast.TRUE, TypeCast.THROW);
		}
		if (IntType.?(fromType)) {
			if (IntType.?(toType)) {
				var ft = IntType.!(fromType), tt = IntType.!(toType);
				return if(isIntPromotable(ft, tt), TypeCast.INT_VIEW_I, TypeCast.INT_CAST_I);
			}
			if (FloatType.?(toType)) {
				return if(isPromotableToFloat(fromType,
					FloatType.!(toType)), TypeCast.FLOAT_PROMOTE_I, TypeCast.FLOAT_CAST_I);
			}
		}
		if (FloatType.?(fromType)) {
			if (IntType.?(toType)) return TypeCast.INT_CAST_F;
			var ftc = FloatType.!(fromType);
			if (FloatType.?(toType)) {
				var ttc = FloatType.!(toType);
				if (ftc.width < ttc.width) return TypeCast.FLOAT_PROMOTE_F;
				if (ftc.width > ttc.width) return TypeCast.FLOAT_CAST_D;
			}
		}
		if (isEnumToSet(fromType, toType)) return TypeCast.ENUM_TO_SET;
		if (V3.isRange(toType)) {
			if (fromType == Null.TYPE) return TypeCast.TRUE;
			if (V3.isArray(fromType)) {
				return maybeCast(fromType.nested.head, toType.nested.head, TypeCast.RANGE_PROMOTE_ARRAY, TypeCast.THROW);
			}
			var tt = RangeType.!(toType);
			match (fromType) {
				ft: RangeType => if (!tt.writeable) {
					var fte = ft.elementType(), tte = tt.elementType();
					if (isElemSubtype(fte, tte)) return TypeCast.TRUE;
					return maybeCast(fte, tte, TypeCast.TRUE, TypeCast.THROW);
				}
			}
			return maybeCast(fromType, toType, TypeCast.TRUE, TypeCast.THROW);
		}
		if (V3.isRef(fromType)) {
			if (isSubtype(fromType, toType)) return TypeCast.TRUE;
		}
		if (AnyRefType.?(fromType)) {
			match (toType) {
				y: FuncType => {
					if(y.typeCon.kind == Kind.FUNCREF) return TypeCast.TRUE; // TODO: funcref cast
				}
			}
		}
		return TypeCast.THROW;
	}
	def maybeQuery(t1: Type, t2: Type, eq: TypeQuery, neq: TypeQuery) -> TypeQuery {
		if (t1 == t2) return eq;
		if (TypeSystem.maybeEqual(t1, t2)) return TypeQuery.UNKNOWN_QUERY;
		return neq;
	}
	def maybeCast(t1: Type, t2: Type, eq: TypeCast, neq: TypeCast) -> TypeCast {
		if (t1 == t2) return eq;
		if (TypeSystem.maybeEqual(t1, t2)) return TypeCast.UNKNOWN_CAST;
		return neq;
	}
	def newTupleQuery(ff: Type, tt: Type) -> TypeQuery {
		// recursively check all nested types
		var fl = ff.nested, tl = tt.nested;
		while (fl != null) {
			if (tl == null) return TypeQuery.FALSE; // tuple size doesnt match
			var inner = TypeSystem.newTypeQuery(fl.head, tl.head);
			if (inner == TypeQuery.FALSE) return TypeQuery.FALSE;
			fl = fl.tail;
			tl = tl.tail;
		}
		if (tl != null) return TypeQuery.FALSE; // tuple size doesnt match
		return TypeQuery.TUPLE_QUERY;
	}
	def newTupleCast(ff: Type, tt: Type) -> TypeCast {
		// recursively check all nested types
		var fl = ff.nested, tl = tt.nested;
		while (fl != null) {
			if (tl == null) return TypeCast.THROW; // tuple size doesnt match
			if (TypeSystem.newTypeCast(fl.head, tl.head) == TypeCast.THROW) return TypeCast.THROW;
			fl = fl.tail;
			tl = tl.tail;
		}
		if (tl != null) return TypeCast.THROW; // tuple size doesnt match
		return TypeCast.TUPLE_CAST;
	}
	def isIntToLong(ft: IntType, tt: IntType) -> bool {
		return ft.width <= 32 && tt.width > 32;
	}
}

// enumeration of the different kinds of type casts
enum TypeCast {
	UNKNOWN_CAST,
	TRUE,
	SUBSUME,
	THROW_IF_NOT_NULL,
	THROW,
	INT_VIEW_I,
	INT_CAST_I,
	FLOAT_CAST_I,
	INT_CAST_F,
	FLOAT_PROMOTE_F,
	FLOAT_PROMOTE_I,
	FLOAT_CAST_D,
	CLASS_CAST,
	VARIANT_CAST,
	TUPLE_CAST,
	ENUM_TO_SET,
	RANGE_PROMOTE_ARRAY
}
// enumeration of the different kinds of type queries
enum TypeQuery {
	UNKNOWN_QUERY,
	TRUE,
	TRUE_IF_NOT_NULL,
	FALSE,
	FLOAT_QUERY_I,
	INT_QUERY_F,
	INT_QUERY_I,
	FLOAT_QUERY_D,
	CLASS_QUERY,
	VARIANT_QUERY,
	TUPLE_QUERY
}

// Unification can recursive over the structure of a type and assume either a promotion
// direction ({WIDER} or {NARROWER}) or a subtyping direction ({UPPER} or {LOWER}).
enum UnificationDir {
	NONE,
	WIDER,
	NARROWER,
	UPPER,
	LOWER
}
def unifySubtype(dir: UnificationDir, sub: Type, sup: Type) -> Type {
	match (dir) {
		NONE => return null;
		UPPER, WIDER => return sup;
		NARROWER, LOWER => return sub;
	}
}
def unifyPromotable(dir: UnificationDir, sub: Type, sup: Type) -> Type {
	match (dir) {
		NONE, UPPER, LOWER => return null;
		WIDER => return sup;
		NARROWER => return sub;
	}
}
def reverse(dir: UnificationDir) -> UnificationDir {
	match (dir) {
		NONE => return dir;
		UPPER => return UnificationDir.LOWER;
		LOWER => return UnificationDir.UPPER;
		WIDER => return UnificationDir.NARROWER;
		NARROWER => return UnificationDir.WIDER;
	}
}
def notwider(dir: UnificationDir) -> UnificationDir {
	match (dir) {
		WIDER => return UnificationDir.UPPER;
		NARROWER => return UnificationDir.LOWER;
		_ => return dir;
	}
}

// The result of trying to assign a value of one type to a location of another type,
// either with an implicit conversion (subsume, promote) or with an explicit cast.
enum Conversion {
	// Illegal conversion or cast.
	ILLEGAL,
	// Drop the value (legacy convert to void).
	VOID,
	// Identity; no conversion necessary.
	IDENTITY,
	// Subsumptions normally don't imply a representation conversion.
	// (Except some typed targets require wrapping functions upon subsumption.)
	SUBSUME_NULL_CLASS,
	SUBSUME_NULL_ARRAY,
	SUBSUME_NULL_RANGE,
	SUBSUME_NULL_FUNC,
	SUBSUME_CLASS,
	SUBSUME_VARIANT,
	SUBSUME_ARRAY,
	SUBSUME_RANGE,
	SUBSUME_FUNCTION,
	SUBSUME_REF,
	SUBSUME_TUPLE,
	// Promotions imply a representation conversion.
	PROMOTE_ARRAY_TO_RANGE,
	PROMOTE_ENUM_TO_SET,
	PROMOTE_INT_TO_INT,
	PROMOTE_INT_TO_FLOAT,
	PROMOTE_FLOAT_TO_FLOAT,
	PROMOTE_TUPLE,
	// Casts imply a check that can fail at runtime, and possibly a representation conversion.
	CAST_POLY,
	CAST_CLASS,
	CAST_VARIANT,
	CAST_ARRAY,
	CAST_ARRAY_TO_RANGE,
	CAST_RANGE,
	CAST_FUNCTION,
	CAST_FUNCREF,
	CAST_INT_TO_INT,
	CAST_INT_TO_FLOAT,
	CAST_FLOAT_TO_INT,
	CAST_FLOAT_TO_FLOAT,
	CAST_TUPLE,
}
def isSubsume0(conversion: Conversion) -> bool {
	return conversion.tag >= Conversion.IDENTITY.tag && conversion.tag <= Conversion.SUBSUME_TUPLE.tag;
}
def isPromote0(conversion: Conversion) -> bool {
	return conversion.tag >= Conversion.IDENTITY.tag && conversion.tag <= Conversion.PROMOTE_TUPLE.tag;
}
def isCast0(conversion: Conversion) -> bool {
	return conversion.tag >= Conversion.IDENTITY.tag && conversion.tag <= Conversion.CAST_TUPLE.tag;
}
def mergeConversions(a: Conversion, b: Conversion) -> Conversion {
	if (b == Conversion.ILLEGAL) return Conversion.ILLEGAL;
	if (b.tag > a.tag) {
		if (isCast0(b)) a = Conversion.CAST_TUPLE;
		else if (isPromote0(b)) a = Conversion.PROMOTE_TUPLE;
		else if (isSubsume0(b)) a = Conversion.SUBSUME_TUPLE;
	}
	return a;
}
