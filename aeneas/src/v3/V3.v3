// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utilities related to the Virgil III source language, including common types,
// type queries, name mangling, etc.
component V3 {
	def stringType      = V3Array.newType(Byte.TYPE);
	def arrayByteType   = stringType;
	def rangeByteType   = V3Range.newType(Byte.TYPE);
	def stringTypeCon   = TypeUtil.aliasTypeCon("string", stringType);
	def stringArrayType = V3Array.newType(stringType);
	def voidArrayType   = V3Array.newType(Void.TYPE);

	// For performance and to avoid pre-allocating all the fixed-size integer types,
	// we use a custom lookup routine for the top level types.
	def lookupToplevelType(name: string) -> TypeCon {
		match(name[0]) {
			'A' => if (Strings.equal("Array", name)) return V3Array.TYPECON;
			'b' => {
				if (Strings.equal("bool", name)) return Bool.TYPE.typeCon;
				if (Strings.equal("byte", name)) return Byte.TYPE.typeCon;
			}
			'd' => {
				if (Strings.equal("double", name)) return Float.FLOAT64.typeCon;
			}
			'i' => {
				if (Strings.equal("int", name)) return Int.TYPE.typeCon;
				return Int.lookupFsi(name, true);
			}
			'f' => {
				if (Strings.equal("float", name)) return Float.FLOAT32.typeCon;
			}
			'l' => {
				if (Strings.equal("long", name)) return Long.TYPE.typeCon;
			}
			's' => {
				if (Strings.equal("string", name)) return stringTypeCon;
				if (Strings.equal("short", name)) return Int.getTypeCon(true, 16);
			}
			'u' => return Int.lookupFsi(name, false);
			'v' => if (Strings.equal("void", name)) return Void.TYPE.typeCon;
			'R' => {
				if (Strings.equal("Range", name)) return V3Range.TYPECON;
				if (Strings.equal("Ref", name)) return V3Ref.RW_TYPECON;
			}
			'r' => {
				if (Strings.equal("ref", name)) return V3Ref.RO_TYPECON;
			}
		}
		return null;
	}
	// TODO: inline all V3.isXXX() type query methods
	def isClass(t: Type) -> bool { return ClassType.?(t); }
	def isComponent(t: Type) -> bool { return t != null && V3Component_TypeCon.?(t.typeCon); } // TODO
	def isFunction(t: Type) -> bool { return FuncType.?(t); }
	def isArray(t: Type) -> bool { return ArrayType.?(t); }
	def isArrayOrRange(t: Type) -> bool { return ArrayType.?(t) || RangeType.?(t); }
	def isRange(t: Type) -> bool { return RangeType.?(t); }
	def isVariant(t: Type) -> bool { return t != null && t.typeCon.kind == Kind.VARIANT; }
	def isTuple(t: Type) -> bool { return TupleType.?(t); }
	def isEnum(t: Type) -> bool { return EnumType.?(t); }
	def isEnumSet(t: Type) -> bool { return EnumSetType.?(t); }
	def isString(t: Type) -> bool { return t == stringType; }
	def isRef(t: Type) -> bool { return RefType.?(t); }
	def classDecl(t: Type) -> VstClass {
		return ClassType.!(t).classDecl;
	}
	def componentDecl(t: Type) -> VstComponent {
		return V3Component_TypeCon.!(t.typeCon).componentDecl;
	}
	def isSigned(t: Type) -> bool {
		return if(IntType.?(t), IntType.!(t).signed);
	}
	def isDouble(t: Type) -> bool {
		return FloatType.!(t).is64;
	}
	def getSyntheticVariantType(t: Type, vcase: VstCaseMember) -> Type {
		return vcase.decl.typeCon.create(t.nested);
	}
	def makeDefaultVariantRecord(prog: Program, t: Type) -> Record {
		t = getDefaultVariantCaseType(prog, t);
		var len = prog.ir.makeIrClass(t).fields.length;
		return prog.newRecord(t, len);
	}
	def getDefaultVariantCaseType(prog: Program, t: Type) -> Type {
		var decl = ClassType.!(t).classDecl;
		if (decl.superclass == null) {
			if (decl.cases.length > 0) return decl.cases[0].decl.typeCon.create(t.nested);
		}
		return t;
	}
	def getVariantTag(t: Type) -> int {
		var tag = ClassType.!(t).classDecl.variantTag;
		return if(tag >= 0, tag);
	}
	def getVariantTagType(t: Type) -> IntType {
		match (t) {
			x: ClassType => return ClassType.!(getRootType(t)).classDecl.tagType;
			x: EnumType => return x.enumDecl.tagType;
			_ => return null;
		}
	}
	def getEnumSetType(t: Type) -> IntType {
		return EnumSetType.!(t).repType;
	}
	def getRootType(t: Type) -> Type {
		while (true) {
			var s = getSuperType(t);
			if (s == null) return t;
			t = s;
		}
		return t;
	}
	def getSuperType(t: Type) -> Type {
		// inlined and optimized super type lookup
		if(ClassType.?(t)) return ClassType.!(t).getSuperType();
		return if(RefType.?(t), RefType.!(t).getSuperType());
	}
	def getTypeArgs(t: Type) -> TypeArgs {
		// inlined and optimized type arguments lookup
		if (t == null) return null;
		if (t.nested == null) return null;
		return if(ClassType.?(t), ClassType.!(t).getTypeArgs());
	}
	def mangleIrMember(m: IrMember) -> string {
		var buffer = m.render(StringBuilder.new());
		return Mangle.mangleB(buffer, StringBuilder.new()).toString();
	}
	def newRecordMap<T>() -> HashMap<Record, T> {
		return HashMap.new(Record.id, Record.==);
	}
	def renderResult(result: Result, vtype: Type, buf: StringBuilder) -> StringBuilder {
		if (buf == null) buf = StringBuilder.new();
		if (Exception.?(result)) {
			var except = Exception.!(result);
			if (except.msg != null) buf.put2("!%s: %s\n", except.error, except.msg);
			else buf.put1("!%s\n", except.error);

			for (list = except.trace; list != null; list = list.tail) {
				for (s = list.head; s != null; s = s.tail) {
					buf.put1("\t%q\n", s.render);
				}
			}
			return buf;
		}
		var val = Val.!(result);
		if (val == Values.BOTTOM) {
			renderBottom(vtype, buf);
			return buf;
		} else if (vtype == Byte.TYPE) {
			renderByte(Byte.unbox(val), buf);
			return buf;
		}
		match (val) {
			x: Box<int> => buf.putd(x.val);
			x: Box<long> => {
				buf.putd(x.val); buf.putc('l');
			}
			x: Box<bool> => buf.putz(x.val);
			x: Record => buf.put2("#%d:%q", x.id, x.rtype.render);
			x: TupleVal => {
				var vals = x.values;
				var list: List<Type> = null;
				if (vtype != null) list = vtype.nested;
				buf.putc('(');
				for (i < vals.length) {
					if (i > 0) buf.csp();
					if (list != null) {
						renderResult(vals[i], list.head, buf);
						list = list.tail;
					} else {
						renderResult(vals[i], null, buf);
					}
				}
				buf.putc(')');
			}
			x: Closure => {
				renderResult(x.val, null, buf);
				buf.putc(':');
				x.memberRef.render(buf);
			}
			x: ArrayRangeVal => x.array.rtype.render(buf.put3("#%d[%d..+%d]:", x.array.id, x.start, x.length));
			x: ArrayRangeStart => buf.put1("ArrayRangeStart:%d", x.start);
			x: PointerRangeStart => addOffset(buf.puts("PointerRangeStart:&"), x.start);
			x: FuncVal => x.memberRef.render(buf.putc('&'));
			x: Address<IrMethod> => addOffset(buf.put1("&%q", x.val.renderLong), x);
			x: Address<IrMtable> => addOffset(buf.put1("&mt(%q)", x.val.render), x);
			x: Address<Record> => addOffset(buf.put1("&#%d", x.val.id), x);
			x: Address<IrField> => addOffset(buf.put1("&%q", x.val.renderLong), x);
			x: Address<string> => addOffset(buf.put1("&%s", x.val), x);
			x: Address<long> => addOffset(buf.put1("&long=0x%x", x.val), x);
			x: CiRuntime_Address => addOffset(buf.put1("&CiRuntime.%s", x.name), x);
			x: Addr => addOffset(buf.putc('&'), x);
			x: Float32Val => buf.puts("f32:").putx(x.bits);
			x: Float64Val => buf.puts("f64:").putx(x.bits);
			x: ByteArrayOffset => {
				if (x.array == null) buf.put1("<null>[@%d]", x.offset);
				else buf.put2("#%d[@%d]", x.array.id, x.offset);
			}
			x: PackedRef => buf.put2("packed[%q|%q]", renderResult(x.r, null, _), renderResult(x.m, Long.TYPE, _));
			_ => buf.puts("<unknown value>");
		}
		return buf;
	}
	def renderVal(val: Val) -> string {
		return renderResult(val, null, null).toString();
	}
	def unboxI32(v: Val) -> int {
		match (v) {
			null => return 0;
			x: Box<int> => return x.val;
			x: Box<long> => return int.view(x.val);
			x: Box<bool> => return if(x.val, 1, 0);
			x: ArrayRangeStart => return x.start;
		}
		var buf = StringBuilder.new().puts("expected i32 value, got ");
		renderResult(v, null, buf);
		return fail(buf.toString());
	}
	def fail<T>(msg: string) -> T {
		var v: T;
		System.error(V3Exception.InternalError, msg);
		return v;
	}
	def fail1<T, A>(msg: string, p: A) -> T {
		return fail(Strings.format1(msg, p));
	}
	def unimplemented<T>() -> T {
		return fail("unimplemented");
	}
}
def addOffset(buf: StringBuilder, addr: Addr) {
	var name = if(addr.region == null, "data", addr.region.name);
	buf.put1("[%s", name);
	if (addr.offset < 0) buf.puts(" - ").putd(0 - addr.offset);
	if (addr.offset > 0) buf.puts(" + ").putd(addr.offset);
	buf.puts("]");
}
def renderByte(ch: byte, buf: StringBuilder) -> bool {
	Char.renderEscaped(ch, buf.putc('\'')).putc('\'');
	return true;
}
def renderBottom(vtype: Type, buf: StringBuilder) {
	if (vtype == null) {
		buf.puts("<null>");
		return;
	}
	var str: string;
	match (vtype.typeCon.kind) {
		VOID => str = "void";
		BOOL => str = "false";
		INT => str = "0";
		RANGE_START => str = "0";
		FLOAT => str = "float:0";
		CLASS, ARRAY, CLOSURE => str = "null";
		COMPONENT => str = V3.componentDecl(vtype).name();
		TUPLE => {
			buf.putc('(');
			for (list = vtype.nested; list != null; list = list.tail) {
				if (list != vtype.nested) buf.csp();
				V3.renderResult(Values.BOTTOM, list.head, buf);
			}
			buf.putc(')');
			return;
		}
		_ => {
			vtype.render(buf);
			str = ".null";
		}
	}
	buf.puts(str);
}

// Constants for exception names
component V3Exception {
	def NullCheck     = "NullCheckException";
	def TypeCheck     = "TypeCheckException";
	def BoundsCheck   = "BoundsCheckException";
	def LengthCheck   = "LengthCheckException";
	def Unimplemented = "UnimplementedException";
	def DivideByZero  = "DivideByZeroException";
	def InternalError = "InternalError";
	def HeapOverflow  = "HeapOverflow";
	def FatalCall     = "FatalCall";
}
