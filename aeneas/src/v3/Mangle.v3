// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utility methods to mangle Virgil-style names to Java/C names
component Mangle {
	var mangleTable  = Array<byte>.new(128);
	new() {
		init('<', 'L');
		init('>', 'R');
		init('-', 'M');
		init('(', 'P');
		init(')', 'Q');
		init(',', 'c');
		init('.', 'D');
		init('=', 'e');
		init('+', 'p');
		init('-', 's');
		init('/', 'd');
		init('%', 'm');
		init('*', 't');
		init('!', 'n');
		init('#', 'h');
		init('^', 'x');
		init('&', 'a');
		init('|', 'o');
		init('$', '$');
		init('[', 'B');
		init(']', 'b');
	}

	def init(c: byte, d: byte) {
		mangleTable[c] = d;
	}
	def mangleB(b1: StringBuilder, buffer: StringBuilder) -> StringBuilder {
		return mangleInto(b1.buf, b1.length, buffer);
	}
	def mangleInto(s: string, max: int, buffer: StringBuilder) -> StringBuilder {
		var i = 0;
		while (i < max) {
			var ch = s[i];
			if (ch == ' ') {
				// match " -> "
				if (s.length - i > 4 && s[i + 1] == '-' && s[i + 2] == '>' && s[i + 3] == ' ') {
					buffer.putc('$').putc('A');
					i = i + 3;
				}
				else buffer.putc('$').putc('_');
			} else if (ch == ',') {
				// match ", " and ","
				if (s.length - i > 2 && s[i + 1] == ' ') {
					buffer.putc('$').putc('C');
					i++;
				}
				else buffer.putc('$').putc('c');
			} else {
				var t = mangleTable[ch];
				if (t != '\x00') {
					buffer.putc('$').putc(t);
				} else {
					buffer.putc(ch);
				}
			}
			i++;
		}
		return buffer;
	}
	def demangle(buf: StringBuilder, s: string) -> StringBuilder {
		var i = 0;
		while (i < s.length - 1) {
			var ch = s[i];
			if (ch != '$') {
				buf.putc(ch);
				i++;
			} else {
				demangleC(buf, s[i+1]);
				i += 2;
			}
		}
		return buf.putr(s[i ...]);
	}
	def demangleC(buf: StringBuilder, ch: byte) {
		match (ch) {
			'A' => buf.puts(" -> ");
			'C' => buf.puts(", ");
			_ => {
				for (i < mangleTable.length) {
					var dch = mangleTable[i];
					if (dch == ch) return void(buf.putc(byte.view(i)));
				}
				buf.putc(ch);
			}
		}
	}
}
