// Copyright 2015 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// The type for user-declared enums.
class EnumType extends Type {
	def enumDecl: VstEnum;
	var setType: EnumSetType;
	var names: Record;

	new(hash: int, enumDecl, typeCon: TypeCon) super(hash, typeCon, null) { }

	def lookupCase(name: string) -> VstEnumCase {
		var member = enumDecl.memberMap[name];
		if (VstEnumCase.?(member)) return VstEnumCase.!(member);
		return null;
	}
	def getNameOperator() -> Operator {
		var types: Array<Type> = [this];
		return V3Op.newVstSugar(VstOperator.VariantGetName, types, types, V3.stringType);
	}
	def enumGetParamOperator(f: VstField) -> Operator {
		var types: Array<Type> = [this];
		return V3Op.newVstSugar(VstOperator.EnumGetParam(f), TypeUtil.NO_TYPES, types, f.getType());
	}
	def getNames(prog: Program) -> Record {
		if (names == null) {
			names = prog.newRecord(V3.stringArrayType, enumDecl.cases.length);
			for (vc in enumDecl.cases) {
				names.values[vc.tag] = Byte.boxString(vc.name(), prog);
			}
		}
		return names;
	}
	def byteSize() -> int {
		return IntType.!(enumDecl.tagType).byteSize();
	}
	def packedByteSize() -> int {
		return IntType.!(enumDecl.tagType).packedByteSize();
	}
}
// The type for user-declared enums' sets.
class EnumSetType extends Type {
	def enumDecl: VstEnum;
	def repType: IntType;
	private var cache: V3EnumSet_OpCache;

	new(hash: int, enumDecl, repType, typeCon: TypeCon) super(hash, typeCon, null) { }

	def opcache() -> V3EnumSet_OpCache {
		if (cache == null) cache = V3EnumSet_OpCache.new(this);
		return cache;
	}
	def genEnumToSet(x: SsaInstr, block: SsaBuilder) -> SsaInstr {
		var one = block.graph.valConst(repType, repType.box(1));
		var i = block.addApply(null, repType.opShl(), [one, x]);
		i.facts |= Fact.O_NO_SHIFT_CHECK;
		return i;
	}
}
class V3EnumSet_OpCache(t: Type) {
	private def binopTypes = [t, t];
	def opIntersect = V3Op.newVstSugar(VstOperator.EnumSetIntersect, TypeUtil.NO_TYPES, binopTypes, t);
	def opUnion = V3Op.newVstSugar(VstOperator.EnumSetUnion, TypeUtil.NO_TYPES, binopTypes, t);
	def opSub = V3Op.newVstSugar(VstOperator.EnumSetSubtract, TypeUtil.NO_TYPES, binopTypes, t);
	def opSubset = V3Op.newVstSugar(VstOperator.EnumSetSubset, TypeUtil.NO_TYPES, binopTypes, Bool.TYPE);
	def opStrictSubset = V3Op.newVstSugar(VstOperator.EnumSetStrictSubset, TypeUtil.NO_TYPES, binopTypes, Bool.TYPE);
	def opSuperset = V3Op.newVstSugar(VstOperator.EnumSetSuperset, TypeUtil.NO_TYPES, binopTypes, Bool.TYPE);
	def opStrictSuperset = V3Op.newVstSugar(VstOperator.EnumSetStrictSuperset, TypeUtil.NO_TYPES, binopTypes, Bool.TYPE);
}
