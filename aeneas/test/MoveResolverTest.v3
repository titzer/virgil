def TEST = UnitTest.new("MoveResolver", test);
var input: Array<int>;
def test() {
	// check all possible move graphs with 4 nodes
	for (i = -1; i < 4; i++) {
		for (j = -1; j < 4; j++) {
			for (k = -1; k < 4; k++) {
				for (l = -1; l < 4; l++) {
					setupInput(5);
					var m = MoveResolver.new(null);
					m.addMove(i, 1);
					m.addMove(j, 2);
					m.addMove(k, 3);
					m.addMove(l, 4);

					m.genMoves(alloc, move);

					check(1, i);
					check(2, j);
					check(3, k);
					check(4, l);
				}
			}
		}
	}
}

def check(loc: int, val: int) {
	if (input[loc] != val) {
		TEST.error(Strings.format2("expected %1 at %2", val, loc));
	}
}

def setupInput(len: int) {
	input = Array.new(len);
	for (i = 0; i < len; i++) input[i] = i;
}

def move(src: int, dst: int) {
	var val = if(src >= 0, input[src], src);
	TEST.print(Strings.format3("%1(=%2) -> %3\n", src, val, dst));
	input[dst] = val;
}

def alloc(loc: int) -> int {
	return 0; // always use register 0 for a temporary
}

