def T = UnitTests.registerT("intnorm:", _, IntNormalizerTester.new, _);
def X_ = void(
	T("32", test_32),
	T("16", test_16),
	T("8", test_8),
	T("getNormalType", test_getNormalType),
	T("shifts", test_shifts),
	()
);

def int_values = [
	0x00000000,
	0x00000011,
	0x00001100,
	0x00110000,
	0x11000000,
	0x11220000,
	0x11002200,
	0x11000022,
	0x11223344,
	0x12345678
];

def it(width: int) -> IntType {
	return Int.getType(true, width);
}
def ut(width: int) -> IntType {
	return Int.getType(false, width);
}

private class IntNormalizerTester(t: Tester) {
	def i = t.assert_eq<int>;
	def ai = t.asserta<int>("ints", _, _, null);
	def testType(norm: IntNormalizer, expect: Array<Type>, t: IntType) {
		var nt = norm.makeType(t);
		this.t.assertar("types", expect, nt.sub, Type.render);
		this.t.assert_eq(Tuple.newType(Lists.fromArray(expect)), nt.newType);
	}
	def testRemainder(signed: bool, width: int, base: int, l: List<Type>) -> List<Type> {
		var r = width % base;
		var rt = Int.getType(signed, if(r == 0, base, r));
		t.assert_eq(rt, l.head);
		return l.tail;
	}
}

def test_32(t: IntNormalizerTester) {
	def le_norm = IntNormalizer.new(32);
	def testType = t.testType;

	def base = ut(32);

	testType(le_norm, [base, it(1)], it(33));
	testType(le_norm, [base,  ut(2)], ut(34));
	testType(le_norm, [base, it(13)], it(45));
	testType(le_norm, [base,  ut(6)], ut(38));
	testType(le_norm, [base, it(16)], it(48));
	testType(le_norm, [base, ut(16)], ut(48));
	testType(le_norm, [base, it(31)], it(63));
	testType(le_norm, [base, ut(31)], ut(63));
	testType(le_norm, [base, it(32)], it(64));
	testType(le_norm, [base, ut(32)], ut(64));

	for (f in [it, ut]) {
		for (width = 1; width < 33; width++) {
			var tt = f(width);
			t.t.assert_eq(tt, le_norm.makeType(tt).newType);
		}

		var array = Array<Val>.new(1);
		for (x in int_values) {
			array[0] = Bool.TRUE;
			le_norm.normIntIntoArray(Int.TYPE, x, array, 0);
			t.i(x, Int.unbox(array[0]));
		}
	}
	var array = Array<Val>.new(2);
	for (f in [it, ut]) {
		for (width in [33, 48, 64]) {
			var ul = f(width);
			for (x in int_values) {
				for (y in int_values) {
					var lval = long.!(x) << 32 | u32.!(y);
					le_norm.normLongIntoArray(ul, lval, array, 0);
					t.i(x, Int.unbox(array[1]));
					t.i(y, Int.unbox(array[0]));

				}
			}
		}
	}
}


def test_16(t: IntNormalizerTester) {
	var le_norm = IntNormalizer.new(16);
	def testType = t.testType;

	def base = ut(16);

	testType(le_norm, [base, it(16)], it(32));
	testType(le_norm, [base, ut(16)], ut(32));
	testType(le_norm, [base, it(11)], it(27));
	testType(le_norm, [base, ut(11)], ut(27));
	testType(le_norm, [base, base, it(9)], it(41));
	testType(le_norm, [base, base, ut(8)], ut(40));
	testType(le_norm, [base, base, it(16)], it(48));
	testType(le_norm, [base, base, ut(16)], ut(48));
	testType(le_norm, [base, base, base, it(15)], it(63));
	testType(le_norm, [base, base, base, ut(15)], ut(63));
	testType(le_norm, [base, base, base, it(16)], it(64));
	testType(le_norm, [base, base, base, ut(16)], ut(64));

	def tests = [
		(0x00000000, (0x0000, 0x0000)),
		(0x00000011, (0x0000, 0x0011)),
		(0x00001100, (0x0000, 0x1100)),
		(0x00110000, (0x0011, 0x0000)),
		(0x11000000, (0x1100, 0x0000)),
		(0x11220000, (0x1122, 0x0000)),
		(0x11002200, (0x1100, 0x2200)),
		(0x11000022, (0x1100, 0x0022)),
		(0x11223344, (0x1122, 0x3344)),
		(0x12345678, (0x1234, 0x5678)),
		(0x87654321, (0x8765, 0x4321)),
		(0xffeeddcc, (0xffee, 0xddcc)),
		(0xfedcba98, (0xfedc, 0xba98))
	];

	var nat = ut(32);
	for (x in tests) {
		var array: Array<Val>;
		array = [Bool.TRUE, Bool.TRUE, Bool.TRUE, Bool.TRUE];

		array = [Bool.TRUE, Bool.TRUE, Bool.TRUE, Bool.TRUE];
		le_norm.normIntIntoArray(nat, x.0, array, 0);
		t.i(x.1.0, Int.unbox(array[1]));
		t.i(x.1.1, Int.unbox(array[0]));
	}

	def tests64 = [
		((0x0000000011223344), (0x0000, 0x0000, 0x1122, 0x3344)),
		((0x0000001122334455), (0x0000, 0x0011, 0x2233, 0x4455)),
		((0x0000110033445566), (0x0000, 0x1100, 0x3344, 0x5566)),
		((0x0011000044556677), (0x0011, 0x0000, 0x4455, 0x6677)),
		((0x1100000055667788), (0x1100, 0x0000, 0x5566, 0x7788)),
		((0x1122000066778899), (0x1122, 0x0000, 0x6677, 0x8899)),
		((0x11002200778899aa), (0x1100, 0x2200, 0x7788, 0x99aa)),
		((0x110000228899aabb), (0x1100, 0x0022, 0x8899, 0xaabb)),
		((0x1122334499aabbcc), (0x1122, 0x3344, 0x99aa, 0xbbcc)),
		((0x12345678aabbccdd), (0x1234, 0x5678, 0xaabb, 0xccdd)),
		((0x87654321bbccddee), (0x8765, 0x4321, 0xbbcc, 0xddee)),
		((0xffeeddccccddeeff), (0xffee, 0xddcc, 0xccdd, 0xeeff)),
		((0xfedcba98ddeeff00), (0xfedc, 0xba98, 0xddee, 0xff00)),
		((0xfedcba98eeff0011), (0xfedc, 0xba98, 0xeeff, 0x0011))
	];

	var ul = ut(64);
	var array = Array<Val>.new(8);
	for (x in tests64) {
		le_norm.normLongIntoArray(ul, x.0, array, 0);
		t.i(x.1.0, Int.unbox(array[3]));
		t.i(x.1.1, Int.unbox(array[2]));
		t.i(x.1.2, Int.unbox(array[1]));
		t.i(x.1.3, Int.unbox(array[0]));
	}

	le_norm.normIntIntoArray(Int.TYPE, -11, array, 0);
	t.i(-1, Int.unbox(array[1]));
}

def test_8(t: IntNormalizerTester) {
	var le_norm = IntNormalizer.new(8);
	def testType = t.testType;

	def base = ut(8);

	testType(le_norm, [base, it(1)], it(9));
	testType(le_norm, [base, ut(2)], ut(10));
	testType(le_norm, [base, it(7)], it(15));
	testType(le_norm, [base, ut(8)], ut(16));
	testType(le_norm, [base, base, it(3)], it(19));
	testType(le_norm, [base, base, ut(6)], ut(22));
	testType(le_norm, [base, base, it(8)], it(24));
	testType(le_norm, [base, base, ut(8)], ut(24));
	testType(le_norm, [base, base, base, it(4)], it(28));
	testType(le_norm, [base, base, base, ut(5)], ut(29));
	testType(le_norm, [base, base, base, it(6)], it(30));
	testType(le_norm, [base, base, base, ut(7)], ut(31));
	testType(le_norm, [base, base, base, it(8)], it(32));
	testType(le_norm, [base, base, base, ut(8)], ut(32));
	testType(le_norm, [base, base, base, base, ut(7)], ut(39));
	testType(le_norm, [base, base, base, base, it(8)], it(40));
	testType(le_norm, [base, base, base, base, ut(8)], ut(40));
	testType(le_norm, [base, base, base, base, base, base, base, ut(7)], ut(63));
	testType(le_norm, [base, base, base, base, base, base, base, it(8)], it(64));
	testType(le_norm, [base, base, base, base, base, base, base, ut(8)], ut(64));

	def tests = [
		(0x00000000, (0x00, 0x00, 0x00, 0x00)),
		(0x00000011, (0x00, 0x00, 0x00, 0x11)),
		(0x00001100, (0x00, 0x00, 0x11, 0x00)),
		(0x00110000, (0x00, 0x11, 0x00, 0x00)),
		(0x11000000, (0x11, 0x00, 0x00, 0x00)),
		(0x11220000, (0x11, 0x22, 0x00, 0x00)),
		(0x11002200, (0x11, 0x00, 0x22, 0x00)),
		(0x11000022, (0x11, 0x00, 0x00, 0x22)),
		(0x11223344, (0x11, 0x22, 0x33, 0x44)),
		(0x12345678, (0x12, 0x34, 0x56, 0x78)),
		(0x87654321, (0x87, 0x65, 0x43, 0x21)),
		(0xffeeddcc, (0xff, 0xee, 0xdd, 0xcc)),
		(0xfedcba98, (0xfe, 0xdc, 0xba, 0x98))
	];

	var nat = Int.getType(false, 32);
	for (x in tests) {
		var array: Array<Val>;
		array = [Bool.TRUE, Bool.TRUE, Bool.TRUE, Bool.TRUE];

		array = [Bool.TRUE, Bool.TRUE, Bool.TRUE, Bool.TRUE];
		le_norm.normIntIntoArray(nat, x.0, array, 0);
		t.i(x.1.0, Int.unbox(array[3]));
		t.i(x.1.1, Int.unbox(array[2]));
		t.i(x.1.2, Int.unbox(array[1]));
		t.i(x.1.3, Int.unbox(array[0]));

	}

	def tests64 = [
		((0x0000000011223344), (0x00, 0x00, 0x00, 0x00, 0x11, 0x22, 0x33, 0x44)),
		((0x0000001122334455), (0x00, 0x00, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55)),
		((0x0000110033445566), (0x00, 0x00, 0x11, 0x00, 0x33, 0x44, 0x55, 0x66)),
		((0x0011000044556677), (0x00, 0x11, 0x00, 0x00, 0x44, 0x55, 0x66, 0x77)),
		((0x1100000055667788), (0x11, 0x00, 0x00, 0x00, 0x55, 0x66, 0x77, 0x88)),
		((0x1122000066778899), (0x11, 0x22, 0x00, 0x00, 0x66, 0x77, 0x88, 0x99)),
		((0x11002200778899aa), (0x11, 0x00, 0x22, 0x00, 0x77, 0x88, 0x99, 0xaa)),
		((0x110000228899aabb), (0x11, 0x00, 0x00, 0x22, 0x88, 0x99, 0xaa, 0xbb)),
		((0x1122334499aabbcc), (0x11, 0x22, 0x33, 0x44, 0x99, 0xaa, 0xbb, 0xcc)),
		((0x12345678aabbccdd), (0x12, 0x34, 0x56, 0x78, 0xaa, 0xbb, 0xcc, 0xdd)),
		((0x87654321bbccddee), (0x87, 0x65, 0x43, 0x21, 0xbb, 0xcc, 0xdd, 0xee)),
		((0xffeeddccccddeeff), (0xff, 0xee, 0xdd, 0xcc, 0xcc, 0xdd, 0xee, 0xff)),
		((0xfedcba98ddeeff00), (0xfe, 0xdc, 0xba, 0x98, 0xdd, 0xee, 0xff, 0x00)),
		((0xfedcba98eeff0011), (0xfe, 0xdc, 0xba, 0x98, 0xee, 0xff, 0x00, 0x11))
	];

	var ul = ut(64);
	var array = Array<Val>.new(8);
	for (x in tests64) {
		le_norm.normLongIntoArray(ul, x.0, array, 0);
		t.i(x.1.0, Int.unbox(array[7]));
		t.i(x.1.1, Int.unbox(array[6]));
		t.i(x.1.2, Int.unbox(array[5]));
		t.i(x.1.3, Int.unbox(array[4]));
		t.i(x.1.4, Int.unbox(array[3]));
		t.i(x.1.5, Int.unbox(array[2]));
		t.i(x.1.6, Int.unbox(array[1]));
		t.i(x.1.7, Int.unbox(array[0]));
	}

	le_norm.normIntIntoArray(Int.TYPE, -11, array, 0);
	t.i(-1, Int.unbox(array[3]));
}

def test_getNormalType(test: IntNormalizerTester) {
	for (base = 1; base <= Int.MAX_WIDTH; base++) {
		var norm = IntNormalizer.new(byte.!(base));
		var bt = ut(base);
		for (t in [it, ut]) {
			for (width = 1; width <= Int.MAX_WIDTH; width++) {
				var tt = t(width);
				var nt = norm.makeType(tt).newType;
				if (width <= base) {
					test.t.assert_eq(tt, nt);
					continue;
				}
				test.t.assert_eq(Kind.TUPLE, nt.typeCon.kind);
				var types = nt.nested;
				for (w = width; w > base; w = w - base) {
					test.t.assert_eq(bt, types.head);
					types = types.tail;
				}
				types = test.testRemainder(tt.signed, width, base, types);
				test.t.assert_eq(null, types);
			}
		}
	}
}

def test_shifts(t: IntNormalizerTester) {
	{
		def n6 = IntNormalizer.new(8).normType(ut(48));
		var array = [0, 1, 2, 3, 4, 5];
		n6.shiftLeft(array, 2, -1);
		t.ai([-1, -1, 0, 1, 2, 3], array);

		n6.shiftRight(array, 1, -6);
		t.ai([-1, 0, 1, 2, 3, -6], array);
		n6.shiftRight(array, 4, -7);
		t.ai([3, -6, -7, -7, -7, -7], array);
	}
}
