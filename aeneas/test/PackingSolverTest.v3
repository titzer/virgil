// Copyright 2024 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def T = UnitTests.registerT("packing:", _, PackingSolverTester.new, _);
def X = [
	T("distinguishable", test_distinguishable),
	T("nonrefs", test_nonrefs),
	T("nonrefs_64", test_nonrefs_64),
	T("nonrefs_assigned", test_nonrefs_assigned),
	T("refs", test_refs),
	T("refs_64", test_refs_64)
];
def VERBOSE = false;

class PackingSolverTester(t: Tester) {
	var solver: PackingSolver;
	def useSolver(s: PackingSolver) { solver = s; }

	private def trySolve(problem: PackingProblem) -> PackingSolution {
		solver.reset();
		var solution = solver.solveScalar(problem);
		if (VERBOSE) Terminal.put2("%q => %q\n", problem.render, printSolution(_, solution));
		return solution;
	}
	private def printSolution(sb: StringBuilder, solution: PackingSolution) -> StringBuilder {
		if (solution == null) return sb.puts("no solution found");
		else return solution.render(sb);
	}

	def assert_distinguishable(patterns: Array<ScalarPattern>) {
		var elements = Array<bool>.new(patterns.length);
		for (i < elements.length) elements[i] = true;
		t.assert(solver.canDistinguish(patterns, elements), "expected distinguishable");
	}
	def assert_indistinguishable(patterns: Array<ScalarPattern>) {
		var elements = Array<bool>.new(patterns.length);
		for (i < elements.length) elements[i] = true;
		t.assert(!solver.canDistinguish(patterns, elements), "expected indistinguishable");
	}
	def assert_unsolvable(cases: Array<Array<PackingField>>, assignments: Array<(CaseField, Interval)>) {
		var problem = PackingProblem(cases, assignments);
		var solution = trySolve(problem);
		if (solution != null) t.fail(Strings.format2("%q: expected no solution, found solution %q", problem.render, solution.render));
	}
	def assert_solvable(cases: Array<Array<PackingField>>, assignments: Array<(CaseField, Interval)>) {
		var problem = PackingProblem(cases, assignments);
		var solution = trySolve(problem);
		if (solution == null) t.fail(Strings.format1("%q: expected solution, no solution found", problem.render));
		else verifyValidity(problem, solution);
	}
	def assert_unsolvable0(cases: Array<Array<PackingField>>) { return assert_unsolvable(cases, []); }
	def assert_solvable0(cases: Array<Array<PackingField>>) { return assert_solvable(cases, []); }

	private def verifyValidity(problem: PackingProblem, solution: PackingSolution) {
		var cases = problem.cases;
		for (a in problem.assignments) {
			if (solution.assignments[a.0] != a.1) t.fail(Strings.format1("%q: specified assignment not obeyed", problem.render));
		}
		for (i < cases.length) {
			for (j < cases[i].length) {
				var cf = CaseField(i, j);
				if (!solution.assignments.has(cf)) t.fail(Strings.format1("%q: missing assignment", problem.render));
				var s = solution.assignments[cf];

				match (cases[i][j]) {
					Ref => ;
					Nonref(size) => if (s.end - s.start != size) t.fail(Strings.format1("%q: wrong assignment size", problem.render));
				}
			}
		}

		for (i < cases.length) {
			var hasRef = false;
			for (j < cases[i].length) if (PackingField.Ref.?(cases[i][j])) hasRef = true;

			var pattern: ScalarPattern;
			if (solution.isRef) pattern = if(hasRef, solver.refPatterns.ptrref, solver.refPatterns.nonptrref).copy();
			else pattern = solver.refPatterns.nonref.copy();
			if (VERBOSE) {
				Terminal.put1("%q", pattern.render);
				Terminal.ln();
			}

			for (j < cases[i].length) {
				var cf = CaseField(i, j);
				var assignment = solution.assignments[cf];
				if (PackingField.Ref.?(cases[i][j])) continue;
				if (!pattern.tryAssignInterval(assignment)) t.fail(Strings.format3("%q: invalid assignment %q into %q", problem.render, assignment.render, pattern.render));
			}

			for (j < solver.size) {
				if (solution.patterns[i].bits[j] == pattern.bits[j]) continue;
				if (pattern.bits[j] != PackingBit.Unassigned) t.fail(Strings.format1("%q: assignments do not agree with pattern", problem.render));
			}
		}

		for (i < cases.length) {
			for (j < i) {
				var different = false;
				for (k < solver.size) {
					var ci = solution.patterns[i].bits[k];
					var cj = solution.patterns[j].bits[k];
					if (PackingBit.Fixed.?(ci) && PackingBit.Fixed.?(cj) && PackingBit.Fixed.!(ci).v != PackingBit.Fixed.!(cj).v) {
						different = true;
						break;
					}
				}

				if (different) continue;
				t.fail(Strings.format3("%q: patterns %q and %q not distinguishable", solution.render, solution.patterns[i].render, solution.patterns[j].render));
			}
		}
	}
}
def NR = PackingField.Nonref;
def R = PackingField.Ref;
def CF = CaseField;
def I = Interval;

def test_distinguishable(t: PackingSolverTester) {
	t.useSolver(PackingSolver.new(6, null));

	t.assert_indistinguishable([
		ScalarPatterns.parse("000000"),
		ScalarPatterns.parse("000000")
	]);
	t.assert_indistinguishable([
		ScalarPatterns.parse(".1.0.1"),
		ScalarPatterns.parse("0.1.0.")
	]);
	t.assert_distinguishable([
		ScalarPatterns.parse("000000"),
		ScalarPatterns.parse("000001")
	]);
	t.assert_distinguishable([
		ScalarPatterns.parse("111111"),
		ScalarPatterns.parse("000000")
	]);
	t.assert_distinguishable([
		ScalarPatterns.parse(".....0"),
		ScalarPatterns.parse(".....1")
	]);
	t.assert_distinguishable([
		ScalarPatterns.parse("....00"),
		ScalarPatterns.parse("....01"),
		ScalarPatterns.parse("....10"),
		ScalarPatterns.parse("....11")
	]);
	t.assert_distinguishable([
		ScalarPatterns.parse(".0...0"),
		ScalarPatterns.parse(".0...1"),
		ScalarPatterns.parse(".1...0"),
		ScalarPatterns.parse(".1...1")
	]);
}

def test_nonrefs(t: PackingSolverTester) {
	t.useSolver(PackingSolver.new(32, ScalarPatterns.TAGGED_PTR_32));

	t.assert_solvable0([[NR(32)]]);
	t.assert_solvable0([[NR(16), NR(16)]]);
	t.assert_solvable0([[NR(16), NR(15)], [NR(16), NR(12)]]);
	t.assert_solvable0([[NR(16), NR(15)], [NR(16), NR(15)]]);
	t.assert_solvable0([[NR(15), NR(16)], [NR(16), NR(15)]]);
	t.assert_solvable0([[NR(15), NR(15)], [NR(7), NR(15), NR(8)], [NR(15), NR(15)]]);

	t.assert_unsolvable0([[NR(16), NR(16)], [NR(16), NR(12)]]);
	t.assert_unsolvable0([[NR(16), NR(8), NR(8)], [NR(16), NR(12)]]);
}

def test_nonrefs_assigned(t: PackingSolverTester) {
	t.useSolver(PackingSolver.new(32, ScalarPatterns.TAGGED_PTR_32));

	t.assert_solvable(
		[[NR(16), NR(15)], [NR(16), NR(12)]],
		[(CF(0, 0), I(16, 32))]
	);

	// should fail, because we don't support non-contiguous intervals
	t.assert_unsolvable(
		[[NR(16), NR(15)], [NR(16), NR(12)]],
		[(CF(0, 0), I(12, 27))]
	);
	t.assert_solvable(
		[[NR(10), NR(15)], [NR(16), NR(12)]],
		[(CF(0, 1), I(12, 27))]
	);
}

def test_nonrefs_64(t: PackingSolverTester) {
	t.useSolver(PackingSolver.new(64, ScalarPatterns.TAGGED_PTR_64));

	t.assert_solvable0([[NR(64)]]);
	t.assert_solvable0([[NR(32), NR(32)]]);
	t.assert_solvable0([[NR(16), NR(15)], [NR(16), NR(12)]]);
	t.assert_solvable0([[NR(16), NR(15)], [NR(16), NR(15)]]);
	t.assert_solvable0([[NR(15), NR(16)], [NR(16), NR(15)]]);
	t.assert_solvable0([[NR(15), NR(15)], [NR(7), NR(15), NR(8)], [NR(15), NR(15)]]);
	t.assert_solvable0([[NR(16), NR(16)], [NR(16), NR(12)]]);
	t.assert_solvable0([[NR(16), NR(8), NR(8)], [NR(16), NR(12)]]);
}

def test_refs(t: PackingSolverTester) {
	t.useSolver(PackingSolver.new(32, ScalarPatterns.TAGGED_PTR_32));

	t.assert_solvable0([[R]]);
	t.assert_solvable0([[R], [R]]);
	t.assert_solvable0([[R], [R], [R]]);
	t.assert_solvable0([[R], [R], [R], [R]]);
	t.assert_solvable0([[R], [NR(16)]]);
	t.assert_solvable0([[R], [NR(31)]]);
	t.assert_solvable0([[R], [NR(16)], [NR(16)]]);
	t.assert_solvable0([[R, NR(2)]]);
	t.assert_solvable0([[R, NR(1)], [R, NR(1)]]);
	t.assert_solvable0([[R], [R], [NR(30)], [NR(30)]]);
	t.assert_solvable0([[R], []]);

	t.assert_unsolvable0([[R, R]]);
	t.assert_unsolvable0([[R], [NR(32)]]);
}

def test_refs_64(t: PackingSolverTester) {
	t.useSolver(PackingSolver.new(64, ScalarPatterns.TAGGED_PTR_64));

	t.assert_solvable0([[R]]);
	t.assert_solvable0([[R], [R]]);
	t.assert_solvable0([[R], [R], [R]]);
	t.assert_solvable0([[R], [R], [R], [R]]);
	t.assert_solvable0([[R], [NR(32)]]);
	t.assert_solvable0([[R], [NR(63)]]);
	t.assert_solvable0([[R], [NR(32)], [NR(32)]]);
	t.assert_solvable0([[R, NR(3)]]);
	t.assert_solvable0([[R, NR(1)], [R, NR(1)]]);

	t.assert_unsolvable0([[R, R]]);
	t.assert_unsolvable0([[R], [NR(64)]]);
}
