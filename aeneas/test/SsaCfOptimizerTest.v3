def T = UnitTests.registerT("cfopt:", _, SsaInstrTester.new, _);
def X_ = void(
	T("RemoveEdge", testRemoveEdge),
	T("KillInstr", testKillInstr),
	T("KillBlock", testKillBlock),
	T("KillSuccs", testKillSuccs),
	T("OptEdge", testOptEdge),
	T("ReplaceWithGoto", testReplaceWithGoto),
	T("SimplifyPhis", testSimplifyPhis),
	T("BranchSensitive", testBranchSensitive),
	T("DiamondDiamond", testDiamondDiamond),
	()
);

def H: SsaGraphBuildingHelper;

def newOptimizer(g: SsaGraph) -> SsaCfOptimizer {
	var context = SsaContext.new(null, null);
	context.graph = g;
	return SsaCfOptimizer.new(context);
}

def INT32_ADD = binop(Int.TYPE.opAdd(), _, _);

def binop(op: Operator, x: SsaInstr, y: SsaInstr) -> SsaInstr {
	var i = SsaApplyOp.new(null, op, [x, y]);
	i.setFact(Opcodes.facts(op.opcode));
	return i;
}

private class SsaCfOptimizerTester(t: Tester) {
}

def testRemoveEdge(t: SsaInstrTester) {
	var g = SsaGraph.new([], Int.TYPE);
	var cf = newOptimizer(g);
	for (rm < 4) {
		// Create 4 blocks that feed into a common destination
		var blocks = [SsaBlock.new(), SsaBlock.new(), SsaBlock.new(), SsaBlock.new()];
		var vals: Array<SsaInstr> = [g.intConst(3), g.intConst(4), g.intConst(5), g.intConst(6)];
		var d = SsaBlock.new();
		for (b in blocks) b.append(SsaGoto.new(d));
		for (b in blocks) t.assertSuccs(b, [d]);
		t.assertPreds(blocks, d);

		// Create a phi with 4 inputs
		var phi = SsaPhi.new(Int.TYPE, d, vals);
		d.append(phi);

		// Remove one of the edges
		var rem = blocks[rm];
		var sblocks = Arrays.deleteAt(blocks, rm);
		var svals = Arrays.deleteAt(vals, rm);

		Ssa.removeEdge(rem.succ(0), true);
		for (b in sblocks) t.assertSuccs(b, [d]);
		t.assertPreds(sblocks, d);
		t.assertInputs(phi, svals);
	}

	// Check simplification of phis
	for (rm < 2) {
		// Create 2 blocks that feed into a common destination
		var blocks = [SsaBlock.new(), SsaBlock.new()];
		var vals: Array<SsaInstr> = [g.intConst(4), g.intConst(5)];
		var d = SsaBlock.new();
		for (b in blocks) b.append(SsaGoto.new(d));
		for (b in blocks) t.assertSuccs(b, [d]);
		t.assertPreds(blocks, d);

		// Create a phi with 4 inputs
		var phi = SsaPhi.new(Int.TYPE, d, vals);
		d.append(phi);
		var ret = SsaReturn.new([phi]);
		d.append(ret);

		// Remove one of the edges
		var rem = blocks[rm];
		var sblocks = Arrays.deleteAt(blocks, rm);
		var svals = Arrays.deleteAt(vals, rm);

		Ssa.removeEdge(rem.succ(0), true);
		for (b in sblocks) t.assertSuccs(b, [d]);
		t.assertPreds(sblocks, d);

		// Check the phi has been simplified and removed
		t.assertInputs(ret, svals);
		t.t.assert_eq(ret, d.next);
		t.t.assert_eq(d, ret.prev);
		t.t.assert_eq(true, phi.facts.O_KILLED);
	}
}

def testKillInstr(t: SsaInstrTester) {
	var p0 = SsaParam.new(0, Int.TYPE);
	var p1 = SsaParam.new(1, Int.TYPE);
	var g = SsaGraph.new([p0, p1], Int.TYPE);
	var cf = newOptimizer(g);

	// Simple test.
	var block = SsaBlock.new();
	var add = H.INT32_ADD(p0, p1);
	block.append(add);
	t.assertBlock(block, [add]);
	Ssa.killInstr(add);
	t.assertBlock(block, []);
	t.assertKilled(add);
	t.assertNoUse(add, p0);
	t.assertNoUse(add, p1);

	// Test with instruction in the middle.
	block = SsaBlock.new();
	var i0 = H.INT32_ADD(p0, p1);
	var i1 = H.INT32_MUL(i0, i0);
	var i2 = H.INT32_AND(p0, p1);
	block.append(i0);
	block.append(i1);
	block.append(i2);
	Ssa.killInstr(i1);
	t.assertBlock(block, [i0, i2]);
	t.assertKilled(i1);
	t.assertNoUse(i1, i0);
}

def testKillBlock(t: SsaInstrTester) {
	var p0 = SsaParam.new(0, Int.TYPE);
	var p1 = SsaParam.new(1, Int.TYPE);
	var g = SsaGraph.new([p0, p1], Int.TYPE);
	var cf = newOptimizer(g);

	// Test killing an entire block.
	var block = SsaBlock.new();
	var i0: SsaInstr;
	var instrs = [
		i0 = H.INT32_ADD(p0, p1),
		H.INT32_MUL(i0, i0),
		H.INT32_AND(p0, p1)
	];

	for (i in instrs) block.append(i);

	cf.killBlock(block);

	t.assertBlock(block, []);
	for (i in instrs) {
		t.assertKilled(i);
		t.assertNoUse(i, p0);
	}
}

def testKillSuccs(t: SsaInstrTester) { } // TODO
def testOptEdge(t: SsaInstrTester) { } // TODO
def testReplaceWithGoto(t: SsaInstrTester) { } // TODO
def testSimplifyPhis(t: SsaInstrTester) { } // TODO
def testBranchSensitive(t: SsaInstrTester) { } // TODO

def testDiamondDiamond(t: SsaInstrTester) {
	var p0 = SsaParam.new(0, Int.TYPE);
	var g = SsaGraph.new([p0], Int.TYPE);

	var top = g.startBlock;
	var d1 = Diamond.new(top, p0);
	var phi = d1.phi(Bool.TYPE, g.trueConst(), g.falseConst());
	var d2 = Diamond.new(d1.merge, phi);
	var m = d2.phi(Int.TYPE, g.oneConst(), g.twoConst());
	var ret = SsaReturn.new([m]);
	d2.merge.append(ret);

	var cf = newOptimizer(g);
	cf.optimize();
	// TODO: clean up intermediate gotos and assert
	t.assertBlock(d2.merge, [m, ret]);
}
