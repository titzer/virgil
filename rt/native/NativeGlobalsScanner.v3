// Copyright 2019 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Encapsulates logic of finding roots in the program's initial heap using metadata
// from the compiler.
component NativeGlobalScanner {
	def D = RiGc.D;
	new() {
        	RiGc.scanGlobals = scanGlobals;
        }
	// Scan all the global roots in the program.
	def scanGlobals() {
		var p = CiRuntime.GC_ROOTS_START;
		if (RiGc.debug) D.puts(RiGc.CTRL_DEFAULT).puts("Beginning globals scan...\n");
		while (p < CiRuntime.GC_ROOTS_END) {
			// for each (offset, refmap) pair
			var offset = p.load<int>();
			var addr = CiRuntime.DATA_START + offset;
			var bits = (p + RiGc.INT_SIZE).load<int>();
			if (RiGc.debug) {
				D.puts("rootMap @ data + ").puti(offset);
				D.puts(" = ").putp(Pointer.NULL + bits).ln();
			}
			for (map = bits; map != 0; map = map >>> 1) { // XXX: special case all 1's
				// for each set bit, call the scan function
				if ((map & 1) != 0) {
					if (RiGc.debug) D.puts("@rootref data + ").puti(addr - CiRuntime.DATA_START).ln();
					RiGc.scanRoot(addr);
				}
				addr = addr + RiGc.REF_SIZE;
			}
			p = p + (RiGc.INT_SIZE + RiGc.INT_SIZE);
		}
		if (RiGc.debug) D.puts("Ended globals scan.\n");
	}
}
