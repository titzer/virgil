// Copyright 2019 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Encapsulates logic of finding roots in native stack frames
// by walking the callstack using metadata from the compiler.
component NativeStackScanner {
	def D = RiGc.D;
	new() {
        	RiGc.scanStack = scanStack;
        }
	// scan the stack, walking frames up to the main method
	def scanStack(i: Pointer, s: Pointer) {
		var ip = i, sp = s;
		while (true) {
			var frameWords = 0;
			if (RiGc.onScanStack != null) RiGc.onScanStack(ip, sp);
			var stackmapEntry = RiTables.exactMatch(RiTables.searchTable(CiRuntime.GC_STACKMAP_PAGES,
                        								CiRuntime.GC_STACKMAP_TABLE, ip));
			if (stackmapEntry == Pointer.NULL) {
				if (RiRuntime.userCodeList != null) {
					var userCode = RiRuntime.findUserCode(ip);
					if (userCode != null) {
						userCode.scanFrame(ip, sp);
						var t = userCode.nextFrame(ip, sp);
						ip = t.0; sp = t.1;
						continue;
					}
				}
				if (RiGc.onNoStackmap != null) RiGc.onNoStackmap(ip, sp, frameWords);
				return;
			}
			var stackMap = stackmapEntry.load<int>() >>> RiTables.PAGE_SHIFT;
			var frameSize = RiGc.scanStackFrame(sp, stackMap);
			if (RiGc.debug && frameSize != frameWords * RiGc.REF_SIZE) {
				D.puts("\n\n!GcError: mismatch between source frame size ")
				 .puti(frameWords * RiGc.REF_SIZE)
				 .puts(" and stackmap size of ")
				 .puti(frameSize)
				 .ln();
				RiOs.exit(255);
			}
			var t = RiOs.callerFrame(ip, sp, frameSize / RiGc.REF_SIZE);
			ip = t.0; sp = t.1;
		}
	}
}
