// Copyright 2019 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Encapsulates logic relating to walking the stack for printing exceptions
component NativeStackPrinter {
	def UNKNOWN = "unknown\n";
        def D = System.err;
	new() {
		System.printStack = printStack;
	}
	def printStack(i: Pointer, s: Pointer) {
		var ip = i, sp = s;
		while (true) {
			var sourceEntry = RiTables.findSource(ip);
			if (sourceEntry == Pointer.NULL) {
				if (RiRuntime.userCodeList == null) break;
				var userCode = RiRuntime.findUserCode(ip);
				if (userCode == null) break;
				userCode.describeFrame(ip, sp, D.putr);
				var t = userCode.nextFrame(ip, sp);
				ip = t.0; sp = t.1;
				continue;
			}
			var frameWords = printSourceEntry(ip, sourceEntry);
			var t = RiOs.callerFrame(ip, sp, frameWords);
			ip = t.0; sp = t.1;
		}
		D.ln();
	}
	def printLoc(ip: Pointer) -> int {
		if (ip < CiRuntime.CODE_START || ip >= CiRuntime.CODE_END) {
			D.puts(UNKNOWN);
			return 0;
		}
		var sourceEntry = RiTables.findSource(ip);
		if (sourceEntry == Pointer.NULL) {
			var methodEntry = RiTables.findMethod(ip);
			if (methodEntry != Pointer.NULL) return printMethodEntry(methodEntry, 0, 0);
			D.puts(UNKNOWN);
			return 0;
		} else {
			return printSourceEntry(ip, sourceEntry);
		}
	}
	def printSourceEntry(ip: Pointer, sourceEntry: Pointer) -> int {
		var entry = sourceEntry.load<int>() >>> RiTables.PAGE_SHIFT;
		if ((entry & 0x80000) != 0) {
			// | 20                  0 |
			// | 1:1 0:1   extended:18 |
			// | 1:1 1:1 framewords:18 |
			if ((entry & 0x40000) != 0) {
				var exEntry = CiRuntime.EX_TABLE + (RiTables.EX_ENTRY_SIZE * (entry & 0x3FFFF));
				return printExEntry(exEntry, false);
			} else {
				return entry & 0x3FFFF;
			}
		} else {
			// | 20              0 |
			// | 0:1 line:11 col:8 |
			var line = entry >>> 8, col = entry & 0xFF;
			var methodEntry = RiTables.findMethod(ip);
			return printMethodEntry(methodEntry, line, col);
		}
	}
	def printExEntry(exEntry: Pointer, printException: bool) -> int {
		// | 32             ex0            0 || 16      ex1      0 |
		// | FFFFF:20      ex:4     0:4 fw:4 ||    framewords:16   |
		// | FFFFF:20      ex:4 count:4 fw:4 ||    framewords:16   | ...
		// | meth:20       ex:4        col:8 ||       line:16      |
		var ex0 = exEntry.load<int>(), ex1 = (exEntry + 4).load<int>() & 0xFFFF;
		var meth = ex0 >>> 12;
		if (printException) {
			var ex = (ex0 >>> 8) & 0xF;
			D.putc('!').putz(getExString(ex)).ln();
		}
		if (meth == 0xFFFFF) {
			var count = 1 + (ex0 >>> 4) & 0xF;
			// multiple entries
			for (i = 1; i < count; i++) {
				printExEntry(exEntry + i * RiTables.EX_ENTRY_SIZE, false);
			}
			return ex1;
		} else {
			// method + exception + line + col
			var col = ex0 & 0xFF, line = ex1;
			return printMethodEntry(CiRuntime.SRC_METHODS_TABLE + 4 * meth, line, col);
		}
	}
	def getExString(ex: int) -> Pointer {
		if (Pointer.SIZE == 8) {
			// TODO: byte-encode ex string entries?
			return Pointer.NULL + (CiRuntime.EX_STRINGS + 4 * ex).load<int>();
		} else {
			return (CiRuntime.EX_STRINGS + Pointer.SIZE * ex).load<Pointer>();
		}
	}
	def printMethodEntry(methodEntry: Pointer, line: int, col: int) -> int {
		// | 32           meth0           0 || 32         meth1         0 |
		// | framewords:12 name:8 offset:12 || name:16           class:16 |
		var meth0 = methodEntry.load<int>();
		var meth1 = extendedMethodEntry(methodEntry).load<int>();
		var nameOffset = (((meth0 >>> 12) & 0xFF) << 16) | (meth1 >>> 16);
		var methName = CiRuntime.SRC_STRINGS + nameOffset;
		var classOffset = 8 * (meth1 & 0xFFFF);
		var classEntry = CiRuntime.SRC_CLASS_TABLE + classOffset;
		printFrame(classEntry, methName, line, col);
		var frameWords = meth0 >>> 20;
		return frameWords;
	}
	private def extendedMethodEntry(methodEntry: Pointer) -> Pointer {
		var extTable = CiRuntime.SRC_METHODS_TABLE_END;
		return extTable + (methodEntry - CiRuntime.SRC_METHODS_TABLE);
	}
	def printFrame(classEntry: Pointer, methName: Pointer, line: int, col: int) {
		// | 32         0 || 32        0 |
		// | className:32 || fileName:32 |
		D.puts("\tin ");
		var classIndex = classEntry.load<int>();
		if (classIndex > 0) {
			// classIndex == 0 indicates the method was top-level in a file
			var className = CiRuntime.SRC_STRINGS + classIndex;
			D.putz(className).putc('.');
		}
		D.putz(methName).puts("() [");
		var fileName = CiRuntime.SRC_STRINGS + (classEntry + 4).load<int>();
		D.putz(fileName);
		if (line > 0) {
			D.puts(" @ ").puti(line).putc(':').puti(col);
		}
		D.puts("]\n");
	}
}
