// Copyright 2019 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Encapsulates logic relating to walking the stack to be exposed to (power user) applications.
component NativeStackWalker {
	// Iterate over native frames, beginning at instruction pointer {i} and stack pointer {s},
	// calling {callback} for each frame.
	def iterateFrames(i: Pointer, s: Pointer, callback: (Pointer, Pointer, RiUserCode, int) -> bool) {
		var ip = i, sp = s; // TODO: rename
		while (true) {
			// Try looking up a GC stackmap entry first.
			var stackmapEntry = RiTables.exactMatch(RiTables.searchTable(CiRuntime.GC_STACKMAP_PAGES,
                        								CiRuntime.GC_STACKMAP_TABLE, ip));
			if (stackmapEntry != Pointer.NULL) { // found a (GC) stackmap entry.
				var stackMap = stackmapEntry.load<int>() >>> RiTables.PAGE_SHIFT;
				var frameSize = RiGc.stackmapSize(stackMap);
				callback(ip, sp, null, frameSize);
				var t = RiOs.callerFrame(ip, sp, frameSize / RiGc.REF_SIZE);
				ip = t.0; sp = t.1;
				continue;
			}

			// Search for user code.
			if (RiRuntime.userCodeList != null) { // XXX: proper dead-code-elimination needed
				var userCode = RiRuntime.findUserCode(ip);
				if (userCode == null) return; // no user code found
				callback(ip, sp, userCode, 0);
				var t = userCode.nextFrame(ip, sp);
				ip = t.0; sp = t.1;
				continue;
			}
			return; // unknown frame; assume finished
		}
	}
}