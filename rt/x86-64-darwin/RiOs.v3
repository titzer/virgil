// x86-darwin target-specific runtime routines.
component RiOs {
	def sigaction_buf = [2, 0, 0, 0];
	def installHandler(signum: int) {
		// fill out sigaction struct
		var sigbuf = Pointer.atContents(sigaction_buf);
		(sigbuf + 4).store(CiRuntime.signalStub);
		// install handler
		Darwin.syscall(DarwinConst.SYS_sigaction, (signum, sigbuf, Pointer.NULL));
	}
	def getIp(ucontext: Pointer) -> Pointer {
		return ((ucontext + 0x1c).load<Pointer>() + 0x34).load<Pointer>();
	}
	def getSp(ucontext: Pointer) -> Pointer {
		return ((ucontext + 0x1c).load<Pointer>() + 0x28).load<Pointer>();
	}
	// Get the access address from a siginfo.
	def getAccessAddress(siginfo: Pointer, ucontext: Pointer) -> Pointer {
		return Pointer.NULL; // TODO
	}
	// advance the ip and sp from the current frame to the caller's frame
	def callerFrame(i: Pointer, s: Pointer, frameWords: int) -> (Pointer, Pointer) {
		var ip = i, sp = s;
		sp = sp + (1 + frameWords) * Pointer.SIZE;
		ip = (sp + (0 - Pointer.SIZE)).load<Pointer>() + -1;
		return (ip, sp);
	}
	// exit with the given return code
	def exit(code: int) {
	        Darwin.syscall(DarwinConst.SYS_exit, code);
	}
	// initialize stack red zone for handling stack overflow
	def initStackRedZone(start: Pointer, end: Pointer) -> (Pointer, Pointer) { // TODO
		return (Pointer.NULL, Pointer.NULL);
	}
}
