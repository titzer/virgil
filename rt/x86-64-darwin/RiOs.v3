// Copyright 2022 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// x86-64-darwin target-specific runtime routines.
component RiOs {
	private def kernelbuf = Array<long>.new(4);

	def installHandler(signum: int) {
		// fill out sigaction struct
		kernelbuf[0] = CiRuntime.signalStub - Pointer.NULL; // sa_handler
		kernelbuf[1] = CiRuntime.signalStub - Pointer.NULL; // sa_handler: imitating genSigHandlerInstall
		kernelbuf[2] = 0x04000001_00000000;			// sa_mask

		var sigbuf = Pointer.atContents(kernelbuf);
		// install handler
		Darwin.syscall(DarwinConst.SYS_sigaction, (signum, sigbuf, Pointer.NULL, 8));
	}
	def getIp(ucontext: Pointer) -> Pointer {
		return ((ucontext + 0x30).load<Pointer>() + 0x90).load<Pointer>();
	}
	def getSp(ucontext: Pointer) -> Pointer {
		return ((ucontext + 0x30).load<Pointer>() + 0x48).load<Pointer>();
	}
	// Get the access address from a siginfo.
	def getAccessAddress(siginfo: Pointer, ucontext: Pointer) -> Pointer {
		return ((ucontext + 0x30).load<Pointer>() + 0x8).load<Pointer>();
	}
	// advance the ip and sp from the current frame to the caller's frame
	def callerFrame(i: Pointer, s: Pointer, frameWords: int) -> (Pointer, Pointer) {
		var ip = i, sp = s;
		var retAddrSize = 1;
		var fpSize = if(CiRuntime.FEATURE_FRAME_POINTER, 1);
		sp = sp + (frameWords + fpSize + retAddrSize) * Pointer.SIZE;
		ip = (sp + (0 - Pointer.SIZE)).load<Pointer>() + -1;
		return (ip, sp);
	}
	// exit with the given return code
	def exit(code: int) {
	        Darwin.syscall(DarwinConst.SYS_exit, code);
	}
	// initialize stack red zone for handling stack overflow
	def initStackRedZone(start: Pointer, end: Pointer) -> (Pointer, Pointer) {
		// size needed for the alternate signal stack
		def PAGE_SIZE = 4096;
		def ALT_SIZE = 16 * 1024;

		var delta = end - start;
		if (delta < (2 * PAGE_SIZE + ALT_SIZE)) return (Pointer.NULL, Pointer.NULL); // not enough space for red zone
		// | alt stack | red zone |     usable stack   |
		// ^ start                                     ^end
		var red_start = start + ALT_SIZE;
		var red_end = red_start + PAGE_SIZE;
		// mprotect a page PROT_NONE to serve as red zone for stack overflow
		Darwin.syscall(DarwinConst.SYS_mprotect, (red_start, PAGE_SIZE, DarwinConst.PROT_NONE));

		// set up alternate signal stack (using pages below red zone)
		kernelbuf[0] = start - Pointer.NULL;	// start
		kernelbuf[1] = ALT_SIZE;		// size, flags
		kernelbuf[2] = 0;			// flags?
		Darwin.syscall(DarwinConst.SYS_sigaltstack, (Pointer.atContents(kernelbuf), Pointer.NULL));
		return (red_start, red_end);
	}
}
