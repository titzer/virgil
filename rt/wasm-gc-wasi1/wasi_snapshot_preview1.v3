// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// imported module for WASI snapshot interface preview #1
import component wasi_snapshot_preview1 {
	// Copy the argument pointers into {argv} and the null-terminated strings into {argvbuf}.
	def args_get(argv: Pointer, argvbuf: Pointer) -> i32;
	// Copy the number of arguments into {numptr} and the total size into {sizeptr}.
	def args_sizes_get(numptr: Pointer, sizeptr: Pointer) -> i32;

	// Copy the environment variable pointers into {argv} and the null-terminated strings into {argvbuf}.
	def environ_get(argv: Pointer, argvbuf: Pointer) -> i32;
	// Copy the number of environment variables into {numptr} and the total size into {sizeptr}.
	def environ_sizes_get(numptr: Pointer, sizeptr: Pointer) -> i32;

	/// Provide file advisory information on a file descriptor.
	/// Note: This is similar to `posix_fadvise` in POSIX.
	def fd_advise(fd: i32, offset: i64, length: i64, advice: i32) -> i32;
	/// Force the allocation of space in a file.
	/// Note: This is similar to `posix_fallocate` in POSIX.
	def fd_allocate(fd: i32, offset: i64, length: i64) -> i32;
	/// Close a file descriptor.
	/// Note: This is similar to `close` in POSIX.
	def fd_close(fd: i32) -> i32;
	/// Synchronize the data of a file to disk.
	/// Note: This is similar to `fdatasync` in POSIX.
	def fd_datasync(fd: i32) -> i32;
	/// Get the attributes of a file descriptor.
	/// Note: This returns similar flags to `fsync(fd, F_GETFL)` in POSIX, as well as additional fields.
	def fd_fdstat_get(fd: i32, fdstatptr: Pointer) -> i32;
	/// Adjust the flags associated with a file descriptor.
	/// Note: This is similar to `fcntl(fd, F_SETFL, flags)` in POSIX.
	def fd_fdstat_set_flags(fd: i32, flags: i32) -> i32;
	/// Adjust the rights associated with a file descriptor.
	/// This can only be used to remove rights, and returns `errno::notcapable` if called in a way that would attempt to add rights
	def fd_fdstat_set_rights(fd: i32, rights_base: i64, rights_inheriting: i64) -> i32; // TODO: Rights.set
	/// Return the attributes of an open file.
	def fd_filestat_get(fd: i32, filestatptr: Pointer) -> i32;
	/// Adjust the size of an open file. If this increases the file's size, the extra bytes are filled with zeros.
	/// Note: This is similar to `ftruncate` in POSIX.
	def fd_filestat_set_size(fd: i32, size: i64) -> i32;
	/// Adjust the timestamps of an open file or directory.
	/// Note: This is similar to `futimens` in POSIX.
	def fd_filestat_set_times(fd: i32, access: i64, modified: i64, which: i32) -> i32;
	/// Read from a file descriptor, without using and updating the file descriptor's offset.
	/// Note: This is similar to `preadv` in POSIX.
	def fd_pread(fd: i32, iovecptr: Pointer, length: i32, offset: i64, sizeptr: Pointer) -> i32;
	/// Return a description of the given preopened file descriptor.
	def fd_prestat_get(fd: i32, prestatptr: Pointer) -> i32;
	/// Return a description of the given preopened file descriptor.
	def fd_prestat_dir_name(fd: i32, pathptr: Pointer, length: i32) -> i32;
	/// Write to a file descriptor, without using and updating the file descriptor's offset.
	/// Note: This is similar to `pwritev` in POSIX.
	def fd_pwrite(fd: i32, iovecptr: Pointer, length: i32, offset: i64, sizeptr: Pointer) -> i32;
	/// Read from a file descriptor.
	/// Note: This is similar to `readv` in POSIX.
	def fd_read(fd: i32, iovecptr: Pointer, length: i32, sizeptr: Pointer) -> i32;
	/// Read directory entries from a directory.
	/// When successful, the contents of the output buffer consist of a sequence of
	/// directory entries. Each directory entry consists of a `dirent` object,
	/// followed by `dirent::d_namlen` bytes holding the name of the directory
	/// entry.
	/// This function fills the output buffer as much as possible, potentially
	/// truncating the last directory entry. This allows the caller to grow its
	/// read buffer size in case it's too small to fit a single large directory
	/// entry, or skip the oversized directory entry.
	def fd_readdir(fd: i32, buf: Pointer, length: i32, cookie: i64, sizeptr: Pointer) -> i32;
	/// Atomically replace a file descriptor by renumbering another file descriptor.
	/// Due to the strong focus on thread safety, this environment does not provide
	/// a mechanism to duplicate or renumber a file descriptor to an arbitrary
	/// number, like `dup2()`. This would be prone to race conditions, as an actual
	/// file descriptor with the same number could be allocated by a different
	/// thread at the same time.
	/// This function provides a way to atomically renumber file descriptors, which
	/// would disappear if `dup2()` were to be removed entirely.
	def fd_renumber(fd: i32, to: i32) -> i32;
	/// Move the offset of a file descriptor.
	/// Note: This is similar to `lseek` in POSIX.
	def fd_seek(fd: i32, offset: i64, whence: i32, sizeptr: Pointer) -> i32;
	/// Synchronize the data and metadata of a file to disk.
	/// Note: This is similar to `fsync` in POSIX.
	def fd_sync(fd: i32) -> i32;
	/// Return the current offset of a file descriptor.
	/// Note: This is similar to `lseek(fd, 0, SEEK_CUR)` in POSIX.
	def fd_tell(fd: i32, sizeptr: Pointer) -> i32;
	/// Write to a file descriptor.
	/// Note: This is similar to `writev` in POSIX.
	def fd_write(fd: i32, iovecptr: Pointer, length: i32, sizeptr: Pointer) -> i32;

	/// Create a directory.
	/// Note: This is similar to `mkdirat` in POSIX.
	/// Concurrently poll for the occurrence of a set of events.
	def path_create_directory(fd: i32, pathptr: Pointer, length: i32) -> i32;
	/// Return the attributes of a file or directory.
	/// Note: This is similar to `stat` in POSIX.
	def path_filestat_get(fd: i32, flags: i32, pathptr: Pointer, length: i32, statptr: Pointer) -> i32;
	/// Adjust the timestamps of a file or directory.
	/// Note: This is similar to `utimensat` in POSIX.
	def path_filestat_set_times(fd: i32, flags: i32, pathptr: Pointer, length: i32,
		accessed: i64, modified: i64, tflags: i32) -> i32;
	/// Create a hard link.
	/// Note: This is similar to `linkat` in POSIX.
	def path_link(old_fd: i32, old_flags: i32, old_pathptr: Pointer, old_length: i32,
		new_fd: i32, new_pathptr: Pointer, new_length: i32) -> i32;
	/// Open a file or directory.
	/// The returned file descriptor is not guaranteed to be the lowest-numbered
	/// file descriptor not currently open; it is randomized to prevent
	/// applications from depending on making assumptions about indexes, since this
	/// is error-prone in multi-threaded contexts. The returned file descriptor is
	/// guaranteed to be less than 2**31.
	/// Note: This is similar to `openat` in POSIX.
	def path_open(fd: i32, flags: i32, pathptr: Pointer, length: i32,
		oflags: i32, base_rights: i64, inh_rights: i64, fdflags: i32, fdptr: Pointer) -> i32;
	/// Read the contents of a symbolic link.
	/// Note: This is similar to `readlinkat` in POSIX.
	def path_readlink(fd: i32, pathptr: Pointer, length: i32,
		bufptr: Pointer, buflength: i32, sizeptr: Pointer) -> i32;
	/// Remove a directory.
	/// Return `errno::notempty` if the directory is not empty.
	/// Note: This is similar to `unlinkat(fd, path, AT_REMOVEDIR)` in POSIX.
	def path_remove_directory(fd: i32, pathptr: Pointer, length: i32) -> i32;
	/// Rename a file or directory.
	/// Note: This is similar to `renameat` in POSIX.
	def path_rename(fd: i32, old_pathptr: Pointer, old_length: i32, new_fd: i32, new_path: Pointer, new_length: i32) -> i32;
	/// Create a symbolic link.
	/// Note: This is similar to `symlinkat` in POSIX.
	def path_symlink(old_pathptr: Pointer, old_length: i32, fd: i32, new_pathptr: Pointer, new_length: i32) -> i32;
	/// Unlink a file.
	/// Return `errno::isdir` if the path refers to a directory.
	/// Note: This is similar to `unlinkat(fd, path, 0)` in POSIX.
	def path_unlink_file(fd: i32, pathptr: Pointer, length: i32) -> i32;

	/// Return the resolution of a clock.
	/// Implementations are required to provide a non-zero value for supported clocks. For unsupported clocks,
	/// return `errno::inval`.
	/// Note: This is similar to `clock_getres` in POSIX.
	def clock_res_get(id: i32, retptr: Pointer) -> i32;
	/// Return the time value of a clock.
	/// Note: This is similar to `clock_gettime` in POSIX.
	def clock_time_get(id: i32, lag: i64, retptr: Pointer) -> i32;

	/// Temporarily yield execution of the calling thread.
	/// Note: This is similar to `sched_yield` in POSIX.
	def sched_yield() -> i32;

	/// Terminate the process normally. An exit code of 0 indicates successful
	/// termination of the program. The meanings of other values is dependent on
	/// the environment.
	def proc_exit(code: i32);
	/// Send a signal to the process of the calling thread.
	/// Note: This is similar to `raise` in POSIX.
	def proc_raise(signum: i32) -> i32;

        /// Concurrently poll for the occurrence of a set of events.
	def poll_oneoff(inv: i32, outv: i32, count: i32, sizeptr: Pointer) -> i32;

	/// Write high-quality random data into a buffer.
	/// This function blocks when the implementation is unable to immediately
	/// provide sufficient high-quality random data.
	/// This function may execute slowly, so when large mounts of random data are
	/// required, it's advisable to use this function to seed a pseudo-random
	/// number generator, rather than to provide the random data directly.
	def random_get(bufptr: Pointer, length: i32) -> i32;

	/// Receive a message from a socket.
	/// Note: This is similar to `recv` in POSIX, though it also supports reading
	/// the data into multiple buffers in the manner of `readv`.
	def sock_recv(fd: i32, bufptr: Pointer, length: i32, flags: i32, sizeptr: Pointer, flagsptr: Pointer) -> i32;
	/// Send a message on a socket.
	/// Note: This is similar to `send` in POSIX, though it also supports writing
	/// the data from multiple buffers in the manner of `writev`.
	def sock_send(fd: i32, bufptr: Pointer, length: i32, flags: i32, sizeptr: Pointer) -> i32;
	/// Shut down socket send and receive channels.
	/// Note: This is similar to `shutdown` in POSIX.
	def sock_shutdown(fd: i32, flags: i32) -> i32;
}

enum wasi_whence {
	SET, CUR, END
}

enum wasi_errno(code: u16, msg: string) {
	SUCCESS(0, "No error occurred. System call completed successfully."),
	TOO_BIG(1, "Argument list too long."),
	ACCES(2, "Permission denied."),
	ADDRINUSE(3, "Address in use."),
	ADDRNOTAVAIL(4, "Address not available."),
	AFNOSUPPORT(5, "Address family not supported."),
	AGAIN(6, "Resource unavailable, or operation would block."),
	ALREADY(7, "Connection already in progress."),
	BADF(8, "Bad file descriptor."),
	BADMSG(9, "Bad message."),
	BUSY(10, "Device or resource busy."),
	CANCELED(11, "Operation canceled."),
	CHILD(12, "No child processes."),
	CONNABORTED(13, "Connection aborted."),
	CONNREFUSED(14, "Connection refused."),
	CONNRESET(15, "Connection reset."),
	DEADLK(16, "Resource deadlock would occur."),
	DEST(17, "Destination address required."),
	DOM(18, "Mathematics argument out of domain of function."),
	DQUOT(19, "Reserved."),
	EXIST(20, "File exists."),
	FAULT(21, "Bad address."),
	FBIG(22, "File too large."),
	HOSTUNREACH(23, "Host is unreachable."),
	IDRM(24, "Identifier removed."),
	ILSEQ(25, "Illegal byte sequence."),
	INPROGRESS(26, "Operation in progress."),
	INTR(27, "Interrupted function."),
	INVAL(28, "Invalid argument."),
	IO(29, "I/O error."),
	ISCONN(30, "Socket is connected."),
	ISDIR(31, "Is a directory."),
	LOOP(32, "Too many levels of symbolic links."),
	MFILE(33, "File descriptor value too large."),
	MLINK(34, "Too many links."),
	MSGSIZE(35, "Message too large."),
	MULTIHOP(36, "Reserved."),
	NAMETOOLONG(37, "Filename too long."),
	NETDOWN(38, "Network is down."),
	NETRESET(39, "Connection aborted by network."),
	NETUNREACH(40, "Network unreachable."),
	NFILE(41, "Too many files open in system."),
	NOBUFS(42, "No buffer space available."),
	NODEV(43, "No such device."),
	NOENT(44, "No such file or directory."),
	NOEXEC(45, "Executable file format error."),
	NOLCK(46, "No locks available."),
	NOLINK(47, "Reserved."),
	NOMEM(48, "Not enough space."),
	NOMSG(49, "No message of the desired type."),
	NOPROTOOPT(50, "Protocol not available."),
	NOSPC(51, "No space left on device."),
	NOSYS(52, "Function not supported."),
	NOTCONN(53, "The socket is not connected."),
	NOTDIR(54, "Not a directory or a symbolic link to a directory."),
	NOTEMPTY(55, "Directory not empty."),
	NOTRECOVERABLE(56, "State not recoverable."),
	NOTSOCK(57, "Not a socket."),
	NOTSUP(58, "Not supported, or operation not supported on socket."),
	NOTTY(59, "Inappropriate I/O control operation."),
	NXIO(60, "No such device or address."),
	OVERFLOW(61, "Value too large to be stored in data type."),
	OWNERDEAD(62, "Previous owner died."),
	PERM(63, "Operation not permitted."),
	PIPE(64, "Broken pipe."),
	PROTO(65, "Protocol error."),
	PROTONOSUPPORT(66, "Protocol not supported."),
	PROTOTYPE(67, "Protocol wrong type for socket."),
	RANGE(68, "Result too large."),
	ROFS(69, "Read-only file system."),
	SPIPE(70, "Invalid seek."),
	SRCH(71, "No such process."),
	STALE(72, "Reserved."),
	TIMEDOUT(73, "Connection timed out."),
	TXTBSY(74, "Text file busy."),
	XDEV(75, "Cross-device link."),
	NOTCAPABLE(76, "Extension: Capabilities insufficient.")
}

enum wasi_rights {
	// The right to invoke `fd_datasync`.
	//
	// If `path_open` is set, includes the right to invoke
	// `path_open` with `fdflags::dsync`.
	fd_datasync,
	// The right to invoke `fd_read` and `sock_recv`.
	//
	// If `rights::fd_seek` is set, includes the right to invoke `fd_pread`.
	fd_read,
	// The right to invoke `fd_seek`. This flag implies `rights::fd_tell`.
	fd_seek,
	// The right to invoke `fd_fdstat_set_flags`.
	fd_fdstat_set_flags,
	// The right to invoke `fd_sync`.
	//
	// If `path_open` is set, includes the right to invoke
	// `path_open` with `fdflags::rsync` and `fdflags::dsync`.
	fd_sync,
	// The right to invoke `fd_seek` in such a way that the file offset
	// remains unaltered (i.e., `whence::cur` with offset zero), or to
	// invoke `fd_tell`.
	fd_tell,
	// The right to invoke `fd_write` and `sock_send`.
	// If `rights::fd_seek` is set, includes the right to invoke `fd_pwrite`.
	fd_write,
	// The right to invoke `fd_advise`.
	fd_advise,
	// The right to invoke `fd_allocate`.
	fd_allocate,
	// The right to invoke `path_create_directory`.
	path_create_directory,
	// If `path_open` is set, the right to invoke `path_open` with `oflags::creat`.
	path_create_file,
	// The right to invoke `path_link` with the file descriptor as the
	// source directory.
	path_link_source,
	// The right to invoke `path_link` with the file descriptor as the
	// target directory.
	path_link_target,
	// The right to invoke `path_open`.
	path_open,
	// The right to invoke `fd_readdir`.
	fd_readdir,
	// The right to invoke `path_readlink`.
	path_readlink,
	// The right to invoke `path_rename` with the file descriptor as the source directory.
	path_rename_source,
	// The right to invoke `path_rename` with the file descriptor as the target directory.
	path_rename_target,
	// The right to invoke `path_filestat_get`.
	path_filestat_get,
	// The right to change a file's size (there is no `path_filestat_set_size`).
	// If `path_open` is set, includes the right to invoke `path_open` with `oflags::trunc`.
	path_filestat_set_size,
	// The right to invoke `path_filestat_set_times`.
	path_filestat_set_times,
	// The right to invoke `fd_filestat_get`.
	fd_filestat_get,
	// The right to invoke `fd_filestat_set_size`.
	fd_filestat_set_size,
	// The right to invoke `fd_filestat_set_times`.
	fd_filestat_set_times,
	// The right to invoke `path_symlink`.
	path_symlink,
	// The right to invoke `path_remove_directory`.
	path_remove_directory,
	// The right to invoke `path_unlink_file`.
	path_unlink_file,
	// If `rights::fd_read` is set, includes the right to invoke `poll_oneoff` to subscribe to `eventtype::fd_read`.
	// If `rights::fd_write` is set, includes the right to invoke `poll_oneoff` to subscribe to `eventtype::fd_write`.
	poll_fd_readwrite,
	// The right to invoke `sock_shutdown`.
	sock_shutdown,
	// The right to invoke `sock_accept`.
	sock_accept
}

enum wasi_oflags {
    // Create file if it does not exist.
    creat,
    // Fail if not a directory.
    directory,
    // Fail if file already exists.
    excl,
    // Truncate file to size 0.
    trunc
}

enum wasi_clock {
	realtime,
	monotonic,
	process_cputime_id,
	thread_cputime_id
}
