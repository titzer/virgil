// Copyright 2024 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def FIRST_PREOPEN = 3;
def MAX_PREOPENS = 10;
var preopenCount = -1;
var relativeFd = -1;
var preopens = Array<(string, int)>.new(MAX_PREOPENS);
var buf: Range<int>;

// Scans the preopens and populates the array of (name, fd) pairs.
def init() {
	buf = RiRuntime.allocRange<int>(2, 4);
	preopenCount = 0;
	for (i = FIRST_PREOPEN; i < (FIRST_PREOPEN + MAX_PREOPENS); i++) {
		var r = wasi_snapshot_preview1.fd_prestat_get(i, Pointer.atContents(buf));
		if (r != 0) break;
		var len = buf[1];
		if (len == 0) break;
		var name: Array<byte>;
		var nameBuf = System.createBuffer(len);
		r = wasi_snapshot_preview1.fd_prestat_dir_name(i, Pointer.atContents(nameBuf), len);
		if (r == 0) {
			name = Array<byte>.new(len);
			System.copyRange(nameBuf, name);
		}
		System.freeBuffer(nameBuf);
		if (r != 0) break;
		preopens[preopenCount++] = (name, i);
		if (len == 1 && name[0] == '.') relativeFd = i;
	}
}

// Lazily scans WASI pre-opened directories and matches paths to preopens.
component WasiPreopens {
	def find(path: string) -> int {
		if (path.length == 0) return -1;
		if (preopenCount < 0) init();
		// If the path is not absolute and there is a '.' preopened, use that.
		if (path[0] != '/' && relativeFd >= 0) return relativeFd;
		// Search for an absolute or relative match
		for (i < preopenCount) {
			var t = preopens[i];
			if (checkPrefix(t.0, path)) return t.1;
		}
		return -1;
	}
}
def checkPrefix(prefix: string, path: string) -> bool {
	if (prefix.length > path.length) return false;
	for (i < prefix.length) {
		if (path[i] != prefix[i]) return false;
	}
	if (prefix[prefix.length - 1] == '/') return true;
	if (path.length > prefix.length && path[prefix.length] == '/') return true;
	return false;
}
