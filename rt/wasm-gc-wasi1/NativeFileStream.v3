// Copyright 2019 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// a closure for a file descriptor, e.g. to make STDERR easier to use
class NativeFileStream(out: (int, Pointer, int) -> int, fd: int) {
	def IOBUF_SIZE = 4096;  // to make large puts more efficient
	var iobuf: Range<byte>;
	new() {
		if (System.atRunTime) setIobuf();
	}
	def setIobuf() {
		iobuf = RiRuntime.allocBytes(IOBUF_SIZE);  // an off-heap range
	}
	// print an integer to this stream
	def puti(i: long) -> this { // XXX(fast): special for 32-bit ints
		if (i == 0) {
                	putc('0');
                        return;
                }
		var negative = true;
		if (i > 0) {
			negative = false;
			i = 0 - i;
		}
		var pos = 24;
		while (i != 0) { // XXX: use pointer loop instead?
			var digit = byte.!('0' - i % 10);
			iobuf[--pos] = digit;
			i = i / 10;
		}
		if (negative) iobuf[--pos] = '-';
		out(fd, Pointer.atContents(iobuf) + pos, 24 - pos);
	}
	// print a string to this stream, by copying through iobuf
	def puts(str: string) -> this {
		var len = str.length;
		for (idx = 0; idx < len; idx += IOBUF_SIZE) {
			var amount = len - idx;
			if (amount > IOBUF_SIZE) amount = IOBUF_SIZE;
			for (i = 0; i < amount; i++) {
				iobuf[i] = str[idx + i];
			}
			out(fd, Pointer.atContents(iobuf), amount);
		}
	}
	// print a single character to this stream
	def putc(ch: byte) -> this {
		iobuf[0] = ch;
		out(fd, Pointer.atContents(iobuf), 1);
	}
	// print a pointer e.g. (0xFF00AB02) to this stream
	def putp(p: Pointer) -> this {
		var val = p - Pointer.NULL;
		iobuf[0] = '0';
		iobuf[1] = 'x';
		match (Pointer.SIZE) {
			2 => for (i < 4)  { hexChar(2 + i, u4.view(val >>> 12)); val <<= 4; }
			4 => for (i < 8)  { hexChar(2 + i, u4.view(val >>> 28)); val <<= 4; }
			8 => for (i < 16) { hexChar(2 + i, u4.view(val >>> 60)); val <<= 4; }
		}
		out(fd, Pointer.atContents(iobuf), 2 + Pointer.SIZE * 2);
	}
	private def hexChar(index: int, v: u4) {
		iobuf[index] = byte.!(if(v > 9, 'A' + v - 10, '0' + v));
	}
	// print a zero-terminated string to this stream
	// note: must be in memory
	def putz(p: Pointer) -> this {
		for (len = 0; true; len++) {
			if ((p + len).load<byte>() == '\x00') {
				out(fd, p, len);
                                break;
			}
		}
	}
	// note: must be an in memory range
	def putr(data: Range<byte>) {
		out(fd, Pointer.atContents(data), data.length);
	}
	def ln() -> this {
		putc('\n');
	}
}
