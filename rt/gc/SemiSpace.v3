// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def OUT = RiGc.OUT;
// A simple semispace copying collector.
component Semispace {
	var toSpace_start: Pointer;	// start of to-space region
	var toSpace_dirty: Pointer;	// end of dirty part of to-space region
	var toSpace_end: Pointer;	// end of to-space region
	var alloc_ptr: Pointer;		// allocation point in to-space region
	var fromSpace_start: Pointer;	// start of from-space region
	var fromSpace_end: Pointer;	// end of frame-space region
	var collecting = false;		// to prevent reentry

	new() {
		// install initialization and collection with runtime
		RiGc.scanRoot = scanSlot;
		RiGc.rescanRoot = rescanSlot;
		RiRuntime.gcInit = init;
		RiRuntime.gcCollect = collect;
		GcStats.gc_current_allocated = fromSpaceAllocated;
	}
	// initialize the garbage collection spaces for runtime
	def init() {
		var heapSize = CiRuntime.HEAP_END - CiRuntime.HEAP_START;
		var heapMid = CiRuntime.HEAP_START + ((heapSize >> 1) & 0xFFFFFFF0);
		fromSpace_start = CiRuntime.HEAP_START;
		fromSpace_end = heapMid;
		toSpace_start = heapMid;
		toSpace_dirty = toSpace_start;
		alloc_ptr = fromSpace_start;
		toSpace_end = CiRuntime.HEAP_END;
		CiRuntime.heapCurLoc.store(fromSpace_start);
		CiRuntime.heapEndLoc.store(fromSpace_end);

		if (RiGc.verbose) {
			OUT.puts("CiRuntime.DATA_START = ").putp(CiRuntime.DATA_START).ln();
			OUT.puts("CiRuntime.DATA_END = ").putp(CiRuntime.DATA_END).ln();
			OUT.puts("CiRuntime.HEAP_START = ").putp(CiRuntime.HEAP_START).ln();
			OUT.puts("CiRuntime.HEAP_END = ").putp(CiRuntime.HEAP_END).ln();
			OUT.puts("CiRuntime.heapCur = ").putp(CiRuntime.heapCurLoc.load<Pointer>()).ln();
			OUT.puts("CiRuntime.heapEnd = ").putp(CiRuntime.heapEndLoc.load<Pointer>()).ln();
                }
	}
	// Scan a slot and update it if necessary.
	def scanSlot(slot: Pointer) {
		var oop = slot.load<Pointer>();
		if (oop == Pointer.NULL) return;
		if (oop < fromSpace_end) {
			if (oop >= fromSpace_start) {
				// oop lies in from-space, relocate
				var newoop = oop.load<Pointer>(); // read forwarding pointer
				if (newoop >= toSpace_start && newoop < alloc_ptr) {
					// object has already been moved
					if (newoop != oop) {
						slot.store(newoop);
						if (RiGc.debug) {
							OUT.puts("[").putp(slot)
							   .puts("] = ").putp(oop).puts(" moved to ")
							   .putp(newoop).ln();
						}
					}
				} else {
					// object hasn't been moved, copy it to to-space
					var size = RiGc.objectSize(oop);
					newoop = alloc_ptr;
					if (RiGc.debug) {
						OUT.puts("[").putp(slot)
						   .puts("] = ").putp(oop).puts(" copied to ")
						   .putp(newoop).puts(", ").putd(size).puts(" bytes\n");
					}
					alloc_ptr = alloc_ptr + size;
					RiGc.memCopy(newoop, oop, size);
					slot.store(newoop);
					oop.store(newoop); // write forwarding pointer
				}
				return;
			}
		}
		if (oop < CiRuntime.DATA_END && oop >= CiRuntime.DATA_START) return;
		OUT.puts("!GcError: invalid reference @ ").putp(slot).puts(" -> ").putp(oop);
		System.error("GcError", "fatal");
	}
	// Rescan a slot that may or may not have already been relocated.
	def rescanSlot(slot: Pointer) {
		var oop = slot.load<Pointer>();
		if (oop == Pointer.NULL) return;
		if (oop < toSpace_end && oop >= toSpace_start) return; // nothing to do
		return scanSlot(slot);
	}
	def statsBefore() -> int {
		var before = System.ticksUs();
		GcStats.collected_bytes = GcStats.collected_bytes + fromSpaceUsed();
		GcStats.allocated_bytes = GcStats.allocated_bytes + fromSpaceAllocated();
		if (RiGc.verbose) {
			OUT.puts("Begin GC, ").putd(fromSpaceUsed() / 1024).puts("K\n");
		}
		return before;
	}
	def statsAfter() {
		GcStats.survived_bytes = GcStats.survived_bytes + (alloc_ptr - toSpace_start);
	}
	def statsTime(before: int) {
		var diff = (System.ticksUs() - before);
		if (RiGc.debug || RiGc.verbose) {
			OUT.puts("End   GC, ").putd(fromSpaceUsed() / 1024)
			   .puts("K (").putd(diff).puts(" us)\n");
		}
		GcStats.collection_us = GcStats.collection_us + diff;
	}
	// perform a collection
	def collect(size: int, ip: Pointer, sp: Pointer) -> Pointer {
		if (collecting) RiRuntime.fatalException("GcError", "reentrant call to SemiSpace.collect", ip, sp);
		collecting = true;

		if (RiGc.debug) {
			OUT.puts(RiGc.CTRL_YELLOW);
			OUT.puts("\n===== begin Semispace.collect() =============================================================\n");
			OUT.puts(RiGc.CTRL_DEFAULT);
			OUT.puts("fromSpace_start = ").putp(fromSpace_start).ln();
			OUT.puts("heapCur         = ").putp(CiRuntime.heapCurLoc.load<Pointer>()).ln();
			OUT.puts("fromSpace_end   = ").putp(fromSpace_end).ln();
			OUT.puts("toSpace_start   = ").putp(toSpace_start).ln();
			OUT.puts("topSpace_end    = ").putp(toSpace_end).ln();
		}

		var before = if(RiGc.stats, statsBefore());
		var old_alloc_ptr = CiRuntime.heapCurLoc.load<Pointer>();
		alloc_ptr = toSpace_start;
		// scan global and stack roots
		RiGc.scanGlobals();
		RiGc.scanStack(ip, sp);
		// main loop: scan the objects copied from roots
		var scan = toSpace_start;
		while (scan < alloc_ptr) {
			// Scan all objects in the to space first
			while (scan < alloc_ptr) scan = scan + RiGc.scanObject(scan);
			//================================================================
			// USER CODE: Run user scanners and try again (TODO: need allocation?)
			if (RiGc.debug) {
				OUT.puts(RiGc.CTRL_YELLOW);
				OUT.puts("\n  -- call user scanners ----------------------------\n");
				OUT.puts(RiGc.CTRL_DEFAULT);
			}
			RiGc.runScanners(relocCallback);
		}
		RiGc.finishScanners();
		// everything copied, check to see if enough space remains
		if ((toSpace_end - scan) < size) return fatalOutOfMemory(size, ip, sp);
		// zero the remaining portion of the to-space if used previously
		RiGc.memClear(alloc_ptr, toSpace_dirty);
		// switch allocation bounds during callbacks
		CiRuntime.heapCurLoc.store(scan);
		CiRuntime.heapEndLoc.store(toSpace_end);
		// Report stats immediately after collection
		if (RiGc.stats) statsAfter();
		//================================================================
		// USER CODE: Run finalizers before overwriting from_space
		RiGc.runFinalizers(relocCallback);
		//================================================================
		// weak callbacks finished, try to fulfill the request
		scan = alloc_ptr = CiRuntime.heapCurLoc.load();
		if ((toSpace_end - scan) < size) return fatalOutOfMemory(size, ip, sp);
		CiRuntime.heapCurLoc.store(scan + size);

		if (RiGc.paranoid) {
			// overwrite the old from-space with garbage to catch errors
			for (p = fromSpace_start; p < old_alloc_ptr; p += 4) p.store(0xFACED1ED);
		}

		// swap spaces for next collection
		var tmp = (toSpace_start, toSpace_end);
		toSpace_start = fromSpace_start;
		toSpace_dirty = old_alloc_ptr;
		toSpace_end = fromSpace_end;
		fromSpace_start = tmp.0;
		fromSpace_end = tmp.1;

		GcStats.gc_count++;
		if (RiGc.stats) statsTime(before);
		collecting = false;
		finish();
		return scan;
	}
	def finish() {
	}
	def fatalOutOfMemory(size: int, ip: Pointer, sp: Pointer) -> Pointer {
		if (RiGc.stats) {
			OUT.puts("!HeapOverflow: ")
			     .putd(alloc_ptr - toSpace_start)
			     .puts(" bytes used, ")
			     .putd(size).puts(" requested, ")
			     .putd(toSpace_end - alloc_ptr)
			     .puts(" available\n");
		}
		RiRuntime.fatalException("HeapOverflow", "insufficient space after GC", ip, sp);
		return Pointer.NULL;
	}
	// Used by weak callbacks to check if a reference was live.
	def relocCallback(oop: Pointer) -> Pointer {
		if (oop >= fromSpace_end || oop < fromSpace_start) return oop;
		var newoop = oop.load<Pointer>(); // read forwarding pointer
		return if(newoop >= toSpace_start && newoop < alloc_ptr, newoop, Pointer.NULL);
	}
	// Total space used in the from space.
	def fromSpaceUsed() -> long {
		return CiRuntime.heapCurLoc.load<Pointer>() - fromSpace_start;
	}
	// Space used in the from space since the last GC.
	def fromSpaceAllocated() -> long {
		return CiRuntime.heapCurLoc.load<Pointer>() - alloc_ptr;
	}
}
