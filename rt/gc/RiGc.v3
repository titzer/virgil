// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Shared logic of the GC, including logic to compute object sizes and scan objects, stacks, and
// globals.
component RiGc {
	def OUT = System.out; // output stream used for debugging

	def CTRL_DEFAULT = "\x1B[1;00m"; // XXX: move to Terminal
	def CTRL_GREEN	 = "\x1B[0;32m";
	def CTRL_YELLOW	 = "\x1B[1;33m";
	def CTRL_RED	 = "\x1B[0;31m";
	def CTRL_CYAN	 = "\x1B[0;36m";

	// Constants that enable/disable debugging and stats reporting. (Use -redef-field).
	def verbose   = false;
	def debug     = false;
	def paranoid  = false;
	def stats     = false;

	def INT_SIZE  = 4;
	def REF_SIZE  = Pointer.SIZE;
	def OBJ_ALIGN = Pointer.SIZE;
	def ARRAY_LENGTH_OFFSET = INT_SIZE;
	def ARRAY_HEADER_SIZE = INT_SIZE + INT_SIZE;

	// Interface between the GC, stack scanning, and globals scanning.
	var scanRoot: Pointer -> void;			// provided by GC
	var rescanRoot: Pointer -> void;		// provided by GC
	var scanStack: (Pointer, Pointer) -> void;	// provided by stack scanner
	var scanGlobals: void -> void;			// provided by global scanner

	// Compute the size in bytes of the object pointed to by {ref}.
	def objectSize(ref: Pointer) -> int {
		var tid = ref.load<int>();
		// | 32	      tid	     0 |
		// | typeid:30		  #0:2 | normal object
		// | elemsize:30	  #1:2 | primitive array
		// | #typeMap:30	  #2:2 | mixed array
		// | #refsize:30	  #3:2 | reference array
		match (tid & 3) {
			0 => { // Normal object; use refmap in TYPE_TABLE.
				var index = tid;
				if (Pointer.SIZE == 8) index >>= 1; // TODO: 64-bit type maps
				var typeMap = (CiRuntime.GC_TYPE_TABLE + index).load<int>();
				if ((typeMap & 0x80000000) != 0) {
					// extended entry
					var vmap_p = CiRuntime.GC_EXTMAPS + (INT_SIZE * (typeMap & 0x7FFFFFFF));
					return extmapSize(vmap_p);
				} else {
					// normal entry
					return refmapSize(typeMap);
				}
			}
			1 => { // Primitive array.
				var length = (ref + ARRAY_LENGTH_OFFSET).load<int>(), elemscale = tid >>> 2;
				return alignObject(ARRAY_HEADER_SIZE + elemscale * length);
			}
			2 => { // Mixed array.
				var length = (ref + ARRAY_LENGTH_OFFSET).load<int>();
				var typeMap = tid >>> 2, elemscale: int;
				if ((typeMap & 0x20000000) != 0) {
					// Extended entry.
					var vmap_p = CiRuntime.GC_EXTMAPS + (INT_SIZE * (typeMap & 0x1FFFFFFF));
					elemscale = extmapSize(vmap_p);
				} else {
					// Normal entry.
					elemscale = refmapSize(typeMap);
				}
				return alignObject(ARRAY_HEADER_SIZE + elemscale * length);
			}
			3 => { // Reference array.
				var length = (ref + ARRAY_LENGTH_OFFSET).load<int>();
				return ARRAY_HEADER_SIZE + (REF_SIZE * length); // XXX: may need heap align
			}
		}
		return invalidHeader(ref);
	}
	// Compute the size in bytes from the highest 1 bit in {v}.
	def refmapSize(v: int) -> int {
		var vmap = v;
		if (vmap == 0) return 0;
		var size = 0;
		while (vmap != 1) { // highest bit set indicates the length
			vmap = vmap >>> 1;
			size = size + REF_SIZE;
		}
		return size;
	}
	// Compute the size in bytes from the bits of an extended reference map pointed to by {v}.
	def extmapSize(v: Pointer) -> int {
		var vmap_p = v;
		var size = 0;
		while (true) { // iterate over words of extended map
			var vmap = vmap_p.load<int>();
			if ((vmap & 0x80000000) == 0) return size + refmapSize(vmap & 0x7FFFFFFF);
			size = size + 31 * REF_SIZE;
			vmap_p = vmap_p + INT_SIZE;
		}
		return size; // should be unreachable
	}
	private def alignObject(size: int) -> int {
		return (-1 ^ (OBJ_ALIGN - 1)) & (size + OBJ_ALIGN - 1);
	}
	// Scan the object pointed to by {ref}, calling {scanRoot} for every reference in the object.
	def scanObject(ref: Pointer) -> int {
		var tid = ref.load<int>();
		// | 32			     0 |
		// | typeid:30		  #0:2 | normal object
		// | elemsize:30	  #1:2 | primitive array
		// | #typeMap:30	  #2:2 | mixed array
		// | #refsize:30	  #3:2 | reference array
		match (tid & 3) {
			0 => { // Normal object; use refmap in TYPE_TABLE.
				var index = tid;
				if (Pointer.SIZE == 8) index >>= 1; // TODO: 64-bit type maps
				var typeMap = (CiRuntime.GC_TYPE_TABLE + index).load<int>();
				if ((typeMap & 0x80000000) != 0) {
					// Extended entry.
					var vmap_p = CiRuntime.GC_EXTMAPS + (INT_SIZE * (typeMap & 0x7FFFFFFF));
					return scanExtMap(vmap_p, ref); // should be aligned to OBJ_SIZE
				} else {
					// Normal entry.
					return scanRefMap(typeMap, ref); // should be aligned to OBJ_SIZE
				}
			}
			1 => { // Primitive array.
				var length = (ref + ARRAY_LENGTH_OFFSET).load<int>(), elemscale = tid >>> 2;
				return alignObject(ARRAY_HEADER_SIZE + elemscale * length);
			}
			2 => { // Mixed array.
				var length = (ref + ARRAY_LENGTH_OFFSET).load<int>();
				var typeMap = tid >> 2;
				var p = ref + ARRAY_HEADER_SIZE;
				if ((typeMap & 0x20000000) != 0) { // XXX: do we really need big mixed arrays?
					// Extended entry.
					var vmap_p = CiRuntime.GC_EXTMAPS + (INT_SIZE * (typeMap & 0x1FFFFFFF));
					for (i < length) p += scanExtMap(vmap_p, p);
				} else {
					// Normal entry.
					for (i < length) p += scanRefMap(typeMap, p);
				}
				return int.!(p - ref);
			}
			3 => { // Reference array.
				var length = (ref + ARRAY_LENGTH_OFFSET).load<int>();
				var size = ARRAY_HEADER_SIZE + (REF_SIZE * length), end = ref + size;
				for (p = ref + ARRAY_HEADER_SIZE; p < end; p = p + REF_SIZE) scanRoot(p);
				return size; // XXX: heap alignment may be necessary
			}
		}
		return invalidHeader(ref);
	}
	private def invalidHeader(ref: Pointer) -> int {
		System.error("GcError", "Invalid object header");
		return 0;
	}
	// Scan references in a frame pointed to by {sp} and return the size in bytes.
	def scanStackFrame(sp: Pointer, stackMap: int) -> int {
		if ((stackMap & 0x80000) != 0) {
			// extended entry
			var vmap_p = CiRuntime.GC_EXTMAPS + (RiGc.INT_SIZE * (stackMap & 0x7FFFF));
			return scanExtMap(vmap_p, sp);
		} else {
			// normal entry
			return scanRefMap(stackMap, sp);
		}
	}
	def stackmapSize(stackMap: int) -> int {
		if ((stackMap & 0x80000) != 0) {
			// extended entry
			var vmap_p = CiRuntime.GC_EXTMAPS + (RiGc.INT_SIZE * (stackMap & 0x7FFFF));
			return extmapSize(vmap_p);
		} else {
			// normal entry
			return refmapSize(stackMap);
		}
	}
	// Using the reference map {v}, scan the references at {start}, returning the size in bytes.
	def scanRefMap(v: int, start: Pointer) -> int {
		var vmap = v; // XXX: rename {v}
		if (debug) OUT.puts("scanRefMap @ ").putp(start).puts(", map = ").putp(Pointer.NULL + vmap).ln();
		if (vmap == 0) return 0;
		var size = 0;
		while (vmap != 1) { // highest bit set indicates the length
			if ((vmap & 1) != 0) scanRoot(start + size);
			vmap = vmap >>> 1;
			size = size + REF_SIZE;
		}
		return size;
	}
	// Using the extended reference map pointed to by {v}, scan the references at {start}, returning
	// the size in bytes.
	def scanExtMap(v: Pointer, s: Pointer) -> int {
		var vmap_p = v; // XXX: rename {v}
		var start = s;
		var size = 0;
		while (true) { // iterate over words of extended map
			var vmap = vmap_p.load<int>();
			if (debug) OUT.puts("scanExtMap = ").putp(Pointer.NULL + vmap).ln();
			var s = scanRefMap(vmap, start);
			size = size + s;
			if (s < 31 * REF_SIZE) break; // last entry is < 31 words
			start = start + s;
			vmap_p = vmap_p + INT_SIZE;
		}
		if (debug) OUT.puts("extmapsize = ").putd(size).ln();
		return size;
	}
	// Debug version of {scanMap} which also prints to the console.
	def debugScanMap(v: int, start: Pointer) {
		var vmap = v; // XXX: rename {v}
		// TODO: handle extended entries in printing debugging information
		var o = OUT.puts("stackMap ").putp(Pointer.NULL + vmap).ln();
		if (vmap == 0) return;
		for (p = start; vmap != 1; p = p + REF_SIZE) {
			var marked = (vmap & 1) != 0;
			var val = p.load<Pointer>();
			o.puts("@ ").putp(p).puts(" ").putc(if(marked, '*', ' ')).puts(" | ");

			if (val == Pointer.NULL) o.putp(val).puts(" |\n");
			else if (val >= CiRuntime.HEAP_START && val < CiRuntime.HEAP_END) debugScanRef(val, if(marked, CTRL_GREEN, CTRL_YELLOW), "heap");
			else if (val >= CiRuntime.DATA_START && val < CiRuntime.DATA_END) debugScanRef(val, if(marked, CTRL_GREEN, CTRL_YELLOW), "data");
			else if (marked) debugScanRef(val, CTRL_RED, "");
			else o.putp(val).puts(" |\n");

			vmap = vmap >>> 1;
		}
	}
	def debugScanRef(val: Pointer, color: string, region: string) {
		OUT.puts(color).putp(val).puts(CTRL_DEFAULT).puts(" | ").puts(region).ln();
	}
	// Fast routine to zero memory pointed to by {ptr}, ending at {end}.
	def memClear(ptr: Pointer, end: Pointer) {
		for (p = ptr; p < end; p = p + Pointer.SIZE) {
			p.store(Pointer.NULL);
		}
	}
	// Fast memory copy routine that copies {size} bytes (in word-sized chunks) from {s} to {b}.
	def memCopy(d: Pointer, s: Pointer, size: int) {
		var dest = d, src = s;
		var end = src + size;
		while (src < end) {
			dest.store(src.load<Pointer>());
			src = src + Pointer.SIZE;
			dest = dest + Pointer.SIZE;
		}
	}
	// Forces the garbage collector to run.
	def forceGC() {
		RiRuntime.gc(0, CiRuntime.callerIp(), CiRuntime.callerSp());
	}

	// On-collect callback support
	private var ptrs = Array<Pointer>.new(1); // for unsafe cast of ref to pointer
	private var finalizers: RiGcFinalizerLink;
	private var scanners: RiGcScannerLink;
	private var survivingScanners: RiGcScannerLink;

	// Called by user applications to register a {callback} after the object {ref} is collected.
	def registerFinalizer<R>(ref: R, callback: void -> void) {
		Pointer.atContents(ptrs).store(ref); // unsafe type cast R -> Pointer
		finalizers = RiGcFinalizerLink.new(ptrs[0], finalizers, callback);
	}
	// Called by the GC after finishing a GC cycle to run weak callbacks.
	def runFinalizers(reloc: Pointer -> Pointer) {
		var l = finalizers;
		finalizers = null;
		while (l != null) {
			var next = l.next;
			var np = l.pointer = reloc(l.pointer);
			if (np != Pointer.NULL) {
				// Object is live, keep in finalizer list.
				l.next = finalizers;
				finalizers = l;
			} else {
				// Object is dead, call the callback and remove from list.
				l.callback();
			}
			l = next;
		}
	}
	// Called by user applications to register a {callback} to scan an object {ref} when
	// it is determined reachable by the GC.
	def registerScanner<R>(ref: R, callback: R -> void) {
		Pointer.atContents(ptrs).store(ref); // unsafe type cast R -> Pointer
		scanners = RiGcScannerLinkOf.new(ptrs[0], scanners, callback);
	}
	// Called by the GC after finishing scanning to run any user application scanners for
	// live objects.
	def runScanners(reloc: Pointer -> Pointer) {
		var l = scanners;
		scanners = null;
		while (l != null) {
			var next = l.next;
			var old_ptr = l.pointer;
			if (debug) OUT.puts("runScanner @ ").putp(old_ptr).ln();
			var new_ptr = reloc(l.pointer);
			if (new_ptr != Pointer.NULL) {
				// Object is live, scan and move to surviving for this cycle.
				l.pointer = new_ptr;
				l.next = survivingScanners;
				survivingScanners = l;
				if (debug) OUT.puts("  runScanner [live] @ ").putp(old_ptr).puts(" -> ").putp(new_ptr).ln();
				l.scan();
			} else {
				// Object is not (yet) live, put back in scanners list.
				l.next = scanners;
				scanners = l;
			}
			l = next;
		}
	}
	// Called by the GC after finishing all scanning. Drop the old scanners list (with
	// nonsurviving objects) and retain the surviving scanners.
	def finishScanners() {
		if (debug) {
			for (l = scanners; l != null; l = l.next) OUT.puts("dropScanner @ ").putp(l.pointer).ln();
		}
		scanners = survivingScanners; // overwrite old scanners list with survivors only
		survivingScanners = null;
	}
}
// A node in the list of on-collect finalizer callbacks.
private class RiGcFinalizerLink(var pointer: Pointer, var next: RiGcFinalizerLink, callback: void -> void) { }

// Nodes in the list of on-collect scanner callbacks.
private class RiGcScannerLink(var pointer: Pointer, var next: RiGcScannerLink) {
	def scan();
}
private class RiGcScannerLinkOf<R> extends RiGcScannerLink {
	def callback: R -> void;

	new(pointer: Pointer, next: RiGcScannerLink, callback) super(pointer, next) { }

	def scan() {
		var ref = Pointer.atField(this.pointer).load<R>(); // unsafe cast Pointer -> R
		callback(ref);
	}
}
