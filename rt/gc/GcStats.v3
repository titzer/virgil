// Copyright 2015 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Collects statistics about allocated memory and the garbage collector's performance.
component GcStats {
	var gc_count: int;		// number of GCs performed
	var collection_us: long;	// total microseconds for GC
	var allocated_bytes: long;	// allocated bytes (excluding current cycle)
	var collected_bytes: long;	// total bytes live at beginning of collections
	var survived_bytes: long;	// total bytes surviving collections
	var gc_current_allocated: void -> long;	// gets the allocated bytes in current cycle

	// Gets the total amount of bytes allocated in this and previous cycles.
	def total_allocated_bytes() -> long {
		return collected_bytes + gc_current_allocated();
	}
	// Print some statistics to stdout.
	def print() {
		def puti = System.puti, puts = System.puts;
		puti(int.!(total_allocated_bytes()));
		puts(" bytes allocated, ");
		puti(int.!(gc_count));
		puts(" GCs");
		if (gc_count > 0) {
			puts(", ");
			puti(int.view(collection_us / gc_count));
			puts(" us avg");

			var rate = permil(survived_bytes, collected_bytes);
			puts(", ");
			puti(int.view(rate / 10));
			puts(".");
			puti(int.view(rate % 10));
			puts(" % survival");
		}
		System.ln();
	}
	// Bogo-divide: return percentage * 10 of num/denom (i.e. 0-1000).
	def permil(num: long, denom: long) -> u32 {
		while (denom > 1000000) { // avoid float, avoid overflowing int range
			num = num >>> 1;
			denom = denom >>> 1;
		}
		// avoid 64-bit divide
		return u32.view(num) * 1000u / u32.view(denom);
	}
}
