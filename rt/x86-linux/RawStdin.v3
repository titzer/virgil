// Copyright 2014 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def fds = [0, 0x0040];
def TIOCGETP = 0x40067408;
def TIOCSETP = 0x80067409;
def RAW      = 0x00000020;
def ECHO     = 0x00000008;
def oldstate = Array<u16>.new(3);
def newstate = Array<u16>.new(3);
var raw: bool;

// Linux-specific implementation of methods to deal with raw STDIN.
component RawStdin { // TODO: move to lib/linux
	def fd = 0;
	def poll(timeout_ms: int) -> int {
		var t = Linux.syscall(LinuxConst.SYS_poll,
			(Pointer.atContents(fds), 1, timeout_ms));
		if (t.0 > 0) return System.fileRead(fd);
		return -1;
	}
	def enable() {
		if (true) return; // TODO: raw mode
		if (raw) return;  // Already in raw mode.
		ioctl(TIOCGETP, Pointer.atContents(oldstate));

		newstate[0] = oldstate[0];
		newstate[1] = oldstate[1];
		newstate[2] = oldstate[2];
		newstate[2] = u16.!((newstate[2] | RAW) & (-1 ^ ECHO));

		ioctl(TIOCSETP, Pointer.atContents(newstate));
		raw = true;
	}
	def restore() {
		if (true) return; // TODO: raw mode
		if (!raw) return;
		ioctl(TIOCSETP, Pointer.atContents(oldstate));
		raw = false;
	}
	def ioctl(code: int, buffer: Pointer) {
		Linux.syscall(LinuxConst.SYS_ioctl, (fd, code, buffer));
	}
}