// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// x86-linux target-specific runtime routines.
component RiOs {
	private def kernelbuf = Array<int>.new(4);

	def installHandler(signum: int) {
		// install handler
		kernelbuf[0] = CiRuntime.signalStub - Pointer.NULL;		// sa_handler
		kernelbuf[1] = 0;						// sa_mask
		kernelbuf[2] = 0x0C000000;					// sa_flags
		kernelbuf[3] = CiRuntime.signalRestorer - Pointer.NULL;	 // sa_restorer
		Linux.syscall(LinuxConst.SYS_sigaction, (signum, Pointer.atContents(kernelbuf), 0));
	}
	def getIp(ucontext: Pointer) -> Pointer {
		return (ucontext + 52).load<Pointer>();
	}
	def getSp(ucontext: Pointer) -> Pointer {
		return (ucontext + 24).load<Pointer>();
	}
	// Get the access address from a siginfo.
	def getAccessAddress(siginfo: Pointer, ucontext: Pointer) -> Pointer {
		return (ucontext + 80).load<Pointer>();
	}
	// Advance the {ip} and {sp} from the current frame to the caller's frame.
	def callerFrame(ip: Pointer, sp: Pointer, frameWords: int) -> (Pointer, Pointer) {
		sp = sp + (1 + frameWords) * Pointer.SIZE;
		ip = (sp + (0 - Pointer.SIZE)).load<Pointer>() + -1;
		return (ip, sp);
	}
	// Exit with the given return code.
	def exit(code: int) {
	        Linux.syscall(LinuxConst.SYS_exit, code);
	}
	// Initialize stack red zone for handling stack overflow.
	def initStackRedZone(start: Pointer, end: Pointer) -> (Pointer, Pointer) {
		var delta = end - start;
		def PAGE_SIZE = 4 * 1024;
		if (delta < (3 * PAGE_SIZE)) return (Pointer.NULL, Pointer.NULL); // not enough space for red zone
		// | alt stack | red zone |     usable stack   |
		// ^ start                                     ^end
		def ALT_SIZE = PAGE_SIZE;
		var red_start = start + ALT_SIZE;
		var red_end = red_start + PAGE_SIZE;
		// mprotect a page PROT_NONE to serve as red zone for stack overflow
		Linux.syscall(LinuxConst.SYS_mprotect, (red_start, PAGE_SIZE, LinuxConst.PROT_NONE));

		// set up alternate signal stack (using pages below red zone)
		kernelbuf[0] = start - Pointer.NULL;	// start
		kernelbuf[1] = 0;			// flags
		kernelbuf[2] = ALT_SIZE;		// size
		Linux.syscall(LinuxConst.SYS_sigaltstack, (Pointer.atContents(kernelbuf), Pointer.NULL));
		return (red_start, red_end);
	}
}
