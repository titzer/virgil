// Copyright 2023 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component RiRuntime {
	var gcInit: void -> void;
	var gcCollect: (int, Pointer, Pointer) -> Pointer = noCollect;
	// Called from the exported, generated "entry" stub and used to
	// construct the arguments to pass to main.
	def init() -> Array<string> {
		if (gcInit != null) gcInit();
		// Allocate strings for arguments
		var argc = wali.cl_get_argc();
		var args = Array<string>.new(int.!(argc - 1u));
		for (i = 1u; i < argc; i++) {
			var len = wali.cl_get_argv_len(i);
			var str = Array<byte>.new(int.!(len));
			wali.cl_copy_argv(Pointer.atContents(str), i);
			args[i - 1u] = str;
		}
		return args;
	}
	// Called from the generated allocation stub upon allocation failure.
	def gc(size: int, ip: Pointer, sp: Pointer) -> Pointer {
		return gcCollect(size, ip, sp);
	}
	private def noCollect(size: int, ip: Pointer, sp: Pointer) -> Pointer {
		System.error("HeapOverflow", "no garbage collector installed");
		return Pointer.NULL; // unreachable
	}
	// Called when main() returns.
	def exit(code: int) {
		wali.SYS_exit_group(code);
	}
	// Called when safety checks fail. (At least intended to be; Wasm backend is incomplete).
	def fatalException(ex: string, msg: string, ip: Pointer, sp: Pointer) {
		System.err.putc('!').puts(ex);
		if (msg != null) System.err.puts(": ").puts(msg).ln();
		else System.err.ln();
		System.error(ex, msg);
	}
}
