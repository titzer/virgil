// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component RiRuntime {
	var gcInit: void -> void;
	var gcCollect: (int, Pointer, Pointer) -> Pointer;
	// Called from the exported, generated "entry" stub and used to
	// construct the arguments to pass to main.
	def init() -> Array<string> {
		if (gcInit != null) gcInit();
		
		var sizes = Array<int>.new(2);
		wasi_snapshot_preview1.args_sizes_get(Pointer.atElement(sizes, 0), Pointer.atElement(sizes, 1));
		var argvptrs = Array<int>.new(sizes[0]);
		var argbuf = Array<byte>.new(sizes[1]);
		wasi_snapshot_preview1.args_get(Pointer.atContents(argvptrs), Pointer.atContents(argbuf));
		var args = Array<string>.new(sizes[0]);
		for (i < argvptrs.length) {
			var p = Pointer.NULL + argvptrs[i];
			for (q = p; true; q++) {
				if (q.load<byte>() == 0) {
					var len = q - p;
					var str = args[i] = Array<byte>.new(len);
					for (j < str.length) str[j] = (p + j).load<byte>();
					break;
				}
			}
		}
		return args;
	}
	// Called from the generated allocation stub upon allocation failure.
	def gc(size: int, ip: Pointer, sp: Pointer) -> Pointer {
		var shadowStackStart = Pointer.NULL, shadowStackEnd = Pointer.NULL;  // TODO(titzer)
		if (gcCollect != null) return gcCollect(size, shadowStackStart, shadowStackEnd);
		System.error("HeapOverflow", "no garbage collector installed");
		return Pointer.NULL; // unreachable
	}
	def fatalException(ex: string, msg: string, ip: Pointer, sp: Pointer) {
		System.err.putc('!').puts(ex);
		if (msg != null) System.err.puts(": ").puts(msg).ln();
		else System.err.ln();
		System.error(ex, msg);
	}
}
