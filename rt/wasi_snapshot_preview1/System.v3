// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implementation of the "System" component on WASI.
component System {
	def out = NativeFileStream.new(fs_write, STDOUT);
	def err = NativeFileStream.new(fs_write, STDERR);

	// change the permissions of a file
	def chmod(path: string, mode: int) {
		// TODO	wave.fs_chmod(p.0, p.1, mode);
	}
	// open a file
	def fileOpen(path: string, read: bool) -> int {
		var r = wasi_snapshot_preview1.path_open(3, 0, Pointer.atContents(path), path.length, 0, 0, 0, 0, Pointer.atContents(retbuf));
		if (r != 0) return -1;
		return Pointer.atContents(retbuf).load<int>();
	}
	// close a file
	def fileClose(fd: int) {
		wasi_snapshot_preview1.fd_close(fd);
	}
	// read a single byte from a file
	def fileRead(fd: int) -> int {
		var buf = Pointer.atContents(iobuf);
		var result = fs_read(fd, buf, 1);
		return if(result == 1, iobuf[0], -1);
	}
	// write some bytes to the file
	def fileWriteK(fd: int, data: Array<byte>, offset: int, len: int) {
		boundsCheck(data, offset, len);
		var buf = Pointer.atContents(data) + offset;
		fs_write(fd, buf, len);
	}
	// read some bytes from the file
	def fileReadK(fd: int, data: Array<byte>, offset: int, len: int) -> int {
		boundsCheck(data, offset, len);
		var buf = Pointer.atContents(data) + offset;
		var result = fs_read(fd, buf, len);
		return result;
	}
	// calculate bytes remaining to be read from file
	def fileLeft(fd: int) -> int {
		return 0; // TODO return wave.fs_avail(fd);
	}
	// load a file into a byte array
	def fileLoad(path: string) -> Array<byte> {
		var fd = fileOpen(path, true);
		if (fd < 0) return null;
		var r = wasi_snapshot_preview1.fd_seek(fd, 0, wasi_whence.END.tag, Pointer.atContents(retbuf));
		if (r < 0) {
			wasi_snapshot_preview1.fd_close(fd);
			return null;
		}
		var len = int.!(Pointer.atContents(retbuf).load<u64>());
		r = wasi_snapshot_preview1.fd_seek(fd, 0, wasi_whence.SET.tag, Pointer.atContents(retbuf));
		if (r < 0) {
			wasi_snapshot_preview1.fd_close(fd);
			return null;
		}
		var buf = Array<byte>.new(len);
		fs_read(fd, Pointer.atContents(buf), len);
		wasi_snapshot_preview1.fd_close(fd);
		return buf;
	}
	// print a character to standard out
	def putc(ch: byte) {
		numbuf[0] = ch;
		fs_write(STDOUT, Pointer.atContents(numbuf), 1);
	}
	// print an integer (in decimal) to standard out
	def puti(val: int) {
		var i = val;
		if (i == 0) {
			putc('0');
			return;
		}
		var negative = true;
		if (i > 0) {
			negative = false;
			i = 0 - i;
		}
		var pos = numbuf.length;
		while (i != 0) { // XXX: use pointer loop instead?
			var digit = byte.!('0' - i % 10);
			numbuf[--pos] = digit;
			i = i / 10;
		}
		if (negative) numbuf[--pos] = '-';
		fs_write(STDOUT, Pointer.atContents(numbuf) + pos, numbuf.length - pos);
	}
	// print a string (as bytes) to standard out
	def puts(str: string) {
		fs_write(STDOUT, Pointer.atContents(str), str.length);
	}
	// prints a newline character to standard out
	def ln() {
		putc('\n');
	}
	// output an error, stacktrace, and exit
	def error(ex: string, msg: string) {
		def s = Pointer.atContents(ex), s_len = ex.length;
		def m = if(msg != null, Pointer.atContents(msg));
		def m_len = if (msg != null, msg.length);
		// TODO	wave.throw_ex(s, s_len, m, m_len);
	}
	// get ticks in milliseconds
	def ticksMs() -> int {
		return int.view(wasiNs() / 1000000u);
	}
	// get ticks in microseconds
	def ticksUs() -> int {
		return int.view(wasiNs() / 1000u);
	}
	// get ticks in nanoseconds
	def ticksNs() -> int {
		return int.view(wasiNs());
	}
	private def wasiNs() -> u64 {
		wasi_snapshot_preview1.clock_time_get(0, 10000, Pointer.atContents(iobuf));
		var tv_nsecs = Pointer.atContents(iobuf).load<u64>();
		return tv_nsecs;
	}
}

def STDIN  = 0;
def STDOUT = 1;
def STDERR = 2;

// @thread-local @lazy buffer for write integers and chars to System.out
def numbuf = Array<byte>.new(16);
def iobuf = Array<byte>.new(16);
def retbuf = Array<byte>.new(16);

def BCE = "BoundsCheckException";
def EMPTY = "";
def boundsCheck<T>(array: Array<T>, start: int, len: int) {
	if (start < 0) System.error(BCE, EMPTY);
	if (start > array.length) System.error(BCE, EMPTY);
	var end = u32.!(start) + u32.!(len);
	if (end > u32.!(array.length)) System.error(BCE, EMPTY);
}
def fs_write(fd: int, data: Pointer, len: int) -> int {
	var p = Pointer.atContents(iobuf);
	(p + 0).store<int>(data - Pointer.NULL);
	(p + 4).store<int>(len);
	var sizeptr = Pointer.atContents(retbuf);
	var r = wasi_snapshot_preview1.fd_write(fd, p, 1, sizeptr);
	return if(r == 0, sizeptr.load<int>());
}
def fs_read(fd: int, data: Pointer, len: int) -> int {
	var p = Pointer.atContents(iobuf);
	(p + 0).store<int>(data - Pointer.NULL);
	(p + 4).store<int>(len);
	var sizeptr = Pointer.atContents(retbuf);
	var r = wasi_snapshot_preview1.fd_read(fd, p, 1, sizeptr);
	return if(r == 0, sizeptr.load<int>());
}
