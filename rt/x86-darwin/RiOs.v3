// Copyright 2025 Virgil authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// x86-darwin target-specific runtime routines.
component RiOs {
	def kernelbuf = [2, 0, 0, 0];
	def installHandler(signum: int) {
		// fill out sigaction struct
		var sigbuf = Pointer.atContents(kernelbuf);
		(sigbuf + 4).store(CiRuntime.signalStub);
		(sigbuf + 8).store(1);
		(sigbuf + 12).store(1);
		// install handler
		Darwin.syscall(DarwinConst.SYS_sigaction, (signum, sigbuf, Pointer.NULL));
	}
	def getIp(ucontext: Pointer) -> Pointer {
		return ((ucontext + 0x1c).load<Pointer>() + 0x34).load<Pointer>();
	}
	def getSp(ucontext: Pointer) -> Pointer {
		return ((ucontext + 0x1c).load<Pointer>() + 0x28).load<Pointer>();
	}
	// Get the access address from a siginfo.
	def getAccessAddress(siginfo: Pointer, ucontext: Pointer) -> Pointer {
		return ((ucontext + 0x1c).load<Pointer>() + 8).load<Pointer>();
	}
	// Advance the ip and sp from the current frame to the caller's frame.
	def callerFrame(i: Pointer, s: Pointer, frameWords: int) -> (Pointer, Pointer) {
		var ip = i, sp = s;
		sp = sp + (1 + frameWords) * Pointer.SIZE;
		ip = (sp + (0 - Pointer.SIZE)).load<Pointer>() + -1;
		return (ip, sp);
	}
	// Exit with the given return code.
	def exit(code: int) {
	        Darwin.syscall(DarwinConst.SYS_exit, code);
	}
	// Initialize stack red zone for handling stack overflow.
	def initStackRedZone(start: Pointer, end: Pointer) -> (Pointer, Pointer) {
		// size needed for the alternate signal stack
		def PAGE_SIZE = 4096;
		def ALT_SIZE = 16 * 1024;

		var delta = end - start;
		if (delta < (2 * PAGE_SIZE + ALT_SIZE)) return (Pointer.NULL, Pointer.NULL); // not enough space for red zone
		// | alt stack | red zone |     usable stack   |
		// ^ start                                     ^end
		var red_start = start + ALT_SIZE;
		var red_end = red_start + PAGE_SIZE;
		// mprotect a page PROT_NONE to serve as red zone for stack overflow
		Darwin.syscall(DarwinConst.SYS_mprotect, (red_start, PAGE_SIZE, DarwinConst.PROT_NONE));

		// set up alternate signal stack (using pages below red zone)
		kernelbuf[0] = start - Pointer.NULL;	// start
		kernelbuf[1] = ALT_SIZE;		// size, flags
		kernelbuf[2] = 0;			// flags?
		Darwin.syscall(DarwinConst.SYS_sigaltstack, (Pointer.atContents(kernelbuf), Pointer.NULL));
		return (red_start, red_end);
	}
}
