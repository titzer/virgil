// Copyright 2019 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def OUT = RiGc.OUT;
// Encapsulates logic of finding roots in the shadow stack by simply scanning it from top to bottom.
component ShadowStackScanner {
	new() {
		RiGc.scanStack = scanStack;
	}
	def scanStack(ip: Pointer, sp: Pointer) {
		var start = CiRuntime.SHADOW_STACK_START_PTR.load<Pointer>();
		var cur = CiRuntime.SHADOW_STACK_CUR_PTR.load<Pointer>();
		if (RiGc.debug) {
			OUT.puts(RiGc.CTRL_DEFAULT)
			   .puts("scanShadowStack [")
			   .putp(start)
			   .puts(" - ")
			   .putp(cur)
			   .puts("]\n");
		}
		// Scan the entire reference range of the shadow stack.
		for (p = start; p < cur; p += RiGc.REF_SIZE) RiGc.scanRoot(p);
		// Clear the unused portion of the shadow stack to avoid stale
		// pointers in the next GC cycle.
		var end = CiRuntime.SHADOW_STACK_END_PTR.load<Pointer>();
		for (p = cur; p < end; p += RiGc.REF_SIZE) p.store<Pointer>(Pointer.NULL);
	}
}