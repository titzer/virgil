______ ______ __   _ ______ ______ ______    _____ ______ ______ _    _ ______ ______
|____| |_____ | \  | |_____ |____| |_____      |   |_____ |_____ |    | |_____ |_____
|    | |_____ |  \_| |_____ |    | _____|    __|__ _____| _____| |____| |_____ _____|

-- stable rev burndown --------

-- next rev -------------
  fix LSRA for critical edge cases
  Set -shadow-stack-size=128k for wasm targets
  wasi target
  stable wasm-linux or wasm-wave target
  wave/linux implementation
  only add RiGc roots if program allocates
  add -gc=none option to Aeneas to disable all GC-related logic
  unify v3c-target-nort and v3c-target-nogc scripts
  try avoiding all < 4GB segments on x86-64-darwin for Rosetta 2
  turn on read-only arrays and ranges (without variance?)

-- bugs -------------
  polymorphic recursion
  type inference imprecisions
  -heap-size=3g
  function index out of order error in names section using wasm2wat

-- migrations -------
  use range type whereever it makes sense

-- priority (primarily for Wizard) -----
  new type representation
  -target=wasmgc
  unbox and pack variants
  canonicalize equivalent variant records
  threads

-- wasm[gc] issues -----
  new type representation for structs, arrays, funcs
  local index optimization
  generate mtable ranges
  generate struct decls
  generate array decls
  fw-ref functions
  downcast for virtual adapters
  downcast for closure invocations
  field index assignment
  encoding of struct, array, func types

-- aeneas sucks -----
  names for synthesized functions (e.g. Class.==, byte.!<int>)
  Do in-place specialization and normalization
  move IntNormalizer into reachability/norm phase instead of mach lowering
  SsaMachGen:
    division checks
    add -mach lowering for testing with interpreter?
    use in SsaJvmGen
  Revive performance monitoring/benchmarking infrastructure
    track compile time and memory usage for all test subtasks, bootstraps, apps, and benchmarks
    make it easy to backfill all data to previous revisions
  Profile-guided feedback optimizations
    Method order in binary (record invocation order)
    Branch hinting
    Block order per method
    Inform inlining heuristics
    Inform stack allocation of heap objects, e.g. region size
    hotpath/trace for register allocation
-- language usability sucks -------
  allow viewing Enum.set as integer type and vice-versa and/or add .bits
  allow arbitrarily large iN and uN integer types
  pre-allocate heap space for RiRuntime args (separate from GC)
  allow specifying the type of an enum tag { enum X(tag: byte) { FOO(3) ... } }
  stray comma at end of initializer                     => relax in parser
  type aliases (type X = int { })
  constructor chaining, super arguments			=> super syntax
  iterate over vector, list				=> user foreach loops
  error message for "expression is not assignable"      => better error messages
  error message for swapped/missing argument            => swapping, omission message
  two error messages for method/func not found
  multiline strings					=> triple quotes?
  destructuring assignments { var (x, y) = foo(); }
  tuple member assignments { (foo.x.0 = y) == (foo.x = (y, foo.x...))}
  remove match { } else { } ?
  xref-find-def/use tool built from compiler?
  E.map<T> and E.Map<T> types for enum E?
-- test -------
  move test/core/opt_* to test/opt/*
  smoke tests for quicker turnaround
  stack overflow
  SsaInstrOptimizer fold if, optimize blocks
  TypeSystem.widen, upper
  NaN check propagation
  A test parameterized by <T>, that puts the <T> everywhere?
    More tests with void everywhere
    More tuples of void everywhere
  specific tests scripts for codegen, asm, rt, gc, etc
  -target=wasm-js -multiple binaries depend on order of files
  add CI runner for test/bootstrap
-- todo -------
  bounds check elimination not working for SystemCallState.clear
  Represent Array<byte> more efficiently in metavalues
  move normalization of integers into Reachability/Normalization phase
  cache normalizations for tuples in MachProgram
  introduce NormGetReturnElem
  better error messages for wrong number of arguments
  better error messages for type errors in array literals
  error messages for comparing with out-of-range integer literals
  generate self-executing JAR (shell script with JAR appended)
  debugger: allow fuzzy match of files / line
  immutable arrays
-- done -------
* add T.default value for type parameter T
* Enable load optimization of PtrLoad
* remove IcInterpreter
* fix all crashes with -dwarf
* get GC tests running for wasm targets
* make SsaInterpreter default
* implement big-endian layouts
* debugger: list files
* null replacement for variant case methods
* add -simple-bodies option
* default value for variant case types
* wizeng:objdump bug: InternalError: address &HostObject.render[code] not fixed
* Allow _ in match patterns
* wasm target allows omitting main
* off-heap Range<byte>
* stray updateVar for phis
* new register allocator
* Rudimentary support for debugging in Aeneas
* PtrCmpSwp not supported on Wasm target
* private members are accessible in a file
* -legacy-cast=false
* private types in a file
* new int cast and query semantics
* operators for variant methods: VariantGetMethod, VariantGetVirtual, VariantCallVirtual
* Range<T> type
* document compiler options
* custom scanning of some regions (e.g. ValueStack)
* move test/execute/* to test/core/*
* optional lowering of objects in MachLowering
* names section for wasm target
* robust stack overflow handling
* custom stack scanning for GC
* undo void.! of anything is legal => void(x)
* -legacy-cast=false option
* move Float_TypeCon members to FloatType
* factor out infix lookup logic
* make operator caches more uniform
* typeof(a = e) is typeof(a), not typeof(e)
* add functionality to load arbitrary constants into data section
* Migrate all tests to use common 'progress' format
* lang: array indexing syntax
  * array(e)                            array[e]
  * array(e) = e                        array[e] = e
* lang: match syntax
  * match (e) { 0: e; }                 match (e) { 0 => e; }
* Buffer for appendable things
  * DataBuffer
* Return this chaining
  * StringBuffer, Vector, DataBuffer
* double literals
* double operations
* stable aeneas has complete path in stacktraces
* enums for TypeSystem casts, queries
* Multiple matches for -print-ssa=glob1,glob2,etc
* shift checks
* int truncations
* store narrowing
* introduce signature
* match on class types					=> match () { x: Type => } syntax
* mutable fields declaration overhead                   => var in class, function parameters
* bounds checks for System IO functions
* convert stdlib Vector<T> to use [] syntax
* multiline comments
* match case => syntax
* use Fact and RaFact
* in-place SsaMachGen
* for (x in Enum)
* phis directly in basic blocks
* SSAInstrOptimizer
* Variant.Case.tag is a valid literal in switches
* >>> arithmetic right shift operator
* new shift operators
* += compound assignments
* v.x field accesses for Variant.Case types
* Variant.Case as a type
* 64-bit mac kernel bug
* enable SsaSwitch
* reimplement switch statements in SSA
* linked list of instructions in SSA
* make X86 div/mod64 into shared stub
* hex literals can have either sign (signed by default)
* FSI64 on x86
* u64 div/mod on JVM
* mixed-sign 64-bit comparisons
* ~ tests for u64 div/mod
* "_:" for default match case instead of else


================================== F E A T U R E S ==========================================
 Comp  Prio  Module  Item
---------------------------------------------------------------------------------------------
-- now -------------------
    1     3    lang  int.popcount, int.clz, int.ctz
    2     2    lang  int.concat
    1     2    lang  TypeCheckException => {Int,Float}CheckException
    2     2    lang  match as an expression
    2     1    lang  (a, b) = (x, y) destructuring writes
    2     1    lang  weak references							for when finalizers don't work
    3     2    lang  type aliases and representation: type T = x #rephint
    2     2    lang  "ascii" (u7) and "char" (u32) types                                Need to change meaning of strings and string literals
    1     2    lang  enum X { ... } gets X.count for count of members
    2     2    lang  immutable arrays and ranges (array<T> and range<T>)		BLOCKED: new type representation
    1     3    lang  [var e, e, e, e] for mutable arrays
    3     2    lang  FooExpr with { x = e, y = e }
    2     2    lang  bit-level types bNN that are assignable from i/uNN
    2     4    lang  foreach loop over sequences, lists, maps				BLOCKED: efficient implementation without coroutines on heap
												 (and general weirdness of feature)
											UNBLOCK: inlined generators?
    3     2    lang  String interpolation						BLOCKED: API design for user string rendering
    2     3    lang  Remove equality for function types
    3     2    lang  lazy initializers for fields                                       dangerous because of potential deadlocks
    4     1    lang  Move strings to unicode / magic rep                                BLOCKED on immutable arrays, WORRY: too much magic, deadlock
    2     4     sys  trim System down to minimal calls					NO BLOCK: just need to runtime rev dance
			System.chmod
			System.error
			System.ticksMs
			System.ticksUs
			System.ticksNs
			+ System.read
			+ System.write
			+ System.open
			+ System.close
			- System.fileOpen
			- System.fileClose
			- System.fileRead
			- System.fileWriteK
			- System.fileLeft
			- System.fileLoad
			- System.putc
			- System.puti
			- System.puts
			- System.ln
    2     2    lang  super for inherited constructor arguments                          WORRY: even more weird features that need explaining

-- later -------------------
    2     3    lang  Enum.map<V> type (impl as array)
    2     2    lang  super.method
    1     2    lang  .first and .last members on tuples and arrays                      Need to be assignable on arrays
    2     2    lang  explicit tail calls (return => foo)
    2     2    lang  implicit types for declarations based on names                     WORRY: could be open to abuse
    3     2    lang  function expressions def x => y
    1     1    main  -run parses arguments on command line
    1     2    lang  ++ and -- trap on over/underflow?					WORRY: efficiency, analysis for check removal
    2     4     jvm  reformat exceptions consistently on all targets			heroic efforts required on JVM, wasm?
    4     3    lang  module system with opaque types					design not yet clear
    2     3     lib  improve filesystem API						BLOCKED: good API for dealing with errors
    3     3     lib  networking API							BLOCKED: complexity of kernel socket API
    3     3     lib  IO library with buffers						DataWriter/DataReader getting there

-- way later -------------------
    3     1    lang  reflective tuples (general varargs)				BLOCKED: reflection in general
    2     3    lang  events/threads							BLOCKED: concurrency model, memory model
											PROGRESS: actor model for messages?
											PROGRESS: shared immutable, own-up-on-terminate
    3     2    lang  Regex matches							WORRY: too much magic
    2     2  parser  support \uFFFF in string, char literals				BLOCKED: internationalization of strings
    3     2    test  shard testsuite and parallelize					WORRY: too much complexity in piping, too much C
    3     2    lang  standardized command-line flags -> component fields
    4     1    lang  polymorphic type constraints
-------------------------------------- D O N E ----------------------------------------------
    1     2    lang  iN.? checks value range of integer input		  III-7.1592
    1     1    lang  -legacy-cast=false is the default			  III-7.1523
    2     2    lang  Range<T> type and operators			  III-6.1522
    3     2    test  shard testsuite for run_v3c_multiple
    1     1    lang  void(exprs) replaces void.!(expr)                    III-6.1437
    2     2    lang  *undo* void.! of anything is legal                   III-6.1435
    1     3    lang  Allow _ in integer and floating point literals	  III-6.1393
    1     1    lang  typeof(a = e) is typeof(e)                           III-6.1392
    2     2    lang  Data types with fields and no cases                  III-6.1382
    1     1    lang  struct and layout are keywords                       III-6.1373
    1     1      rt  RiRuntime.registerFinalizer
    1     1    lang  remove -fp option                                    III-5.1342
    1     1    lang  - for unary negate on numeric types                  III-5.1207
    2     3     int  -fatal-calls=<method pattern> option                 III-5.1170
    1     1    lang  Strict & and | operators for booleans                III-5.1151
    1     1     v3c  -program-name option to set binary names		  III-4.1095
    2     2    lang  Allow any integral type for array indexing           III-4.1068
    4     3    lang  floating point					  III-4.1094
    1     1     bug  Fix load elimination for field init		  III-4.1039
    1     1    lang  def var defines private-writable fields              III-4.1034
    2     2    lang  void.! of anything is legal			  III-4.0943
    3     4    lang  match() construct for dynamic types		  III-4.0929
    2     2    lang  special typing support for returning this            III-3.0907
    3     2    lang  allow indexing user data structures with []          III-3.0897
    1     1    lang  ~ for bitwise negate on integers                     III-3.0889
    1     1    lang  for (x in Enum)                                      III-3.0885
    1     2    lang  Array indexing with [] brackets                      III-3.0876
    1     2    lang  Change shifts to >> and << with window semantics     III-3.0811
    4     2    lang  enums						  III-3.0808
    2     2    lang  >>> logical shift right operator                     III-2.0758
    2     2    lang  new << and >> shift operators                        III-2.0749
    2     2    lang  compound assignment operators                        III-2.0747
    2     2    lang  Parser support for << and >> operators               III-2.0744
    2     2    lang  33-64 bit width integral types (FSI64)		  III-2.0713
    2     3    lang  Fix mixed sign comparisons
    2     3    lang  integer constants used as bytes
    4     4    lang  Variant types                                        III-2.0586
    3     4    lang  match() construct for variants                       III-2.0586
    2     2    lang  for loop from 0 to limit                             III-2.0547
    3     3    lang  1-32 bit fixed-sized integer types (FSI32)           III-2.0518
    1     1    lang  Add int.min, int.max, byte.min, byte.max constants   III-2.0487
    1     2    mach  Remove support for .gt .lteq, etc Pointer operations III-2.0432
    2     2     x86  Move all Linux and Darwin system calls to libraries  III-2.0388
    1     4    lang  make empty constructor bodies a parse error          III-2.0382
    1     1  parser  Make : optional in separating new() from super()     III-2.0370
    2     2    lang  class C(f: type) { } syntax                          III-2.0363
    2     2    lang  Pointer operators + - < <= > >=                      III-2.0351
    3     4    lang  top-level methods and fields                         III-1.0325
    3     4    lang  partial applications "f(_, 3)"                       III-1.0321
    1     1     sys  Add System.ln() to print a newline                   III-1.0305
    2     3    lang  detect cycles in type inference in fields            III-1.0293
    2     3    lang  type inference for fields declared with initializers III-1.0290
    2     3    lang  "var" and "def" can declare fields                   III-1.0290
    1     3  parser  foreach loop over arrays                             III-1.0270
    1     3   seman  foreach loop over arrays                             III-1.0270
    1     3     exe  foreach loop over arrays                             III-1.0270
    1     1     x86  Exit status 0 for programs with void main            III-1.0237
    1     2     sys  Add System.chmod and System.exec                     III-1.0236
    1     4     sys  Remove System.fileReadN call                         III-1.0228
    1     4    lang  if(cond, a) with null,BOTTOM for false value         III-1.0226
    2     3    lang  "var" keyword should replace "local"                 III-1.0226
    1     4    lang  Rename "char" type to "byte"                         III-1.0164
    2     2    lang  ++ and -- operations                                 III-1.0154
    2     _  parser  Remove all octal integers, string, char              III-1.0108
    1     _  parser  support \xXX hex chars in literals                   III-1.0106
    1     _  parser  Disallow leading _ in identifiers                    III-1.0087
    3     _     jvm  Generate JVM bytecode directly from SSA form         III-1.0084
    4     _    tool  method profiler tool (profile tree)                  III-1.0066
				- call count
				- call tree (with time)
				- cumulative time inside
    4     _    tool  Code coverage tool                                   III-1.0064
    1     _     sys  Add System.timeMs, System.timeUs(), System.timeNs()  III-1.0062
    3     _     ssa  Implement normalization on SSA form                  III-1.0060
    3     _     ssa  Generate IC from SSA                                 III-1.0053
    3     _     ssa  Build SSA from VST                                   III-1.0052
    1     _  parser  Hexadecimal and binary integers                      III-1.0040
    2     _    test  Add tests for binary and hex constants               III-1.0042
    2     _    lang  Add for loop construct                               III-1.0040
    2     _  verify  Echo complete source line with ^                     III-1.0032
    1     _    lang  Tuples have a "last" member                          III-1.0024
    1     _  verify  UnresolvedMember "in expr of type X" or "in type X"  III-1.0018
    2     _      ir  Tracing/instrumentation in the IcInterpreter         III-1.0010
    2     _    lang  Match values can be component values                 III-1.0004


================================== S P E E D U P S ==========================================
 Comp  Prio  Module  Item
---------------------------------------------------------------------------------------------
    1     2     ssa  Improve SsaInterpreter speed
    2     1    mach  Canonicalize equivalent extended refmap entries
    1     1      ic  Special-case some TypeSubsume cases
    2     2    mach  Flatten Operand representation
    3     1     ssa  load/store machine operators have immediate offset
    2     2    mach  ArchInstr should use startOperand/endOperand
    3     2    comp  Use proper internal module system to avoid reparsing -rt.files
    2     2      ir  Cache operators in types, e.g. ArrayGetElem, Pointer.load
    4     2   types  Redesign type representation
    4     3      ic  Redesign Interpreter:
                     Use ADT for Virgil values and flatten
                     Byte boxing, unboxing, and integer conversion optimizations
                     Unboxed Array<byte> representation
                     Unboxed integer operations
                     Introduce global registers for values, component fields
                     Intrinsify GetField / SetField
                     Intrinsify Call operators
    4     1     ssa  Redesign Ssa
                     Uni-directional edges
                     Allow in-place normalization / reachability changes
                     Reducer-like forward dataflow optimizer
    2     1    mach  Optimize backend rep of instrs, operands
    1     1    core  Use Symbols throughout parsing, typechecking		WORRY: complexity for little performance
										WORRY: memory leaks without weak references
    1     1     jvm  Use Symbols and IrSpecs in JvmClassBuilders		JVM is not priority
    3     1      ir  Generate global component fields/methods, not IrClasses	WORRY: may not necessarily simplify anything
    2     1   seman  Unify variable and type environments/scopes
    1     1    util  Tune initial size and growth of sequences and maps		minimal payoff
    3     1   parse  Move to vector-based lists and reuse temps
-------------------------------------- D O N E ----------------------------------------------
    3     2     ssa  Use single array of replacements in normalization    III-7.1567
    4     2    mach  Redesign backend codegen
    1     1    comp  -rt.files option to compile multiple programs wit rt III-6.1389
    4     3    mach  New codegen design for x86-64                        III-6.13??
    1     1  aeneas  Use u32.view(i) >= u32.view(length) for bounds checks III-5.1208
    1     1    mach  Cache calling conventions by signature
    1     1    core  Improve integer operator cache
    1     1      ic  Init values explicitly, don't use Const instr        III-5.1149
    3     2    core  Use Signature in Operators		                  III-4.0986
    1     1     ssa  Use enum for Fact and RaFact                         III-3.0899
    2     3    mach  In-place lowering of SSA to machine level            III-3.0886
    2     3     ssa  In-place post-pass SSA optimization                  III-3.0877
    2     3     sys  Allow write() to console from array of bytes
    2     2    type  Use ClassType in most places                         III-3.0767
    3     3     rma  Replace RMA with faster ReachabilityAnalysis         III-2.0473
    2     2   debug  Reuse same StringBuffer in SsaPrinter                III-2.0400
    1     2    core  Merge Normalizer and RMA datastructures              III-2.0385
    2     3    init  Don't generate or run empty class initializers       III-2.0380
    2     3    init  Don't generate or run empty component initializers   III-2.0379
    2     1    mach  Don't build hashmap for CiRuntime fields each time   III-2.0360
    2     2     x86  Reuse X86MachAssembler for all methods               III-1.0355
    2     2     x86  Don't build complete X86CodeGen for stubs            III-1.0355
    1     2     ssa  Speed up SsaRegion.newConst for bool, null values    III-1.0323
    1     1   parse  Use bitmap table for isIdentMiddle, isIdentStart     III-1.0146
    1     3      io  Buffer output with Buffer<T>                         III-1.0142
    1     3     ssa  Compute assigned locals for SSA in verifier          III-1.0120
    2     2   parse  Use System.fileLoad in Regression                    III-1.0116
    2     3      ir  Use Array<Type> in IrSpec instead of TypeArgs        III-1.0112
    2     3     rma  Track polymorphic operators                          III-1.0095
    1     1 profile  Aggregate method time by IrMethod                    III-1.0094
    1     3 ssa/nrm  Use SsaMap in SsaNormalizer                          III-1.0092
    1     2     ssa  Use SsaDeconstructor in SsaIcGen instead of pre-walk III-1.0092
    1     2      ic  No need to emit TypeSubsume at all                   III-1.0048
    1     3      ic  Don't recompile on tail calls                        III-1.0044
    2     3      ic  Make FastOp for simple operators                     III-1.0044
    2     1     jvm  Don't emit code for methods marked M_ABSTRACT        III-1.0039
    1     1   parse  Only call skip() after accepting a token             III-1.0025
    1     2     jvm  Use HashMap<int, int> for mapping field, method refs III-1.0018
    1          core  Single-type type map in TypeCache                    III-1.0004
    1          util  Sequence optimizations                               III-1.0003
    1          util  HashMap optimizations                                III-1.0003

============================= O P T I M I Z A T I O N S =====================================
 Comp  Prio  Module  Item
---------------------------------------------------------------------------------------------
    1     2    mach  Constant-fold pointer arithmetic
    1     1     vst  Don't generate match pattern loads for unused variant args
    5     3    mach  New register allocator
    4     1     ssa  Redesign optimization pipeline
    3     2    mach  Pack variants into multiple words
    2     1     ssa  Factor out complex MachLowerings into stubs
    2     2     ssa  Elide bounds check for byte indexes into arrays > 256
    2     3     ssa  Inline constructors					no block
    1     3    norm  Remove switch branches for dead variant cases		BLOCKED: requires matching switch cases with tag operations
    1     3    norm  Represent simple variants with integer tags		BLOCKED: gc'ing of bound delegates requires boxing or tagging
    1     3    norm  Canonicalize equivalent variant records			no block
    1     2    norm  Optimize gotos during normalization			no block
    1     2     ssa  Perform CF optimizations again after inlining
    1     2    mach  Elide byte -> int conversions of loads			no block
    3     3     ssa  Local value numbering
    2     2     ssa  Global value numbering
    2     2     ssa  Loop-invariant code motion
    3     4    lsra  live-range splitting					BLOCKED: new register allocator
    3     4    lsra  spill code optimization					BLOCKED: new register allocator
    2     3    lsra  alloc def to dead input on 2-address architectures		no block
    3     4     ssa  Bounds, null, zero check elimination and combining
			(bounds checks in Aeneas III-310 = ~48KB binary size)
			(null checks   in Aeneas III-310 = ~78KB binary size)
			(shift checks  in Aeneas III-310 = ~0.2KB binary size)
			(type checks   in Aeneas III-310 = ~21KB binary size)
    2     4    norm  Partial specialization for non-casted class types		BLOCKED: not sure how
    2     4     x86  use short branches for local control flow			WORRY: cost of compacting code, bugs in rt tables
			(~7100 in Aeneas III-310 = 21K code size)
    3     3     ssa  iterative type check elimination
    2     3     x86  Custom alloc stubs for arrays				BLOCKED: low priority, custom assembly stubs
    2     3     rma  Build call graph from RMA and use to order and inline methods
    3     3 mach/rt  callee-save registers and regmaps at alloc sites		WORRY: gc complexity
    3     3     ssa  Post-lowering optimization pass(es)
    2     2    mach  Encode line numbers relative to class or method def
    2     2     x86  multiply by small consts => lea/add/sub/shift		WORRY: code generator complexity
    2     2    mach  Don't mask with 0xFF when storing ints to bytes
    3     2     ssa  Dead code elimination
    2     1     x86  Special calling conv for "return this" chaining		WORRY: more special cases in backend
    4     2     ssa  Inlining heuristics and tuning
    3     2     ssa  Iteratively apply local optimizations
    2     2     vst  0 and 1 trip foreach loops can be simplified		WORRY: more special casing in VST builder
    3     1     ssa  Global Load/store elimination				BLOCKED: requires flow engine, loops, effects
    4     1     ssa  Loop peeling						BLOCKED: complex copy + rewiring
    2     1     ssa  Loop rotation						BLOCKED: complex copy + rewiring
    3     1     opt  purity analysis from call graph, fold calls		BLOCKED: not sure how to store interprocedural information
    3     1    mach  arrays in foreach can be allocated on stack		WORRY: too much special casing in VST
    2     1     ssa  Recognize div/modulus pairs for x86			minor
    2     1     ssa  Recognize int reads/writes into byte arrays (intrinsify?)
    2     1     ssa  Recognize endianness conversions of ints			BLOCKED: complex multi-instruction match
    3     1     ssa  Recognize array copy, search loops				BLOCKED: requires complex loop analysis
    1     1      ir  Use AnyObject.== for all Class.== operators		minor
    1     1      ic  Use TerminalBuffer in IcProfiler output
    1     2     ssa  Optimize partial applications f(x, _)(y)			BLOCKED: requires special cases or escape analysis
    1     2     ssa  Specialize partial applications K(K, _, K)			BLOCKED: need heuristics for when it's profitable
    1     3     ssa  Escape analysis / dead object elimination			BLOCKED: ssa renaming of captured objects => flow engine
    1     3     ssa  Allocation folding						BLOCKED: dominator / effect analysis
    1     3     ssa  Region inference						BLOCKED: no idea how
-------------------------------------- D O N E ----------------------------------------------
    1     1      gc  Only clear dirty portion of to-space                 III-6.1465
    2     2     rep  Support flattened, mixed arrays                      III-6.1383
    2     2  x86-64  implement [r + r * K + K] addressing modes
    1     3     ssa  Fold redundant and one-input phis			  III-3.0877
    3     4     ssa  if (A.?(x)) implies x nonnull in true branch         III-2.0730
    2     2     ssa  Local Load/store elimination                         III-2.0596
    1     3    norm  Fold constant creation of variants                   III-2.0575
    1     3    norm  Canonicalize equivalent variant records              III-2.0570
    3     2     ssa  Inline simple methods after VstSsaGen                III-2.0555
    3     3     ssa  Inline initializers (with above)
    4     4     rma  Partial specialization of methods                    III-2.0503
    2     2     ssa  Options to enable/disable optimizations for testing
    2     2     rma  Fold GetFields of immutable fields                   III-2.0404
    2     2     rma  Mark init-only fields as immutable                   III-2.0404
    2     2     ssa  1-block flow-sensitive null/type check elimination   III-2.0386
    2     3    init  Don't generate or run empty class initializers       III-2.0380
    1     2     rma  Emit methods in breadth-first RMA order              III-2.0356
    3     4     ssa  Bounds check elimination in loops                    III-2.0344
    2     3     x86  generate jump table for dense match stmts            III-2.0342
    2     3  vstssa  Simplify phis after SSA construction                 III-2.0336
    2     3     ssa  Propagate SSA facts from phi operands to phis        III-2.0336
    2     3     ssa  optimize if(a && b) if(a || b) patterns              III-2.0335
    2     2     ssa  Block merging                                        III-2.0335
    3     3     nrm  Apply local optimizations in normalization           III-2.0334
    1     2     ssa  Fewer explicit nullchecks for CallClassMethod        III-1.0304
    1     2    norm  Propagate SSA facts for map0()'d instructions        III-1.0304
    1     2     ssa  Print ssa facts with -print-ssa                      III-1.0304
    1     2     x86  Match stores of constants in x86 code gen            III-1.0284
    1     2    mach  Eliminate redundant bounds checks in foreach         III-1.0270
    1     2     x86  Don't align stack to 16-byte boundaries on darwin    III-1.0258
    1     3    mach  Reuse spill slots after last use in regalloc         III-1.0258
    2     3     x86  Code and data on same page in darwin binaries        III-1.0256
    2     2     x86  match add(A << {0,1,2,3} + K) to "lea"               III-1.0248
    2     2     x86  match add(A * {1,2,4,8} + K) to "lea"                III-1.0248
    1     1     ssa  Fold && and || for constants                         III-1.0229
    1     1     ssa  Optimize if(true|false, X, Y) expressions            III-1.0229
    1     1     ssa  Optimize if(x, A, A) constructs                      III-1.0227
    2     2     vst  Use Member_TypeCon for resolution                    III-1.0217
    1     1     x86  Use lea for mov/add combination                      III-1.0204
    1     2    mach  Option to disable bounds checks for tests            III-1.0199
    2     2     ssa  Devirtualize GetVirtual(New), GetVirtual(this)       III-1.0199
    1     2     ssa  Remove negative array length checks                  III-1.0199
    1     1     x86  Remove int -> byte conversions in stores             III-1.0199
    1     1    mach  Fold offset calculations in array accesses           III-1.0199
    1     1    mach  Fold array alloc size computation with known length  III-1.0195
    1     1 ssa/nrm  Only bounds-check first normalized array access      III-1.0190
    2     1     x86  match load/store(A * {2,4,8} + K)                    III-1.0160
    2     1     x86  match compares                                       III-1.0160
    1     1 ssa/nrm  Eliminate more NullChecks at Normalization time      III-1.0146
    1     1 ssa/nrm  Preserve facts for 1-1 mappings in SsaRebuilder      III-1.0146
    1     2 ssa/nrm  Devirtualize GetVirtual for non-overridden methods   III-1.0140
    1     3     ssa  Fold type casts in Normalizer                        III-1.0125
    2     3     ssa  Compute per-loop modification of variables           III-1.0120
    2     2     ssa  Improve V3.decideTypeQuery / decideTypeCast          III-1.0116
    1     3     jvm  Make JvmBytecode.* fields into literal constants     III-1.0102
    2     4     rma  Remove write-only and init-only fields               III-1.0100
    2     3     ssa  Always inline value fields init'd to literals        III-1.0096
    1     3 ssa/nrm  Inline values of constant fields                     III-1.0096
    1     3     ssa  Forward value of nested assigns in VstSsaGen         III-1.0095
    1     3 ssa/nrm  Fold TypeQuery in Normalizer                         III-1.0092
    2     3 ssa/jvm  emit tableswitch and lookupswitch                    III-1.0086
    2     3 ssa/jvm  combine comparisons with branches                    III-1.0085
    1     2    llvm  Render ids as hex, not decimal                       III-1.0074
    2     2     ssa  Enable branch optimizations in SSA->IC               III-1.0056
    2     2     ssa  Enable local optimizations                           III-1.0052
    1     2      ic  Fold constant branches                               III-1.0048
    1     1      ic  Simplify if (a == K) Tir pattern into match(a) K ->  III-1.0048
    1     2      ic  Simplify match (a) true -> ... into branch           III-1.0048
    2     3      ic  Shortcut primitive operations such as IntAdd         III-1.0042
    2     3      ic  make execute() into virtual call on IcInstr          III-1.0044
    1     3     jvm  Make JvmCpe_Utf8 refer to class and string cpe's     III-1.0019
    2     3    norm  Use match() on opcodes instead of OpVisitor          III-1.0016
    1          test  System.fileReadN() to parse first line               III-1.0005
    1           sys  Added System.fileReadK and System.fileReadN          III-1.0003

====================================== T O D O ==============================================
 Comp  Prio  Module  Item
---------------------------------------------------------------------------------------------
    1     1    mach  Pointer.atEnd(array) should add length
    2     1    mach  Pointer.atField(layout.field[n])
    1     3     int  Stack overflow checking
    1     3  darwin  Stack overflow checking
    2     2     ssa  Clean up source position handling in Normalization
    2     2     ssa  Clean up source position handling in MachLowering
    5     1     x86  Rewrite x86 codegen to use new backend
    5     1     jvm  Rewrite jvm codegen to use new backend, stackify like wasm
    1     3   float  Use repeated div-by-u32 in FpSketch instead of complex routine
    3     2    tool  Coverage tool should be source-line based, not Ic code
    2     4      gc  Fix GC bug on MacOS with GC stats
    4     4    tool  Source-level debugger
    1     3   bench  Update btime.c to print milliseconds, matrix, etc
    2     3    test  Cache compile(program, target, binary) test results
    2     2   bench  Compile-speed and performance regression framework
    1     2  verify  FIX: Fix type inference for unifying/variance in functions
    2     2  verify  REF: unify all namespaces in resolving identifiers
    2     1    core  REF: Formatting utils could simplify IcProfiler
    1     2    core  REF: Refactor FUNCREF TypeCon to nest DELEGATE type
    1     2    test  Introduce "host" target for current platform
    1     2     x86  Add helper utility class for short branches
    2     2     x86  Add symbol table for debugging with gdb
    3     2      ic  TOOL: Profiler features
			- how often is this line executed?
			- output to "Tix" format for visualization
			- allocation profiling (cells, objects)
			- operation count
			- type profiling
			- path profiling
			- field profiling
			- cache simulation
    2     2    test  X86 assembler tests are slow and inadequate
    3     3    test  Register allocation
			- liveness
			- assignment
			- spilling, save/restore
			- move insertion
			- stack maps
    2     1    test  IO framework tests
			- buffers
			- string buffers
			- streams
			- encoders
    2     1    test  Testing framework
                        - smoke tests for quicker broad testing
			- Internal aeneas testing
			- shard + parallelize tests
    2     2    test  Add application and expected output as tests
    2     1    tool  Program statistics (# classes/methods/sizes, space, RMA)
    4     1    lang  DOC: Write language spec, reference manual
    1     1    mach  Calling conv instead of receiver bool in CallAddress
    2     2     x86  Remove all need for scratch register
-------------------------------------- D O N E ----------------------------------------------
    2     2    test  Execution tests without SSA optimizations
    1     4    mach  Fix lowering of u64 / float conversions
    1     2     x86  -disable-shift-checks generates incorrect code
    2     2    core  Util to match methods by regex for printing, tracing
    2     2    core  REF: Make Terminal and Strings work together better
    2     2    tool  -print-bin should dump binary data of executable
    3     2    test  Convert all tests to use same format/Progress program
    1     1    main  -P{svm} printer option
    2     2     x86  -print-mach should take a method matcher
    1     2    test  Tests for System.* with null and bad indexes
    1     2    tool  Coverage should allow a method pattern                III-5-1235
    1     1     sys  Boundscheck System.fileWriteK calls                   III-4-0946
    1     1     ssa  Deterministic visiting of SsaValue                    III-2.0763
    2     2   fsi32  Shifts by word sizes become normalized shuffles       III-2.0758
    2     2    tool  -print-bin should dump binary code/data of executable III-2.0601
    1     3   fsi32  Fix divide for u32                                    III-2.0607
    1     2    test  Only run GC tests for dynamically allocating tests
    1     2    core  Byte < > <= >= should not be resolved as int < > <= >=
    1     2   bench  Check in binaries to btime, native tester, etc
    2     3    test  Class hierarchies
			- virtual calls
			- devirtualization
			- typecast
    2     4    test  Check in binaries for testexec on native platforms
    1     2      ir  REF: change IrMember.container to be a type           III-2.0429
    1     2    core  REF: Refactor SetField, SetElem, etc to return void   III-2.0405
    1     4    test  Stack traces for top-level methods on native targets  III-2.0373
    2     3    test  Auto-convert execute tests to stacktrace tests        III-2.0372
    2     2     ssa  REF: Use and reuse SsaContext throughout SSA          III-2.0368
    2     1     x86  Tests for Linux system calls                          III-2.0365
    2     2     x86  Polymorphic Linux.syscall operator                    III-2.0364
    2     2     x86  Polymorphic Darwin.syscall operator                   III-2.0361
    1     1     dev  "aeneas benchmark" command to time compile speed      III-2.0357
    1     2     ssa  -disable-type-checks disables int conversions         III-2.0356
    1     1     rma  -print-dead-code shows dead methods from RMA          III-2.0354
    2     2    test  Tests should put compiled Aeneas binaries in /tmp/    III-2.0345
    1     2    core  REF: s/Terminal.printN/Terminal.putN/g                III-2.0340
    1     2    test  Stacktraces including generated invoker methods       III-2.0334
    2     2    test  Deep/weirdly nested foreach loops                     III-2.0333
    1     1     jvm  Fix adapter casts in JvmAdapterDelegateGen            III-1.0322
    2     3    core  REF:  Move all TypeCaches into one Program TypeCache  III-1.0314
    1     4  verify  FIX: stackoverflow in TypeVar_TypeCon.render          III-1.0311
    1     1      gc  Print stacktrace with !HeapOverflow                   III-1.0307
    1     3     x86  -disable-null-checks generates incorrect code
    1     2    test  Tests for pointer closures (ptr.add)
    1     1    test  Convert all test sources to use var/def               III-1.0304
    1     1    mach  Insert missing nullchecks for CallClassMethods        III-1.0304
    1     1    test  Create III-1 dialect tests for backward compatibility III-1.0303
    2     2   bench  Convert all while loops into for loops                III-1.0300
    1     1     jar  Create jar in non-existent directory causes NCE       III-1.0299
    2     4  verify  Cyclic field references and type inference            III-1.0293
    1     1     jar  Fix bridge code for main methods with no params       III-1.0291
    2     3    test  Tests for type inference of fields                    III-1.0290
    2     3    test  Tests for "var" and "def" of fields                   III-1.0290
    1     4    core  RELEASE: v3c-setup auto selects appropriate compiler  III-1.0289
    1     4    core  RELEASE: Enforce parameter types for main() method    III-1.0288
    1     4     src  RELEASE: update all Copyright notices                 III-1.0286
    3     3      gc  GC passes all tests!                                  III-1.0284
    2     3    test  Auto-convert execute tests into GC tests              III-1.0283
    1     3     bin  Add v3c-jar v3c-x86-darwin* commands                  III-1.0281
    3     4      gc  First successful GC for Aeneas compiler!              III-1.0280
    2     2     jvm  Normalize delegates on JVM target                     III-1.0278
    1     2     jvm  Remove normalization of returns in SsaNormalizer      III-1.0274
    1     3  aeneas  Convert all uses of "local" to "var"                  III-1.0274
    2     2  aeneas  REF: rename StringBuffer.append* to .put*             III-1.0273
    2     1  aeneas  Convert many for loops into for (i in array) loops    III-1.0271
    1     1     x86  Dead phi input bug--more aggressive dead phi elim     III-1.0266
    1     2     x86  REF: extract X86MachAssembler from X86CodeGenerator   III-1.0261
    1     2     x86  REF: extract X86Allocator from X86Darwin              III-1.0260
    2     3    test  (native) GC metadata                                  III-1.0255
    2     3    test  (native) exception metadata                           III-1.0255
    2     3    mach  Simplify binary layout/encoding logic in jvm,jar,x86  III-1.0255
    3     2    test  Correctness testing for exception stack traces        III-1.0255
    2     3    test  Stacktrace output tests                               III-1.0255
    1     1    norm  Devirtualization of call to abstract method fix       III-1.0252
    1     1    norm  Normalization of Array<(T, void)> fixes               III-1.0251
    1     1    main  Accept 'k', 'm', 'g' suffixes for heap-size           III-1.0237
    1     4     bin  Compiler should make binary output executable         III-1.0237
    1     1     jvm  Cleanup V3S_System.java runtime class                 III-1.0234
    1     3    test  Add first stacktrace output tests                     III-1.0232
    1     2    core  REF: Change List<SourceLoc> to Source                 III-1.0232
    2     3    test  Complex nested if-exprs and &&, || constructs         III-1.0230
    2     3    test  phis with const, reg, spill args                      III-1.0228
    2     3    test  Class hierarchies - typequery                         III-1.0228
    2     3    test  complex control flow involving throws                 III-1.0228
    1     1     vst  FIX: x && throw phi problems                          III-1.0228
    1     1    test  Add apps as tests                                     III-1.0227
    1     1    test  Add benchmarks + expected output as tests             III-1.0227
    1     1     all  Remove uses of "var" as identifier                    III-1.0226
    1     2     jvm  System.exit() with return value of main               III-1.0219
    1     1     vst  FIX: special case of explicit void arg to delegate    III-1.0217
    1     1     jvm  Fix match() for duplicated values                     III-1.0217
    2     3  bench   Richards benchmark ported from Java                   III-1.0213
    2     3  bench   DeltaBlue benchmark ported from Java                  III-1.0213
    1     1 vst/ssa  if-expr implicit conversion fix                       III-1.0188
    1     1 ssa/nrm  CallFunction type parameter fix                       III-1.0181
    1     2    test  "diagnose.bash" script for x86-darwin-test            III-1.0181
    1     3    test  Big parameters with many permutations                 III-1.0181
    1     3    test  Many phis with many permutations                      III-1.0181
    1     3    test  MoveResolver unit tests                               III-1.0181
    1     3    test  0 - x and -1 ^ x optimizations                        III-1.0181
    1     1  verify  match int with byte values                            III-1.0180
    2     2     ssa  Split critical edges in SsaRebuilder                  III-1.0172
    2     3    test  Test SsaBlockOrder properties                         III-1.0170
    2     3    test  Additional tests to "virgil test" command             III-1.0170
    2     3    tool  Profiler: branch profiling                            III-1.0154
    2     3     x86  Finish and test X86Assembler                          III-1.0152
    2     3 ssa/nrm  Normalize delegates to functions (optionally)         III-1.0146
    1     1     ssa  Remove SsaCall and replace with CallDelegate          III-1.0144
    2     2     x86  First implementation of X86Assembler                  III-1.0138
    2     3    core  Introduce kind for V3 type constructors               III-1.0136
    1     1    norm  Small fixes and speedups to SsaRebuilder              III-1.0134
    2     2    norm  Convert SsaNormalizer to use SsaRebuilder             III-1.0132
    1     1    test  Move test output to /tmp/$USER/virgil-test            III-1.0126
    3     3    mach  Implement first version of lowering                   III-1.0124
    3     3    mach  Import old machine-level representation               III-1.0124
    2     2  parser  Refactor char parsing to use Parsed<T>                III-1.0117
    2     3  verify  Constraints for type variables in casts               III-1.0116
    2     3    core  Remove UniqueKeys                                     III-1.0112
    1     1     rma  Fix NCE for operators that exist in the heap          III-1.0102
    2     2      ic  Profiler features                                     III-1.0094
				- total instructions
				- per-instruction count
    2      tir  REF: Remove all Tir code                                   III-1.0092
    1     core  FIX: (T -> T) -> T  versus T -> (T -> T) ambiguity         III-1.0084
    1   verify  FIX: component constructor cannot have params              III-1.0081
    1   verify  FIX: error report for arity mismatch                       III-1.0080
    2      all  REF: replace most while loops with for loops               III-1.0068
    1       ic  FIX: Generate source traces in IcInterpreter               III-1.0056
    1   verify  FIX: NullCheckException in verify multiple seman tests     III-1.0046
                     as real programs
    1   verify  FIX: Value initialization errors                           III-1.0046
    1   interp  FIX: Apply int.+ to tuple parameter                        III-1.0044
    2   verify  FIX: Refactor type errors to allow for echo of line        III-1.0040
    1   verify  FIX: Duplicate errors for TypeParamInferError              III-1.0040
    1   verify  FIX: Report line/column for MissingReturn error            III-1.0032
    1       ic  FIX: Nested assignments to local variables
    2   parser  REF: Make Lexer extend ParserState before migration        III-1.0025
    4   parser  OPT: Refactor parser and lexer framework to avoid Tokens   III-1.0021
    2   parser  FIX: Remove octal char support, add hex char support       III-1.0021
    1     norm  FIX: Nested assignments to local variables                 III-1.0016
    1      jvm  FIX: Corrected byte size / signedness on JVM               III-1.0015
    1       ic  FIX: IcInterpreter now runs all test cases                 III-1.0013
    1     user  INF: "virgil" script
    1      cvs  INF: "virgil checkpoint" Automatic version bump            III-1.0010
    2       ir  FIX: Normalize                                             III-1.0001
    1      jvm  FIX: Heap cycles involving delegates                       III-1.0001
    2   interp  TEST: Test normalization by running normalized programs    III-1.0001
    1      jvm  FIX: Shift checks for overflow                             III-1.0001
    1   interp  FIX: Render deepest frame first for exceptions             III-1.0001
    1   verify  FIX: AssignError for assignment to "this" parameter        III-1.0001
    1   verify  Resolve System operators                                   III-1.0001
    1   verify  Allow polymorphic casts of form A<T> to A<int>             III-1.0001
    2       ir  Functions that take a single tuple vs. multiple arguments  III-1.0001
    2   verify  Functions that take a single tuple vs. multiple arguments  III-1.0001
    1      jvm  fields, arrays, tuples, etc of type void                   III-1.0001
    2       ir  System operators                                           III-1.0001
    1       ir  Match statements in IR                                     III-1.0001
    1   interp  Negative length array allocation produces exception        III-1.0001
    3      jvm  Generate output program as a jar file                      III-1.0001
    2     core  Lowering from V3 operators to Pointers                     III-1.0001
    2     core  Fast Operator dispatching framework                        III-1.0001
    1     core  Component types are not nullable                           III-1.0001
    3     core  Implement VST to IR translation                            III-1.0001
    2       ir  Implement IRInterpreter	                                   III-1.0001
    2   parser  change from "new Class" to "Class.new" syntax              III-1.0001
    2   parser  Remove support for program { ... } declarations            III-1.0001
    3   parser  First-class unbound class members "Class.member"           III-1.0001
    3   parser  First-class unbound primitive operators "int.+"            III-1.0001
    3       ir  Make type parameters to operators part of IR               III-1.0001
    2     core  Add backend mechanism and add wrapper for JVM backend      III-1.0001
    2     core  Move V3System to use Operator framework                    III-1.0001
    2     util  Better string formatting routines                          III-1.0001
    1     core  Add and flesh out Compiler/Compilation object concepts     III-1.0001
    1      jvm  NullCheckException for access of useless fields            III-1.0001
    2   verify  Type inference in the presence of casts/queries            III-1.0001
    1   interp  Shift operators                                            III-1.0001
    1      jvm  NullCheckException for GetMethod on null                   III-1.0001
    1   interp  Attempt to allocate array with negative length             III-1.0001
    1   interp  Comparisons between component values                       III-1.0001
    1   interp  Arrays of void, component values                           III-1.0001
    2   parser  Tests for prim.<op> syntax                                 III-1.0001
    2    seman  Tests for prim.<op> type checking                          III-1.0001
    2   interp  Tests for prim.<op> execution                              III-1.0001
    1   parser  Nontermination for malformed match expressions             III-1.0008
    2      jvm  perf           Generate lookupswitch for int match                          III-1.0001
    2      jvm  perf           Generate tableswitch for int match                           III-1.0001
    1     util                 Implemented Symbol and SymbolCache                           III-1.0001
    2      jvm  code size      Generate LDC + getBytes() for character arrays in heap       III-1.0001
    1      jvm  code size      Move object allocation to static "Class.$new" methods        III-1.0001
    1      jvm  code size      Move heap object initialization to "Class.$init" methods
