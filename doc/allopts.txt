|| All optimizations
=======================

local check eliminations
  * shift check
  * divide check
  * length check
  * null check
  * type check/query
  * type check/query folding
  * array bounds check

block flow-sensitive
  * null check
    array bounds check
    local value numbering
    local check combining
    local check sinking

local misc
  * constant folding
  * constant propagation
  * dead code elimination
  * dead phi elimination
  * load/store elimination
  * devirtualization
    boilerplate object copy for large mostly constant arrays
    strength-reduce {ADT == k} to check only one tag

local control flow optimizations
  * branch folding
  * block merging
    conditional moves
  * phi simplification
  * block skipping
    phi combining
    tail duplication
    tail merging
    if-chain reordering
    if-typequery reordering
    build switch for if-typequery chains

local strength reduction
    algebraic reassociation
  * +0 -0 (additive identities)
  * *1 %1 /1  (multiplicative identities)
  * >>0 >>big >>neg (shift identities)
  * /2^n %2^n *2^n (shift/multiply)
  * &0 &-1 |-1 |0 ^0 (bitwise identities)
    >>m>>k >>k<<k (shift chaining)
    &m&n |m|n (bitwise reassociation)
    load narrowing
  * store narrowing
    redundant masking / narrowing
  * getlength(newarray(e))
  * call(inst)
  * call(getmethod)
  * call(getvirtual)
  * call(instop)
  * x==x x!=x (reflexive comparisons)
  * nullcheck(alloc)
    dead getfield -> nullcheck

loop optimizations
    peeling
    unrolling
    versioning
    unswitching
    rotation
    invariant code motion
    interchange
    fusion/fission
    lazy code motion
    induction variable elimination
    auto-vectorization
    dead loop removal
  * array bounds check elimination

iterative dataflow optimizations
    array bounds check elimination
    alias analysis
    null check elimination
    type cast/query elimination
    devirtualization

global misc
    global value numbering
    load/store elimination
    load/store scheduling
    write barrier removal
    purity analysis
    code layout
    value specialization
    escape analysis
    auto-vectorization
    array copy/compare/search substitution
    value range analysis
    partial evaluation

global control flow optimizations
    branch/switch reordering
    typeswitch reordering
    typeswitch substitution
    code straightening
    code layout

inlining
    basic
    partial
    guarded
    polymorphic
    profile-guided
    polymorphism-guided

whole-program
    dataflow analysis
  * RMA
     * remove dead fields
     * remove write-only fields
     * inline literal fields
       inline constant fields
     * devirtualization
       object header elimination
       move field to metaobject
     * type specialization
     * breadth-first method order
       partial type specialization
     * fold getfield of immutable fields
    object inlining
    object outlining
    code layout
    data layout
    field packing
    escape analysis
    region inference
    purity analysis
    value specialization
    value class promotion
    parameter elimination
    global to register promotion
    field to thread-local promotion
    segregate ref component fields
    segregate initial value objects
    vertical object layout

backend
  * linear scan register allocation
    profile-guided register allocation
    trace-based register allocation
    live-range splitting
    peephole optimizations
    code/loop alignment
    whole program hot/cold code layout
    div/modulus combining
    instruction scheduling
    short branches
  * instruction selection
  * jump tables
    return this chaining

instrumentation
    allocation counters
    method entry/exit counters
    branch profiling
    type profiling
    path profiling
  * method entry/exit timings

runtime
    ref array compression
    value object caching
    value array caching
    inline refmap into object header

lamdbas/partials
    partial application with one bound object parameter
    specialize partial applications

Possible schedule of optimization passes
VST -> SSA
  local folding / check eliminations
  local value numbering
  local redundant check elimination
  value field folding
  inline trivial methods

SSA method pass
  simplify phis
  iterative folding / check elimination
  iterative devirtualization
  local control flow simplification
  dataflow - bounds check elimination
  dataflow - type check elimination
  inline trivial methods
  loop rotation
  loop peeling

SSA global normalization pass
  global devirtualization
  global type check elimination
  partial specialization

SSA global optimization pass
  dataflow - field-sensitive analysis
  escape analysis
  purity analysis
  type check elimination
  devirtualization
  null check elimination
  inlining

SSA method lowering pass
  load / store narrowing
  integer range analysis

SSA method pass
  common subexpression elimination
  loop peeling
  loop invariant code motion
  loop unrolling
  loop versioning

Mach global pass
  Global hot/code layout

Mach method pass
  code alignment
* instruction selection
  instruction scheduling
* register allocation
  spill code optimization
  peephole optimization
  branch size optimization


Short list:
-----------------
- enable/disable optimizations with command line options
* local optimizations during ssa construction
  - local folding of opEqual, opNotEqual
* dead code removal in normalization
* jump table on x86
* local optimizations during normalization
* local null check elimination
* local optimization of if (Class.?(x)) y = Class.!(x)
* phi simplification
* if && || constructs
* block merging
- read-only field optimizations
  * distinguish between writes and initializations
  x dead read elimination
  * purity
  - folding
  * initialized to constant
  * ssa facts for immutable fields
  - ssa facts for mutable fields
- live range splitting
* bounds check elimination
- inline trivial methods
- specialized array init stubs
  - [x] [x, y]
  - Array.new()
- class constructor streamlining
* don't generate empty constructors
- code layout via callgraph
- short branches on x86
- loop invariant code motion
- global null check elimination
- global type check elimination
- optimize explicit bounds checks of >32 bit indexes

Measure the impact on compile time/code speed:

- Aeneas bootstrap time
  - parse time
  - parse/typecheck time
  - compile fixed Aeneas versions
  - compile current version
  - interpreted bootstrap time (v3c-dev $AENEAS)
- Aeneas tests (interpret)
  - test/parser
  - test/seman
  - test/execute
  - test/large
- Aeneas tests (compiled)
  - test/large
  - test/gc
- benchmarks
- apps


What are all the possible optimizations to be done on constructors?
* remove trivial constructors
- compute purity of constructor
  + escape analysis => remove unused object allocations
- compute purity of object
  + if no object identity => hash cons objects
- escape analysis => allocate object on stack
- inline constructor into allocation site
- replace field reads with constant
- make field reads pure
- allocate space for multiple objects in one request
  - (need to know allocated objects in constructor)
- replace pure computed fields with their expressions
- cache pure computed expressions as fields
- streamline allocation stub: 
  - allocate and write fields in one stub
- object/array boilerplate: mostly-constant object and array
  allocations are copies+mutate from a template "boilerplate" object
- collapse fields that hold the same value into one field
- remove write barriers from field initializations
- eliminate zeroing for straight-line, fully initialized classes
- jvm: move constructor code into Class.<init>
- split object into multiple objects
  - depending on initialized / uninitialized parts
  - hash cons immutable object parts
- pack small fields into header word
  - bools -> bits
  - bytes -> upper / lower part of type word

Optimizations for variants
- Pack primitive-only variants into words
- Inline single-ref variant cases which can be distinguished from
  other non-overlapping variant cases

Useful Inter-procedural analyses:
 - parameters:
   - used/unused
	=> remove unused parameters in caller
   - nullity
	=> remove null checks in body
   - procedure definitely performs null/bounds/zero/negative check
	=> remove dominated checks in caller
   - parameter doesn't escape procedure
	=> remove dead allocations
 - pure
   => remove unused result of calls, hoist out of loops
 - no side-effects
   => load/store elimination across call
 - idempotent (1* = 1)
   => hoist out of loops
 - no exceptions
   => remove source information
 - non-recursive (maximum stack addition)
   => remove stack overflow checks
 - bounded stack height
   => remove stack overflow checks
 - return value
   - doesn't escape
   - null/nonnull
	=> remove null checks in caller
   - specific type
	=> devirtualize
   - never used
        => dead code eliminate the return expressions
 - cost
   - estimated dynamic cost of call versus body
	=> guide inlining decisions
 - Temporally disjoint fields automatically reused by compiler.
	=> save space on heap
 - Rarely-set fields automatically moved to side object by compiler.
	=> save space on heap
 - Heuristics for specializing methods for some parameters. Partial evaluation
 - Prioritize compiler metrics globally by their impact on program metrics


- Specialization optimizations
  - how much would type/value specialization benefit from parameter X?
  - constant folding, strength reduction
  - devirtualization (known receiver type)
  - inlining
  - loop unrolling (known trip counts)
  - dead code elimination (evaluate predicates)
  - load elimination (known heap contents)
  - bounds check elimination

- Factor out immutable part of objects into cacheable, shareable subobjects
