Virgil ::=  ToplevelDecl* EOF
ToplevelDecl ::= ClassDecl | ComponentDecl | VariantDecl | LayoutDecl | EnumDecl | ExportDecl | VarMember | DefMember

ClassDecl ::= "class" IdentParam ( "(" VarParamDecls? ")" )? ( "extends" TypeRef TupleExpr? )? RepHints "{" Member* "}"
ComponentDecl ::= "import"? "component" IDENTIFIER "{" Member* "}"
VariantDecl ::=  "type" IdentParam ( "(" ParamDecls? ")" )? RepHints "{" VariantMember* "}"
EnumDecl ::=  "enum" IDENTIFIER ( "(" ParamDecls? ")" )? "{" EnumCases? "}"
LayoutDecl ::= "layout" IDENTIFIER RepHints "{" LayoutField* LayoutSize "}"
LayoutField ::= "+" INTEGER IDENTIFIER ":" TypeRef RepHints ";"
LayoutSize ::= "=" INTEGER ";"

Member ::=  DefMember | NewMember | VarMember
VariantMember ::= DefMethod | VariantCase
VarMember ::=  "private"? "var" VarDecls ";"
DefMember ::=  "private"? "def" (("var"? VarDecls ";") | IndexMethod | Method)
NewMember ::=  "private"? "new" "(" NewParamDecls? ")" ( ":"? "super" TupleExpr )? BlockStmt
DefMethod ::= "private"? "def" (IndexMethod | Method)
VariantCase ::=  "case" IDENTIFIER ( "(" ParamDecls? ")" )? RepHints ( ";" | "{" DefMethod* "}")
EnumCase ::=  IDENTIFIER ( "(" ( Expr ( "," Expr )* )? ")" )?
EnumCases ::= EnumCase ( "," EnumCase )*

VarParamDecl ::=  "var"? IDENTIFIER ":" TypeRef
VarParamDecls ::= VarParamDecl ("," VarParamDecl)*
ParamDecl ::=  IDENTIFIER ":" TypeRef
ParamDecls ::= ParamDecl ("," ParamDecl)*
NewParamDecl ::= IDENTIFIER (":" TypeRef)?
NewParamDecls ::= NewParamDecl ("," NewParamDecl)*
IdentParam ::= IDENTIFIER ("<" TypeArgs ">")?
TypeRef ::=  ( "(" TypeArgs? ")" | IdentParam ( "." IdentParam )* ) ( "->" TypeRef )*
TypeArgs ::= TypeRef ("," TypeRef)*

VarDecl ::= IDENTIFIER ((":" TypeRef) | ("=" Expr) | (":" TypeRef "=" Expr)) RepHints
VarDecls ::= VarDecl ( "," VarDecl )*
IndexMethod ::= IdentParam "[" VarParamDecls? "]" ( "=" ParamDecl | "->" TypeRef ) MethodBody
Method ::=  IdentParam "(" VarParamDecls? ")" ReturnType? MethodBody
ReturnType ::= "->" ( "this" | TypeRef )

MethodBody ::= EmptStmt | BlockStmt | "=>" Expr ";"
ExportDecl ::=  "export" ( DefMethod | ( STRING | Ident ) ( "=" SymbolParam )? ";" )
Symbol ::= IDENTIFIER ("." IDENTIFIER)*
SymbolParam ::= IdentParam ("." IdentParam)*

BlockStmt ::= "{" Stmt* "}"
Stmt ::=  BlockStmt | EmptyStmt | IfStmt | WhileStmt | MatchStmt | VarStmt | DefStmt | BreakStmt | ContinueStmt | ReturnStmt | ForStmt | ExprStmt
EmptyStmt ::=  ";"
IfStmt ::=  "if" "(" Expr ")" Stmt ( "else" Stmt )?
WhileStmt ::=  "while" "(" Expr ")" Stmt
MatchStmt ::=  "match" "(" Expr ")" "{" ( MatchCase MatchCase* )? "}" ( "else" Stmt )?
MatchCase ::=  ("_" | (MatchPattern ( "," MatchPattern )*)) "=>" Stmt
MatchPattern ::=  IdTypePattern | SymbolPattern | Const
IdTypePattern ::=  IDENTIFIER ":" TypeRef
SymbolPattern ::= Symbol ( "(" ( IDENTIFIER ( "," IDENTIFIER )* )? ")" )?
VarStmt ::=  "var" IDENTIFIER VarDecls ";"
DefStmt ::=  "def" IDENTIFIER VarDecls ";"
BreakStmt ::=  "break" ";"
ContinueStmt ::=  "continue" ";"
ReturnStmt ::=  "return" Expr? ";"
ForStmt ::=  "for" "(" VarDecl ( "<" Expr | "in" Expr | ";" Expr ";" Expr ) ")" Stmt
ExprStmt ::=  Expr ";"

Expr ::= SubExpr (Assign Expr)?
Exprs ::= Expr ("," Expr)*
SubExpr ::= InExpr (Infix InExpr)?
InExpr ::= Term TermSuffix*
TermSuffix ::= (MemberSuffix | ApplySuffix | IndexSuffix | IncOrDec)
MemberSuffix ::=  "." ( IdentParam | INTEGER | Operator )
ApplySuffix ::= "(" Exprs? ")"
IndexSuffix ::= "[" Exprs "]"
Term ::= (IncOrDec | "-")? (ParamExpr | Literal | ArrayExpr | TupleExpr | IfExpr | FunExpr)
FunExpr ::= "fun" FunExprParams? ReturnType? (BlockStmt | ("=>" Expr))
TupleExpr ::=  "(" Exprs? ")"
ArrayExpr ::=  "[" Exprs? "]"
ParamExpr ::=  "_"
IfExpr ::= "if" "(" Expr "," Expr ( "," Expr )? ")"
Literal ::= Const | "this"
Const ::= CHAR | STRING | INTEGER | FLOAT | "true" | "false" | "null"

FunExprParams ::= NewParamDecl | ("(" NewParamDecls? ")")?
RepHints ::= REPHINT*

IncOrDec ::=  "++" | "--"
Operator ::= Infix | CastOrQuery | "-" | "~" | "[]" | "[]="
CastOrQuery ::= ("!" | "?") ( "<" TypeArgs ">" )?
Assign ::= "=" | "<<=" | ">>=" | "|=" | "&=" | "<<<=" ">>>=" | "+=" | "-=" | "*=" | "/=" | "%=" | "^="
Infix ::=  "==" | "!=" | "||" | "&&" | "<" | "<=" | ">" | ">=" | "|" | "&" | "<<" | "<<<" | ">>" | ">>>" | "+" | "-" | "*" | "/" | "%" | "^"

REPHINT ::= #[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ] [-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_]*
IDENTIFIER ::= [abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ] [abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_]*
CHAR ::= "'" (HEXCHAR | PRINTABLE | ESCAPE)  "'"
INTEGER ::= [0] | ([-]? ([123456789][0123456789]* | "0x" [abcdefABCDEF0123456789]+)) [uU]? [lL]?
FLOAT ::= [-]? ([0] | ([123456789][0123456789]*)) ('.' [0123456789]*)? ([eE] [+-]? ([0] | [123456789][0123456789]*))? [fFdD]?
STRING ::= """ ( HEXCHAR | PRINTABLE | ESCAPE )* """
HEXCHAR ::= [x][0123456789ABCDEFabcdef][0123456789ABCDEFabcdef]
PRINTABLE ::= [ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`~!@#$%^&*()-_=+\[{\]};:,<.>/?]
ESCAPE ::= [\\][rnbt'"]
