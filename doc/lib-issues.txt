___   _____ ____     _____ ______ ______ _    _ ______ ______
 |      |    |__|_     |   |_____ |_____ |    | |_____ |_____
_|__| __|__ _|___|   __|__ _____| _____| |____| |_____ _____|

-- migrations ---------------------

-- missing functionality ----------
 unit tests for all libraries
 render floating point numbers
 import or other dependency mechanism?
 implement and test Ints.parseHex and Ints.parseBin

-- write benchmarks ---------------
 DataReader/Writer
 StringBuilder
 int parsing

-- fix naming conventions  --------
 Builder
 set
 put, putx, put_x, putX
 i1/i2 vs i8/i16


-- Future organization of standard library -------
Datastructures:
  - List
  - HashMap
  - Arrays
  - Ranges
  - BitMatrix
  - BitVector
  - Vector
  - WorkQueue

Strings/render
  - Strings
  - all primitives <-> string
  - GlobMatcher
  - RegexMatcher
  - StringBuilder
  - TraceBuilder ?
  - Utf8

Parsing
  - Parsed<T>
  - Symbol
  - Tokens
  - Lexing utils
  - Parsing utils
  - TextReader
  - NumberParser

IO
  - ByteStream
  - DataReader
  - DataWriter
  - File API
  - Sockets API
  - HTTP API
  - line-by-line file load
  - raw stdin (ioctl)

Shell/cmdline
  - options and arguments
  - terminal
  - animations, spinners

Dev/test
  - UnitTests framework
  - ErrorGen/location framework
  - unimplemented, fatal
  - logging
  - benchmarking framework
  - clocks, timing
  - progress format utilities

Misc:
  - Random number generator(s)
  - profiling utils
  - memory consumption utils
  - basic statistics
  - dates?
  - Yaml parser
  - JSON parser
  - CSV parser

Algorithms:
  - Directed graphs
  - Undirected graphs
  - Sorting


-- done ----------
* Naming
    Reader vs Decoder vs Parser vs Lexer
    Writer vs Encoder
    write vs put vs append
    read vs get
* add unit testing framework
* put? naming: DataBuffer
* Aeneas util vs lib/util
* StringBuffer -> StringBuilder in aeneas
* Migrate all tests to use common 'progress' format
* migrate Aeneas to use lib/util
* StringBuffer -> StringBuilder in lib/util
* put? naming for appending to things: Vector, StringBuffer
* lang: vector/map indexing
  * vector.get(e)                       vector[e]
  * vector.set(e, e)                    vector[e] = e;
  * map.get(e)                          map[e]
  * map.set(e, e)                       map[e] = e;
* vector.get, vector.set, hashmap.get, hashmap.set	=> indexing syntax []


Experiential notes
------------------------
 Errors: Wizard + Aeneas both parse complex formats and generate error messages for users
   - Wizard primarily parses binary and generates file-section-offset errors
   - Wizard spec tests are in text
   - Aeneas parses text
   - Both text parsers might benefit from having common lower-level lexing utils (tokens, errors, buffer, etc)
   - Aeneas parses text as bytes, only allows UTF-8 inside string constants
   - factor common functionality into TextReader, Symbol, and Token

 Benchmarks and new apps and utilities all benefit from having "quick hack" utilites at the ready
    - easy parse of a int command line parameter
    - load file as text, line-by-line
    - render strings, lines
    - terminal colors
    - datastructures
    - should be as easy or easier to use than System.putx
    - could be easier with some kind of import statement, or dev script that adds lib/util as part of the v3c command?

In:
  ParserState
  Decoder
    Wasm
    JVM

					New Name (?)
  ParserState				TextReader
    ?					get_symbol
    token				get_token
    tokenAt
    advance				skipN
    advance1				skip1
    optN				matchN
    opt1				match1
    reqN
    req1
    peek
    star
    plus

  Decoder (seekable,retryable,reusable)	DataReader
    read_u8				get_u8
    peek_u8				peek1
    match_u8				match1
    ?					matchN
    ?					skip1
    ?					skipN
    read_u32				get_u32
    read_u64				get_u64
    read_u32leb				get_uleb32
    read_i32leb				get_sleb32
    read_u64leb				get_uleb64
    read_i64leb				get_sleb64
    read_bytes				get_bN
    check_bytes				peekN
    skip_bytes
    append				put_bK
  Decode:
    - i8, i16, i32, i64 signed/unsigned big/little endian
    - i32leb, i64leb, u32leb, u64leb
    - UTF-8
  Parse:
    - bool
    - int
    - long
    - hex
    - binary
    - float
    - string literal
    - char literal


Out:					New Name (?)
  DataBuffer (seekable,reusable)	DataWriter
    i1[le,ge]				put_b8
    i2					put_b16
    i4					put_b32
    i8					put_b64
    i4leb				put_sleb32
    i8leb				put_uleb64
    iN					put_bN
    iK					put_bK
    zeroN				put_zeros
    skipN
    align
    bb					put_bb
    bbb					put_bbb
    skip_u4leb
    overwrite_u4leb
  StringBuffer/Builder			StringWriter
    putd[_iNN]
    putx[_NN]
    putc
    putz
    puts[q]
    pututf8				move to Utf8
    ln					putln?
    sp					putsp?
    putk				put_cK?
  * putf
  * putN

  TraceBuffer				TraceWriter
    outln
  * out
  TerminalBuffer			TerminalWriter
    blue
    green
    cyan
    red
    yellow
    purple
    end
    out
 *HTMLBuffer
  * tag

Input	       Create		Append	Get Peek Match Errors	EOF
------------------------------------------------------
TextReader	Range<byte>	putK
  .ok
  .reset
DataReader	Range<byte>	putK
  .ok
  .reset

Output		Create	Append Grow Put Extract
------------------------------------------------------
StringBuilder
  .length
  .grow()
  .acquire
DataWriter
  .length
  .grow()
  .acquire

Possible directory structures and namespaces:
------------------------------------------------------

lib/util 	   	        // Data structures and arrays, extend virgil types
use util.HashMap;
use util.BitMatrix;
use util.Arrays;
use util.Ranges;
use util.Ints;
use util.Longs;
use util.Bools;
use util.Chars;
use util.Functions;
use util.Tuples;
use util.Strings;

lib/string			// Strings and rendering
use string.StringBuilder;

lib/parse			// Parsing utilities
use parse.NumberParser;
use parse.Token;

lib/file			// File loading and writing utilities and layouts

lib/stat			// Statistics

lib/linux			// Linux system calls and layouts
