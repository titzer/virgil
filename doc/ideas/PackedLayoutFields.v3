// Idea: allow packed fields in a layout since many formats have sub-word and sub-byte fields.



// Alternative 1: Syntax now allows tuple fields, bitwise big endian packing.
// layout F {
//     +N	(f: iM, g: iN);
// }
//  means the field is M+N bits wide and encoded as u{M+N}.view(f << N) | uN.view(g)

// Example from IPv4.
layout IpV4Header #big-endian {
	+0	(ihl: u4, version: u4);
	+1	(ecn: u2, dscp: u6);
	+2	length:		u16;
	+4	id:		u16;
	+6	(fragment: u13, reserved_: u1, df: u1, mf: u1);
	+8	ttl:		u8;
	+9	protocol:	u8;
	+10	checksum:	u16;
	+12	srcaddr:	u32;
	+16	dstaddr:	u32;
	=20;
}

var packet = Ref<IpV4Header>.of(Array<byte>.new(IpV4Header.size));
var x = packet.ecn;

// Addition 2: allow explicit packing with extended binary literals.

// Example from IPv4.
layout IpV4Header #big-endian {
	+0	(ihl: u4, version: u4) = 0b_iiii_vvvv;
	+1	(ecn: u2, dscp: u6);
	+2	length:		u16;
	+4	id:		u16;
	+6	(offset: u13, df: u1, mf: u1) = 0b_oooooooo_ooooo0dm; // reserved bit is forced 0.
	+8	ttl:		u8;
	+9	protocol:	u8;
	+10	checksum:	u16;
	+12	srcaddr:	u32;
	+16	dstaddr:	u32;
	=20;
}

