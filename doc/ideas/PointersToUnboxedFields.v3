// Virgil already supports (by a recent addition) pointers to certain unboxed fields:

// Fields of unboxed variants where the variant instance is held in a mutable
// container, i.e., a class or component field.  This works recursively in the
// send that if an unboxed variant type is a field of another unboxed variant
// type that meets the criteria, pointers to fields of the nested variant work.

// Note that the type of the field pointed at must be non-composite, i.e., either
// a simple scalar type (integer, float), a reference to an object, or a Pointer.
// It cannot be, for example, a nested unboxed variant or a tuple.  (It *can* be
// a reference to a *boxed* variant instance.)

// Semantic justification: While variants a immutable (pure values), if they are
// held in a mutable container, any update via a pointer can be considered to be
// equivalent to creating a new variant instance and storing it in the container.

// Practical justification: It can be desirable to support atomic access, including
// cmpswp, to a field of an unboxed variant.

// Extending this coverage:

// 1) Semantically, tuples have the same properties as unboxed variants.  They are
// implicitly unboxed.  The only reason this is not handled is that there was not
// immediate demand for it and the compiler cases are a little different.  An
// approach to covering tuples is to:
// - Add a case to visitPtrAtField in Verifier.v3.  The VarBinding is kind Apply,
//   and the Operator is TupleGetElem.  (See MethodEnv.lookupTupleExprMember for
//   where it is built.  This adds a case somewhat parallel to the VariantField one.
//   Unfortunately, the "field" is not described by a VstField, but just and index.
//   We will probably need to introduce a new type here that has cases for regular
//   fields and the numbered fields of tuples.
// - Extend VstPrinter and VstSsaGen in PtrAtComponentField and PtrAtObjectField.
//   This might mean doing something a bit different in getPointedAtIrField.
// - Opcode's cases for PtrAt{Component,Object}Field may need rework.
// - Their handling in SsaNormalizer, Reachability, and MachLowering will need
//   to be extended.

// 2) Fields of unboxed variants (and tuples) in array elements.  This is still
// Pointer.atField, but Verifier,getPtrAtUnboxedField will bottom out at an
// IndexExpr.  (A RangeExpr would be illegal.)  This gets tangled up with
// PtrAtRangeElem.  Details need much more fleshing out.
