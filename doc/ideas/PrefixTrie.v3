// A prefix trie efficiently stores a mapping from keys that are ranges of <K> to values <V>,
// where the ranges of <K> exhibit a large amount of common prefixes and thus do not require
// every range of <K> to be stored separately.
class PrefixTrie<K, V> {
	private def empty = PrefixTrieLeaf<K, V>.new();	// the entry for the empty key
	private var root: PrefixTrieBranch<K, V>;

	// Get the value for {key}.
	def [key: Range<K>] -> V {
		return make(key).value;
	}
	// Set the value for {key}.
	def [key: Range<K>] = v: V {
		make(key).value = v;
	}
	// Update the value for {key} by applying {f} to the old value.
	def update(key: Range<K>, f: V -> V) -> V {
		var entry = make(key);
		return entry.value = f(entry.value);
	}
	private def make(key: Range<K>) -> PrefixTrieLeaf<K, V> {
		if (key.length == 0) return empty;
		if (root == null) {
			// No key/values yet.
			var t = newBranchAndLeaf(key);
			root = t.0;
			return t.1;
		}
		// Search all but the last element of the key.
		var i = 0, branch = root, last = key.length - 1;
		while (i < last) {
			var k = key[i], prefix = branch.prefix;
			if (i == prefix.length) {
				// Matched entire branch prefix; search for a choice.
				var suffix = key[i + 1 ...];
				var nbranch = branch.findChoice<PrefixTrieBranch<K, V>>(k);
				if (nbranch == null) {
					// No branch for this choice, create one.
					var t = newBranchAndLeaf(suffix);
					branch.choices.put((k, t.0));
					return t.1;
				}
				// A branch exists for this choice, follow it.
				branch = nbranch;
				key = suffix;
				last = key.length - 1;
				i = 0;
				continue;
			}
			if (k != prefix[i]) {
				// Mismatched in the middle of the branch prefix; split.
				branch.split(i);
				var suffix = key[i + 1 ...];
				var t = newBranchAndLeaf(suffix);
				branch.choices.put((k, t.0));
				return t.1;
			}
			i++;
		}
		// Everything but the last element of the key has been matched by the loop above.
		var k = key[i];
		if (i == branch.prefix.length) {
			// Matched all of the branch's prefix; add a leaf.
			var leaf = branch.findChoice<PrefixTrieLeaf<K, V>>(k);
			if (leaf == null) branch.choices.put((k, leaf = PrefixTrieLeaf<K, V>.new()));
			return leaf;
		} else {
			// Matched only a portion of the branch prefix; split it and add a leaf.
			branch.split(i);
			var leaf = PrefixTrieLeaf<K, V>.new();
			branch.choices.put((k, leaf));
			return leaf;
		}
	}
	private def newBranchAndLeaf(key: Range<K>) -> (PrefixTrieBranch<K, V>, PrefixTrieLeaf<K, V>) {
		var last = key.length - 1, k = key[last];
		var prefix = Ranges.dup(key[0 ... last]);
		var branch = PrefixTrieBranch<K, V>.new(prefix);
		var leaf = PrefixTrieLeaf<K, V>.new();
		branch.choices = Vectors.of1((k, leaf));
		return (branch, leaf);
	}
}

private class PrefixTrieNode<K, V> {
}

private class PrefixTrieBranch<K, V> extends PrefixTrieNode<K, V> {
	var prefix: Array<K>;
	var choices: Vector<(K, PrefixTrieNode<K, V>)>;

	new(prefix) { }

	def findChoice<Q>(k: K) -> Q {
		if (choices == null) return Q.default;
		for (i < choices.length) {
			var c = choices[i];
			if (c.0 == k && Q.?(c.1)) return Q.!(c.1);
		}
		return Q.default;
	}
	def split(pos: int) {
		var k = prefix[pos];
		var suffix = Ranges.dup(prefix[pos + 1 ...]);
		var nbranch = PrefixTrieBranch<K, V>.new(suffix);
		nbranch.choices = choices;
		this.prefix = Ranges.dup(prefix[0 ... pos]);
		this.choices = Vectors.of1((k, nbranch));
	}
}

private class PrefixTrieLeaf<K, V> extends PrefixTrieNode<K, V> {
	var value: V;
}
