//=======================================================================
// Idea: allow defining type unions as (invisibly tagged) anonymous sum types, with some rules.
// This type union can also be used as a constraint on a type parameter, which allows it to
// work somewhat like a (Rust) trait of a (Haskell) type class. When used as a constraint on
// a type parameter, it can allow constraining two different (polymorphic) types, e.g. to be
// the same.
//=======================================================================

// Syntax for declaring type unions.
// In this example, we express values in a dynamically-typed interpreter.
type Prim {
	case type double;
	case type int;
	case type string;
}

// Under the hood, the Virgil compiler represents this similarly to a
// normal ADT, which requires a tag.
type Prim_rep #unboxed { // always unboxed
	case C0(x: double);	// tag == 0
	case C1(x: int);	// tag == 1
	case C2(x: string);	// tag == 2
}

// To unbox the number representation, the compiler solves a constraint
// system and finds an optimized representation. Virgil's representation
// annotations allow narrowing the choices or even completely specifying
// the representation.
// A legal, but relatively inefficient choice:
type Prim_rep_tagged #unboxed {
	case C0(x: double)	#words(0b00: #u2, x: #b64, null);	// tag == 0
	case C1(x: int)		#words(0b01: #u2, x: #b64, null);	// tag == 1
	case C2(x: string);	#words(0b10: #u2, 0: #b64, x: #ref)	// tag == 2
}
// Another, slightly better choice, storing the tags in boxed refs:
type Prim_rep_tagged #unboxed {
	case C0(x: double)	#words(1: #ref, x: #b64);	// tag == 0
	case C1(x: int)		#words(2: #ref, x: #b64);	// tag == 1
	case C2(x: string);	#words(x: #ref, 0: #b64)	// tag == 2
}

// NaN-boxing could be accomplished by having a Virgil type {canon-double} that
// can only have canonical NaNs, allowing the compiler to perform the JS-engine
// tricks that allows unboxed doubles unioned with other JS values.
// (This would basically push the problem down into the Virgil compiler).

// Regardless of how the compiler chooses to represent the type union {Prim}
// which we've just declared, we can now use it any place any other Virgil
// type occurs.
def input0: Prim;
def input1: Prim;
class Interpreter {
	def operandStack = ArrayStack<Prim>.new();
	def run(input: Range<Prim>) -> Prim;
}

// We can construct values of type {Prim} by using the syntax {Prim(expr)}.
// This is as efficient as constructing the unboxed representation, which
// could even be a nop in some cases.
def inputI = Prim(102);
def inputD = Prim(88.99d);
def inputS = Prim("aeneas");

// Once constructed, values work seamlessly like other Virgil values.
def T1 = (Prim(7), Prim("dido")); // tuple
def A1 = [Prim(double.nan), Prim(double.infinity)]; // array
def B1 = inputI == inputS; // comparison

// Values can be type-queried and casted like other Virgil values.
def isD = double.?(inputD);	// type query, == true
def isI = u32.?(inputI);	// == true
def isS = string.?(inputI);	// == false

// By far the most useful feature is that match statements will work
// exactly the same with the familiar Virgil syntax for matching on
// types. As with ADTs, the compiler will perform exhaustiveness
// checking on the cases in the type union declaration.
def toString(p: Prim) -> string {
	match (p) { // becomes a simple check of the tag
		x: double => return Doubles.toString(x);
		x: u32 => return Ints.toString(x);
		x: string => return x;
	}
}

/** Compiler and language issues **************************************

1. Type unions are mostly treated like ADTs in the compiler, except
   they don't have case names.
   lang) How does the compiler infer which case to construct?
       => the verifier checks the promotability of the input expression
          type to each case in order of declaration. First legal promotion
          wins.
   parser) Just recognize the {type} keyword {after} case
   verifier) Resolve types in type union declarations
   verifier) Check that one case doesn't completely subsumes following
             cases, making them unreachable. E.g. checking a superclass
             type appearing before a subclass type.
   middle) Makes it easy to apply unboxing/packing/etc optimizations
           already present or planned.
   backend) Will all be lowered away by MachLowering or normalization 

***********************************************************************/

// Opportunities for additional expressibility gains:

// Allow methods on cases in a type union.
type Prim {
	def toString() -> string;

	case double {
		def toString() => Doubles.toString(this);
	}
	case int {
		def toString() => Ints.toString(this);
	}
	case string {
		def toString() => this;
	}
}

// That implies that the *tag* associated with the case matters.
// (Otherwise it would not have).

// Consider:
type DoubleOrDouble {
	def which() -> string;
	case double { def which() => "first"; }
	case double { def which() => "second"; }
}

// The above declaration declares two {double} cases, which seems like it
// should always be an error, for two reasons. First, it's unclear
// what the programmer expects or intends. Should the first case always match?
// (When did they intend the second case to match?) Second, it's not
// so easy to solve this with the reasonably easy language rule of in-order
// matching (like type cases in a {match}). In-order matching is already
// kind of a bummer for class hierarchies already.

// The problem stems from *overlapping* types, where not all types are
// mutually-exclusive.
type IntOrString { // has mutually-exclusive type cases
	case type int;
	case type string;
}
type U32OrU64 { // has overlapping type cases
	case type u32;
	case type u64;
}

// What about "fancy" matching for type unions, where the *best* case
// is always selected, and "best" either means the most efficient
// representation (e.g. in the number tower) or the most specific
// runtime type (e.g. an instance of a class)?
// The idea with fancy matching is that the selection of the tag for a
// when constructing a value can involve some runtime type checks,
// as if the act of creating the value involves applying runtime type
// tests to the value.

// Here, we write a type union where we intend that the {int} case
// is selected where possible.
type IntOrDouble {
	case type double;
	case type int;		// want: best match for -2^31 ... 2^31-1
}

// In-order matching would obviously lead to the second case never being
// reachable, which is almost certainly a programmer error. In this case
// it looks suspiciously like they'd like Virgil to distinguish small
// numbers and fractional numbers.

// (more on fancy matching)

//=======================================================================
// Sub-idea: type unions can be constraints on type parameters
//=======================================================================

// Increment either an integer or a string, and get back a value of the
// same type (if we know it).
// We declare the function as polymorphic, with a type parameter {V}, which
// allows us to name the type of the incoming value and ensure that the
// return type matches, by reusing the name. By constraining the type parameter
// using a type union, we can have an exhaustive check inside.
def inc<V: IntOrString>(val: V) -> V {
	match (val) {
		x: int => return V(x + 1);
		x: string => return V(Strings.concat(x, "1"));
	}
}

def I1 = IntOrString(213);
def S1 = IntOrString("gargm");

// The magic happens because we can use the function {inc} by instantiating
// it with three different types.

// In these invocations, the function is instantiated to take *tagged* values
// and thus will do runtime dispatch and return a tagged value. Because we
// don't know the input type, we don't know the output type.
def I2: IntOrString = inc<IntOrString>(I1);
def S2: IntOrString = inc<IntOrString>(S1);

// But we can now use {inc} with primitive types; in fact, we get a static
// check that the type argument is allowed, from the constraint.
def Z1: bool = inc<bool>(true); // not OK, type arg not allowed

// So the type constraint allow only a type argument for {inc} that is
// {int} or {bool} (or our declared name for it {IntOrBool}).
// Not only that, we know from the function's signature that we can substitute
// the type argument into the function's type signature to discover {inc<int>}
// will return {int} and {inc<string>} will return {string}.
def I3: int = inc<int>(1); // Magic! OK!
def S3: string = inc<string>("hello every");

// Enhanced type inference would hopefully also allow inferring type arguments
// to work nicely as well.

def I4: int = inc(1);		// inferred inc<int> 
def S4: string = inc("hello every");	// inferred inc<string>
def I5 = inc(1);		// I5 : int
def S5 = inc("hello every");	// S5 : string

// The mix of static selection and inference then allows a design pattern
// that can mimic overloading in an intentionally limited way.
