// Proposal: A "pointer" concept somewhere between Pointer and ref/Ref, to
// allow typed references to fields in objects/arrays, safe for gc, etc.

// For want of a better name, we call this new thing Ptr<T> (ptr<T> for a
// read-only version).  However, if we extend that allowed types T allowed
// in Ref<T>/ref<t>, that name would also serve.  The idea is that the
// underlying implementation would have a reference to a base object and
// an offset to the indicated field.

// This would have constructors Ptr.atField and Ptr.atElem which work on
// a class-like object or an array-like one, respectively.  They could
// also be made from a field of a Ref.  They cannot be made from a Pointer
// because a Pointer has no base object, only a target address.  But one
// could make a Pointer from a Ptr.

// Ptr can further support load, store, cmpswp, etc., over suitable
// field types, to allow atomic accesses without using Pointer.
