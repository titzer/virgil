// Idea: allow an ADT declaration to have an _ case to indicate that it is open to extension.

type T {
	case A(x: int);
	case B(x: float);
	case _ {			// allows a separate declaration of new cases,
		def m() -> int;		// but all new cases have to implement this method.
	}
}

// A match on this type cannot be exhaustive. The Virgil compiler will require a
// a default case.
def m1(z: T) -> int {
	match (z) {
		A(x) => return x;
		B(x) => return int.!(x);
		x: _ => return x.m();	// this is the perfect place to call the method.
	}
}

// New cases would be declared using the name of the type they extend, then a dot, introducing
// the name of the new case they introduce.
type T.X {
	def m() -> int {	// here, the new case can override the method.
		return 112;
	}
}

// Matches can also mention the new case if they know about its declaration.
def newSum(t: T) -> float {
	match (t) {
		A(x) => return x;
		B(x) => return x;
		X => return 112f;
		_ => return -1f;
	}
}