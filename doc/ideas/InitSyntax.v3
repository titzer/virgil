/* 
 * Ideas for better initialization syntax for classes and arrays.
 * Options are not necessarily mutually-exclusive.
 */

// ExampleA: Tuning configuration in Wizard for the interpreter generator.
class FastIntTuning {
	def threadedDispatch = true;	// inline dispatch at the end of every handler
	def handlerAlignment = 8;	// align handler code in memory
	def skipRepeatedBlocks = true;	// skip repeated BLOCK bytecodes
	def dispatchEntrySize = 4;	// size of each dispatch table entry
	def inlineAllLEBs = false;	// always inline LEB slow cases
	def fourByteSidetable = true;	// sidetable entries are 4-bytes
	def entryTierUpDecrement = 1;	// "cost" of entering a function in the interpreter
	def loopTierUpDecrement = 1;	// "cost" of looping in the interpreter
	var debug = false;		// configure debugging at runtime
	var trace = false;		// configure tracing at runtime
}

// Status quo. Default-initialized instance.
def stdConfig = FastIntTuning.new();

// Option 1.
// Syntax to allocate and initialize a new object with named field initialization.
// If a class has an empty constructor, the "MyClass { }" syntactic form allows "field: expr" expressions
// inside (similar to JSON) and can override the values of fields. The assignments happen before
// the constructor is called.
def testConfig = FastIntTuning {
	inlineAllLEBs: true,
	fourByteSidetable: false
};

// Option 2.
// Syntax to alter in-place mutable fields of an object.
// The "with" keyword operation takes the object resulting from an expression on the left hand
// side, mutates it, and returns it as its result. This allows getting expression, mutating it
// a little, and then passing it on.
def result = run(stdConfig with { debug: true });

// Multiple fields can be updated.
def result = run(stdConfig with { debug: true, trace: true });

// It has the nice property that it chains.
def result = run(stdConfig with { debug: true } with { trace: true });

// Example B: class representing a configuration.
class Config {
	def enableThing1: bool;
	def enableThing2: bool;
	def optLevel: int;
	def canooterValves: bool;
	var debug: bool;
}

var standardConfig = Config {
	enableThing1: true,
	enableThing2: false,
	optLevel: 3,
	canooterValues: false
};

// Option 3a: copy-mutate expression: clone keyword
// The "clone" operation takes the object resulting from an expression on the left hand side,
// makes a copy, mutates the copy, and returns the copy.
var modifiedConfig = standardConfig clone {
	debug: false
};

// Option 3b: make it appear like a method call.
var debugConfig = standardConfig.clone() with {
	debug: false
};

// Option 4: Allowing initialization of explicit array elements.
// The body of a "with" block can contain updates to array elements.
// The syntax mirrors element assignment.
var w = Array<int>.new(67) with {
	[33]: 9897234,
	[66]: -98734
}

// Option 4 syntax also would work nicely for application classes that define
// the indexing assign operator.
var h = HashMap<string, V> {
	["foo"]: V1,
	["foo2"]: V1,
	["foo3"]: V1,
	["bar"]: V2
}

// Option 5: Syntax for building enum maps.
// The syntax would allow building efficient enum maps.
enum E { X, Y, Z }
var x = E.map<bool> {
	X: true,
	Y: false,
	Z: true
}

// More tinkering. How do they look when modeling complex argument lists?
class ComplexArgs {
	var x: bool;
	var y: bool;
	var w: bool;
	var z: bool;
	var t: bool;
	var u: bool;
	var name: string;
}
def run(args: ComplexArgs) {
	if (Strings.startsWith(args.name, "Foo")) ;
	else if (args.x) ;
	// ...
}
run(ComplexArgs { name: "FooBar", x: true, y: true });

// This can also apply to immutable data types for more explicit initialization.
type Point(x: double, y: double) { }

def x = Point {x: 3.0, y: 6.77}; // allows value literals that look a lot more like JSON.

// An options object that is mutable.
// Since it has no declared constructor, it can be used as NumberParserOptions { }
class NumberParserOptions {
	var allow_u_suffix: bool;
	var allow_l_suffix: bool;
	var allow_f_suffix: bool;
	var allow_d_suffix: bool;
	var allow_width_suffix: bool;
	var allow_negative: bool;
	var allow_fractions: bool;
	var allow_exponents: bool;
	var allow_octal: bool;
	var allow_hex: bool;
	var allow_binary: bool;
}
var options = NumberParserOptions {
	allow_u_suffix: true,
	allow_l_suffix: true,
	allow_f_suffix: true,
	allow_d_suffix: true,
	allow_binary: true
}

// Ordering of initialization.
// For classes that have immutable fields without declared initializers, the init syntax
// at the call sites allows setting those fields. Those assignments occur before the rest
// of the initializers in the class.

class PowersCache { // a class that caches a few powers of a number.
	def number: double;
	def square = number * number;
	def cube = number * square;
	def quad = number * cube;
}

// Here, the {number} field is assigned before ever calling the implicit constructor.
// Thus, the assignments to the other fields will compute the various powers.
def x4 = PowersCache { number: 5.5d };
