// Maybe type exploration

// Main idea: introduce a new type constructor Maybe, which for a type T is written T?
//            A maybe type includes the possibility of having a {null} value.

// For a type T with a set of values {v0...}, T? represents a type with the
// original set of values *unioned* with the value null.
var x: int;
var y: int?;
var z: u31;
var w: u31?;

// For array types, which already include the possibility of null in their set of values,
// the maybe type is equivalent to the original array type.
var x: Array<int>;  // nullable array
var y: Array<int>?; // nullable array, redundant type name
var z: Array<int>+;

// Similarly, for class types, which already include the possibility of null in their set of
// values the maybe type is equivalent to the original class type.
class C { }
var x: C;	// nullable reference to a C object
var y: C?;	// same as above, but with a more explicit type name

// Since the type T? represents all values in T unioned with the value null, the type T??
// in fact represents *the same* set of values, so in the type system, they are equivalent,
// meaning T? == T??.
var x: int?;
var y: int?? = x;	// int?? is another legal way of writing int?
var z: int??? = z;	// and so on

// This implies there is only one null value, not different null values for the different levels.
var x: int? = null;
var y: int?? = null;
var z: int??? = null;
var w = (x == y) && (y == z); // true, they are all the same null.

// The maybe type explicitly allows using a null literal.
var x: int = 0;		// null is not allowed
var y: int? = null;	// null is allowed

// Similarly, for any nullable type T, null is the default value for the type.
var c: char?;		// default initialized to null

// The maybe type allows explicitly comparing against null.
var z = (c == null);
if (c != null) printChar(c);

// ==== Flow-sensitive typing =================================================================
// For any immutable reference v.v.v.v.v, a branch comparing that binding to null *rebinds*
// the same binding as non-null in the appropriate syntactic branch blocks.
def x: int?
if (x == null) {
	// here x is considered of type null, because it refers to an immutable binding
} else {
	// conversely, here x is considered non-null
}

// This also applies if the expression is an immutable access path. E.g. assume that
// {foo} was a def variable and {bar} was a def field of it.
if (foo.bar == null) {
	// here foo.bar is considered of type null, because it refers to an immutable binding
} else {
	var y = foo.bar; // y is not null here
	// conversely, here foo.bar is considered non-null
}

// Similarly, for matches, flow-sensitive typing applies:
match (x) {
	null => {
		// here x is considered of type null
	}
	_ => {
		// here x is considered of type int, i.e. non-null
	}
}

// Flow-sensitive assertions.
// For any immutable binding v.v.v.v, the assert statement rebindings the same binding as a
// non-null type in subsequent statements in the same scope.

/*any scope*/ {
	assert x;	// will crash with a NullCheckException at runtime if x is null
	// here x is now typed as non-null until the end of this scope
}

/*any scope*/ {
	assert x.x;	// will crash with a NullCheckException at runtime if x.x is null
	// here if x.x is an immutable field or, it is now typed as non-null until the end of this scope
}

// The assert statement can also include a message, which allows programmers to help themselves
// with slightly better error messages when an assertion fails.
assert x: "expected a valid integer here";

// The assert statement can also break, continue, or return instead of crashing.
assert x || return -113;	// if x is null, return -113
assert x || break;		// if x is null, break out of the nested loop
assert x || continue;		// if x is null, continue with next iteration of the loop
// Alternative syntax idea: use the else keyword?
assert x else return -113;	// if x is null, return -113
assert x else break;		// if x is null, break out of the nested loop
assert x else continue;		// if x is null, continue with next iteration of the loop

// x assume non-null here, as all of the above branch away

// The keyword assert can also be used in an expression context to yield a non-null value.
var y = assert x;	// if x is null, crash, otherwise assign non-null value to y
var y = assert x || return t.reportError(-118); // if x is null, return t.reportError(), otherwise assign to y

// The assert statement can also be used with boolean expressions.
assert x > 0; // if true != (x > 0), crash with an AssertionError
assert x > 0 : "${x} should be greater than zero"; // if true != (x > 0), crash with an AssertionError

// Hopefully, one day the compiler will automatically provide nice error messages:
!AssertError: expected x > 0, got -899
	in MyApp.hasBugs() [/tmp/MyApp.v3 @ 6:27]
	in MyApp.main() [/tmp/MyApp.v3 @ 3:24]

// ==== Further built-in type system niceties ===============================================

// The Maybe type, by being built into the language, can get special syntactic rules (like auto promotion)
// that is difficult add as general-purpose language feature for arbitrary types. Autopromotions are complicated
// and difficult to reason about, and making them fully programmable opens a big can of worms. So, by adding Maybe
// as a language primitive only, we can offer these niceties, without that struggle:

// 1. Any expression of type T can be used in a context requiring a type T? via an implicit automatic promotion.
//    Note that in the compiler's type system, T is not considered a *subtype* of T.?, but rather a T can be
//    promoted to a T.? Their values may have different representations.
var x: int = 99;
var y: int? = x;	// legal, no coercion necessary
var z: int? = 99;
var w = (x == y);

// 2. For type inference purposes, T and T? can be unified to T? and T and null can be unified to T?.
// This allows, among other things, writing array literals that include nulls, which still working combinatorically
// with other features like tuples.

var x: Array<int?> = [0, 99, null];	// obviously allowable
var y = [1, 12, null];			// type automatically inferred to be int?

var x: (int, int?) = (1, null);					// tuples are nothing special
var xs: Array<(int, int?)> = [(1, 1), (2, -44), (3, null)]];	// even arrays of tuples behave combinatorically
var xs = [(1, 1), (2, -44), (3, null)]];			// and even type inference, Array<(int, int?)>

// ==== Compiler optimization opportunities ================================================

// Maybe being built into the language allows the compiler to choose efficient value
// representations for nullable types in order to reduce memory usage and improve performance.
// In some cases, it can choose data representations that would be impossible to express in a type-
// safe way by building Maybe as a library.
// For example, for types like classes and arrays, null is usually represented internally as a zero address
// and thus represents a distinct value that nevertheless fits within the pointer encoding for valid object
// references.
// However, many types, like booleans, integers, and floating point numbers don't include null values and their
// unboxed value representations do not have any room for encoding null values.
// In fact, all types can be divided into the two straighforward categories:
//    non-null: type's legal set of values does not include the null value
//    nullable: type's legal set of values does include the null value
// For types in the non-null set, we can further divide them into:
//    total:   all encodable symbols in its representation are used to encode legal values
//    partial: at least one encodable symbol in is its representation is not used to encode a legal value
// Thus for a non-null type that is partial, its corresponding nullable type can use the same value representation
// by simply considering one or all of the illegal symbols to represent null.

// Since we want the Maybe to be an efficient language primitive suitable for widespread use, we'll want
// programmers to understand these basic concepts and the tricks the compiler will use to avoid boxing or
// introducing additional tag bits for certain Maybe types.

// 1. The representation of null can be chosen by the compiler for the most efficient data representation.
//    If a tag bit is required, often a bit may be available elsewhere in a word, or multiple tags can be
//    combined automatically by the compiler.

var x: int;	// requires 32 bits of storage for the 2^32 values
var x: int?;	// requires log(2^32 + 1) bits of storage, or usually a tag bit, which
		// is automatically packed into a 64-bit word

var x: u63?;	// requires 63 bits of storage, plus a bit to indicate null,
		// which could be packed into a single 64-bit word.

var x: (int?, int?, int?);	// could be represented as (u32, u32, u32, u3), factoring the tags for
				// each element of the tuple into a group at the end.
				// requires three 32-bit words plus 3 bits in one byte, but the
				// entire quantity could fit into a 128-bit SIMD register.


// We could also pack tag bits when we use fields that are effectivitely "optional" by expressing
// them as have Maybe types.
// In the example below, the four tag bits required for the four optional fields can be packed into
// a single tag byte, efficiently encoding patterns where a big data structure has many optional parts.
// The compiler does the work of managing the tag bits in a completely invisibile manner while
// preserving the programmer's intent.
class TuningParams {
	var heat: float?;
	var weight: float?;
	var scale: float?;
	var viscosity: float?;
}
// -- Could be represented as:
class TuningParams_compiled {
	var tags: u4;		// all four tag bits factored into a byte
	var heat: float;
	var weight: float;
	var scale: float;
	var viscosity: float;
}

// ==== Enums and null ========================================================================

// Enum types have a tight connection with systems programming tasks like representing the
// various options in a file format, a network packet, a set of flags or options for a system
// call, or any kind of binary protocol.
// While easy enough if every bit pattern maps onto exactly one legal case of the enum, e.g.
// when the number of cases is exactly a power of 2, most enums in real formats have plenty
// of possible binary encodings that are either considered illegal or unspecified, e.g. as
// a future extensibility mechanism.

// For an enum E, we can then use E? to represent either a legal E case or null, which would
// be helpful in situations where we care about having an unknown case. Since the compiler
// normally represents enum case values as small integers, it's easy to see how
// to exploit any unused bit pattern(s) to represent null for these enums at no extra space
// cost.

enum E {	// type of E.tag is u2
	X, Y, Z	// only 3 enum cases
}
var e: E;	// requires 2 bits of storage
var f: E?;	// also only requires 2 bits, using a niche where null.tag == 3

// We could consider improving enum declarations with the ability to declare an explicit type
// for the tag.

enum E(tag: u2) {	// explicitly request a tag type of 2 bits
	X, Y, Z		// still get tags in order of declaration
}

// We could then allow writing in explicit values for tags.
enum F(tag: u2) {	// explicitly request a tag type of 2 bits
	X(1),		// for whatever reason,
	Y(0),		// we decided to write the declarations
	Z(2)		// out of order
}
enum F(tag: u3) {	// explicitly request a tag type of 3 bits
	X(2),		// silly file format picked this
	Y(3),		// and we are sorry that
	Z(6)		// some were left out
}
// We could also use the mechanism to map multiple tag values to the same case.
enum G(tag: u4) {
	X(2, 3, 7),	// 2, 3, and 7 all map to case X
	Y(8, 15),	// 8 and 15 map to Y
	Z(6)		// 6 maps to Z
}


// ==== Enums with explicit tags help layouts ==============================================

// Allowing explicitly specifying the tag values allows our enum to more accurately
// reflect what we are modeling, which often comes from the outside world, i.e. system software,
// or a protocol definition.
// While nice from a conceptual perspective, by design it allows the compiler to use the same
// representation internally as when used to interact with external software/hardware through layouts,
// thus saving data transformations.

// For example, we define a enum we got from a manual
enum AccessMode(tag: u8) {	// for some reason, it's a whole byte
	READ(16),		// to be honest,
	WRITE(21),		// we have no idea
	EXECUTE(167)		// what they were thinking
}
// And use it in a layout we got from a manual
layout Request {
	+0	header: 	u32;		// the packet header
	+44	old_mode:	AccessMode?;	// we have no idea
	+66	new_mode:	AccessMode?;	// why it is here
	=112;					// but that's the facts, and its partial, so ?
}

// Using enums with explicit tags automates the mapping of the exact bits/bytes in the data
// to the programming language's type system.
// But in this example, there's a potential problem.
// The AccessMode enum has only 3 legal cases, yet it is declared to occupy a full byte,
// which means 252 leftover encodings which are presumably illegal.
// What should the language guarantee when reading the old_mode field a {Request} layout and
// the byte contains an unspecified value? It makes sense to map illegal values to the Maybe type.

var r: Ref<Request>;
var m: AccessMode? = r.old_mode;	// layout could contain invalid values, which are represented as null

// By using the Maybe type, we can then use the standard assertion mechanisms to write nice error handling code.

var m: AccessMode = assert r.old_mode;				// if r.old_mode is illegal, crash, otherwise return non-null value
var m2 = assert r.new_mode || return t.fail("illegal mode");	// if r.new_mode is illegal, call t.fail and then after return, otherwise return non-null value

// It'd probably be best to require the programmer to annotate the layout field declaration
// for enums that have an illegal encoding (i.e. are partial). Just require the field type to
// be a Maybe type.
layout Response {
	+0	header:		u32;
	+33	new_mode:	AccessMode?;	// required by compiler, because AccessMode has an partial encoding
	==130;
}

// Non-null types, using the + suffix.
// For any type T, T+ denotes the set of values, minus the value null.

class C {
}

var x: C;
var y: C?;
var z: C+;

var v0 = x.foo; // runtime check
var v1 = y.foo; // static error
var v2 = z.foo; // no null check necessary

def id<T>(x: T) -> T {
	return x;
}

def assert_not_null<T>(x: T, msg: string) -> T+ {
	return assert x || System.error("NullCheckException", msg);
}

def map_null_to_default<T>(x: T?) -> T+ {
	return assert x || return T.default;
}

def map_null_to_something<T>(x: T?, something: T) -> T+ {
	return assert x || return something;
}
