// Idea: syntactic macros for Virgil.

// A declaration of a macro which accepts a bit of syntax (i.e. quoted code) and repeats it twice.
// By default, macros work at the lexical level, so they accept sequences of lexical tokens as input
// and generate sequences of tokens as output.
// Thus macros can be expanded by the lexer.
macro @repeat_x2(syntax) syntax syntax

// Applying a macro just expands the lexical tokens.
@repeat("Hello World!")
// becomes
"Hello World!" "Hello World!"
// which, of course, will not parse.

// But there's a problem in finding the end of the macro invocation--e.g. which closing parenthesis matches?
@repeat_x2(print("Hello World!\n"))
//                               ^ does this close the macro invocation
//                                ^ or this?

// We could use quoted syntax in order to deal with this.
// Here, the tokens in the `` are the argument, and it's clear where the macro invocation ends.
// This frees the lexer from having to parse complete expressions--it can be dumber.
@repeat_x2(`print("Hello World!")`)



// We can use {_x} variables to get fresh names so that macros are hygenic with respect to variables names and scoping.
macro @lazy_print_x2(cond, syntax) {if (cond) { def _x = syntax; print(_x); print(_x); }}

@lazy_print_x2(x > 0, expr++)
// becomes
{if (x > 0) { def x119977 = expr++; print(x119977); print(x119977); }}


// A macro for writing the bytecode handler body for a Wasm binop.
// We use the ## operator, which fuses adjacent lexical tokens into a single token, to form the pop_XX
// and push_XX method names.
@macro binop<T>(op) `{
  var _x = pop_ ## T();
  var _y = pop_ ## T();
  var _r = T.op(_x, _y);
  push_ ## T(_r);
}`

// Now, I32_ADD is just an expansion of the macro.
def I32_ADD() @binop<u32>(+)
// expands to
def I32_ADD() {
  var x167 = pop_u32();
  var y197 = pop_u32();
  var r188 = u32.op(x167, y197);
  push_u32(r188);
}

