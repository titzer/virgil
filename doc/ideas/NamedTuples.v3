// Idea: allow (some) fields of tuples to have names
//
// A tuple *type* is an ordered list of zero of more tuple field type specs,
// each having this syntax: [name ':'] type.  For example:
//
class C1 {
	f: (a: int, bool, b: u32);
}

// Any names given must be distinct.

// A tuple value likewise is a list of zero or more tuple field specs of the
// form [name ':'] expr.  For example:

component Comp1 {
	var x = (a: 3, true, b: 17u);
}

// Tuple field references: Named fields are referred to by name; unnamed by
// number, as currently.  The numbers refer only to *unnamed* fields.

component Comp2 {
	var xa: int = Comp1.x.a;
	var x0: bool = Comp1.x.0;
	var xb: u32 = Comp1.x.b;
}

// More flexibility regarding allowed assignments

// If we have names, we can use them not just for documenting what the fields mean (and to
// distinguish, say, (x: float, y: float) from (r: float, theta: float) coordinates), we
// can use *name matching* to relax what assignments are allowed.  So:

// Types (x: int, y: int) and (y: int, x: int) are different types, and likewise, values
// (x: 1, y: 13) and (y: 13, x:1) are different values (not least because they have
// different types).  But we can allow automatic coercion from the one type to the other:

component Comp2 {
	var c: (x: int, y: int) = (y: 13, x: 10);
}

// Here is a more detailed elaboration of that idea:
//
// Suppose the target of an assignment has type t, and the source has type s.
//
// Proceed to check legality and associate meaning with assignment from s to t
// as follows:
//
// 1) Consider every *named* of s.  If t has a field with the same name,
// the two fields *match*.  If t has *no* field with the same name, the assignment is
// illegal.  It is also illegal if the source value if not assignable to the target
// type for that field [or if type inference cannot lead to proper assignability,
// if type inference is even a possibility].
//
// 2) After Step 1, some fields may not yet be matched.  Match them left to right
// in both s and t among the fields not yet matched.  Again this is illegal if
// the s value is not assignable to the t type.  It is ok for an unnamed field
// value to be assigned to a named field.
//
// 3) If either type has values left over, the assignment is illegal.  (This
// effectively requires the types to have the same number of fields.)

// With this elaboration, we can explain function call/return [except for
// unbound parameters (_)] in terms of tuple assignment, even in the current
// language.  Function declaration is slightly special in that it requires
// all fields of the argument tuple type to be named.
//
// The assignability rules above allow calls of a function where all actual
// parameters are unnamed, or some or all of them are named, and the names
// do not have to occur in the same order in the caller and callee.

def f(x: int, b: bool) -> int;

component Comp3 {
	var x1 = f(1, true);
	var x2 = f(x: 1, b: false);
	var x3 = f(b: true, 13);
	var x4 = f(false, x: 10);
}

// This flexibility certainly has its downside.  It would be advisable for
// projects to develop conventions that avoid too much diversity in calls
// of any given function.  It's not clear whether the *language definition*
// should be more restrictive ...


// Named function results

// We can allow (but not require) function declarations to give names to
// the fields of multiple value returns, and for function results to be
// assigned to named tuple variables in a caller, etc.

class C2 {
	def f1() -> (x: int, y: int);
	def f2() -> int {
		var res: (y: int, x: int) = f1();
		return res.x + res.y;
	}
	def f3() -> (int, int);
	def f4() -> int {
		var res: (a: int, b: int) = f3();
		return res.a + res.b;
	}
	// A SEPARATE PROPOSAL HERE:
	// Note: in f2 and f4, sometimes a let or multiple variable
	// declaration would be nicer, perhaps as in f5 and f6 below.
	// Note that this may introduce some type inference possiblities.
	def f5() -> int {
		var (a: int, b: int) = f3();	// unnamed given names
		// var (c, d) = f1();		// illegal name matching
		var (y, x) = f1();		// name matching + type inference
		var (i, j) = f3();		// unnamed given names + type inference
		return a + x + i;
	}
	def f6() -> {
		var (y: int, x: int) = f1();	// name matching, no type inference
	}
}


// A further relaxation: default values

// We can further associate a default value with each field of a tuple type.
// The syntax might look like an assignment:

component Comp5 {
	var x: (a: int, b: bool = true, c: float);
	// Note: In this case, to omit b one must specifically mention c.
	// But one can make a tail progressively optional:
	var y: (m: int, n: float, i: int = 3, j: int = 7);
}

// In this case we can relax rule (3) above to this rule (3'):
//
// 3') If the target has fields not yet matched [the source will not], and the
// target type gives those fields default values, then the assignment is
// allowed and the unmatched target fields get their default value. Thus:

component Comp6 {
	def f() {
		Comp5.x = (3, 4.2f);	// default for b
		Comp5.x = (3, true, 4.2f);	// ordinary positional matching
		Comp5.x = (c: 5.1f, 4, false);	// mixed
		Comp5.x = (a: 7, c: 8.1f);
	}
}

// What can be allowed for defaults?  Clearly, compile time constants should
// be ok.  We could also allow more general expressions.  If we impose the
// (reasonable) rule that evaluation of defaults is left to right, then
// default expressions further to the right can use the values given for
// fields to their left.

component Comp7 {
	def f1(x: int, y: int = x + 1);
}

// Allowing functions here has at least this use case:

class C3<T> {
	def init<T>(x: int) -> T;
	def f(a: int, b: T = init(a)) -> int {
		return a;
	}
}

// Conceivably, we might wish to introduce a notation to indicate, in a call
// (assignment, etc.) that the default given by the target type should be
// used, analogous to using _ to indicate an unbound position.  Not sure
// what a good notation might be for that :-) .


// A further note: Since class and type instance creation is very similar to
// function call and assignment, we can allow the same kinds of rules for
// those constructs, viewing the instance creation as a function call followed
// by the internal instantiation of the instance (and in the case of classes,
// further initialization of fields).
