// Interface for lexer routines.
class Lexer {
	// Nearly all lexers need a counter.
	var counter = 0;
	// Reset this lexer to the beginning state.
	def reset() { counter = 0; }
	// Process the next byte, returning whether more bytes could be accepted.
	def next(ch: byte) -> bool { return false; }
	// Finish lexing, returning the length of the longest match and the token classification
	// as an integer.
	def finish() -> LexerResult { return NO_LEX; }
}
// The result of lexing, consisting of the length of the token and its classification {kind}.
type LexerResult(length: int, kind: int) #unboxed { }
def NO_LEX = LexerResult(0, -1);

// Lexer combinator consisting of the (ranked) choice of any of the lexers given, with longest
// match wins.
class LexerChoiceCombo(lexers: Array<Lexer>) extends Lexer {
	def more = Array<bool>.new(lexers.length);

	def reset() {
		counter = 0;
		for (l in lexers) l.reset();
		for (i < more.length) more[i] = true;
	}
	def next(ch: byte) -> bool {
		var ok = false;
		for (i < lexers.length) {
			if (more[i]) ok = ok | (more[i] = lexers[i].next(ch));
		}
		return ok;
	}
	def finish() -> LexerResult {
		var result = LexerResult(0, -1);
		for (l in lexers) {
			var t = l.finish();
			if (t.length > result.length) result = t;
		}
		return result;
	}
}

// A graph-based deterministic finite automata lexer.
class DfaLexer extends Lexer {
	// TODO
}

// A lexer that accepts only a specific sequence of bytes (i.e. literal).
class LiteralLexer(image: string, kind: int) extends Lexer {
	def reset() {
		counter = 0;
	}
	def next(ch: byte) -> bool {
		if (counter < image.length) {
			if (ch == image[counter++]) return counter < image.length;
		}
		counter = int.max;
		return false;
	}
	def finish() -> LexerResult {
		return if(counter == image.length, LexerResult(counter, kind), NO_LEX);
	}
}
// Lexes a single byte.
class ByteLexer(ch: byte, kind: int) extends Lexer {
	def reset() {
		counter = 0;
	}
	def next(ch: byte) -> bool {
		if (counter == 0) {
			if (ch == this.ch) counter = 1;
			else counter = int.max;
		}
		return false;
	}
	def finish() -> LexerResult {
		return if(counter == 1, LexerResult(1, kind), NO_LEX);
	}
}
// Lexes one from a set of bytes.
class ByteSetLexer(chs: Array<(byte, int)>) extends Lexer {
	def reset() {
		counter = 0;
	}
	def next(ch: byte) -> bool {
		if (counter == 0) {
			for (i < chs.length) {
				if (ch == chs[i].0) {
					counter = i + 1;
					return false;
				}
			}
			counter = int.max;
		}
		return false;
	}
	def finish() -> LexerResult {
		return if(counter > 0, LexerResult(1, chs[counter - 1].1), NO_LEX);
	}
}
// Lexes positive and negative decimal integers.
class DecimalLexer(kind: int) extends Lexer {
	// TODO
}
// Lexes strings in either single or double quotes, with configurable escapes.
class StringLexer(kind: int) extends Lexer {
	// TODO
}
// Lexes from a set of literals with longest match.
class LiteralSetLexer(images: Array<string>, basekind: int) extends Lexer {
	def candidates = Array<(string, int)>.new(images.length);
	var candcount = candidates.length;

	new() {
		reset();
	}
	def reset() {
		for (i < images.length) candidates[i] = (images[i], basekind + i);
		candcount = images.length;
		counter = 0;
	}
	def next(ch: byte) -> bool {
		var more = false;
		for (i = 0; i < candcount; i++) {
			var c = candidates[i];
			if (counter >= c.0.length || c.0[counter] != ch) {
				remove(i);
				continue;
			}
			more = more | counter < c.0.length;
		}
		counter++;
		return more;
	}
	def finish() -> LexerResult {
		if (candcount > 0) {
			var c = candidates[0];
			return LexerResult(c.0.length, c.1);
		}
		return NO_LEX;
	}
	private def remove(i: int) {
		candidates[i] = candidates[candcount-1];
		candcount--;
	}
}
