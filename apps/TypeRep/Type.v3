// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

enum Kind {
	VOID, BOOL, INT, FLOAT, ARRAY, COMPONENT, CLASS, CLOSURE, TUPLE,
	TYPE_PARAM, TYPE_VAR, FUNC, SET, VARIANT, VARIANT_CASE, ENUM, ENUM_SET, ALIAS, POINTER, NULL
}

// Superclass of all type representations in the compiler. Subclasses represent
// specific kinds of types. Every type has a hash code that can be used in
// ubiquitous type maps.
class Type {
	def hash: u32;	// hash, kind and openness bits
	var array: ArrayType;  // cache for Array<this>; do not use directly

	new(hash) { }

	def ukind() -> u32 { return hash >> TypeHash.KIND_SHIFT; }
	def kind() -> Kind { return Kind.VOID; } // TODO
	def polymorphic() -> bool { return (hash & TypeHash.POLY_MASK) != 0; }
	def substFunc(f: Type -> Type) -> Type {
		return substFunc0(this, f);
	}
	def substParams(params: Array<TypeParamType>, args: Array<Type>) -> Type {
		return substParams0(this, params, args);
	}
	def render(buf: StringBuffer) -> StringBuffer {
		return render0(this, buf);
	}
}

// The singleton "void" type.
class VoidType extends Type {
	new() super(TypeHash.do0(Kind.VOID, Kind.VOID.tag)) { }
}

// The singleton "bool" type.
class BoolType extends Type {
	new() super(TypeHash.do0(Kind.BOOL, Kind.BOOL.tag)) { }
}

// Integer types "iNN" and "uNN", including "int", "byte", and "long".
class IntType extends Type {
	def signed: bool;
	def width: byte;

	new(signed, width) super(TypeHash.do0(Kind.INT, if(signed, width | u25.!(0x100u), width))) { }
}

// Floating point types "float" and "double".
class FloatType extends Type {
	def total_width: byte;
	def fraction_width: byte;

	new(total_width, fraction_width) super(TypeHash.do0(Kind.FLOAT, total_width)) { }
}

// Array types "Array<T>".
class ArrayType extends Type {
	def elemType: Type;

	new(elemType) super(TypeHash.do1(Kind.ARRAY, 0, elemType)) { }
}

// Declared component types; the "C" in "component C { }".
class ComponentType extends Type {
	def decl: ComponentDecl;

	new(decl) super(TypeHash.do0(Kind.COMPONENT, u25.view(decl.uid))) { }
}

// Declared class types; the "C" in "class C<T> { }".
class ClassType extends Type {
	def decl: ClassDecl;
	def typeArgs: Array<Type>;
	def depth = decl.depth;
	private var superType: ClassType;
	var next: ClassType;

	new(hash: u32, decl, typeArgs) super(hash) { }

	def getSuperClassType() -> ClassType {
		if (superType != null) return superType;
		var s = decl.superClass;
		if (s == null) return null;
		if (typeArgs.length == 0) return superType = s;
		return superType = ClassType.!(s.substParams(decl.typeParams, typeArgs));
	}
}

// Declared variant types; the "V" in "type V { case C }".
class VariantType extends Type {
	def decl: VariantDecl;
	def typeArgs: Array<Type>;
	private def cases = Array<VariantCaseType>.new(decl.cases.length);

	new(hash: u32, decl, typeArgs) super(hash) { }

	def getCase(c: VariantCaseDecl) -> VariantCaseType {
		var t = cases[c.index];
		if (t == null) {
			var hash = TypeHash.do1(Kind.VARIANT_CASE, u25.view(c.index), this);
			return cases[c.index] = VariantCaseType.new(hash, c, this);
		}
		return t;
	}
}
// Declared variant type case; the "C" in "type V { case C }".
class VariantCaseType extends Type {
	def decl: VariantCaseDecl;
	def superType: VariantType;

	new(hash: u32, decl, superType) super(hash) { }
}

// Types of closures at the source level; "T -> T". Distinguished from function
// types {FuncType}, which are used internally in later phases of the compiler.
class ClosureType extends Type {
	def sig: Signature;

	new(hash: u32, sig) super(hash) { }

	def paramType() -> Type;
	def returnType() -> Type;
}

// Function types that are used after closures have been lowered to receiver, code
// pointer pairs.
class FuncType extends Type {
	def sig: Signature;

	new(hash: u32, sig) super(hash) { }

	def paramType() -> Type;
	def returnType() -> Type;
}

// Tuple types "(T, T)".
class TupleType extends Type {
	def elemTypes: Array<Type>;

	new(hash: u32, elemTypes) super(hash) { }
}

// Declared type parameters; the "T" in "class C<T> { }".
class TypeParamType extends Type {
	def index: int;

	new(index) super(TypeHash.do0(Kind.TYPE_PARAM, u25.view(index))) { }
}

// Type variables introduced during type inference; the implicit type argument
// "`T" in an expression such as "m<`T>".
class TypeVarType extends Type {
	var solution: Type;

	new() super(TypeHash.do0(Kind.TYPE_VAR, 1)) { }
}

// Set types are used internally in partial polymorphic specialization.
class SetType extends Type {
	def types: Array<Type>;

	new(hash: u32, types) super(hash) { }
}

// Declared enum types; the "E" in "enum E { }".
class EnumType extends Type {
	def decl: EnumDecl;

	new(decl) super(TypeHash.do0(Kind.ENUM, u25.view(decl.uid))) { }
}

// Enum set types; the type "E.set" if "E" is a declared enum.
class EnumSetType extends Type {
	def decl: EnumDecl;
	new(decl) super(TypeHash.do0(Kind.ENUM_SET, u25.view(decl.uid))) { }
}

// Declared type aliases; the "X" in "type X<T> = type".
class AliasType extends Type {
	def decl: AliasDecl;
	def typeArgs: Array<Type>;

	new(hash: u32, decl, typeArgs) super(hash) { }

	def getAlias() -> Type;
}

// The type of pointers used internally in the compiler.
class PointerType extends Type {
	def space: AddressSpace;
	def width: byte;

	new(space, width) super(TypeHash.do0(Kind.POINTER, width)) { }
}

// The type of the "null" expression.
class NullType extends Type {
	new() super(TypeHash.do0(Kind.NULL, Kind.NULL.tag)) { }
}

def render0(t: Type, buf: StringBuffer) -> StringBuffer {
	match (t) {
		x: VoidType => {
			buf.puts("void");
		}
		x: BoolType => {
			buf.puts("bool");
		}
		x: IntType => {
			if (x.signed && x.width == 32) buf.puts("int");
			else if (x.signed && x.width == 64) buf.puts("long");
			else if (!x.signed && x.width == 8) buf.puts("byte");
			else buf.format2("%1%2", if(x.signed, 'i', 'u'), int.!(x.width));
		}
		x: FloatType => {
			buf.puts(if(x.total_width == 64, "double", "float"));
		}
		x: ArrayType => {
			buf.puts("Array<");
			x.elemType.render(buf);
			buf.puts(">");
		}
		x: ComponentType => {
			x.decl.render(buf);
		}
		x: ClassType => {
			x.decl.render(buf);
			renderP(x.typeArgs, buf);
		}
		x: VariantType => {
			x.decl.render(buf);
			renderP(x.typeArgs, buf);
		}
		x: VariantCaseType => {
			x.superType.render(buf);
			buf.puts(".");
			x.decl.render(buf);
		}
		x: ClosureType => {
			renderF(x.sig.params, buf);
			buf.puts(" -> ");
			renderF(x.sig.results, buf);
		}
		x: FuncType => {
			renderF(x.sig.params, buf);
			buf.puts(" *-> ");
			renderF(x.sig.results, buf);
		}
		x: TupleType => {
			buf.puts("(");
			renderA(x.elemTypes, buf);
			buf.puts(")");
		}
		x: TypeParamType => {
			buf.format1("`t%1", x.index);
		}
		x: TypeVarType => {
			// TODO
		}
		x: SetType => {
			buf.puts("{");
			renderA(x.types, buf);
			buf.puts("}");
		}
		x: EnumType => {
			x.decl.render(buf);
		}
		x: EnumSetType => {
			x.decl.render(buf);
			buf.puts(".set");
		}
		x: AliasType => {
			x.decl.render(buf);
			renderP(x.typeArgs, buf);
		}
		x: PointerType => {
			buf.format1("$ptr%1", int.!(x.width));
		}
		x: NullType => {
			buf.puts("null");
		}
	}
	return buf;
}
def renderP(at: Array<Type>, buf: StringBuffer) -> StringBuffer {
	if (at.length == 0) return buf;
	buf.puts("<");
	renderA(at, buf);
	buf.puts(">");
	return buf;
}
def renderF(at: Array<Type>, buf: StringBuffer) -> StringBuffer {
	if (at.length == 0) return buf.puts("void");
	if (at.length == 1) {
		var t = at[0];
		if (FuncType.?(t) || ClosureType.?(t)) {
			buf.puts("(");
			t.render(buf);
			buf.puts(")");
		} else {
			t.render(buf);
		}
		return buf;
	}
	buf.puts("(");
	renderA(at, buf);
	buf.puts(")");
	return buf;
}
def renderA(at: Array<Type>, buf: StringBuffer) -> StringBuffer {
	for (i < at.length) {
		if (i > 0) buf.puts(", ");
		at[i].render(buf);
	}
	return buf;
}

// ----------------------------------------------------------------------------------
// - Type substitution
// ----------------------------------------------------------------------------------
def substFunc0(t: Type, f: Type -> Type) -> Type {
	if (!t.polymorphic()) return t;
	match (t) {
		x: ArrayType => {
			var st = f(x.elemType);
			return if(st == x.elemType, x, ArrayTypeCache.get(st));
		}
		x: ClassType => {
			var st = substArray(x.typeArgs, f);
			return if(st == x.typeArgs, x, x.decl.getCachedType(st));
		}
		x: VariantType => {
			var st = substArray(x.typeArgs, f);
			return if(st == x.typeArgs, x, x.decl.getCachedType(st));
		}
		x: ClosureType => {
			var st = substSig(x.sig, f);
			return if(st == x.sig, x, ClosureTypeCache.get(st));
		}
		x: FuncType => {
			var st = substSig(x.sig, f);
			return if(st == x.sig, x, FuncTypeCache.get(st));
		}
		x: TupleType => {
			var st = substArray(x.elemTypes, f);
			return if(st == x.elemTypes, x, TupleTypeCache.get(st));
		}
		x: TypeParamType => {
			return f(x);
		}
		x: TypeVarType => {
			return f(x);
		}
		x: SetType => {
			var st = substArray(x.types, f);
			return if(st == x.types, x, SetTypeCache.get(st));
		}
		x: AliasType => {
			var st = substArray(x.typeArgs, f);
			return if(st == x.typeArgs, x, x.decl.getCachedType(st));
		}
		_ => return t;
	}
}
def substArray(at: Array<Type>, f: Type -> Type) -> Array<Type> {
	var len = at.length;
	for (i < len) {
		var t = at[i], st = f(t);
		if (t != st) {
			// first mismatch; allocate new array and copy
			var nt = Array<Type>.new(at.length);
			for (j < i) nt[j] = at[j];
			nt[i] = st;
			for (j = i + 1; j < len; j++) nt[j] = f(at[j]);
			return nt;
		}
	}
	return at;
}
def substSig(sig: Signature, f: Type -> Type) -> Signature {
	var pt = substArray(sig.params, f);
	var rt = substArray(sig.results, f);
	if (pt != sig.params) return Signature.new(pt, rt);
	if (rt != sig.results) return Signature.new(pt, rt);
	return sig;
}

def substParams0(t: Type, params: Array<TypeParamType>, args: Array<Type>) -> Type {
	if (TypeParamType.?(t)) {
		var tp = TypeParamType.!(t), index = tp.index;
		if (index < params.length && params[index] == tp) return args[index];
	}
	return t;
}
def elimTypeVars(t: Type, error: TypeVarType -> Type) -> Type {
	match (t) {
		x: TypeVarType => return if (x.solution == null, error(x), x.solution);
		_ => return t;
	}
}
