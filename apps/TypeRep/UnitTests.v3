// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Global unittest registry.
component UnitTests {
	var list: List<UnitTest>;
	var fatal: bool = false;
	private def buf = StringBuffer.new();
	def register(name: string, fun: Tester -> ()) {
		list = List.new(UnitTest.new(name, fun), list);
	}
	def registerT<T>(prefix: string, name: string, n: Tester -> T, f: T -> void) {
		if (prefix != null) name = buf.reset().puts(prefix).puts(name).toString();
		register(name, runNew<T>(_, n, f));
	}
	def runNew<T>(t: Tester, n: Tester -> T, f: T -> ()) {
		return f(n(t));
	}
	// Run registered unit tests matching any of the matchers in {matchers}.
	// Return the number passed and total tests.
	def run(matchers: List<GlobMatcher>) -> (int, int) {
		var count = 0, r: List<UnitTest>;
		for (l = list; l != null; l = l.tail) { // count and reverse list
			var t = l.head;
			if (matchers != null) {
				var skip = true;
				for (m = matchers; m != null; m = m.tail) {
					if (skip) skip = !m.head.matches(t.name);
				}
				if (skip) continue;
			}
			r = List.new(l.head, r);
			count++;
		}
		System.puts("##>");
		System.puti(count);
		System.puts(" unit tests\n");
		var passed = 0;
		for (l = r; l != null; l = l.tail) {
			var u = l.head;
			var t = Tester.new(u.name);
			System.puts("##+");
			System.puts(u.name);
			System.ln();
			u.fun(t);
			if (t.ok) {
				passed++;
				System.puts("##-ok\n");
			} else {
				System.puts("##-fail (");
				System.puts(t.msg);
				System.puts(")\n");
			}
		}
		return (passed, count);
	}
}
// An individual unit test.
class UnitTest(name: string, fun: Tester -> ()) { }
// Tester that is capable of generating and recording errors.
class Tester(name: string) {
	var ok = true;
	var msg: string;
	def fail(msg: string) {
		if (!ok) return;
		this.ok = false;
		this.msg = msg;
		if (UnitTests.fatal) {
			System.error("UnitTestError", msg);
		}
	}
	def asserti(expected: int, got: int) -> this {
		if (expected != got) fail2("expected %1, got %2", expected, got);
	}
	def assertz(expected: bool, got: bool) -> this {
		if (expected != got) fail2("expected %1, got %2", expected, got);
	}
	def assertl(expected: long, got: long) -> this {
		if (expected != got) fail2("expected %1, got %2", expected, got);
	}
	def asserteq<T>(a: T, b: T) -> this {
		if (a != b) fail("expected equal");
	}
	def assertne<T>(a: T, b: T) -> this {
		if (a == b) fail("expected not equal");
	}
	def assertT<F, T>(v: F) -> this {
		if (!T.?(v)) fail("expected type");
	}
	def fail1<T>(msg: string, a: T) {
		fail(String.format1(msg, a));
	}
	def fail2<T, U>(msg: string, a: T, b: U) {
		fail(String.format2(msg, a, b));
	}
	def fail3<T, U, V>(msg: string, a: T, b: U, c: V) {
		fail(String.format3(msg, a, b, c));
	}
}
