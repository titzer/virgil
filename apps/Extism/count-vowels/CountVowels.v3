// `defaultVowels` represents the default set of vowels
// if the host provides no "config.vowels" string.
def defaultVowels = "aeiouAEIOU";

// `VowelReport` represents the JSON struct returned to the host.
class VowelReport {
  var count: int;
  var total: int;
  var vowels: string;

  new(count, total, vowels) {}

  def toJson() -> string {
    var b = StringBuffer.new();
    // TODO
    return b.toString();
  }
}

def getTotal() -> int {
  match (Var.getInt("total")) {
    Some(total) => return total;
    None => return 0;
  }
}

def storeTotal(total: int) {
  Var.set_int("total", total);
}

def getVowels() -> string {
  match (Config.get("vowels")) {
    Some(s) => return s;
    None => return defaultVowels;
  }
}

// Exported: `count_vowels` reads the input string from the host, reads the "vowels"
// config from the host, then counts the number of vowels in the input
// string and keeps a running total (over multiple iterations)
// in the host's "total" var.
// It sends the JSON `VowelReport` to the host via its output data channel.
// It returns 0 to the host on success.
def count_vowels() -> int {
  def input = Host.inputString();
  //
  def vowels = getVowels();
  def vowelsArr = Array<byte>.!(vowels);
  def count = input.filter(fn(ch) { vowelsArr.contains(ch) }).count();
  //
  def total = getTotal() + count;
  storeTotal(total);
  //
  def jsonStr = VowelReport.new(count, total, vowels).toJson();
  Host.outputString(jsonStr);
  return 0;
}

// Unused.
def main() {
}

export count_vowels;

// Hack to compile to wasm: provide Virgil identifiers that cannot be found:
component System {
  def error(s1: string, s2: string) {}
  def fileClose(file: int) {}
  def fileWriteK(file: int, data: Array<byte>, offset: int, length: int) {}
}
