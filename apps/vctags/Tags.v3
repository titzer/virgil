enum TagKind(value: string) {
	CLASS("c"),
	COMPONENT("n"),
	DEFINITION("d"),
	FUNCTION("f"),
	METHOD("m")
}

class Tag {
	var id: string;
	var file: string;
	var decl: string;
	var kind: TagKind;
	var token: Token;

	new(id, file, decl, kind, token) { }

	def formatTag() -> string {
		var str1 = Strings.format3("%1\t%2\t/^%3$/;\"\t", id, file, decl);
		var str2 = Strings.format1("%1\n", kind.value);
		return Strings.concat(str1, str2);
	}
	def formatTagEmacs() -> string {
		var str1 = Strings.format3("%1\x7f%2\x01%3,", decl, this.idEmacs(),
				token.beginLine);
		var str2 = Strings.format1("%1\n", token.beginColumn);
		return Strings.concat(str1, str2);
	}
	def idEmacs() -> string {
		if (this.id[0] == '['
				|| this.kind == TagKind.METHOD
				|| this.kind == TagKind.FUNCTION) return this.id;
		var off = 0, idx = 0;
		var id = Vector<byte>.new();
		id.puta(this.id);

		for (i = 0; i < decl.length; i++) {
			off = if (decl[i] == '\t', off + 8, off + 1);
			idx++;
			if (off == token.beginColumn) break;
		}
		for (i = idx + this.id.length - 1; i < decl.length; i++) {
			if (decl[i] == ' '
					|| decl[i] == ','
					|| decl[i] == ':'
					|| decl[i] == '('
					|| decl[i] == '{') break;
			id.put(decl[i]);
		}

		return id.extract();
	}
}

class TagFile extends VstFile {
	def tags = Vector<Tag>.new();
	new(fileName: string, input: Array<byte>) super(fileName, input) { }
}

component Tags {
	def parseFile(fileName: string, input: Array<byte>,
			ERROR: ErrorGen, typeCache: TypeCache) -> TagFile {
		var file = TagFile.new(fileName, input);
		var p = ParserState.new(file, ERROR, Parser.skipToNextToken, typeCache);
		file.input = input;
		file.lineEnds = p.lineEnds;
		while (p.curByte != Parser.END) {
			if (!Parser.parseToplevelDecl(p, file)) break;
		}
		if (file.synthetic != null) {
			file.synthetic.members = Lists.reverse(file.synthetic.members);
		}
		return file;
	}

	// used only for vi-style tags
	def tagCmp(a: Tag, b: Tag) -> bool {
		var aTag = a.formatTag();
		var bTag = b.formatTag();
		return Strings.strCmp(aTag, bTag) <= 0;
	}

	def formatEmacs(files: Vector<TagFile>) -> string {
		var str = "";
		for (i < files.length) {
			var file = files[i], size = 0;
			var header = Vector<byte>.new();
			var format = Vector<byte>.new();
			for (i < file.tags.length) {
				var tag = file.tags[i].formatTagEmacs();
				format.puta(tag);
				size += tag.length;
			}
			header.puta("\x0c\n");
			header.puta(Strings.format2("%1,%2\n", file.tags[0].file, size));
			header.puta(format.extract());
			str = Strings.concat(str, header.extract());
		}

		return str;
	}

	def formatVi(files: Vector<TagFile>) -> string {
		var str = "", tags = Vector<Tag>.new();
		for (i < files.length) {
			var file = files[i];
			tags.puta(file.tags.copy());
		}
		for (i < tags.length) {
			var sorted = tags.extract();
			sorted = Arrays.sort(sorted, 0, sorted.length, tagCmp);
			for (tag in sorted) {
				str = Strings.concat(str, tag.formatTag());
			}
		}

		return str;
	}
}
