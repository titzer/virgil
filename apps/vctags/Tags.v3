enum TagKind(value: string) {
	CLASS("c"),
	COMPONENT("n"),
	DEFINITION("d"),
	ENUM("e"),
	FUNCTION("f"),
	LAYOUT("l"),
	METHOD("m"),
	PACKING("p")
}

class Tag {
	var id: string;
	var file: string;
	var decl: string;
	var kind: TagKind;
	var token: Token;

	new(id, file, decl, kind, token) { }

	// format vi-style tag; have to escape '/' and '$' characters
	def formatTag() -> string {
		var str1 = Strings.format3("%s\t%s\t/^%s$/;\"\t", id, file, escapeChars(decl));
		var str2 = Strings.format1("%s\n", kind.value);
		return Arrays.concat(str1, str2);
	}
	// format emacs-style tag; emacs has a different definition of `id` than vi
	def formatTagEmacs() -> string {
		var str1 = Strings.format3("%s\x7f%s\x01%d,", decl, this.idEmacs(),
				token.beginLine);
		var str2 = Strings.format1("%d\n", token.beginColumn);
		return Arrays.concat(str1, str2);
	}
	// emacs' definition of `id`
	def idEmacs() -> string {
		if (this.id[0] == '['
			|| this.kind == TagKind.METHOD
			|| this.kind == TagKind.FUNCTION) return this.id;
		var off = 0, idx = 0;
		var id = StringBuilder.new();
		id.puts(this.id);

		for (i = 0; i < decl.length; i++) {
			off = if (decl[i] == '\t', off + 8, off + 1);
			idx++;
			if (off == token.beginColumn) break;
		}
		for (i = idx + this.id.length - 1; i < decl.length; i++) {
			if (decl[i] == ' '
				|| decl[i] == ','
				|| decl[i] == ':'
				|| decl[i] == '('
				|| decl[i] == '{') break;
			id.putc(decl[i]);
		}

		return id.toString();
	}
	// functions to escape '/' and '$' characters
	private def escapeChars(s: string) -> string {
		var builder = StringBuilder.new();
		for (c in s) {
			match (c) {
				'/', '$' => builder.putc('\\');
				_ => ;
			}
			builder.putc(c);
		}
		return builder.toString();
	}
}

class TagFile extends VstFile {
	def tags = Vector<Tag>.new();
	new(fileName: string, input: Array<byte>) super(fileName, input) { }
}

component Tags {
	def parseFile(fileName: string, input: Array<byte>,
			ERROR: ErrorGen, typeCache: TypeCache) -> TagFile {
		var file = TagFile.new(fileName, input);
		var p = ParserState.new(file, ERROR, Parser.skipToNextToken, typeCache);
		file.input = input;
		file.lineEnds = p.lineEnds;
		while (p.curByte != Parser.END) {
			if (!Parser.parseToplevelDecl(p, file)) break;
		}
		if (file.synthetic != null) {
			file.synthetic.members = Lists.reverse(file.synthetic.members);
		}
		return file;
	}

	// used only for vi-style tags
	def tagCmp(a: Tag, b: Tag) -> bool {
		var aTag = a.formatTag();
		var bTag = b.formatTag();
		return strcmp(aTag, bTag) <= 0;
	}

	// format a list of files into emacs-style tags
	def formatEmacs(files: Vector<TagFile>) -> string {
		var str = StringBuilder.new();
		for (i < files.length) {
			var file = files[i], size = 0;
			if (file.tags.length == 0) continue;
			var header = StringBuilder.new();
			var format = StringBuilder.new();
			for (i < file.tags.length) {
				var tag = file.tags[i].formatTagEmacs();
				format.puts(tag);
				size += tag.length;
			}
			header.puts(Strings.format2("\x0c\n%s,%d\n", file.tags[0].file, size));
			header.puts(format.toString());
			str.puts(header.toString());
		}

		return str.toString();
	}

	// format a list of files into vi-style tags
	def formatVi(files: Vector<TagFile>) -> string {
		var str = StringBuilder.new(), tags = Vector<Tag>.new();
		for (i < files.length) {
			var file = files[i];
			tags.puta(file.tags.extract());
		}
		var sorted = tags.extract();
		sorted = Arrays.sort(sorted, 0, sorted.length, tagCmp);
		for (tag in sorted) {
			str.puts(tag.formatTag());
		}

		return str.toString();
	}
}
def strcmp(arr1: string, arr2: string) -> int {
	var idx = 0;
	var c1: int = '\x00', c2: int = '\x00';
	while (c1 == c2) {
		c1 = if (idx < arr1.length, arr1[idx], '\x00');
		c2 = if (idx < arr2.length, arr2[idx++], '\x00');
		if (c1 == '\x00') return c1 - c2;
	}
	return c1 - c2;
}
