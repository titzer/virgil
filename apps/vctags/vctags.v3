enum CompoundKind {
	CLASS,
	COMPONENT,
	ENUM,
	ENUMCASE,
	LAYOUT,
	SYNTHETIC
}

component vctags {
	def ERROR = ErrorGen.new(15);
	def typeCache = TypeCache.new();

	def options = BasicOptions.new();
	def HELP    = options.newBoolOption("h", false);
	def EMACS   = options.newBoolOption("e", false);

	def printHelp() {
		Terminal.put("Usage: vctags [options] [Virgil file(s)]\n\n");
		Terminal.put("  -h    Print this option summary.\n");
		Terminal.put("  -e    Output tag file for use with Emacs.\n");
	}

	def isVirgilFile(str: string) -> bool {
		var length = str.length;
		var ft = [str[length - 3], str[length - 2], str[length - 1]];
		return Strings.equal(ft, ".v3");
	}

	def main(args: Array<string>) {
		args = options.parse(args);
		if (HELP.get() || args.length == 0) return printHelp();
		createTagFile(args);
	}

	def createTagFile(args: Array<string>) {
		def files = Vector<TagFile>.new();
		def emacs = EMACS.get();

		for (i = 0; i < args.length; i++) {
			var fileName = args[i];
			if (!isVirgilFile(fileName)) return printHelp();
			var input = System.fileLoad(fileName);
			if (input == null) {
				ERROR.FileNotFound(fileName);
				continue;
			}
			var file = Tags.parseFile(fileName, input, ERROR, typeCache);
			file = generateTags(file);
			files.put(file);
		}

		var tags: string;
		var tagFileName = if(emacs, "TAGS", "tags");
		if (emacs) tags = Tags.formatEmacs(files);
		else tags = Tags.formatVi(files);

		var fd = System.fileOpen(tagFileName, false);
		System.fileWriteK(fd, tags, 0, tags.length);
		System.fileClose(fd);
	}

	def generateDeclTag(file: TagFile, decl: Decl, declString: string, kind: TagKind) {
		var tag = Tag.new(decl.token.image, file.fileName, declString, kind, decl.token);
		file.tags.put(tag);
	}

	def generateDeclTags(file: TagFile, decls: Array<Decl>, compKind: CompoundKind) {
		var kind: TagKind;
		for (decl in decls) {
			var declString = file.extractLine(decl.token.beginLine);
			match (compKind) {
				COMPONENT =>	kind = if (VstMethod.?(decl), TagKind.FUNCTION, TagKind.DEFINITION);
				_ =>		kind = if (VstMethod.?(decl), TagKind.METHOD  , TagKind.DEFINITION);
			}
			generateDeclTag(file, decl, declString, kind);
		}
	}

	def generateParamTags(file: TagFile, params: VstList<ParamDecl>, compKind: CompoundKind) {
		if (params == null || params.list == null) return;
		var decls = Arrays.map<ParamDecl, Decl>(Lists.toArray(params.list), Decl.!);
		generateDeclTags(file, decls, compKind);
	}

	def generateCompoundMemberTags(file: TagFile, vstCompound: VstCompound, compKind: CompoundKind) {
		var members = Lists.toArray(vstCompound.members);
		generateDeclTags(file, Arrays.map<VstMember, Decl>(members, Decl.!), compKind);
	}

	def generateTags(file: TagFile) -> TagFile {
		// class declarations
		for (i < file.classes.length) {
			var cldecl = file.classes[i];
			var decl = file.extractLine(cldecl.token.beginLine);
			var tag = Tag.new(cldecl.fullName, file.fileName, decl,
					TagKind.CLASS, cldecl.token);
			file.tags.put(tag);
			generateCompoundMemberTags(file, cldecl, CompoundKind.CLASS);
			generateParamTags(file, cldecl.params, CompoundKind.CLASS);
		}

		// component declarations
		for (i < file.components.length) {
			var cdecl = file.components[i];
			if (cdecl == file.synthetic) continue;
			var decl = file.extractLine(cdecl.token.beginLine);
			var tag = Tag.new(cdecl.fullName, file.fileName, decl,
					TagKind.COMPONENT, cdecl.token);
			file.tags.put(tag);
			generateCompoundMemberTags(file, cdecl, CompoundKind.COMPONENT);
		}

		// implicit component declaration
		if (file.synthetic != null) {
			generateCompoundMemberTags(file, file.synthetic, CompoundKind.SYNTHETIC);
		}

		// enum declarations
		for (i < file.enums.length) {
			var edecl = file.enums[i];
			var decl = file.extractLine(edecl.token.beginLine);
			var tag = Tag.new(edecl.fullName, file.fileName, decl,
					TagKind.ENUM, edecl.token);
			file.tags.put(tag);
			generateCompoundMemberTags(file, edecl, CompoundKind.ENUM);
			generateDeclTags(file, Arrays.map<VstEnumCase,Decl>(edecl.cases, VstMember.!), CompoundKind.ENUMCASE);
			generateParamTags(file, edecl.params, CompoundKind.CLASS);
		}

		// layout declarations
		for (i < file.layouts.length) {
			var ldecl = file.layouts[i];
			var decl = file.extractLine(ldecl.token.beginLine);
			var tag = Tag.new(ldecl.fullName, file.fileName, decl,
					TagKind.LAYOUT, ldecl.token);
			file.tags.put(tag);
			generateCompoundMemberTags(file, ldecl, CompoundKind.LAYOUT);
			generateParamTags(file, ldecl.params, CompoundKind.CLASS);
		}

		// packing declarations
		for (i < file.packings.length) {
			var pdecl = file.packings[i];
			var decl = file.extractLine(pdecl.token.beginLine);
			var tag = Tag.new(pdecl.fullName, file.fileName, decl,
					TagKind.PACKING, pdecl.token);
			file.tags.put(tag);
		}

		return file;
	}
}
