component vctags {
	def ERROR = ErrorGen.new(15);
	def typeCache = TypeCache.new();

	def options = BasicOptions.new(null);
	def HELP    = options.newBoolOption("h", false);
	def EMACS   = options.newBoolOption("e", false);

	def printHelp() {
		Terminal.put("Usage: vctags [options] [Virgil file(s)]\n\n");
		Terminal.put("  -h    Print this option summary.\n");
		Terminal.put("  -e    Output tag file for use with Emacs.\n");
	}

	def isVirgilFile(str: string) -> bool {
		var length = str.length;
		var ft = [str[length - 3], str[length - 2], str[length - 1]];
		return Strings.equal(ft, ".v3");
	}

	def main(args: Array<string>) {
		args = options.parse(args);
		if (HELP.get() || args.length == 0) return printHelp();
		createTagFile(args);
	}

	def createTagFile(args: Array<string>) {
		def files = Vector<TagFile>.new();
		def emacs = EMACS.get();

		for (i = 0; i < args.length; i++) {
			var fileName = args[i];
			if (!isVirgilFile(fileName)) return printHelp();
			var input = System.fileLoad(fileName);
			if (input == null) {
				ERROR.FileNotFound(fileName);
				continue;
			}
			var file = Tags.parseFile(fileName, input, ERROR, typeCache);
			file = generateTags(file);
			files.put(file);
		}

		var tags: string;
		var tagFileName = if (emacs, "TAGS", "tags");
		if (emacs) {
			tags = Tags.formatEmacs(files);
		} else {
			tags = Tags.formatVi(files);
		}

		var fd = System.fileOpen(tagFileName, false);
		System.fileWriteK(fd, tags, 0, tags.length);
		System.fileClose(fd);
	}

	def generateMemberTags(file: TagFile, vstCompound: VstCompound, isClass: bool) {
		var kind: TagKind;
		var members = Lists.toArray(vstCompound.members);
		for (member in members) {
			var decl = file.extractLine(member.token.beginLine);
			if (isClass) {
				kind = if (VstMethod.?(member), TagKind.METHOD, TagKind.DEFINITION);
			} else {
				kind = if (VstMethod.?(member), TagKind.FUNCTION, TagKind.DEFINITION);
			}
			var tag = Tag.new(member.token.image, file.fileName, decl, kind, member.token);
			file.tags.put(tag);
		}
	}

	def generateTags(file: TagFile) -> TagFile {
		// class declarations
		for (i < file.classes.length) {
			var cldecl = file.classes[i];
			var decl = file.extractLine(cldecl.token.beginLine);
			var tag = Tag.new(cldecl.fullName, file.fileName, decl,
					TagKind.CLASS, cldecl.token);
			file.tags.put(tag);
			generateMemberTags(file, cldecl, true);
		}

		// component declarations
		for (i < file.components.length) {
			var cdecl = file.components[i];
			if (cdecl == file.synthetic) continue;
			var decl = file.extractLine(cdecl.token.beginLine);
			var tag = Tag.new(cdecl.fullName, file.fileName, decl,
					TagKind.COMPONENT, cdecl.token);
			file.tags.put(tag);
			generateMemberTags(file, cdecl, false);
		}

		// implicit component declaration
		if (file.synthetic != null) {
			generateMemberTags(file, file.synthetic, false);
		}

		return file;
	}
}
