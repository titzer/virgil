// Copyright 2024 Virgil Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

var trace = TraceBuilder.new();
def main(args: Array<string>) -> int {
	for (i < args.length) {
		var a = args[i];
		trace.reset().puts(a).puts(": ");
		var np = NumberParser.new(a);
		np.accept_width = true;
		var ok = np.parse();
		if (ok) {
			var vtype = VstNumberParser.getType(np);
			var val = VstNumberParser.getVal(np);
			trace.put1("%q", vtype.render).outln();
			renderVal(vtype, val);
		} else {
			trace.put2("!error @ %d, %s", np.error_pos, np.error_msg).outln();
		}
	}
	return 0;
}

def renderVal(vtype: Type, val: Val) {
	match (vtype) {
		x: IntType => {
			match(val) {
				v: Box<int> => {
					var bits = u32.view(v.val);
					if (x.signed) trace.tab().puts("dec:  ").putd(v.val).outln();
					else trace.tab().puts("dec:  ").putd(bits).outln();
					trace.tab().put_0b_32(bits).outln();
					trace.tab().put_0x_32(bits).outln();
					if (x.signed) {
						trace.tab().put_sleb32(v.val).outln();
					}
					if (v.val >= 0 || !x.signed) {
						trace.tab().put_uleb32(bits).outln();
						if (Utf8.isValidCodepoint(bits)) {
							trace.tab().put_utf8(bits).outln();
							if (bits >= 32) trace.tab().put_unicode(bits).outln();
						}
						if (u7.?(bits)) {
							trace.tab().put_ascii(u7.!(bits)).outln();
						}
					}
				}
				v: Box<long> => {
					var bits = u64.view(v.val);
					if (x.signed) trace.tab().putd(v.val).outln();
					else trace.tab().putd(bits).outln();
					trace.tab().put_0b_64(bits).outln();
					trace.tab().put_0x_64(bits).outln();
					if (x.signed) trace.tab().put_sleb64(v.val).outln();
				}
			}
		}
		x: FloatType => {
			if (x.width == 32) {
				var bits = Float32Val.!(val).bits;
				trace.tab().put_0b_32(bits).outln();
				trace.tab().put_0x_32(bits).outln();
			}
			if (x.width == 64) {
				var bits = Float64Val.!(val).bits;
				trace.tab().put_0b_64(bits).outln();
				trace.tab().put_0x_64(bits).outln();
			}
		}
	}
}


class TraceBuilder extends StringBuilder {
	def w = DataWriter.new().reset(Array<byte>.new(10), 0, 0); // for LEBs

	def put_0b_32(v: u32) -> this {
		puts("bin:  0b");
		for (i < 32) {
			if ((i % 8) == 0) putc('_');
			var mask = 1u << u5.view(31 - i);
			var bit = if((v & mask) != 0, '1', '0');
			trace.putc(bit);
		}
	}
	def put_0b_64(v: u64) -> this {
		puts("bin:  0b");
		for (i < 64) {
			if ((i % 8) == 0) putc('_');
			var mask = 1uL << u6.view(63 - i);
			var bit = if((v & mask) != 0, '1', '0');
			putc(bit);
		}
	}
	def put_0x_32(v: u32) -> this {
		puts("hex:  0x");
		var shift = 28;
		for (i < 8) {
			if ((i % 4) == 0) putc('_');
			var digit = (v >> u5.view(shift)) & 0xF;
			var ch = Chars.hexMap_u[digit];
			putc(ch);
			shift -= 4;
		}
	}
	def put_0x_64(v: u64) -> this {
		puts("hex:  0x");
		var shift = 60;
		for (i < 16) {
			if ((i % 8) == 0) putc('_');
			var digit = (v >> u6.view(shift)) & 0xF;
			var ch = Chars.hexMap_u[digit];
			putc(ch);
			shift -= 4;
		}
	}
	def put_sleb32(data: i32) -> this {
		puts("sleb: ");
		w.at(0).put_sleb32(data);
		put_data();
	}
	def put_uleb32(data: u32) -> this {
		puts("uleb: ");
		w.at(0).put_uleb32(data);
		put_data();
	}
	def put_sleb64(data: i64) -> this {
		puts("sleb: ");
		w.at(0).put_sleb64(data);
		put_data();
	}
	def put_data() -> this {
		for (i < w.pos) {
			if (i > 0) sp();
			putx_8(w.data[i]);
		}
	}
	def put_utf8(codepoint: u32) -> this {
		puts("utf8: ");
		var count = Utf8.encode(codepoint, utf8_buffer);
		for (i < count) {
			if (i > 0) sp();
			putx_8(utf8_buffer[i]);
		}
	}
	def put_unicode(codepoint: u32) -> this {
		puts("unicode: ");
		var count = Utf8.encode(codepoint, utf8_buffer);
		putr(utf8_buffer[0 ... count]);
	}
	def put_ascii(val: u7) -> this {
		puts("ascii: ");
		match (byte.view(val)) {
			'\r' => puts("\\r");
			'\t' => puts("\\t");
			'\n' => puts("\\n");
			_ => {
				if (val >= 32) putc(val);
			}
		}
	}
	def outln() -> this {
		ln();
		System.puts(extract());
	}
}
def utf8_buffer = Array<byte>.new(4);