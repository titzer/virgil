// Copyright 2022 Virgil Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// This implements a simple echo server that sits and listens on 0.0.0.0:5555
// or :::5555 for any connections.

def EXIT_FAILURE = -1;
def options = BasicOptions.new();
def help    = options.newBoolOption("h", false);
def v6      = options.newBoolOption("v6", false);

def usage() {
	System.puts("Usage: TcpEchoServer [-h] [-v6]\n");
	System.puts("  -h   Print this option summary\n");
	System.puts("  -v6  Use IPv6 instead of IPv4\n");
	RiOs.exit(EXIT_FAILURE);
}

def main(args: Array<string>) {
	args = options.parse(args);
	if (help.get()) {
		usage();
	}

	def any = if(v6.get(), Net.ANY_V6, Net.ANY_V4);
	def sock = ServerSocket.new(any, 5555);
	def msgBuf = Array<byte>.new(512);
	def buf = StringBuilder.new();

	sock.open().expect("Unable to open socket");
	buf.put1("Hello! Socket opened on fd %d\n", sock.fd);
	System.puts(buf.toString());

	buf.put2("Listening on %q:%d\n", sock.addr.render, sock.localPort);
	System.puts(buf.toString());

	while (true) {
		def connection = sock.accept().expect("Could not accept connection");
		buf.put2("Connection to %q:%d\n", connection.addr.render, connection.port);
		System.puts(buf.toString());

		def numRead = connection.recv(msgBuf).expect("Receive message failed");
		def msg: string = Arrays.range(msgBuf, 0, numRead);
		buf.put1(
			"recv msg: \"%s\"\n",
			Strings.strip(msg)
		);
		System.puts(buf.toString());

		connection.send(msg).expect("Send message failed");
		System.puts("Echoed msg!\n");
		connection.close();
	}
	sock.close();
}
