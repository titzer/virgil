def options = BasicOptions.new();

def RUNS = options.newIntOption("runs", 10);
def GROUP = options.newIntOption("group", int.max);
var commands: Array<Command>;
var stats: Array<Stats>;

def main(args: Array<string>) -> int {
	commands = parseCommands(options.parse(args));
	stats = Arrays.map(commands, newStats);

	var runs = RUNS.get();
	while (runs > 0) {
		var count = GROUP.get();
		if (count > runs) count = runs;
		for (j < commands.length) {
			for (g < count) {
				var r = runCommand(commands[j]);
				update(j, r);
			}
		}
		runs -= count;
	}
	return 0;
}

def update(i: int, r: Result) {
	Vt100.moveCursor(i + 1, 1);
	Vt100.eraseToEndOfLine();
	System.puts(commands[i].name);
	System.puts(" ");
	stats[i].add(double.roundi(r.time));
	stats[i].report();
}

def parseCommands(args: Array<string>) -> Array<Command> {
	var binaries = Vector<string>.new();
	var cmdArgs: Array<string> = [];
	for (i < args.length) {
		var arg = args[i];
		if (Arrays.equal("--", arg)) {
			cmdArgs = Arrays.range(args, i+1, args.length);
			break;
		} else {
			binaries.put(arg);
		}
	}
	return Arrays.map(binaries.extract(), Command(_, cmdArgs));
}

def runCommand(cmd: Command) -> Result {
	var f = nop;
	if (Strings.equal("a", cmd.name)) f = runA;
	else if (Strings.equal("b", cmd.name)) f = runB;
	var before = System.ticksUs();
	f(); // run work
	var after = System.ticksUs();
	return Result(0, u64.view(after - before));
}

type Command(name: string, args: Array<string>) { }
type Result(code: int, time: u64) {}

def nop() { }
def runA() { for (i < 1000000) ; }
def runB() { for (i < 2000000) ; }

class Stats(name: string) {
	def samples = Vector<double>.new();
	var min: double;
	var max: double;

	var avg: double;
	var p05: double; // 5th percentile
	var p50: double; // 50th percentile, i.e. median
	var p95: double; // 95th percentile

	def add(val: double) {
		if (samples.length == 0) {
			min = max = avg = val;
		} else {
			if (val < min) min = val;
			if (val > max) max = val;
		}
		samples.put(val);
	}
	def report() {
		if (samples.length == 0) return;
		if (samples.length == 1) {
			printUs(min);
			return;
		}
		var total = 0d;
		for (i < samples.length) total += samples[i];
		avg = total / samples.length;

		System.puts("min=");
		printUs(min);
		
		System.puts(" avg=");
		printUs(avg);
		
		System.puts(" max=");
		printUs(max);
		return;
	}
}

def printUs(val: double) {
	var sec = val / 1000000;
	var us = val - (int.truncd(sec) * 1000000d);
	System.puti(int.truncd(sec));
	System.putc('.');
	if (us == 0) {
		System.puts("000000");
	} else {
		for (i = us; i < 100000; i *= 10) System.putc('0');
		System.puti(int.truncd(us));
	}
}

def newStats(c: Command) -> Stats {
	return Stats.new(c.name);
}