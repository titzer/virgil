// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Learn how to use {System}!
def demo() {
	// {System} is a component provided by every target platform for doing
	// basic I/O. It is the minimum amount of functionality necessary to
	// write a simple, portable program. A specific target platform, e.g.
	// x86-64-linux, may have additional functionality.

	//----{Printing to the console}-----------------------------------------
	// The most basic functionality to print integers, characters, and
	// strings to the console.
	System.puti(-9777);
	System.putc(' ');
	System.puts(" is an integer");
	System.ln();

	//----{Reading standard in}---------------------------------------------
	// Basic reading and writing from file descriptors is supported.
	// 0 = standard in, 1 = standard out, 2 = standard error
	def STDIN = 0;
	System.puts("Please type something and press ENTER: ");
	var ch = System.fileRead(STDIN);	// read one byte from file descriptor
	System.puts("first char was: ");
	System.putc(byte.!(ch));
	System.ln();
	while (System.fileLeft(STDIN) > 0) { // check if more characters are available
		ch = System.fileRead(STDIN); // read one byte from file descriptor
		System.puts("  and: ");
		System.putc(byte.!(ch));
		System.ln();
	}

	//----{Writing standard out/error}--------------------------------------
	// We can also write to both standard out and error file descriptors
	// directly, without using {.put*()}.
	// 0 = standard in, 1 = standard out, 2 = standard error
	def STDOUT = 1, STDERR = 2;
	var str = "This is output.";
	// this range   ^^^^^^
	// ==           5     +6
	System.fileWriteK(STDOUT, str, 5, 6); // write a range of bytes to a file
	System.ln();

	//----{Opening a file for reading}--------------------------------------
	// The {.fileOpen()} method takes a path and a {bool} to represent
	// reading ({true}) or writing {false}).
	def buf = Array<byte>.new(5);
	var fd = System.fileOpen("foo.txt", true); // open for reading
	if (fd > 0) {
		System.fileReadK(fd, buf, 0, 5); // read into a buffer
		System.puts("first 5 bytes of foo.txt: ");
		System.puts(buf);
		System.ln();
	} else {
		System.puts("Could not open foo.txt\n");
	}
	System.fileClose(fd);

	//----{Opening a file for writing}--------------------------------------
	fd = System.fileOpen("foo2.txt", false); // open for writing
	if (fd > 0) {
		System.fileWriteK(fd, buf, 0, 5); // write from buffer
	} else {
		System.puts("Could not open foo2.txt for writing\n");
	}
	System.fileClose(fd);

	//----{Load a whole file}-----------------------------------------------
	// A very common use case is to just load a whole file into memory as a
	// byte array. For reasonable file sizes, this can be done with:
	var fooBytes = System.fileLoad("foo.txt");  // load a whole file
	if (fooBytes != null) {
		System.puts("foo.txt is ");
		System.puti(fooBytes.length);
		System.puts(" bytes long\n");
	} else {
		System.puts("foo.txt could not be loaded.\n");
	}

	//----{Changing permissions}--------------------------------------------
	// The {.chmod()} method changes the permissions of a file.
	System.chmod("foo.txt", 420); // decimal representation octal 0644

	//----{Using clocks}----------------------------------------------------
	// The {.ticksMs()}, {.ticksUs()}, and {.ticksNs()} give a
	// monotonically-increasing counter value in milliseconds, microseconds,
	// and nanoseconds, respectively. They are useful to time regions of
	// code, or to busy-wait.
	var before = System.ticksMs();
	while ((System.ticksMs() - before) < 1) ; // spin for 1 millisecond

	before = System.ticksUs();
	while ((System.ticksUs() - before) < 100) ; // spin for 100 microseconds

	before = System.ticksNs();
	while ((System.ticksNs() - before) < 100) ; // spin for 100 nanoseconds

	//----{Fatal error}-----------------------------------------------------
	// Your program can terminate itself with a fatal error that will include
	// a stacktrace by calling {System.error}.
	if (false) { // we're not going to crash, but if you wanted to:
		System.error("FatalError", "because things have gotten bad"); // fatal
	}
}

// Makes {demo()} visible to {main()}.
component SystemDemo {
	def run = demo;
}
