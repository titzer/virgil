// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def demo() {
	// A {Vector<T>} is a utility class that offers a mutable, growable array
	// with additional methods. The type parameter {<T>} allows {Vector}s to
	// be created that contain any type of Virgil value--primitives, classes,
	// enums, variants, tuples, functions, etc.
	var v = Vector<int>.new();

	// Vectors are initially empty. We can append to the end of a vector
	// with {.put()}.
	v.put(33);
	v.put(44);

	// Additional {.put*()} methods allow adding an entire array or a range of
	// an array, or another vector.
	v.puta([77, 88]);		// append an entire array
	v.putk([99, 11, 22], 0, 1);	// append a range of an array
	def val = 44;
	v.putn(val, 5);			// append {val} 5 times
	v.putv(v);			// append a copy of {v} to itself

	// The {.put*()} methods return {this}, so they can be chained and combined
	// with other methods returning this.
	v.put(999).put(66).put(-1);

	// Vectors strive to look like the built-in {Array<T>} type in Virgil.
	// Thus, each has a {.length} field and supports the indexing operators
	// for reading ({e[i]}) and writing ({e[i] = e}).
	var x = v.length;
	var y = v[2];
	v[2] = 99;

	// A vector can be iterated like an array.
	var sum = 0;
	for (i < v.length) {
		sum += v[i];
	}
	System.puts("vector sum: ");
	System.puti(sum);
	System.ln();

	// A vector can also accept a function to apply to each element.
	v.apply(System.puti);	// print each element (no spaces, though!)
	System.ln();

	// A vector can be {.resize()}'d, which may shorten or lengthen it.
	v.resize(4);	// shorten
	v.resize(5);	// lengthen, appends default value for {<T>}

	// A vector can be {.clear()}'d, which resets its length to {0}.
	// (To prevent memory leaks, the backing storage is cleared if {<T>} is
	// reference type).
	v.clear();

	// Internally, a vector is backed by internal storage, i.e. an array.
	// The {.grow()} method is a performance hint to allocate more internal
	// storage for coming operations. It has no visible effect other than
	// pre-allocating space.
	v.grow(3);			// hint that this vector will be 3 elems
	v.put(7).put(8).put(9);		// append 3 elements

	// A vector's internal elements can be {.copy()}'d out into an array.
	// No change happens to the vector.
	var copy = v.copy();

	// A vector's internal elements can also be {.extract()}'d to an array,
	// which will implicitly {.clear()} the vector, leaving it with 0 length.
	copy = v.extract();

	// A key performance trick is that {.extract()} does not need to make
	// a copy of the backing array if the vector length matches the backing
	// array's length exactly. A careful program can preallocate with
	// {.grow()} and then {.extract()} without making any additional copies.
	v = Vector<int>.new().grow(3);			// one allocation
	var result = v.put(1).put(2).put(3).extract();	// no copy
}

component VectorDemo {
	def run = demo;
}