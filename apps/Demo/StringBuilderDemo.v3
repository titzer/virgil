// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Learn how to use {StringBuilder}!
def demo() {
	// StringBuilder is designed as a utility to build strings, including
	// utilities to print integers, booleans, arrays, etc to the internal
	// buffer and copy to a string.
	var b = StringBuilder.new();

	//----.put*() and .toString()------------------------------------------------------
	// The put*() series of methods append various kinds of primitives
	// to the end of the StringBuffer. The simplest are {puts} and {putc}.
	b.puts("Hello ");
	b.puts("World");
	b.putc('\n');

	// To get a copy of the string accumulated inside, the {.toString()} method
	// can be called (or alternately, {.extract()}).
	var s = b.toString();
	// The result can be printed to the console with the built-in {System.puts}
	// method.
	System.puts(s);
	// The buffer is empty after {.toString()} or {.extract()}.
	System.puti(b.length);
	System.ln();

	//----{Method chaining}------------------------------------------------------
	// Most methods on StringBuffer mutate the internal state of the object and
	// return the same object, using Virgil's unique "return this" construct.
	// This means that many .put*() methods can be chained.
	b.puts("Hello").sp().puts("Again...").ln();
	System.puts(b.toString());
	b.puts("Hello for the ").putd(33).puts("rd time.\n"); // putd is for "{d}ecimal"
	System.puts(b.toString());
	b.puts("bool: ").putz(false); // putz is for "boolean{z}"
	b.puts("hex: ").putx(444); // putx is for "he{x}adecimal"
	b.putk("substring", 1, 4); // putk is for "put {k} elements" (a range)
	b.putd_i32(0).putd_u32(0).putd_i64(0).putd_u64(0); // various specialized int cases
	b.putx_8(0).putx_16(0).putx_32(0).putx_64(0); // various specialized int cases

	//----{miscellaneous}--------------------------------------------------------
	b.reset();	// clear the internal buffer
	b.grow(124);	// performance hint to grow internal storage
	b.csp();	// append a comma and a space
	b.pad('x', 20); // pad until 20 characters long, using 'x'
	b.tab();	// append a tab
	b.ln();		// append a newline
	// Instead of converting the whole buffer to a string to print it out, wasting
	// a copy, we can request the StringBuilder pass a slice of its internal
	// buffer to a function of our choosing, e.g. {System.fileWriteK}. This avoids
	// the internal copy (and also does not reset the buffer).
	b.out(System.fileWriteK(1, _, _, _));

	// From here on, we'll use a shortcut for printing the builder.
	def out = StringBuilder.out(_, System.fileWriteK(1, _, _, _));

	//----{Formatting}-----------------------------------------------------------
	// Writing a chain of .put*() calls can be quite tedious and hard to read.
	// StringBuilder supports format strings in the {.put{1,2,3}()} calls.
	b.put1("length = %d\n", b.length);
	out(b).reset();
	// Format strings support %d, %c, %x, %s, %z and %q.
	b.put1("int = %d, ", (44 + 55));	// %d prints any number in decimal
	b.put1("char = %c, ", 'Y');		// %c prints a character
	b.put1("hex = %x, ", 0x8899aaFF);	// %x prints hex
	b.put1("str = %s, ", "a string");	// %s prints a string
	b.put1("callback = %q, ", putFoo);	// %q calls a callback function
	b.put2("first = %d, second=%z, ", -99, false); // put2 for 2 args
	out(b.ln()).reset();

	//----{Render methods}-----------------------------------------------------------
	// A common convention is to add a {.render()} method to an object, type, or data
	// in your program, so that method can be passed to the {StringBuilder} as part
	// of a format string, using "%q".
	var r = Rectangle.new(33, 44);
	b.put1("rendered = %q\n", r.render);
	out(b).reset();
	// The render method doesn't necessarily need to be defined _on_ the type, but
	// could be outside, and partially applied.
	b.put1("my way of printing rectangles looks like: %q\n", myRectRender(_, r));
	b.put1("it handles null, too: %q\n", myRectRender(_, null));
	out(b).reset();
}

// A function used as a callback in a "%q" formatting call.
def putFoo(b: StringBuilder) -> StringBuilder {
	return b.puts("foo");
}

// An class that demonstrates the "render method" pattern.
class Rectangle(height: int, width: int) {
	def render(b: StringBuilder) -> StringBuilder {
		return b.put2("rect{%d, %d}", height, width);
	}
}

// An alternate way of rendering rectangles.
def myRectRender(b: StringBuilder, r: Rectangle) -> StringBuilder {
	if (r == null) return b.puts("<null rect>");
	return b.put2("Rect(height=%d, width=%d)", r.height, r.width);
}

// Exposes the {run} method to {main()}.
component StringBuilderDemo {
	def run = demo;
}
