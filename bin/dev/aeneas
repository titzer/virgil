#!/bin/bash

BIN=$(builtin cd $(dirname ${BASH_SOURCE[0]})/.. >/dev/null && builtin pwd)
JAR=$BIN/jar
JAR_LINK=$BIN/Aeneas.jar
V3C_LINK=$BIN/v3c
VIRGIL_LOC=${VIRGIL_LOC:=$(builtin cd $BIN/.. >/dev/null && builtin pwd)}
AENEAS_SYS=${AENEAS_SYS:=${VIRGIL_LOC}/rt/darwin/*.v3}
AENEAS_LOC=${AENEAS_LOC:=${VIRGIL_LOC}/aeneas/src}
AENEAS_JVM_TUNING=${AENEAS_JVM_TUNING:="-client -Xms900m -Xmx900m -XX:+UseSerialGC"}
V3C_HEAP_SIZE=-heap-size=800m

debug=0
CYAN='[0;36m'
RED='[0;31m'
GREEN='[0;32m'
NORM='[0;00m'

if [ "-d" = "$1" ]; then
	debug=1
	shift
fi

command=$1
shift
command_args=$@

if [ -n "$V3C_OPT" ]; then
	echo ${RED}\$V3C_OPT${NORM} is set instead of ${GREEN}\$V3C_OPTS${NORM}. Fixing.
	export V3C_OPTS="$V3C_OPT"
fi

function printvar() {
	local val="${!1}"
	if [ -z "$val" ]; then
		if [ -f $BIN/.$1 ]; then
			echo export "$1=\"$(cat $BIN/.$1)\"";
		else
			echo export "$1=";
		fi
	else
		echo export "$1=\"$val\"";
	fi
}

function execute() {
	[ $debug = 1 ] && echo $@
	$@
}

function get_aeneas_version() {
	echo $(grep version ${AENEAS_LOC}/main/Version.v3 | cut -d\" -f2)
}

function update_aeneas_version() {
	local v=$(grep version ${AENEAS_LOC}/main/Version.v3 | cut -d\" -f2)
	local build=$(echo $v | cut -d. -f2)
	local nbuild=$(printf "%04d" $(expr 1 + $build))
	local vfile=$AENEAS_LOC/main/Version.v3
	sed -e "s/$build/$nbuild/g" $vfile > /tmp/Version.v3
	cp /tmp/Version.v3 $vfile
	echo $(get_aeneas_version)
}

function make_test_bin() {
	local testdir="/tmp/$USER/virgil-test"
	mkdir -p $testdir
	echo $testdir
}

function make_build_file() {
	local target=$1
	local release=$2
	local version=$(get_aeneas_version)
	if [ "$release" = "release" ]; then
		case $version in
		*[1,3,5,7,9] )
			# bump the version number if it is odd
			version=$(update_aeneas_version)
		;;
		esac
		echo Release version: $version
		version="Release-$version"
		release=1
	fi

        local build_file=$AENEAS_LOC/main/Build.v3
	local build_time=$(date "+%Y-%m-%d %H:%M:%S")
	if [ "$release" == "release" ]; then
		local build_data="$target $build_time Release"
	else
		local build_data="$target $build_time by ${USER}@${HOST}"
	fi

	echo "component Build { new() { " > $build_file
	echo "Version.buildData = \"$build_data\";" >> $build_file
	echo " } }" >> $build_file

	echo $build_file
}

function compile_aeneas() {
	local HOST_AENEAS=$1
	local TARGET_DIR=$2/$3
	local target=$3
	mkdir -p $TARGET_DIR
	echo "${CYAN}Compiling ($HOST_AENEAS -> $TARGET_DIR/Aeneas)...${NORM}"

	pushd ${VIRGIL_LOC} > /dev/null
	local SRCS="aeneas/src/*/*.v3 $(cat aeneas/DEPS)"
	V3C=$HOST_AENEAS $V3C_LINK-$target $V3C_OPTS -fp $V3C_HEAP_SIZE -jvm.script -jvm.args="$AENEAS_JVM_TUNING" -output=$TARGET_DIR $SRCS
	popd > /dev/null
	if [ $? != 0 ]; then
		exit $?
	fi
        ls -al $TARGET_DIR/Aeneas*
}

boostrap_help="(hide)"
function run_boostrap() {
    echo "(running bootstrap, not \"boostrap\")"
    run_bootstrap $@
}

tags_help="Create tags file for Aeneas"
function run_tags() {
    local type=$1
    cd $VIRGIL_LOC
    if [[ "$type"  = "vim" || "$type" = "vi" ]]; then
        bin/utils/vctags $(find aeneas -name '*.v3') $(cat aeneas/DEPS)
    else
        bin/utils/vctags -e $(find aeneas -name '*.v3') $(cat aeneas/DEPS)
    fi
}

bootstrap_help="Bootstrap the compiler from source code"
function run_bootstrap() {
    if [ "$V3C" = "" ]; then
	BOOTSTRAP_V3C=$(revert_to_stable)
    else
	BOOTSTRAP_V3C="$V3C"
    fi

    if [ -z "$1" ]; then
	HOSTS=$($BIN/dev/sense_host)
    else
	HOSTS=$*
    fi

    host=""

    for target in $HOSTS; do
	if [[ -x "$BIN/stable/$target/Aeneas" ]]; then
	    host=$target
	    break
	fi
    done

    if [ "$host" = "" ]; then
	echo "aeneas bootstrap: no stable compiler binary for any host in ${$HOSTS}"
    fi

    build_file=$(make_build_file $host)
    compile_aeneas $BOOTSTRAP_V3C $VIRGIL_LOC/bin/bootstrap $host

    for t in $HOSTS; do
	if [[ -x "$BIN/v3c-$t" ]]; then
	    build_file=$(make_build_file $t)
	    compile_aeneas $VIRGIL_LOC/bin/bootstrap/$host/Aeneas $VIRGIL_LOC/bin/current $t
	fi
    done

    $BIN/.setup-v3c
    rm -f $build_file
}

archive_help="Create a source and binary archive of the current version of Aeneas"
function run_archive() {
	force=0
	if [ "force" = "$1" ]; then
		force=1
		shift
	fi
	if [ -z "$1" ]; then
		dest=$AENEAS_ARCHIVE
	else
		dest=$1
	fi
	version=$(get_aeneas_version)
	dest=$dest/$version
	mkdir -p $dest
	SRC=src-$version
	source="$dest/Aeneas-src-$version.zip"
	if [ $force = 1 ]; then
		echo "Deleting previous Aeneas $version archives..."
		rm -f ${dest}/*
	fi
	if [ -z "$dest" ]; then
		echo "Usage: aeneas archive <destination>"
		exit 1
	elif [ -f $source ]; then
		echo "Destination $source already exists (use 'force' to overwrite)."
		exit 2
	fi

	STABLE_V3C=$(revert_to_stable)

	echo Archiving Aeneas $version...

	TMP=$(make_test_bin)/aeneas-archive
	mkdir -p $TMP/$SRC

	cd $TMP
	cp -r ${AENEAS_LOC}/* $SRC
	zip -rq $source $SRC

	RT=$VIRGIL_LOC/rt
	cat $(ls $RT/darwin/*.v3 $RT/native/*.v3 $RT/gc/*.v3 | sort) > $TMP/rt-x86-darwin-$version.v3
	cat $(ls $RT/linux/*.v3 $RT/native/*.v3 $RT/gc/*.v3 | sort) > $TMP/rt-x86-linux-$version.v3
	(cd $RT/jvm/bin && zip -rq $dest/rt-jvm-$version.zip *.class)

	FILES=$(find $SRC -name '*.v3' | sort)

	# compile bootstrap compiler (TODO: pick appropriate host platform)
	target="x86-darwin"
	$STABLE_V3C -target=$target -rt.gc -rt.gctables -rt.sttables $V3C_HEAP_SIZE -output=$TMP $FILES rt-$target-$version.v3
	if [ "$?" != 0 ]; then
		exit $?
	fi
	BOOTSTRAP_V3C=$TMP/Aeneas-bootstrap
	mv $TMP/Aeneas $BOOTSTRAP_V3C

	for target in x86-darwin x86-linux; do
		cp rt-$target-$version.v3 $dest
		$BOOTSTRAP_V3C -target=$target -rt.gc -rt.gctables -rt.sttables $V3C_HEAP_SIZE -output=$TMP $FILES rt-$target-$version.v3
		if [ "$?" != 0 ]; then
			exit $?
		fi
		mv $TMP/Aeneas $dest/Aeneas-$version.$target
	done

	ls -al ${dest}/*${version}*
}

benchmark_help="Benchmark various Aeneas compile speed factors"
function run_benchmark() {
	local versions=""
	local tests="parser seman core run-aeneas ra-aeneas aeneas-x86-linux"
	while [ -x "$1" ]; do
		versions="$versions $1"
		shift
	done
	if [ -z "$versions" ]; then
		versions=$V3C_LINK
	fi

	if [ $# -gt 0 ]; then
		tests="$*"
	fi

	TMP=$(make_test_bin)/aeneas-bench
	mkdir -p $TMP
        AENEAS_HOSTS=$($BIN/dev/sense_host)
        if [ "$?" != 0 ]; then
	    echo $AENEAS_HOSTS
	    exit 1
	fi
	local host=$(echo $AENEAS_HOSTS | cut -d' ' -f1)
	export TEST_TARGET=$host
        BTIME=$VIRGIL_LOC/bench/btime-${host}
	if [ ! -x $BTIME ]; then
		echo $BTIME not found.
		exit 1
	fi

        # Copy Aeneas sources and deps to /tmp for repeatable perf
        mkdir -p $TMP/aeneas
	cp $AENEAS_LOC/*/*.v3 $TMP/aeneas/
        DEPS=$(builtin cd $VIRGIL_LOC/aeneas && cat DEPS)
        (builtin cd $VIRGIL_LOC && cp $DEPS $TMP/aeneas/)

	for v in $versions; do
		if [[ $tests == *parser* ]]; then
		    echo "$CYAN$v$NORM test/core/parser"
                    CMD="$v -test $VIRGIL_LOC/test/core/parser/*.v3"
		    $CMD > /dev/null #warmup
		    $BTIME 25 $CMD
		fi

		if [[ $tests == *seman* ]]; then
		    echo "$CYAN$v$NORM test/core/seman"
		    pushd $VIRGIL_LOC/test/core/seman > /dev/null
		    CMD="$v -test -expect=failures.txt *.v3"
                    $CMD &> /dev/null # warmup
		    $BTIME 25 $CMD
		    popd > /dev/null
		fi

		if [[ $tests == *core* ]]; then
			echo "$CYAN$v$NORM test/core $V3C_OPTS"
			CMD="$v -test $VIRGIL_LOC/test/core/*.v3"
                        $CMD &> /dev/null # warmup
			$BTIME 10 $CMD

			echo "$CYAN$v$NORM test/core -ra $V3C_OPTS"
			CMD="$v -test -ra $VIRGIL_LOC/test/core/*.v3"
                        $CMD &> /dev/null # warmup
			$BTIME 10 $CMD
		fi

		if [[ $tests == *run-aeneas* ]]; then
			echo "$CYAN$v$NORM -run $V3C_OPTS $TMP/aeneas/*.v3"
			CMD="$v -run $TMP/aeneas/*.v3"
                        $CMD &> /dev/null # warmup
			$BTIME 10 $CMD
		fi

		if [[ $tests == *ra-aeneas* ]]; then
			echo "$CYAN$v$NORM -target=ra $V3C_OPTS $TMP/aeneas/*.v3"
			CMD="$v -target=ra $TMP/aeneas/*.v3"
                        $CMD &> /dev/null # warmup
			$BTIME 10 $CMD
		fi

		if [[ $tests == *aeneas-x86-linux* ]]; then
                        PREV_V3C=$V3C
			local args="$V3C_OPTS -target=x86-linux $TMP/aeneas/*.v3"
			echo "$CYAN$v$NORM $args"
                        V3C=$v
			CMD="${V3C_LINK}-x86-linux -output=$TMP $TMP/aeneas/*.v3"
			$CMD &> /dev/null # warmup
			$BTIME 10 $CMD
                        V3C=$PREV_V3C
		fi
	done
}

function link() {
	rm -f $2
	execute ln -s $1 $2
}

bump_help="Bump the Aeneas source version number"
function run_bump() {
    T=/tmp/$USER/aeneas-bump
    mkdir -p $T
    git diff $AENEAS_LOC/main/Version.v3 > $T/diff
    if [ ! -z "$(cat $T/diff)" ]; then
	echo $AENEAS_LOC/main/Version.v3 already updated
	local version=$(get_aeneas_version)
    else
	local version=$(update_aeneas_version)
    fi
    echo "Aeneas is now version: $version"
}

function revert_to_stable() {
    do_clean
    $BIN/.setup-v3c
    readlink $V3C_LINK
}

release_help="Release the current Aeneas binaries, overwriting existing stable binaries"
function run_release() {
	echo $RED
	ls -al $BIN/stable/*/*
	echo $GREEN
	ls -al $BIN/current/*/*
	echo $NORM
	echo -n "Do you really want to overwrite stable with current? (y/n) "
	read
	if [ "$REPLY" != "y" ]; then
		echo Aborted.
		exit 1
	fi
	rm -rf $BIN/stable/*
	cp -r $BIN/current/* $BIN/stable/
}

clean_help="Remove binaries and temporary files and install stable compiler"
function run_clean() {
	do_clean
}
function do_clean() {
	local testbin=$(make_test_bin)
	local rm_ext=".jar .class .elf .s"
	rm -rf $testbin
	rm -f ${AENEAS_LOC}/main/Build.v3
	rm -f $JAR_LINK
	rm -f $V3C_LINK
	rm -f $BIN/.workaround*
	rm -rf ${VIRGIL_LOC}/bin/bootstrap/*
	rm -rf ${VIRGIL_LOC}/bin/current/*
	rm -f $JAR_LINK
	rm -f $V3C_LINK
	cp $BIN/.auto-v3c $V3C_LINK
}

function show_file() {
	[ -f $1 ] && ls -al $1
}

version_help="Print out current version of the compiler and state of symbolic links"
function run_version() {
	echo Aeneas Source Version: $(get_aeneas_version)
	printvar AENEAS_JVM_TUNING
	show_file $V3C_LINK
	show_file $JAR_LINK
	show_file $BIN/x86-darwin/Aeneas*
	if [ -x $V3C_LINK ]; then
		$V3C_LINK -version
		show_file $V3C_LINK
	else
		echo No Virgil III compiler currently installed.
	fi
}

unit_help="Run unit tests for Aeneas compiler"
function run_unit() {
    pushd $VIRGIL_LOC > /dev/null
    local SRCS="aeneas/src/*/*.v3 $(cat aeneas/DEPS)"
    if [ $# -gt 0 ]; then
        local TESTS="aeneas/test/UnitTest.v3 aeneas/test/Utils.v3"
        while [ $# -gt 0 ]; do
            TESTS="$TESTS aeneas/test/${1}Test.v3"
            shift
        done
    else
        TESTS="aeneas/test/*.v3"
    fi
    execute $V3C_LINK -fp $V3C_OPTS -run $SRCS $TESTS -version
    popd > /dev/null
}

test_help="Run test cases for Aeneas compiler"
function run_test() {
    # Forward all arguments to external script
    $VIRGIL_LOC/test/all.bash $@
}

starter_help="Create a starter zip from the current repository"
function run_starter() {
    run_clean

    date=$(date +%Y%m%d)
    dir=/tmp/$USER/virgil-starter-$date
    dest=$dir/virgil

    rm -rf $dir
    mkdir -p $dest
    mkdir -p $dest/bin
    mkdir -p $dest/bin/dev

    cd $VIRGIL_LOC
    cp -r rt $dest
    cp -r lib $dest
    cp -r doc $dest
    cp bin/.setup-v3c $dest/bin
    cp bin/.setup-v3c $dest/bin/v3c
    cp bin/v3c-x86-darwin $dest/bin/
    cp bin/v3c-x86-linux $dest/bin/
    cp bin/v3c-jar $dest/bin/
    cp bin/virgil $dest/bin/
    cp -r bin/stable $dest/bin
    cp bin/dev/sense* $dest/bin/dev/

    cd $dir
    zip -rq virgil-starter-$date.zip virgil
    ls -al $dir/virgil-starter-$date.zip
}

diff_help="Compare the output of two different Aeneas versions"
function run_diff() {

    if [[ $# -lt 3 ]]; then
	echo "Usage: aeneas diff <aeneas-A> <aeneas-B> args..."
	exit 1
    fi

    T=/tmp/$USER/aeneas-diff
    rm -rf $T
    mkdir -p $T
    TA=$T/a
    TB=$T/b
    mkdir -p $TA
    mkdir -p $TB

    V3C_A=$1
    shift
    V3C_B=$1
    shift

    $V3C_A -output=$TA $@ > $T/compile-a.out

    if [ "$?" != 0 ]; then
	echo $V3C_A -output=$TA $@
	cat $T/compile-a.out
	exit $?
    fi

    $V3C_B -output=$TB $@ > $T/compile-b.out

    if [ "$?" != 0 ]; then
	echo $V3C_B -output=$TB $@
	cat $T/compile-b.out
	exit $?
    fi

    # diff STDOUT
    diff $T/compile-a.out $T/compile-b.out | tee $T/out.diff

    DIFF_SIZE=$T/size.diff
    echo -n "" > $DIFF_SIZE

    # diff directories
    diff -d $TA $TB > $T/dir.diff

    # sort the directory diffs, if any, by file size
    if [ "$?" != 0 ]; then
	set -f
	IFS=$'\n'
	for l in $(cat $T/dir.diff); do
	    file=$(echo $l | awk '{ print $3 }')
	    echo -n $(wc -c $file | awk '{ print $1 }') "" >> $DIFF_SIZE
	    echo $l >> $DIFF_SIZE
	done
	sort -n $DIFF_SIZE
    fi
}

function usage() {
    echo "Usage: aeneas [-d] command [options] files"
    echo "Available commands:"
    for run_command in $(declare -Ff | grep 'run_' | cut -d ' ' -f3 | sort); do
        local command=${run_command/run_/}
        local help=""
        local help_var="${command}_help"
        local help=${!help_var}
        if [ -z "$help" ]; then
            local help="[no description available]"
        fi
	if [ "$help" = "(hide)" ]; then
	    continue
	fi
        printf "  %-16s %s\n" "$command" "$help" | head -n 1
    done
}

run_command="run_${command}"
shift

command_type=$(type -t ${run_command})
if [ "${command_type}" != "function" ]; then
    usage "aeneas: unknown command '${command}'"
    exit 255
fi

$run_command $command_args
